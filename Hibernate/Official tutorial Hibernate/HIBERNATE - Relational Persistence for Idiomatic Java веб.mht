Content-Type: multipart/related; start=<op.mhtml.1397704160008.a30aab78715473eb@84.237.66.117>; boundary=----------FdDacWXUyyYM7Qy13c59P9
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/
Subject: =?utf-8?Q?HIBERNATE=20-=20Relational=20Persistence=20for=20Idiomatic=20Java?=
MIME-Version: 1.0

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=default.htm
Content-Type: text/html; charset=UTF-8; name=default.htm
Content-ID: <op.mhtml.1397704160008.a30aab78715473eb@84.237.66.117>
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/
Content-Transfer-Encoding: Quoted-Printable

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1=
/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml"><head><title xmlns:rf=3D"ja=
va:org.jboss.highlight.XhtmlRendererFactory">HIBERNATE - Relational Pers=
istence for Idiomatic Java</title><link rel=3D"stylesheet" href=3D"css/h=
ibernate-single.css" type=3D"text/css"/><meta xmlns:rf=3D"java:org.jboss=
.highlight.XhtmlRendererFactory" name=3D"generator" content=3D"DocBook X=
SL Stylesheets V1.74.0"/></head><body><div class=3D"book" lang=3D"en-US"=
><div class=3D"titlepage"><div><p id=3D"title"><a href=3D"http://www.hib=
ernate.org" class=3D"site_href"><strong>Hibernate.org</strong></a><a hre=
f=3D"http://hibernate.org/Documentation/DocumentationOverview" class=3D"=
doc_href"><strong>Community Documentation</strong></a></p><div><h1 class=
=3D"title"><a id=3D"d0e3"/>HIBERNATE - Relational Persistence for Idioma=
tic Java</h1></div><div><h2 class=3D"subtitle">Hibernate Reference Docum=
entation</h2></div><div><div xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" class=3D"authorgroup"><div class=3D"authors">=
by <span xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"firstname">Gavi=
n</span> <span xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"surname">=
King</span>, <span xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"first=
name">Christian</span> <span xmlns=3D"http://www.w3.org/1999/xhtml" clas=
s=3D"surname">Bauer</span>, <span xmlns=3D"http://www.w3.org/1999/xhtml"=
 class=3D"firstname">Max</span> <span xmlns=3D"http://www.w3.org/1999/xh=
tml" class=3D"othername">Rydahl</span> <span xmlns=3D"http://www.w3.org/=
1999/xhtml" class=3D"surname">Andersen</span>, <span xmlns=3D"http://www=
.w3.org/1999/xhtml" class=3D"firstname">Emmanuel</span> <span xmlns=3D"h=
ttp://www.w3.org/1999/xhtml" class=3D"surname">Bernard</span>, <span xml=
ns=3D"http://www.w3.org/1999/xhtml" class=3D"firstname">Steve</span> <sp=
an xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"surname">Ebersole</sp=
an>, and <span xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"firstname=
">Hardy</span> <span xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"sur=
name">Ferentschik</span></div><div class=3D"editors"/><div class=3D"othe=
rs">and thanks to <span xmlns=3D"http://www.w3.org/1999/xhtml" class=3D"=
firstname">James</span> <span xmlns=3D"http://www.w3.org/1999/xhtml" cla=
ss=3D"surname">Cobb</span> (Graphic Design) and <span xmlns=3D"http://ww=
w.w3.org/1999/xhtml" class=3D"firstname">Cheyenne</span> <span xmlns=3D"=
http://www.w3.org/1999/xhtml" class=3D"surname">Weaver</span> (Graphic D=
esign)</div></div></div><div><p class=3D"releaseinfo">3.6.10.Final</p></=
div><div><p class=3D"copyright">Copyright =C2=A9 2004 Red Hat, Inc.</p><=
/div><div><a href=3D"Legal_Notice.html">Legal Notice</a></div><div><p cl=
ass=3D"pubdate">February 8, 2012</p></div></div><hr/></div><div class=3D=
"toc"><dl><dt><span class=3D"preface"><a href=3D"#preface">Preface</a></=
span></dt><dt><span class=3D"chapter"><a href=3D"#tutorial">1. Tutorial<=
/a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#tutorial-=
firstapp">1.1. Part 1 - The first Hibernate Application</a></span></dt><=
dd><dl><dt><span class=3D"section"><a href=3D"#tutorial-firstapp-setup">=
1.1.1. Setup</a></span></dt><dt><span class=3D"section"><a href=3D"#tuto=
rial-firstapp-firstclass">1.1.2. The first class</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"#tutorial-firstapp-mapping">1.1.3. The ma=
pping file</a></span></dt><dt><span class=3D"section"><a href=3D"#tutori=
al-firstapp-configuration">1.1.4. Hibernate configuration</a></span></dt=
><dt><span class=3D"section"><a href=3D"#tutorial-firstapp-mvn">1.1.5. B=
uilding with Maven</a></span></dt><dt><span class=3D"section"><a href=3D=
"#tutorial-firstapp-helpers">1.1.6. Startup and helpers</a></span></dt><=
dt><span class=3D"section"><a href=3D"#tutorial-firstapp-workingpersiste=
nce">1.1.7. Loading and storing objects</a></span></dt></dl></dd><dt><sp=
an class=3D"section"><a href=3D"#tutorial-associations">1.2. Part 2 - Ma=
pping associations</a></span></dt><dd><dl><dt><span class=3D"section"><a=
 href=3D"#tutorial-associations-mappinguser">1.2.1. Mapping the Person c=
lass</a></span></dt><dt><span class=3D"section"><a href=3D"#tutorial-ass=
ociations-unidirset">1.2.2. A unidirectional Set-based association</a></=
span></dt><dt><span class=3D"section"><a href=3D"#tutorial-associations-=
working">1.2.3. Working the association</a></span></dt><dt><span class=3D=
"section"><a href=3D"#tutorial-associations-valuecollections">1.2.4. Col=
lection of values</a></span></dt><dt><span class=3D"section"><a href=3D"=
#tutorial-associations-bidirectional">1.2.5. Bi-directional associations=
</a></span></dt><dt><span class=3D"section"><a href=3D"#tutorial-associa=
tions-usingbidir">1.2.6. Working bi-directional links</a></span></dt></d=
l></dd><dt><span class=3D"section"><a href=3D"#tutorial-webapp">1.3. Par=
t 3 - The EventManager web application</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"#tutorial-webapp-servlet">1.3.1. Writing th=
e basic servlet</a></span></dt><dt><span class=3D"section"><a href=3D"#t=
utorial-webapp-processing">1.3.2. Processing and rendering</a></span></d=
t><dt><span class=3D"section"><a href=3D"#tutorial-webapp-deploy">1.3.3.=
 Deploying and testing</a></span></dt></dl></dd><dt><span class=3D"secti=
on"><a href=3D"#tutorial-summary">1.4. Summary</a></span></dt></dl></dd>=
<dt><span class=3D"chapter"><a href=3D"#architecture">2. Architecture</a=
></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#architectur=
e-overview">2.1. Overview</a></span></dt><dd><dl><dt><span class=3D"sect=
ion"><a href=3D"#architecture-overview-minimal">2.1.1. Minimal architect=
ure</a></span></dt><dt><span class=3D"section"><a href=3D"#architecture-=
overview-comprehensive">2.1.2. Comprehensive architecture</a></span></dt=
><dt><span class=3D"section"><a href=3D"#architecture-overview-terms">2.=
1.3. Basic APIs</a></span></dt></dl></dd><dt><span class=3D"section"><a =
href=3D"#architecture-jmx">2.2. JMX Integration</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#architecture-current-session">2.3. Contex=
tual sessions</a></span></dt></dl></dd><dt><span class=3D"chapter"><a hr=
ef=3D"#session-configuration">3. Configuration</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"#configuration-programmatic">3.1. P=
rogrammatic configuration</a></span></dt><dt><span class=3D"section"><a =
href=3D"#configuration-sessionfactory">3.2. Obtaining a SessionFactory</=
a></span></dt><dt><span class=3D"section"><a href=3D"#configuration-hibe=
rnatejdbc">3.3. JDBC connections</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"#configuration-optional">3.4. Optional configuration prop=
erties</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#co=
nfiguration-optional-dialects">3.4.1. SQL Dialects</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#configuration-optional-outerjoin">3.4.=
2. Outer Join Fetching</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"#configuration-optional-binarystreams">3.4.3. Binary Streams</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"#configuration-optional-=
cacheprovider">3.4.4. Second-level and query cache</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#configuration-optional-querysubstituti=
on">3.4.5. Query Language Substitution</a></span></dt><dt><span class=3D=
"section"><a href=3D"#configuration-optional-statistics">3.4.6. Hibernat=
e statistics</a></span></dt></dl></dd><dt><span class=3D"section"><a hre=
f=3D"#configuration-logging">3.5. Logging</a></span></dt><dt><span class=
=3D"section"><a href=3D"#configuration-namingstrategy">3.6. Implementing=
 a NamingStrategy</a></span></dt><dt><span class=3D"section"><a href=3D"=
#d0e3362">3.7. Implementing a PersisterClassProvider</a></span></dt><dt>=
<span class=3D"section"><a href=3D"#configuration-xmlconfig">3.8. XML co=
nfiguration file</a></span></dt><dt><span class=3D"section"><a href=3D"#=
configuration-j2ee">3.9. Java EE Application Server integration</a></spa=
n></dt><dd><dl><dt><span class=3D"section"><a href=3D"#configuration-opt=
ional-transactionstrategy">3.9.1. Transaction strategy configuration</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#configuration-option=
al-jndi">3.9.2. JNDI-bound SessionFactory</a></span></dt><dt><span class=
=3D"section"><a href=3D"#configuration-j2ee-currentsession">3.9.3. Curre=
nt Session context management with JTA</a></span></dt><dt><span class=3D=
"section"><a href=3D"#configuration-j2ee-jmx">3.9.4. JMX deployment</a><=
/span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=3D"#p=
ersistent-classes">4. Persistent Classes</a></span></dt><dd><dl><dt><spa=
n class=3D"section"><a href=3D"#persistent-classes-pojo">4.1. A simple P=
OJO example</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"#persistent-classes-pojo-constructor">4.1.1. Implement a no-argument co=
nstructor</a></span></dt><dt><span class=3D"section"><a href=3D"#persist=
ent-classes-pojo-identifier">4.1.2. Provide an identifier property</a></=
span></dt><dt><span class=3D"section"><a href=3D"#persistent-classes-poj=
o-final">4.1.3. Prefer non-final classes (semi-optional)</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#persistent-classes-pojo-accessor=
s">4.1.4. Declare accessors and mutators for persistent fields (optional=
)</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#persi=
stent-classes-inheritance">4.2. Implementing inheritance</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#persistent-classes-equalshashcod=
e">4.3. Implementing equals() and
    hashCode()</a></span></dt><dt><span class=3D"section"><a href=3D"#pe=
rsistent-classes-dynamicmodels">4.4. Dynamic models</a></span></dt><dt><=
span class=3D"section"><a href=3D"#persistent-classes-tuplizers">4.5. Tu=
plizers</a></span></dt><dt><span class=3D"section"><a href=3D"#persisten=
t-classes-entity-name-resolver">4.6. EntityNameResolvers</a></span></dt>=
</dl></dd><dt><span class=3D"chapter"><a href=3D"#mapping">5. Basic O/R =
Mapping</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#m=
apping-declaration">5.1. Mapping declaration</a></span></dt><dd><dl><dt>=
<span class=3D"section"><a href=3D"#mapping-declaration-class">5.1.1. En=
tity</a></span></dt><dt><span class=3D"section"><a href=3D"#mapping-decl=
aration-id">5.1.2. Identifiers</a></span></dt><dt><span class=3D"section=
"><a href=3D"#d0e5844">5.1.3. Optimistic locking properties (optional)</=
a></span></dt><dt><span class=3D"section"><a href=3D"#mapping-declaratio=
n-property">5.1.4. Property</a></span></dt><dt><span class=3D"section"><=
a href=3D"#mapping-declaration-component">5.1.5. Embedded objects (aka c=
omponents)</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e690=
6">5.1.6. Inheritance strategy</a></span></dt><dt><span class=3D"section=
"><a href=3D"#d0e7576">5.1.7. Mapping one to one and one to many associa=
tions</a></span></dt><dt><span class=3D"section"><a href=3D"#mapping-dec=
laration-naturalid">5.1.8. Natural-id</a></span></dt><dt><span class=3D"=
section"><a href=3D"#mapping-types-anymapping">5.1.9. Any</a></span></dt=
><dt><span class=3D"section"><a href=3D"#mapping-declaration-properties"=
>5.1.10. Properties</a></span></dt><dt><span class=3D"section"><a href=3D=
"#d0e8351">5.1.11. Some hbm.xml specificities</a></span></dt></dl></dd><=
dt><span class=3D"section"><a href=3D"#mapping-types">5.2. Hibernate typ=
es</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#mappin=
g-types-entitiesvalues">5.2.1. Entities and values</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#mapping-types-basictypes">5.2.2. Basic=
 value types</a></span></dt><dt><span class=3D"section"><a href=3D"#mapp=
ing-types-custom">5.2.3. Custom value types</a></span></dt></dl></dd><dt=
><span class=3D"section"><a href=3D"#mapping-entityname">5.3. Mapping a =
class more than once</a></span></dt><dt><span class=3D"section"><a href=3D=
"#mapping-quotedidentifiers">5.4. SQL quoted identifiers</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#mapping-generated">5.5. Generate=
d properties</a></span></dt><dt><span class=3D"section"><a href=3D"#mapp=
ing-column-read-and-write">5.6. Column transformers: read and write expr=
essions</a></span></dt><dt><span class=3D"section"><a href=3D"#mapping-d=
atabase-object">5.7. Auxiliary database objects</a></span></dt></dl></dd=
><dt><span class=3D"chapter"><a href=3D"#types">6. Types</a></span></dt>=
<dd><dl><dt><span class=3D"section"><a href=3D"#types-value">6.1. Value =
types</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#typ=
es-value-basic">6.1.1. Basic value types</a></span></dt><dt><span class=3D=
"section"><a href=3D"#types-value-composite">6.1.2. Composite types</a><=
/span></dt><dt><span class=3D"section"><a href=3D"#types-value-collectio=
n">6.1.3. Collection types</a></span></dt></dl></dd><dt><span class=3D"s=
ection"><a href=3D"#types-entity">6.2. Entity types</a></span></dt><dt><=
span class=3D"section"><a href=3D"#types-category-significance">6.3. Sig=
nificance of type categories</a></span></dt><dt><span class=3D"section">=
<a href=3D"#types-custom">6.4. Custom types</a></span></dt><dd><dl><dt><=
span class=3D"section"><a href=3D"#types-custom-type">6.4.1. Custom type=
s using org.hibernate.type.Type</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#types-custom-ut">6.4.2. Custom types using org.hibernate.=
usertype.UserType</a></span></dt><dt><span class=3D"section"><a href=3D"=
#types-custom-cut">6.4.3. Custom types using org.hibernate.usertype.Comp=
ositeUserType</a></span></dt></dl></dd><dt><span class=3D"section"><a hr=
ef=3D"#types-registry">6.5. Type registry</a></span></dt></dl></dd><dt><=
span class=3D"chapter"><a href=3D"#collections">7. Collection mapping</a=
></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#collections=
-persistent">7.1. Persistent collections</a></span></dt><dt><span class=3D=
"section"><a href=3D"#collections-mapping">7.2. How to map collections</=
a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#collection=
s-foreignkeys">7.2.1. Collection foreign keys</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#collections-indexed">7.2.2. Indexed collect=
ions</a></span></dt><dt><span class=3D"section"><a href=3D"#collections-=
ofvalues">7.2.3. Collections of basic types and embeddable objects</a></=
span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#collections-=
advancedmappings">7.3. Advanced collection mappings</a></span></dt><dd><=
dl><dt><span class=3D"section"><a href=3D"#collections-sorted">7.3.1. So=
rted collections</a></span></dt><dt><span class=3D"section"><a href=3D"#=
collections-bidirectional">7.3.2. Bidirectional associations</a></span><=
/dt><dt><span class=3D"section"><a href=3D"#collections-indexedbidirecti=
onal">7.3.3. Bidirectional associations with indexed collections</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"#collections-ternary">7.3=
.4. Ternary associations</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"#collections-idbag">7.3.5. Using an &lt;idbag&gt;</a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"#collections-example">7=
.4. Collection examples</a></span></dt></dl></dd><dt><span class=3D"chap=
ter"><a href=3D"#associations">8. Association Mappings</a></span></dt><d=
d><dl><dt><span class=3D"section"><a href=3D"#assoc-intro">8.1. Introduc=
tion</a></span></dt><dt><span class=3D"section"><a href=3D"#assoc-unidir=
ectional">8.2. Unidirectional associations</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"#assoc-unidirectional-m21">8.2.1. Many-=
to-one</a></span></dt><dt><span class=3D"section"><a href=3D"#assoc-unid=
irectional-121">8.2.2. One-to-one</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#assoc-unidirectional-12m">8.2.3. One-to-many</a></span>=
</dt></dl></dd><dt><span class=3D"section"><a href=3D"#assoc-unidirectio=
nal-join">8.3. Unidirectional associations with join tables</a></span></=
dt><dd><dl><dt><span class=3D"section"><a href=3D"#assoc-unidirectional-=
join-12m">8.3.1. One-to-many</a></span></dt><dt><span class=3D"section">=
<a href=3D"#assoc-unidirectional-join-m21">8.3.2. Many-to-one</a></span>=
</dt><dt><span class=3D"section"><a href=3D"#assoc-unidirectional-join-1=
21">8.3.3. One-to-one</a></span></dt><dt><span class=3D"section"><a href=
=3D"#assoc-unidirectional-join-m2m">8.3.4. Many-to-many</a></span></dt><=
/dl></dd><dt><span class=3D"section"><a href=3D"#assoc-bidirectional">8.=
4. Bidirectional associations</a></span></dt><dd><dl><dt><span class=3D"=
section"><a href=3D"#assoc-bidirectional-m21">8.4.1. one-to-many / many-=
to-one</a></span></dt><dt><span class=3D"section"><a href=3D"#assoc-bidi=
rectional-121">8.4.2. One-to-one</a></span></dt></dl></dd><dt><span clas=
s=3D"section"><a href=3D"#assoc-bidirectional-join">8.5. Bidirectional a=
ssociations with join tables</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"#assoc-bidirectional-join-12m">8.5.1. one-to-many / m=
any-to-one</a></span></dt><dt><span class=3D"section"><a href=3D"#assoc-=
bidirectional-join-121">8.5.2. one to one</a></span></dt><dt><span class=
=3D"section"><a href=3D"#assoc-bidirectional-join-m2m">8.5.3. Many-to-ma=
ny</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#asso=
c-complex">8.6. More complex association mappings</a></span></dt></dl></=
dd><dt><span class=3D"chapter"><a href=3D"#components">9. Component Mapp=
ing</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#compo=
nents-dependentobjects">9.1. Dependent objects</a></span></dt><dt><span =
class=3D"section"><a href=3D"#components-incollections">9.2. Collections=
 of dependent objects</a></span></dt><dt><span class=3D"section"><a href=
=3D"#components-asmapindex">9.3. Components as Map indices</a></span></d=
t><dt><span class=3D"section"><a href=3D"#components-compositeid">9.4. C=
omponents as composite identifiers</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"#components-dynamic">9.5. Dynamic components</a></span>=
</dt></dl></dd><dt><span class=3D"chapter"><a href=3D"#inheritance">10. =
Inheritance mapping</a></span></dt><dd><dl><dt><span class=3D"section"><=
a href=3D"#inheritance-strategies">10.1. The three strategies</a></span>=
</dt><dd><dl><dt><span class=3D"section"><a href=3D"#inheritance-tablepe=
rclass">10.1.1. Table per class hierarchy</a></span></dt><dt><span class=
=3D"section"><a href=3D"#inheritance-tablepersubclass">10.1.2. Table per=
 subclass</a></span></dt><dt><span class=3D"section"><a href=3D"#inherit=
ance-tablepersubclass-discriminator">10.1.3. Table per subclass: using a=
 discriminator</a></span></dt><dt><span class=3D"section"><a href=3D"#in=
heritance-mixing-tableperclass-tablepersubclass">10.1.4. Mixing table pe=
r class hierarchy with table per subclass</a></span></dt><dt><span class=
=3D"section"><a href=3D"#inheritance-tableperconcrete">10.1.5. Table per=
 concrete class</a></span></dt><dt><span class=3D"section"><a href=3D"#i=
nheritance-tableperconcreate-polymorphism">10.1.6. Table per concrete cl=
ass using implicit polymorphism</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#inheritance-mixingpolymorphism">10.1.7. Mixing implicit p=
olymorphism with other inheritance mappings</a></span></dt></dl></dd><dt=
><span class=3D"section"><a href=3D"#inheritance-limitations">10.2. Limi=
tations</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=3D"=
#objectstate">11. Working with objects</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"#objectstate-overview">11.1. Hibernate obje=
ct states</a></span></dt><dt><span class=3D"section"><a href=3D"#objects=
tate-makingpersistent">11.2. Making objects persistent</a></span></dt><d=
t><span class=3D"section"><a href=3D"#objectstate-loading">11.3. Loading=
 an object</a></span></dt><dt><span class=3D"section"><a href=3D"#object=
state-querying">11.4. Querying</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"#objectstate-querying-executing">11.4.1. Executing =
queries</a></span></dt><dt><span class=3D"section"><a href=3D"#objectsta=
te-filtering">11.4.2. Filtering collections</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"#objecstate-querying-criteria">11.4.3. Criteri=
a queries</a></span></dt><dt><span class=3D"section"><a href=3D"#objects=
tate-querying-nativesql">11.4.4. Queries in native SQL</a></span></dt></=
dl></dd><dt><span class=3D"section"><a href=3D"#objectstate-modifying">1=
1.5. Modifying persistent objects</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#objectstate-detached">11.6. Modifying detached objects<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#objectstate-saveo=
rupdate">11.7. Automatic state detection</a></span></dt><dt><span class=3D=
"section"><a href=3D"#objectstate-deleting">11.8. Deleting persistent ob=
jects</a></span></dt><dt><span class=3D"section"><a href=3D"#objectstate=
-replicating">11.9. Replicating object between two different datastores<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#objectstate-flush=
ing">11.10. Flushing the Session</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"#objectstate-transitive">11.11. Transitive persistence</a=
></span></dt><dt><span class=3D"section"><a href=3D"#objectstate-metadat=
a">11.12. Using metadata</a></span></dt></dl></dd><dt><span class=3D"cha=
pter"><a href=3D"#readonly">12. Read-only entities</a></span></dt><dd><d=
l><dt><span class=3D"section"><a href=3D"#readonly-api">12.1. Making per=
sistent entities read-only</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"#readonly-api-immutable">12.1.1. Entities of immutable =
classes</a></span></dt><dt><span class=3D"section"><a href=3D"#readonly-=
api-loaddefault">12.1.2. Loading persistent entities as read-only</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"#readonly-api-querycrite=
ria">12.1.3. Loading read-only entities from an HQL query/criteria</a></=
span></dt><dt><span class=3D"section"><a href=3D"#readonly-api-entity">1=
2.1.4. Making a persistent entity read-only</a></span></dt></dl></dd><dt=
><span class=3D"section"><a href=3D"#readonly-proptypes">12.2. Read-only=
 affect on property type</a></span></dt><dd><dl><dt><span class=3D"secti=
on"><a href=3D"#readonly-proptypes-simple">12.2.1. Simple properties</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#readonly-prop-types-=
unidir">12.2.2. Unidirectional associations</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"#readonly-proptypes-bidir">12.2.3. Bidirection=
al associations</a></span></dt></dl></dd></dl></dd><dt><span class=3D"ch=
apter"><a href=3D"#transactions">13. Transactions and Concurrency</a></s=
pan></dt><dd><dl><dt><span class=3D"section"><a href=3D"#transactions-ba=
sics">13.1. Session and transaction scopes</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"#transactions-basics-uow">13.1.1. Unit =
of work</a></span></dt><dt><span class=3D"section"><a href=3D"#transacti=
ons-basics-apptx">13.1.2. Long conversations</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"#transactions-basics-identity">13.1.3. Consid=
ering object identity</a></span></dt><dt><span class=3D"section"><a href=
=3D"#transactions-basics-issues">13.1.4. Common issues</a></span></dt></=
dl></dd><dt><span class=3D"section"><a href=3D"#transactions-demarcation=
">13.2. Database transaction demarcation</a></span></dt><dd><dl><dt><spa=
n class=3D"section"><a href=3D"#transactions-demarcation-nonmanaged">13.=
2.1. Non-managed environment</a></span></dt><dt><span class=3D"section">=
<a href=3D"#transactions-demarcation-jta">13.2.2. Using JTA</a></span></=
dt><dt><span class=3D"section"><a href=3D"#transactions-demarcation-exce=
ptions">13.2.3. Exception handling</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"#transactions-demarcation-timeout">13.2.4. Transaction =
timeout</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"=
#transactions-optimistic">13.3. Optimistic concurrency control</a></span=
></dt><dd><dl><dt><span class=3D"section"><a href=3D"#transactions-optim=
istic-manual">13.3.1. Application version checking</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#transactions-optimistic-longsession">1=
3.3.2. Extended session and automatic versioning</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"#transactions-optimistic-detached">13.3.3=
. Detached objects and automatic versioning</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"#transactions-optimistic-customizing">13.3.4. =
Customizing automatic versioning</a></span></dt></dl></dd><dt><span clas=
s=3D"section"><a href=3D"#transactions-locking">13.4. Pessimistic lockin=
g</a></span></dt><dt><span class=3D"section"><a href=3D"#transactions-co=
nnection-release">13.5. Connection release modes</a></span></dt></dl></d=
d><dt><span class=3D"chapter"><a href=3D"#events">14. Interceptors and e=
vents</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#obj=
ectstate-interceptors">14.1. Interceptors</a></span></dt><dt><span class=
=3D"section"><a href=3D"#objectstate-events">14.2. Event system</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"#objectstate-decl-security=
">14.3. Hibernate declarative security</a></span></dt></dl></dd><dt><spa=
n class=3D"chapter"><a href=3D"#batch">15. Batch processing</a></span></=
dt><dd><dl><dt><span class=3D"section"><a href=3D"#batch-inserts">15.1. =
Batch inserts</a></span></dt><dt><span class=3D"section"><a href=3D"#bat=
ch-update">15.2. Batch updates</a></span></dt><dt><span class=3D"section=
"><a href=3D"#batch-statelesssession">15.3. The StatelessSession interfa=
ce</a></span></dt><dt><span class=3D"section"><a href=3D"#batch-direct">=
15.4. DML-style operations</a></span></dt></dl></dd><dt><span class=3D"c=
hapter"><a href=3D"#queryhql">16. HQL: The Hibernate Query Language</a><=
/span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#queryhql-case=
sensitivity">16.1. Case Sensitivity</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"#queryhql-from">16.2. The from clause</a></span></dt><=
dt><span class=3D"section"><a href=3D"#queryhql-joins">16.3. Association=
s and joins</a></span></dt><dt><span class=3D"section"><a href=3D"#query=
hql-joins-forms">16.4. Forms of join syntax</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"#queryhql-identifier-property">16.5. Referring=
 to identifier property</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"#queryhql-select">16.6. The select clause</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#queryhql-aggregation">16.7. Aggregate fun=
ctions</a></span></dt><dt><span class=3D"section"><a href=3D"#queryhql-p=
olymorphism">16.8. Polymorphic queries</a></span></dt><dt><span class=3D=
"section"><a href=3D"#queryhql-where">16.9. The where clause</a></span><=
/dt><dt><span class=3D"section"><a href=3D"#queryhql-expressions">16.10.=
 Expressions</a></span></dt><dt><span class=3D"section"><a href=3D"#quer=
yhql-ordering">16.11. The order by clause</a></span></dt><dt><span class=
=3D"section"><a href=3D"#queryhql-grouping">16.12. The group by clause</=
a></span></dt><dt><span class=3D"section"><a href=3D"#queryhql-subquerie=
s">16.13. Subqueries</a></span></dt><dt><span class=3D"section"><a href=3D=
"#queryhql-examples">16.14. HQL examples</a></span></dt><dt><span class=3D=
"section"><a href=3D"#queryhql-bulk">16.15. Bulk update and delete</a></=
span></dt><dt><span class=3D"section"><a href=3D"#queryhql-tipstricks">1=
6.16. Tips &amp; Tricks</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"#queryhql-components">16.17. Components</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#queryhql-tuple">16.18. Row value constructo=
r syntax</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=3D=
"#querycriteria">17. Criteria Queries</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"#querycriteria-creating">17.1. Creating a Cr=
iteria instance</a></span></dt><dt><span class=3D"section"><a href=3D"#q=
uerycriteria-narrowing">17.2. Narrowing the result set</a></span></dt><d=
t><span class=3D"section"><a href=3D"#querycriteria-ordering">17.3. Orde=
ring the results</a></span></dt><dt><span class=3D"section"><a href=3D"#=
querycriteria-associations">17.4. Associations</a></span></dt><dt><span =
class=3D"section"><a href=3D"#querycriteria-dynamicfetching">17.5. Dynam=
ic association fetching</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"#querycriteria-examples">17.6. Example queries</a></span></dt><dt>=
<span class=3D"section"><a href=3D"#querycriteria-projection">17.7. Proj=
ections, aggregation and grouping</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#querycriteria-detachedqueries">17.8. Detached queries a=
nd subqueries</a></span></dt><dt><span class=3D"section"><a href=3D"#que=
ry-criteria-naturalid">17.9. Queries by natural identifier</a></span></d=
t></dl></dd><dt><span class=3D"chapter"><a href=3D"#querysql">18. Native=
 SQL</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#quer=
ysql-creating">18.1. Using a SQLQuery</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"#d0e17378">18.1.1. Scalar queries</a></span>=
</dt><dt><span class=3D"section"><a href=3D"#d0e17428">18.1.2. Entity qu=
eries</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e17464">1=
8.1.3. Handling associations and collections</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"#d0e17495">18.1.4. Returning multiple entitie=
s</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e17636">18.1.=
5. Returning non-managed entities</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#d0e17657">18.1.6. Handling inheritance</a></span></dt><=
dt><span class=3D"section"><a href=3D"#d0e17662">18.1.7. Parameters</a><=
/span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#querysql-na=
medqueries">18.2. Named SQL queries</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"#propertyresults">18.2.1. Using return-propert=
y to explicitly specify column/alias
      names</a></span></dt><dt><span class=3D"section"><a href=3D"#sp_qu=
ery">18.2.2. Using stored procedures for querying</a></span></dt></dl></=
dd><dt><span class=3D"section"><a href=3D"#querysql-cud">18.3. Custom SQ=
L for create, update and delete</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#querysql-load">18.4. Custom SQL for loading</a></span></d=
t></dl></dd><dt><span class=3D"chapter"><a href=3D"#filters">19. Filteri=
ng data</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#o=
bjectstate-filters">19.1. Hibernate filters</a></span></dt></dl></dd><dt=
><span class=3D"chapter"><a href=3D"#xml">20. XML Mapping</a></span></dt=
><dd><dl><dt><span class=3D"section"><a href=3D"#xml-intro">20.1. Workin=
g with XML data</a></span></dt><dd><dl><dt><span class=3D"section"><a hr=
ef=3D"#xml-intro-mapping">20.1.1. Specifying XML and class mapping toget=
her</a></span></dt><dt><span class=3D"section"><a href=3D"#xml-onlyxml">=
20.1.2. Specifying only an XML mapping</a></span></dt></dl></dd><dt><spa=
n class=3D"section"><a href=3D"#xml-mapping">20.2. XML mapping metadata<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#xml-manipulation"=
>20.3. Manipulating XML data</a></span></dt></dl></dd><dt><span class=3D=
"chapter"><a href=3D"#performance">21. Improving performance</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"#performance-fetching=
">21.1. Fetching strategies</a></span></dt><dd><dl><dt><span class=3D"se=
ction"><a href=3D"#performance-fetching-lazy">21.1.1. Working with lazy =
associations</a></span></dt><dt><span class=3D"section"><a href=3D"#perf=
ormance-fetching-custom">21.1.2. Tuning fetch strategies</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#performance-fetching-proxies">21=
.1.3. Single-ended association proxies</a></span></dt><dt><span class=3D=
"section"><a href=3D"#performance-fetching-initialization">21.1.4. Initi=
alizing collections and proxies</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#performance-fetching-batch">21.1.5. Using batch fetching<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#performance-fetch=
ing-subselect">21.1.6. Using subselect fetching</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#performance-fetching-profiles">21.1.7. Fe=
tch profiles</a></span></dt><dt><span class=3D"section"><a href=3D"#perf=
ormance-fetching-lazyproperties">21.1.8. Using lazy property fetching</a=
></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#performan=
ce-cache">21.2. The Second Level Cache</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"#performance-cache-mapping">21.2.1. Cache m=
appings</a></span></dt><dt><span class=3D"section"><a href=3D"#performan=
ce-cache-readonly">21.2.2. Strategy: read only</a></span></dt><dt><span =
class=3D"section"><a href=3D"#performance-cache-readwrite">21.2.3. Strat=
egy: read/write</a></span></dt><dt><span class=3D"section"><a href=3D"#p=
erformance-cache-nonstrict">21.2.4. Strategy: nonstrict read/write</a></=
span></dt><dt><span class=3D"section"><a href=3D"#performance-cache-tran=
sactional">21.2.5. Strategy: transactional</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"#performance-cache-compat-matrix">21.2.6. Cache=
-provider/concurrency-strategy compatibility</a></span></dt></dl></dd><d=
t><span class=3D"section"><a href=3D"#performance-sessioncache">21.3. Ma=
naging the caches</a></span></dt><dt><span class=3D"section"><a href=3D"=
#performance-querycache">21.4. The Query Cache</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"#performance-querycache-enable">21.=
4.1. Enabling query caching</a></span></dt><dt><span class=3D"section"><=
a href=3D"#performance-querycache-regions">21.4.2. Query cache regions</=
a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#performa=
nce-collections">21.5. Understanding Collection performance</a></span></=
dt><dd><dl><dt><span class=3D"section"><a href=3D"#performance-collectio=
ns-taxonomy">21.5.1. Taxonomy</a></span></dt><dt><span class=3D"section"=
><a href=3D"#performance-collections-mostefficientupdate">21.5.2. Lists,=
 maps, idbags and sets are the most efficient collections
      to update</a></span></dt><dt><span class=3D"section"><a href=3D"#p=
erformance-collections-mostefficentinverse">21.5.3. Bags and lists are t=
he most efficient inverse collections</a></span></dt><dt><span class=3D"=
section"><a href=3D"#performance-collections-oneshotdelete">21.5.4. One =
shot delete</a></span></dt></dl></dd><dt><span class=3D"section"><a href=
=3D"#performance-monitoring">21.6. Monitoring performance</a></span></dt=
><dd><dl><dt><span class=3D"section"><a href=3D"#performance-monitoring-=
sf">21.6.1. Monitoring a SessionFactory</a></span></dt><dt><span class=3D=
"section"><a href=3D"#performance-monitoring-metrics">21.6.2. Metrics</a=
></span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=3D"=
#toolsetguide">22. Toolset Guide</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"#toolsetguide-s1">22.1. Automatic schema generation=
</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#toolsetg=
uide-s1-2">22.1.1. Customizing the schema</a></span></dt><dt><span class=
=3D"section"><a href=3D"#toolsetguide-s1-3">22.1.2. Running the tool</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#toolsetguide-s1-4">2=
2.1.3. Properties</a></span></dt><dt><span class=3D"section"><a href=3D"=
#toolsetguide-s1-5">22.1.4. Using Ant</a></span></dt><dt><span class=3D"=
section"><a href=3D"#toolsetguide-s1-6">22.1.5. Incremental schema updat=
es</a></span></dt><dt><span class=3D"section"><a href=3D"#toolsetguide-s=
1-7">22.1.6. Using Ant for incremental schema updates</a></span></dt><dt=
><span class=3D"section"><a href=3D"#toolsetguide-s1-8">22.1.7. Schema v=
alidation</a></span></dt><dt><span class=3D"section"><a href=3D"#toolset=
guide-s1-9">22.1.8. Using Ant for schema validation</a></span></dt></dl>=
</dd></dl></dd><dt><span class=3D"chapter"><a href=3D"#additionalmodules=
">23. Additional modules</a></span></dt><dd><dl><dt><span class=3D"secti=
on"><a href=3D"#d0e20590">23.1. Bean Validation</a></span></dt><dd><dl><=
dt><span class=3D"section"><a href=3D"#d0e20610">23.1.1. Adding Bean Val=
idation</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e20615"=
>23.1.2. Configuration</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"#d0e20726">23.1.3. Catching violations</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"#d0e20759">23.1.4. Database schema</a></span><=
/dt></dl></dd><dt><span class=3D"section"><a href=3D"#d0e20804">23.2. Hi=
bernate Search</a></span></dt><dd><dl><dt><span class=3D"section"><a hre=
f=3D"#d0e20807">23.2.1. Description</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"#d0e20818">23.2.2. Integration with Hibernate Annotati=
ons</a></span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a hr=
ef=3D"#example-parentchild">24. Example: Parent/Child</a></span></dt><dd=
><dl><dt><span class=3D"section"><a href=3D"#example-parentchild-collect=
ions">24.1. A note about collections</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"#example-parentchild-bidir">24.2. Bidirectional one-t=
o-many</a></span></dt><dt><span class=3D"section"><a href=3D"#example-pa=
rentchild-cascades">24.3. Cascading life cycle</a></span></dt><dt><span =
class=3D"section"><a href=3D"#example-parentchild-update">24.4. Cascades=
 and unsaved-value</a></span></dt><dt><span class=3D"section"><a href=3D=
"#example-parentchild-conclusion">24.5. Conclusion</a></span></dt></dl><=
/dd><dt><span class=3D"chapter"><a href=3D"#example-weblog">25. Example:=
 Weblog Application</a></span></dt><dd><dl><dt><span class=3D"section"><=
a href=3D"#example-weblog-classes">25.1. Persistent Classes</a></span></=
dt><dt><span class=3D"section"><a href=3D"#example-weblog-mappings">25.2=
. Hibernate Mappings</a></span></dt><dt><span class=3D"section"><a href=3D=
"#example-weblog-code">25.3. Hibernate Code</a></span></dt></dl></dd><dt=
><span class=3D"chapter"><a href=3D"#example-mappings">26. Example: Vari=
ous Mappings</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"#example-mappings-emp">26.1. Employer/Employee</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#example-mappings-authorwork">26.2. Author=
/Work</a></span></dt><dt><span class=3D"section"><a href=3D"#example-map=
pings-customerorderproduct">26.3. Customer/Order/Product</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#misc">26.4. Miscellaneous exampl=
e mappings</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"#example-mappings-typed-onetone">26.4.1. "Typed" one-to-one association=
</a></span></dt><dt><span class=3D"section"><a href=3D"#example-mappings=
-composite-key">26.4.2. Composite key example</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#example-mappings-composite-key-manytomany">=
26.4.3. Many-to-many with shared composite key attribute</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#example-mappings-content-discrim=
ination">26.4.4. Content based discrimination</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#example-mappings-association-alternatekeys"=
>26.4.5. Associations on alternate keys</a></span></dt></dl></dd></dl></=
dd><dt><span class=3D"chapter"><a href=3D"#best-practices">27. Best Prac=
tices</a></span></dt><dt><span class=3D"chapter"><a href=3D"#portability=
">28. Database Portability Considerations</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"#portability-basics">28.1. Portability B=
asics</a></span></dt><dt><span class=3D"section"><a href=3D"#portability=
-dialect">28.2. Dialect</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"#portability-dialectresolver">28.3. Dialect resolution</a></span><=
/dt><dt><span class=3D"section"><a href=3D"#portability-idgen">28.4. Ide=
ntifier generation</a></span></dt><dt><span class=3D"section"><a href=3D=
"#portability-functions">28.5. Database functions</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"#portability-types">28.6. Type mappings<=
/a></span></dt></dl></dd><dt><span class=3D"bibliography"><a href=3D"#d0=
e21713">References</a></span></dt></dl></div><div class=3D"preface" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D=
"preface"/>Preface</h2></div></div></div><p>
        Working with both Object-Oriented software and Relational Databa=
ses can be cumbersome and time consuming.
        Development costs are significantly higher due to a paradigm mis=
match between how data is represented in
        objects versus relational databases.  Hibernate is an Object/Rel=
ational Mapping solution for Java environments.
        The term Object/Relational Mapping refers to the technique of ma=
pping data from an object model representation
        to a relational data model representation (and visa versa).  See=
 <a class=3D"ulink" href=3D"http://en.wikipedia.org/wiki/Object-relation=
al_mapping">http://en.wikipedia.org/wiki/Object-relational_mapping</a>
        for a good high-level discussion.
    </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"note"><h2>Note</h2><p>
            While having a strong background in SQL is not required to u=
se Hibernate, having a basic understanding of
            the concepts can greatly help you understand Hibernate more =
fully and quickly.  Probably the single
            best background is an understanding of data modeling princip=
les.  You might want to consider these resources
            as a good starting point:
            </p><div class=3D"itemizedlist"><ul><li><p>
                        <a class=3D"ulink" href=3D"http://www.agiledata.=
org/essays/dataModeling101.html">http://www.agiledata.org/essays/dataMod=
eling101.html</a>
                    </p></li><li><p>
                        <a class=3D"ulink" href=3D"http://en.wikipedia.o=
rg/wiki/Data_modeling">http://en.wikipedia.org/wiki/Data_modeling</a>
                    </p></li></ul></div><p>
        </p></div><p>
        Hibernate not only takes care of the mapping from Java classes t=
o database tables (and from Java data types to
        SQL data types), but also provides data query and retrieval faci=
lities. It can significantly reduce
        development time otherwise spent with manual data handling in SQ=
L and JDBC.  Hibernate=E2=80=99s design goal is to
        relieve the developer from 95% of common data persistence-relate=
d programming tasks by eliminating the need for
        manual, hand-crafted data processing using SQL and JDBC.  Howeve=
r, unlike many other persistence solutions,
        Hibernate does not hide the power of SQL from you and guarantees=
 that your investment in relational technology
        and knowledge is as valid as always.
    </p><p>
        Hibernate may not be the best solution for data-centric applicat=
ions that only use stored-procedures to
        implement the business logic in the database, it is most useful =
with object-oriented domain models and business
        logic in the Java-based middle-tier. However, Hibernate can cert=
ainly help you to remove or encapsulate
        vendor-specific SQL code and will help with the common task of r=
esult set translation from a tabular
        representation to a graph of objects.
    </p><p>
        If you are new to Hibernate and Object/Relational Mapping or eve=
n Java,
        please follow these steps:
    </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"orderedlist"><ol><li><p>
                Read <a class=3D"xref" href=3D"#tutorial" title=3D"Chapt=
er=C2=A01.=C2=A0Tutorial">Chapter=C2=A01, <i>Tutorial</i></a> for a tuto=
rial with step-by-step
                instructions. The source code for the tutorial is includ=
ed in the
                distribution in the <code class=3D"literal">doc/referenc=
e/tutorial/</code>
                directory.
            </p></li><li><p>
                Read <a class=3D"xref" href=3D"#architecture" title=3D"C=
hapter=C2=A02.=C2=A0Architecture">Chapter=C2=A02, <i>Architecture</i></a=
> to understand the environments where
                Hibernate can be used.
            </p></li><li><p>
                View the <code class=3D"literal">eg/</code> directory in=
 the Hibernate
                distribution. It contains a simple standalone applicatio=
n. Copy your
                JDBC driver to the <code class=3D"literal">lib/</code> d=
irectory and edit
                <code class=3D"literal">etc/hibernate.properties</code>,=
 specifying correct values for
                your database. From a command prompt in the distribution=
 directory,
                type <code class=3D"literal">ant eg</code> (using Ant), =
or under Windows, type
                <code class=3D"literal">build eg</code>.
            </p></li><li><p>
                Use this reference documentation as your primary source =
of
                information.  Consider reading [<a href=3D"#biblio-JPwH"=
 class=3D"biblioref" title=3D"[JPwH]"><abbr class=3D"abbrev">JPwH</abbr>=
</a>]
                if you need more help with application design, or if you=
 prefer
                a step-by-step tutorial. Also visit
                <a class=3D"ulink" href=3D"http://caveatemptor.hibernate=
.org">http://caveatemptor.hibernate.org</a> and download
                the example application from [<a href=3D"#biblio-JPwH" c=
lass=3D"biblioref" title=3D"[JPwH]"><abbr class=3D"abbrev">JPwH</abbr></=
a>].
            </p></li><li><p>
                FAQs are answered on the Hibernate website.
            </p></li><li><p>
                Links to third party demos, examples, and tutorials are =
maintained
                on the Hibernate website.
            </p></li><li><p>
                The Community Area on the Hibernate website is a good re=
source for
                design patterns and various integration solutions (Tomca=
t, JBoss AS,
                Struts, EJB, etc.).
            </p></li></ol></div><p>
        There are a number of ways to become involved in the Hibernate c=
ommunity, including
        </p><div class=3D"itemizedlist"><ul><li><p>
                    Trying stuff out and reporting bugs.  See
                    <a class=3D"ulink" href=3D"http://hibernate.org/issu=
etracker.html">http://hibernate.org/issuetracker.html</a>
                    details.
                </p></li><li><p>
                    Trying your hand at fixing some bugs or implementing=
 enhancements.  Again, see
                    <a class=3D"ulink" href=3D"http://hibernate.org/issu=
etracker.html">http://hibernate.org/issuetracker.html</a>
                    details.
                </p></li><li><p>
                    <a class=3D"ulink" href=3D"http://hibernate.org/comm=
unity.html">http://hibernate.org/community.html</a> list
                    a few ways to engage in the community.
                    </p><div class=3D"itemizedlist"><ul><li><p>
                                There are forums for users to ask questi=
ons and receive help from the community.
                            </p></li><li><p>
                                There are also <a class=3D"ulink" href=3D=
"http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>
                                channels for both user and developer dis=
cussions.
                            </p></li></ul></div><p>
                </p></li><li><p>
                    Helping improve or translate this documentation.  Co=
ntact us on the developer mailing list
                    if you have interest.
                </p></li><li><p>
                    Evangelizing Hibernate within your organization.
                </p></li></ul></div><p>
    </p></div><div class=3D"chapter" lang=3D"en-US"><div class=3D"titlep=
age"><div><div><h2 class=3D"title"><a id=3D"tutorial"/>Chapter=C2=A01.=C2=
=A0Tutorial</h2></div></div></div><div class=3D"toc"><dl><dt><span class=
=3D"section"><a href=3D"#tutorial-firstapp">1.1. Part 1 - The first Hibe=
rnate Application</a></span></dt><dd><dl><dt><span class=3D"section"><a =
href=3D"#tutorial-firstapp-setup">1.1.1. Setup</a></span></dt><dt><span =
class=3D"section"><a href=3D"#tutorial-firstapp-firstclass">1.1.2. The f=
irst class</a></span></dt><dt><span class=3D"section"><a href=3D"#tutori=
al-firstapp-mapping">1.1.3. The mapping file</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"#tutorial-firstapp-configuration">1.1.4. Hibe=
rnate configuration</a></span></dt><dt><span class=3D"section"><a href=3D=
"#tutorial-firstapp-mvn">1.1.5. Building with Maven</a></span></dt><dt><=
span class=3D"section"><a href=3D"#tutorial-firstapp-helpers">1.1.6. Sta=
rtup and helpers</a></span></dt><dt><span class=3D"section"><a href=3D"#=
tutorial-firstapp-workingpersistence">1.1.7. Loading and storing objects=
</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#tutori=
al-associations">1.2. Part 2 - Mapping associations</a></span></dt><dd><=
dl><dt><span class=3D"section"><a href=3D"#tutorial-associations-mapping=
user">1.2.1. Mapping the Person class</a></span></dt><dt><span class=3D"=
section"><a href=3D"#tutorial-associations-unidirset">1.2.2. A unidirect=
ional Set-based association</a></span></dt><dt><span class=3D"section"><=
a href=3D"#tutorial-associations-working">1.2.3. Working the association=
</a></span></dt><dt><span class=3D"section"><a href=3D"#tutorial-associa=
tions-valuecollections">1.2.4. Collection of values</a></span></dt><dt><=
span class=3D"section"><a href=3D"#tutorial-associations-bidirectional">=
1.2.5. Bi-directional associations</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"#tutorial-associations-usingbidir">1.2.6. Working bi-di=
rectional links</a></span></dt></dl></dd><dt><span class=3D"section"><a =
href=3D"#tutorial-webapp">1.3. Part 3 - The EventManager web application=
</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#tutorial=
-webapp-servlet">1.3.1. Writing the basic servlet</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"#tutorial-webapp-processing">1.3.2. Proc=
essing and rendering</a></span></dt><dt><span class=3D"section"><a href=3D=
"#tutorial-webapp-deploy">1.3.3. Deploying and testing</a></span></dt></=
dl></dd><dt><span class=3D"section"><a href=3D"#tutorial-summary">1.4. S=
ummary</a></span></dt></dl></div><p>
        Intended for new users, this chapter provides an step-by-step in=
troduction
        to Hibernate, starting with a simple application using an in-mem=
ory database.  The
        tutorial is based on an earlier tutorial developed by Michael Gl=
oegl.  All
        code is contained in the <code class=3D"filename">tutorials/web<=
/code> directory of the project
        source.
    </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"important"><h2>Important</h2><p>
            This tutorial expects the user have knowledge of both Java a=
nd
            SQL.  If you have a limited knowledge of JAVA or SQL, it is =
advised
            that you start with a good introduction to that technology p=
rior
            to attempting to learn Hibernate.
        </p></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendere=
rFactory" class=3D"note"><h2>Note</h2><p>
            The distribution contains another example application under
            the <code class=3D"filename">tutorial/eg</code> project sour=
ce
            directory.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"tutorial-firstapp"/>1.1.=
=C2=A0Part 1 - The first Hibernate Application</h2></div></div></div><p>=

            For this example, we will set up a small database applicatio=
n that can store
            events we want to attend and information about the host(s) o=
f these events.
        </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"note"><h2>Note</h2><p>
                Although you can use whatever database you feel comforta=
ble using, we
                will use <a class=3D"ulink" href=3D"http://hsqldb.org/">=
HSQLDB</a> (an in-memory,
                Java database) to avoid describing installation/setup of=
 any particular
                database servers.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-set=
up"/>1.1.1.=C2=A0Setup</h3></div></div></div><p>
                The first thing we need to do is to set up the developme=
nt environment.  We
                will be using the "standard layout" advocated by alot of=
 build tools such
                as <a class=3D"ulink" href=3D"http://maven.org">Maven</a=
>.  Maven, in particular, has a
                good resource describing this <a class=3D"ulink" href=3D=
"http://maven.apache.org/guides/introduction/introduction-to-the-standar=
d-directory-layout.html">layout</a>.
                As this tutorial is to be a web application, we will be =
creating and making
                use of <code class=3D"filename">src/main/java</code>, <c=
ode class=3D"filename">src/main/resources</code>
                and <code class=3D"filename">src/main/webapp</code> dire=
ctories.
            </p><p>
                We will be using Maven in this tutorial, taking advantag=
e of its
                transitive dependency management capabilities as well as=
 the ability of
                many IDEs to automatically set up a project for us based=
 on the maven descriptor.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
project</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">xmlns</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;http://maven.apache.org/POM/4.0.=
0&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_attribute_name">xmlns:xsi</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_attribute_name">xsi:schemaLocation</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;http://maven.apache.org/POM/4.0.0&nbsp;http://maven.apach=
e.org/xsd/maven-4.0.0.xsd&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">modelVersion</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
>4.0.0</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"=
xml_tag_name">modelVersion</span><span class=3D"xml_tag_symbols">&gt;</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">groupId</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">org.=
hibernate.tutorials</span><span class=3D"xml_tag_symbols">&lt;/</span><s=
pan class=3D"xml_tag_name">groupId</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">artifactId</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">h=
ibernate-tutorial</span><span class=3D"xml_tag_symbols">&lt;/</span><spa=
n class=3D"xml_tag_name">artifactId</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">version</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">1.0.=
0-SNAPSHOT</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=
=3D"xml_tag_name">version</span><span class=3D"xml_tag_symbols">&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">name</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">First&n=
bsp;Hibernate&nbsp;Tutorial</span><span class=3D"xml_tag_symbols">&lt;/<=
/span><span class=3D"xml_tag_name">name</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">build</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_comment">&lt;!--&nbsp;we&nbsp;dont&nbs=
p;want&nbsp;the&nbsp;version&nbsp;to&nbsp;be&nbsp;part&nbsp;of&nbsp;the&=
nbsp;generated&nbsp;war&nbsp;file&nbsp;name&nbsp;--&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">finalName</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain">${artifactId}</span><span class=3D"xml_tag_s=
ymbols">&lt;/</span><span class=3D"xml_tag_name">finalName</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">build</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">dependencies</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">groupId</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">org.hibernate</span><span cl=
ass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">groupId=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">artifactId</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain">hibernate-core</span><spa=
n class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">art=
ifactId</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Because&nbsp;this&nbsp=
;is&nbsp;a&nbsp;web&nbsp;app,&nbsp;we&nbsp;also&nbsp;have&nbsp;a&nbsp;de=
pendency&nbsp;on&nbsp;the&nbsp;servlet&nbsp;api.&nbsp;--&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">groupId</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">javax.servlet</span><span cl=
ass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">groupId=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">artifactId</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain">servlet-api</span><span c=
lass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">artifa=
ctId</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Hibernate&nbsp;uses&nb=
sp;slf4j&nbsp;for&nbsp;logging,&nbsp;for&nbsp;our&nbsp;purposes&nbsp;her=
e&nbsp;use&nbsp;the&nbsp;simple&nbsp;backend&nbsp;--&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">groupId</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">org.slf4j</span><span class=3D=
"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">groupId</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">artifactId</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain">slf4j-simple</span><span =
class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">artif=
actId</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Hibernate&nbsp;gives&n=
bsp;you&nbsp;a&nbsp;choice&nbsp;of&nbsp;bytecode&nbsp;providers&nbsp;bet=
ween&nbsp;cglib&nbsp;and&nbsp;javassist&nbsp;--&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">groupId</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">javassist</span><span class=3D=
"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">groupId</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">artifactId</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain">javassist</span><span cla=
ss=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">artifact=
Id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">dependency</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">dependencies</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>project</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"tip"><h2>Tip</h2><p>
                    It is not a requirement to use Maven.  If you wish t=
o use something else to
                    build this tutorial (such as Ant), the layout will r=
emain the same.  The only
                    change is that you will need to manually account for=
 all the needed
                    dependencies.  If you use something like <a class=3D=
"ulink" href=3D"http://ant.apache.org/ivy/">Ivy</a>
                    providing transitive dependency management you would=
 still use the dependencies
                    mentioned below.  Otherwise, you'd need to grab <spa=
n class=3D"emphasis"><em>all</em></span>
                    dependencies, both explicit and transitive, and add =
them to the project's
                    classpath.  If working from the Hibernate distributi=
on bundle, this would mean
                    <code class=3D"filename">hibernate3.jar</code>, all =
artifacts in the
                    <code class=3D"filename">lib/required</code> directo=
ry and all files from either the
                    <code class=3D"filename">lib/bytecode/cglib</code> o=
r <code class=3D"filename">lib/bytecode/javassist</code>
                    directory; additionally you will need both the servl=
et-api jar and one of the slf4j
                    logging backends.
                </p></div><p>
                Save this file as <code class=3D"filename">pom.xml</code=
> in the project root directory.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-fir=
stclass"/>1.1.2.=C2=A0The first class</h3></div></div></div><p>
                Next, we create a class that represents the event we wan=
t to store in the
                database; it is a simple JavaBean class with some proper=
ties:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;org</s=
pan><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><=
span class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_plain">tutorial=
</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> -=
-><span class=3D"java_plain">domain</span><!-- <br/> --><span class=3D"j=
ava_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Date</span><span class=3D"java_separator">;</s=
pan>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Event</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Long</span><span class=3D"java_plai=
n">&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;title</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Date</span><span class=3D"java_plai=
n">&nbsp;date</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Event</span><span class=3D"java_sepa=
rator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">void</span><span class=3D"java_plai=
n">&nbsp;setId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">id&nbsp;</span=
><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbs=
p;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Date</span><span class=3D"java_plain=
">&nbsp;getDate</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;date</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setDate</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">Date</span><span class=3D"java_plain">&nbsp;date</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">date&nbsp;</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&n=
bsp;date</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getTitle</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;title</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setTitle</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">String</span><span class=3D"java_plain">&nbsp;title</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">title&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;title</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                This class uses standard JavaBean naming conventions for=
 property
                getter and setter methods, as well as private visibility=
 for the
                fields.  Although this is the recommended design, it is =
not required.
                Hibernate can also access fields directly,  the benefit =
of accessor
                methods is robustness for refactoring.
            </p><p>
                The <code class=3D"literal">id</code> property holds a u=
nique identifier value
                for a particular event.  All persistent entity classes (=
there are
                less important dependent classes as well) will need such=
 an identifier
                property if we want to use the full feature set of Hiber=
nate. In fact,
                most applications, especially web applications, need to =
distinguish
                objects by identifier, so you should consider this a fea=
ture rather
                than a limitation.  However, we usually do not manipulat=
e the identity
                of an object, hence the setter method should be private.=
  Only Hibernate
                will assign identifiers when an object is saved.  Hibern=
ate can access
                public, private, and protected accessor methods, as well=
 as public,
                private and protected fields directly.  The choice is up=
 to you and
                you can match it to fit your application design.
            </p><p>
                The no-argument constructor is a requirement for all per=
sistent
                classes; Hibernate has to create objects for you, using =
Java
                Reflection.  The constructor can be private, however pac=
kage or public
                visibility is required for runtime proxy generation and =
efficient data
                retrieval without bytecode instrumentation.
            </p><p>
                Save this file to the <code class=3D"filename">src/main/=
java/org/hibernate/tutorial/domain</code>
                directory.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-map=
ping"/>1.1.3.=C2=A0The mapping file</h3></div></div></div><p>
                Hibernate needs to know how to load and store objects of=
 the
                persistent class.  This is where the Hibernate mapping f=
ile
                comes into play. The mapping file tells Hibernate what t=
able in
                the database it has to access, and what columns in that =
table
                it should use.
            </p><p>
                The basic structure of a mapping file looks like this:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-mappin=
g</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;-//Hibernate/Hibernat=
e&nbsp;Mapping&nbsp;DTD&nbsp;3.0//EN&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;http://www.hibernate.=
org/dtd/hibernate-mapping-3.0.dtd&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.tutori=
al.domain&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">[...]</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
                Hibernate DTD is sophisticated.  You can use it for auto=
-completion
                of XML mapping elements and attributes in your editor or=
 IDE.
                Opening up the DTD file in your text editor is the easie=
st way to
                get an overview of all elements and attributes, and to v=
iew the
                defaults, as well as some comments.  Hibernate will not =
load the
                DTD file from the web, but first look it up from the cla=
sspath of
                the application.  The DTD file is included in
                <code class=3D"filename">hibernate-core.jar</code> (it i=
s also included in the
                <code class=3D"filename">hibernate3.jar</code>, if using=
 the distribution bundle).
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"important"><h2>Important</h2><p>
                    We will omit the DTD declaration in future examples =
to shorten the code. It is,
                    of course, not optional.
                </p></div><p>
                Between the two <code class=3D"literal">hibernate-mappin=
g</code> tags, include a
                <code class=3D"literal">class</code> element. All persis=
tent entity classes (again, there
                might be dependent classes later on, which are not first=
-class entities) need
                a mapping to a table in the SQL database:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.tutori=
al.domain&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Event&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">table</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;EVENTS=
&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
                So far we have told Hibernate how to persist and load ob=
ject of
                class <code class=3D"literal">Event</code> to the table
                <code class=3D"literal">EVENTS</code>. Each instance is =
now represented by a
                row in that table.  Now we can continue by mapping the u=
nique
                identifier property to the tables primary key.  As we do=
 not want
                to care about handling this identifier, we configure Hib=
ernate's
                identifier generation strategy for a surrogate primary k=
ey column:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.tutori=
al.domain&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Event&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">table</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;EVENTS=
&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;EVENT_ID&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
                The <code class=3D"literal">id</code> element is the dec=
laration of the
                identifier property.  The <code class=3D"literal">name=3D=
"id"</code> mapping
                attribute declares the name of the JavaBean property and=
 tells
                Hibernate to use the <code class=3D"literal">getId()</co=
de> and
                <code class=3D"literal">setId()</code> methods to access=
 the property.  The
                column attribute tells Hibernate which column of the
                <code class=3D"literal">EVENTS</code> table holds the pr=
imary key value.
            </p><p>
                The nested <code class=3D"literal">generator</code> elem=
ent specifies the
                identifier generation strategy (aka how are identifier v=
alues
                generated?).  In this case we choose <code class=3D"lite=
ral">native</code>,
                which offers a level of portability depending on the con=
figured
                database dialect.  Hibernate supports database generated=
, globally
                unique, as well as application assigned, identifiers.  I=
dentifier
                value generation is also one of Hibernate's many extensi=
on points
                and you can plugin in your own strategy.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"tip"><h2>Tip</h2><p>
                    <code class=3D"literal">native</code> is no longer c=
onsider the best strategy in terms of portability.  for further
                    discussion, see <a class=3D"xref" href=3D"#portabili=
ty-idgen" title=3D"28.4.=C2=A0Identifier generation">Section=C2=A028.4, =
=E2=80=9CIdentifier generation=E2=80=9D</a>
                </p></div><p>
                Lastly, we need to tell Hibernate about the remaining en=
tity class
                properties.  By default, no properties of the class are =
considered
                persistent:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.tutori=
al.domain&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Event&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">table</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;EVENTS=
&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;EVENT_ID&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;date&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;timestamp&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">column</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;EVEN=
T_DATE&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;title&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
                Similar to the <code class=3D"literal">id</code> element=
, the
                <code class=3D"literal">name</code> attribute of the
                <code class=3D"literal">property</code> element tells Hi=
bernate which getter
                and setter methods to use.  In this case, Hibernate will=
 search
                for <code class=3D"literal">getDate()</code>, <code clas=
s=3D"literal">setDate()</code>,
                <code class=3D"literal">getTitle()</code> and <code clas=
s=3D"literal">setTitle()</code>
                methods.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    Why does the <code class=3D"literal">date</code> pro=
perty mapping include the
                    <code class=3D"literal">column</code> attribute, but=
 the <code class=3D"literal">title</code>
                    does not? Without the <code class=3D"literal">column=
</code> attribute, Hibernate
                    by default uses the property name as the column name=
. This works for
                    <code class=3D"literal">title</code>, however, <code=
 class=3D"literal">date</code> is a reserved
                    keyword in most databases so you will need to map it=
 to a different name.
                </p></div><p>
                The <code class=3D"literal">title</code> mapping also la=
cks a <code class=3D"literal">type</code> attribute. The
                types declared and used in the mapping files are not Jav=
a data types; they are not SQL
                database types either.  These types are called <span cla=
ss=3D"emphasis"><em>Hibernate mapping types</em></span>,
                converters which can translate from Java to SQL data typ=
es and vice versa.  Again,
                Hibernate will try to determine the correct conversion a=
nd mapping type itself if
                the <code class=3D"literal">type</code> attribute is not=
 present in the mapping. In some cases this
                automatic detection using Reflection on the Java class m=
ight not have the default you
                expect or need. This is the case with the <code class=3D=
"literal">date</code> property. Hibernate cannot
                know if the property, which is of <code class=3D"literal=
">java.util.Date</code>, should map to a
                SQL <code class=3D"literal">date</code>, <code class=3D"=
literal">timestamp</code>, or <code class=3D"literal">time</code> column=
.
                Full date and time information is preserved by mapping t=
he property with a
                <code class=3D"literal">timestamp</code> converter.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"tip"><h2>Tip</h2><p>
                    Hibernate makes this mapping type determination usin=
g reflection when the mapping files
                    are processed.  This can take time and resources, so=
 if startup performance is important
                    you should consider explicitly defining the type to =
use.
                </p></div><p>
                Save this mapping file as
                <code class=3D"filename">src/main/resources/org/hibernat=
e/tutorial/domain/Event.hbm.xml</code>.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-con=
figuration"/>1.1.4.=C2=A0Hibernate configuration</h3></div></div></div><=
p>
                At this point, you should have the persistent class and =
its mapping
                file in place. It is now time to configure Hibernate.  F=
irst let's set up
                HSQLDB to run in "server mode"
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    We do this do that the data remains between runs.
                </p></div><p>
                We will utilize the Maven exec plugin to launch the HSQL=
DB server
                by running:
                <code class=3D"command"> mvn exec:java -Dexec.mainClass=3D=
"org.hsqldb.Server" -Dexec.args=3D"-database.0 file:target/data/tutorial=
"</code>
                You will see it start up and bind to a TCP/IP socket; th=
is is where
                our application will connect later.  If you want to star=
t
                with a fresh database during this tutorial, shutdown HSQ=
LDB, delete
                all files in the <code class=3D"filename">target/data</c=
ode> directory,
                and start HSQLDB again.
            </p><p>
                Hibernate will be connecting to the database on behalf o=
f your application, so it needs to know
                how to obtain connections.  For this tutorial we will be=
 using a standalone connection
                pool (as opposed to a <code class=3D"interfacename">java=
x.sql.DataSource</code>).  Hibernate comes with
                support for two third-party open source JDBC connection =
pools:
                <a class=3D"ulink" href=3D"https://sourceforge.net/proje=
cts/c3p0">c3p0</a> and
                <a class=3D"ulink" href=3D"http://proxool.sourceforge.ne=
t/">proxool</a>.  However, we will be using the
                Hibernate built-in connection pool for this tutorial.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"caution"><h2>Caution</h2><p>
                    The built-in Hibernate connection pool is in no way =
intended for production use.  It
                    lacks several features found on any decent connectio=
n pool.
                </p></div><p>
                For Hibernate's configuration, we can use a simple <code=
 class=3D"literal">hibernate.properties</code> file, a
                more sophisticated <code class=3D"literal">hibernate.cfg=
.xml</code> file, or even complete
                programmatic setup. Most users prefer the XML configurat=
ion file:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D'1.0'=
&nbsp;encoding=3D'utf-8'?&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-config=
uration</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;-//Hibernate/Hibernat=
e&nbsp;Configuration&nbsp;DTD&nbsp;3.0//EN&quot;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;http://www.hibernate.=
org/dtd/hibernate-configuration-3.0.dtd&quot;</span><span class=3D"xml_t=
ag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-configuration</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">session-factory=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Database&nbsp;connecti=
on&nbsp;settings&nbsp;--&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;connection.driver_class=
&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain">org.hsqldb.jdbcDriver</span><span class=3D"xml_tag_symbols">&l=
t;/</span><span class=3D"xml_tag_name">property</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;connection.url&quot;</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
>jdbc:hsqldb:hsql://localhost</span><span class=3D"xml_tag_symbols">&lt;=
/</span><span class=3D"xml_tag_name">property</span><span class=3D"xml_t=
ag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;connection.username&quo=
t;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain">sa</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D=
"xml_tag_name">property</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;connection.password&quo=
t;</span><span class=3D"xml_tag_symbols">&gt;&lt;/</span><span class=3D"=
xml_tag_name">property</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;JDBC&nbsp;connection&n=
bsp;pool&nbsp;(use&nbsp;the&nbsp;built-in)&nbsp;--&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;connection.pool_size&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain">1</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D=
"xml_tag_name">property</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;SQL&nbsp;dialect&nbsp;=
--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;dialect&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">org.hi=
bernate.dialect.HSQLDialect</span><span class=3D"xml_tag_symbols">&lt;/<=
/span><span class=3D"xml_tag_name">property</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Enable&nbsp;Hibernate'=
s&nbsp;automatic&nbsp;session&nbsp;context&nbsp;management&nbsp;--&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;current_session_context=
_class&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain">thread</span><span class=3D"xml_tag_symbols">&lt;/</span=
><span class=3D"xml_tag_name">property</span><span class=3D"xml_tag_symb=
ols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Disable&nbsp;the&nbsp;=
second-level&nbsp;cache&nbsp;&nbsp;--&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;cache.provider_class&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain">org.hibernate.cache.NoCacheProvider</span><span class=3D"xml_tag_=
symbols">&lt;/</span><span class=3D"xml_tag_name">property</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Echo&nbsp;all&nbsp;exe=
cuted&nbsp;SQL&nbsp;to&nbsp;stdout&nbsp;--&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;show_sql&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">true<=
/span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag=
_name">property</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;Drop&nbsp;and&nbsp;re-=
create&nbsp;the&nbsp;database&nbsp;schema&nbsp;on&nbsp;startup&nbsp;--&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;hbm2ddl.auto&quot;</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">u=
pdate</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"x=
ml_tag_name">property</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">mapping</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">resource</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org/hibernate/tutori=
al/domain/Event.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">session-factor=
y</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-configuration</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"note"><h2>Note</h2><p>Notice that this configuration file specifi=
es a different DTD</p></div><p>
                You configure Hibernate's <code class=3D"literal">Sessio=
nFactory</code>. SessionFactory is a global
                factory responsible for a particular database. If you ha=
ve several databases, for easier
                startup you should use several <code class=3D"literal">&=
lt;session-factory&gt;</code> configurations in
                several configuration files.
            </p><p>
                The first four <code class=3D"literal">property</code> e=
lements contain the necessary
                configuration for the JDBC connection. The dialect <code=
 class=3D"literal">property</code>
                element specifies the particular SQL variant Hibernate g=
enerates.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"tip"><h2>Tip</h2><p>
                    In most cases, Hibernate is able to properly determi=
ne which dialect to use.  See
                    <a class=3D"xref" href=3D"#portability-dialectresolv=
er" title=3D"28.3.=C2=A0Dialect resolution">Section=C2=A028.3, =E2=80=9C=
Dialect resolution=E2=80=9D</a> for more information.
                </p></div><p>
                Hibernate's automatic session management for persistence=
 contexts is particularly useful
                in this context.  The <code class=3D"literal">hbm2ddl.au=
to</code> option turns on automatic generation of
                database schemas directly into the database. This can al=
so be turned
                off by removing the configuration option, or redirected =
to a file with the help of
                the <code class=3D"literal">SchemaExport</code> Ant task=
. Finally, add the mapping file(s)
                for persistent classes to the configuration.
            </p><p>
                Save this file as <code class=3D"filename">hibernate.cfg=
.xml</code> into the
                <code class=3D"filename">src/main/resources</code> direc=
tory.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-mvn=
"/>1.1.5.=C2=A0Building with Maven</h3></div></div></div><p>
                We will now build the tutorial with Maven.  You will nee=
d to
                have Maven installed; it is available from the
                <a class=3D"ulink" href=3D"http://maven.apache.org/downl=
oad.html">Maven download page</a>.
                Maven will read the <code class=3D"filename">/pom.xml</c=
ode> file we created
                earlier and know how to perform some basic project tasks=
.  First,
                lets run the <code class=3D"literal">compile</code> goal=
 to make sure we can compile
                everything so far:
            </p><pre class=3D"programlisting">[hibernateTutorial]$ mvn c=
ompile
[INFO] Scanning for projects...
[INFO] -----------------------------------------------------------------=
-------
[INFO] Building First Hibernate Tutorial
[INFO]    task-segment: [compile]
[INFO] -----------------------------------------------------------------=
-------
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Compiling 1 source file to /home/steve/projects/sandbox/hibernate=
Tutorial/target/classes
[INFO] -----------------------------------------------------------------=
-------
[INFO] BUILD SUCCESSFUL
[INFO] -----------------------------------------------------------------=
-------
[INFO] Total time: 2 seconds
[INFO] Finished at: Tue Jun 09 12:25:25 CDT 2009
[INFO] Final Memory: 5M/547M
[INFO] -----------------------------------------------------------------=
-------</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"t=
itlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-helpe=
rs"/>1.1.6.=C2=A0Startup and helpers</h3></div></div></div><p>
                It is time to load and store some <code class=3D"literal=
">Event</code>
                objects, but first you have to complete the setup with s=
ome
                infrastructure code. You have to startup Hibernate by bu=
ilding
                a global <code class=3D"interfacename">org.hibernate.Ses=
sionFactory</code>
                object and storing it somewhere for easy access in appli=
cation code.  A
                <code class=3D"interfacename">org.hibernate.SessionFacto=
ry</code> is used to
                obtain <code class=3D"interfacename">org.hibernate.Sessi=
on</code> instances.
                A <code class=3D"interfacename">org.hibernate.Session</c=
ode> represents a
                single-threaded unit of work.  The
                <code class=3D"interfacename">org.hibernate.SessionFacto=
ry</code> is a
                thread-safe global object that is instantiated once.
            </p><p>
                We will create a <code class=3D"literal">HibernateUtil</=
code> helper class that
                takes care of startup and makes accessing the
                <code class=3D"interfacename">org.hibernate.SessionFacto=
ry</code> more convenient.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;org</s=
pan><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><=
span class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_plain">tutorial=
</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> -=
-><span class=3D"java_plain">util</span><!-- <br/> --><span class=3D"jav=
a_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">SessionFactory</span><span class=3D"java_s=
eparator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">cfg</span><span class=3D"java_separator">=
.</span><span class=3D"java_type">Configuration</span><span class=3D"jav=
a_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">HibernateUtil=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_keyword">static</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_keyword">final</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_type">SessionFactory</=
span><span class=3D"java_plain">&nbsp;sessionFactory&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;buildS=
essionFactory</span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_keyword">static</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">SessionFactory</span><spa=
n class=3D"java_plain">&nbsp;buildSessionFactory</span><span class=3D"ja=
va_separator">()</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Create</span><span class=3D"java_plain">&nbsp;the&nbsp;</span><=
span class=3D"java_type">SessionFactory</span><span class=3D"java_plain"=
>&nbsp;from&nbsp;hibernate</span><span class=3D"java_separator">.</span>=
<span class=3D"java_plain">cfg</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">xml</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">return</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">Configuration</span><span class=3D"java_separator">()=
.</span><span class=3D"java_plain">configure</span><span class=3D"java_s=
eparator">().</span><span class=3D"java_plain">buildSessionFactory</span=
><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">Throwable</span><span class=3D"java_plain">&nb=
sp;ex</span><span class=3D"java_separator">)</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Make</span><span class=3D"java_plain">&nbsp;sure&nbsp;you&nbsp;=
log&nbsp;the&nbsp;exception</span><span class=3D"java_separator">,</span=
><span class=3D"java_plain">&nbsp;as&nbsp;it&nbsp;might&nbsp;be&nbsp;swa=
llowed</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">System</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">err</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">println</span><span class=3D"java_separator">(</span><span =
class=3D"java_literal">&quot;Initial&nbsp;SessionFactory&nbsp;creation&n=
bsp;failed.&quot;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;ex</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_type">ExceptionInInitializerError</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">ex</span><span class=3D"ja=
va_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_keyword">static</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">SessionFactory</span><span=
 class=3D"java_plain">&nbsp;getSessionFactory</span><span class=3D"java_=
separator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;sessionFactory</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                Save this code as
                <code class=3D"filename">src/main/java/org/hibernate/tut=
orial/util/HibernateUtil.java</code>
            </p><p>
                This class not only produces the global
                <code class=3D"interfacename">org.hibernate.SessionFacto=
ry</code> reference in
                its static initializer; it also hides the fact that it u=
ses a
                static singleton.  We might just as well have looked up =
the
                <code class=3D"interfacename">org.hibernate.SessionFacto=
ry</code> reference from
                JNDI in an application server or any other location for =
that matter.
            </p><p>
                If you give the <code class=3D"interfacename">org.hibern=
ate.SessionFactory</code>
                a name in your configuration, Hibernate will try to bind=
 it to
                JNDI under that name after it has been built.  Another, =
better option is to
                use a JMX deployment and let the JMX-capable container i=
nstantiate and bind
                a <code class=3D"literal">HibernateService</code> to JND=
I. Such advanced options are
                discussed later.
            </p><p>
                You now need to configure a logging
                system.  Hibernate uses commons logging and provides two=
 choices: Log4j and
                JDK 1.4 logging. Most developers prefer Log4j: copy <cod=
e class=3D"literal">log4j.properties</code>
                from the Hibernate distribution in the <code class=3D"li=
teral">etc/</code> directory to
                your <code class=3D"literal">src</code> directory, next =
to <code class=3D"literal">hibernate.cfg.xml</code>.
                If you prefer to have
                more verbose output than that provided in the example co=
nfiguration, you can change the settings.  By default, only the Hibernat=
e startup message is shown on stdout.
            </p><p>
                The tutorial infrastructure is complete and you are now =
ready to do some real work with
                Hibernate.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-firstapp-wor=
kingpersistence"/>1.1.7.=C2=A0Loading and storing objects</h3></div></di=
v></div><p>
                We are now ready to start doing some real work with Hibe=
rnate.
                Let's start by writing an <code class=3D"literal">EventM=
anager</code> class
                with a <code class=3D"literal">main()</code> method:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;org</s=
pan><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><=
span class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_plain">tutorial=
</span><!-- <br/> --><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">Session</span><span class=3D"java_separato=
r">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_operator">*</span><span class=3D"java_separator">;</=
span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">tutorial</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">domain</span><span class=3D"java=
_separator">.</span><span class=3D"java_type">Event</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">tutorial</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">util</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_type">HibernateUtil</span><span cl=
ass=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">EventManager<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_keyword">static</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">void</span><span class=3D"=
java_plain">&nbsp;main</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_type">String</span><span class=3D"java_separator">[]</sp=
an><span class=3D"java_plain">&nbsp;args</span><span class=3D"java_separ=
ator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">EventManager</span><sp=
an class=3D"java_plain">&nbsp;mgr&nbsp;</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_type">EventManager</span><span class=3D"java_separator">();</sp=
an>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">args</span><span class=3D"java_separator">[</spa=
n><span class=3D"java_literal">0</span><span class=3D"java_separator">].=
</span><span class=3D"java_plain">equals</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_literal">&quot;store&quot;</span><span=
 class=3D"java_separator">))</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mgr</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">createAndStoreEvent</span><=
span class=3D"java_separator">(</span><span class=3D"java_literal">&quot=
;My&nbsp;Event&quot;</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Date<=
/span><span class=3D"java_separator">());</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">HibernateUtil</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">getSessi=
onFactory</span><span class=3D"java_separator">().</span><span class=3D"=
java_plain">close</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">void</span><span class=3D"java_plai=
n">&nbsp;createAndStoreEvent</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_type">String</span><span class=3D"java_plain">&nbs=
p;title</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Date</span><span class=3D=
"java_plain">&nbsp;theDate</span><span class=3D"java_separator">)</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">HibernateUtil</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">getSessionFactory</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">getCurrentSession</span><span c=
lass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">beginTransaction</span><span class=3D"java_sepa=
rator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Event</span><span clas=
s=3D"java_plain">&nbsp;theEvent&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">Event</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;theEvent</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">setTitle</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">title</span><span class=3D"java_separ=
ator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;theEvent</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">setDate</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">theDate</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">save</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">theEvent</span><span class=3D"java_separat=
or">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getTransaction</span><span class=3D"java_separa=
tor">().</span><span class=3D"java_plain">commit</span><span class=3D"ja=
va_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                In <code class=3D"literal">createAndStoreEvent()</code> =
we created a new
                <code class=3D"literal">Event</code> object and handed i=
t over to Hibernate.
                At that point, Hibernate takes care of the SQL and execu=
tes an
                <code class=3D"literal">INSERT</code> on the database.
            </p><p>
                A <span class=3D"interface">org.hibernate.Session</span>=
 is designed to
                represent a single unit of work (a single atomic piece o=
f work
                to be performed).  For now we will keep things simple an=
d assume
                a one-to-one granularity between a Hibernate
                <span class=3D"interface">org.hibernate.Session</span> a=
nd a database
                transaction.  To shield our code from the actual underly=
ing
                transaction system we use the Hibernate
                <code class=3D"interfacename">org.hibernate.Transaction<=
/code> API.
                In this particular case we are using JDBC-based transact=
ional
                semantics, but it could also run with JTA.
            </p><p>
                What does <code class=3D"literal">sessionFactory.getCurr=
entSession()</code> do?
                First, you can call it as many times and anywhere you li=
ke
                once you get hold of your
                <code class=3D"interfacename">org.hibernate.SessionFacto=
ry</code>.
                The <code class=3D"literal">getCurrentSession()</code> m=
ethod always returns
                the "current" unit of work.  Remember that we switched
                the configuration option for this mechanism to "thread" =
in our
                <code class=3D"filename">src/main/resources/hibernate.cf=
g.xml</code>?
                Due to that setting, the context of a current unit of wo=
rk is bound
                to the current Java thread that executes the application=
.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"important"><h2>Important</h2><p>
                    Hibernate offers three methods of current session tr=
acking.
                    The "thread" based method is not intended for produc=
tion use;
                    it is merely useful for prototyping and tutorials su=
ch as this
                    one.  Current session tracking is discussed in more =
detail
                    later on.
                </p></div><p>
                A <span class=3D"interface">org.hibernate.Session</span>=
 begins when the
                first call to <code class=3D"literal">getCurrentSession(=
)</code> is made for
                the current thread.  It is then bound by Hibernate to th=
e current
                thread.  When the transaction ends, either through commi=
t or
                rollback, Hibernate automatically unbinds the
                <span class=3D"interface">org.hibernate.Session</span> f=
rom the thread
                and closes it for you. If you call
                <code class=3D"literal">getCurrentSession()</code> again=
, you get a new
                <span class=3D"interface">org.hibernate.Session</span> a=
nd can start a
                new unit of work.
            </p><p>
                Related to the unit of work scope, should the Hibernate
                <span class=3D"interface">org.hibernate.Session</span> b=
e used to execute
                one or several database operations?  The above example u=
ses one
                <span class=3D"interface">org.hibernate.Session</span> f=
or one operation.
                However this is pure coincidence; the example is just no=
t complex
                enough to show any other approach. The scope of a Hibern=
ate
                <span class=3D"interface">org.hibernate.Session</span> i=
s flexible but you
                should never design your application to use a new Hibern=
ate
                <span class=3D"interface">org.hibernate.Session</span> f=
or
                <span class=3D"emphasis"><em>every</em></span> database =
operation. Even though it is
                used in the following examples, consider
                <span class=3D"emphasis"><em>session-per-operation</em><=
/span> an anti-pattern.
                A real web application is shown later in the tutorial wh=
ich will
                help illustrate this.
            </p><p>
                See <a class=3D"xref" href=3D"#transactions" title=3D"Ch=
apter=C2=A013.=C2=A0Transactions and Concurrency">Chapter=C2=A013, <i>Tr=
ansactions and Concurrency</i></a> for more information
                about transaction handling and demarcation. The previous=

                example also skipped any error handling and rollback.
            </p><p>
                To run this, we will make use of the Maven exec plugin t=
o call our class
                with the necessary classpath setup:
                <code class=3D"command">mvn exec:java -Dexec.mainClass=3D=
"org.hibernate.tutorial.EventManager" -Dexec.args=3D"store"</code>
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    You may need to perform <code class=3D"command">mvn =
compile</code> first.
                </p></div><p>
                You should see Hibernate starting up and, depending on y=
our configuration,
                lots of log output. Towards the end, the following line =
will be displayed:
            </p><pre class=3D"programlisting">[java] Hibernate: insert i=
nto EVENTS (EVENT_DATE, title, EVENT_ID) values (?, ?, ?)</pre><p>
                This is the <code class=3D"literal">INSERT</code> execut=
ed by Hibernate.
            </p><p>
                To list stored events an option is added to the main met=
hod:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> -->=
<span class=3D"java_keyword">if</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">(</span=
><!-- <br/> --><span class=3D"java_plain">args</span><!-- <br/> --><span=
 class=3D"java_separator">[</span><!-- <br/> --><span class=3D"java_lite=
ral">0</span><!-- <br/> --><span class=3D"java_separator">].</span><!-- =
<br/> --><span class=3D"java_plain">equals</span><!-- <br/> --><span cla=
ss=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_literal"=
>&quot;store&quot;</span><!-- <br/> --><span class=3D"java_separator">))=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> =
--><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mgr</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">createAndStoreEvent</span><=
span class=3D"java_separator">(</span><span class=3D"java_literal">&quot=
;My&nbsp;Event&quot;</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Date<=
/span><span class=3D"java_separator">());</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">if</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</=
span><span class=3D"java_plain">args</span><span class=3D"java_separator=
">[</span><span class=3D"java_literal">0</span><span class=3D"java_separ=
ator">].</span><span class=3D"java_plain">equals</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_literal">&quot;list&quot;</spa=
n><span class=3D"java_separator">))</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">List</span><span class=3D"java_plain">&nbsp;events&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;mgr</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">li=
stEvents</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">for</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_type">int</span><span class=3D=
"java_plain">&nbsp;i&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">0<=
/span><span class=3D"java_separator">;</span><span class=3D"java_plain">=
&nbsp;i&nbsp;</span><span class=3D"java_operator">&lt;</span><span class=
=3D"java_plain">&nbsp;events</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_plain">size</span><span class=3D"java_separator">(=
);</span><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_op=
erator">++</span><span class=3D"java_separator">)</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Event</span><span class=3D"java_plain">&nbsp;t=
heEvent&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">Event</span><span class=3D"java_separator">)</span><s=
pan class=3D"java_plain">&nbsp;events</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">get</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">i</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">System</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">out</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">println</span><span class=3D"java_s=
eparator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_lite=
ral">&quot;Event:&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_operator">+</span><span class=3D"java_plain">&nb=
sp;theEvent</span><span class=3D"java_separator">.</span><span class=3D"=
java_plain">getTitle</span><span class=3D"java_separator">()</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">+</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;&nbsp;Time:&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_operator">+</span><span class=3D"java_plain">&nbsp=
;theEvent</span><span class=3D"java_separator">.</span><span class=3D"ja=
va_plain">getDate</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span></pre><p>=

                A new <code class=3D"literal">listEvents() method is als=
o added</code>:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;listEvents</span><!-- <br/> --><span class=3D=
"java_separator">()</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;</span><!-- <br/> --><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">HibernateUtil</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">getSessionFactory</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">getCurrentSession</span><span c=
lass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">beginTransaction</span><span class=3D"java_sepa=
rator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">List</span><span class=
=3D"java_plain">&nbsp;result&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;session</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">createQuery</span><span =
class=3D"java_separator">(</span><span class=3D"java_literal">&quot;from=
&nbsp;Event&quot;</span><span class=3D"java_separator">).</span><span cl=
ass=3D"java_plain">list</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getTransaction</span><span class=3D"java_separa=
tor">().</span><span class=3D"java_plain">commit</span><span class=3D"ja=
va_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;result</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                Here, we are using a Hibernate Query Language (HQL) quer=
y to load all existing
                <code class=3D"literal">Event</code> objects from the da=
tabase. Hibernate will generate the
                appropriate SQL, send it to the database and populate <c=
ode class=3D"literal">Event</code> objects
                with the data. You can create more complex queries with =
HQL. See <a class=3D"xref" href=3D"#queryhql" title=3D"Chapter=C2=A016.=C2=
=A0HQL: The Hibernate Query Language">Chapter=C2=A016, <i>HQL: The Hiber=
nate Query Language</i></a>
                for more information.
            </p><p>
                Now we can call our new functionality, again using the M=
aven exec plugin:
                <code class=3D"command">mvn exec:java -Dexec.mainClass=3D=
"org.hibernate.tutorial.EventManager" -Dexec.args=3D"list"</code>
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"tutorial-assoc=
iations"/>1.2.=C2=A0Part 2 - Mapping associations</h2></div></div></div>=
<p>
            So far we have mapped a single persistent entity class to a =
table in
            isolation.  Let's expand on that a bit and add some class as=
sociations.
            We will add people to the application and store a list of ev=
ents in
            which they participate.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"tutorial-associations-mappingu=
ser"/>1.2.1.=C2=A0Mapping the Person class</h3></div></div></div><p>
                The first cut of the <code class=3D"literal">Person</cod=
e> class looks like this:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;org</s=
pan><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><=
span class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_plain">tutorial=
</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> -=
-><span class=3D"java_plain">domain</span><!-- <br/> --><span class=3D"j=
ava_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Person</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Long</span><span class=3D"java_plai=
n">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">int</span><span class=3D"java_plain=
">&nbsp;age</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;firstname</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;lastname</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Person</span><span class=3D"java_sep=
arator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_type">Accessor</span><span class=3D"java_plai=
n">&nbsp;methods&nbsp;</span><span class=3D"java_keyword">for</span><spa=
n class=3D"java_plain">&nbsp;all&nbsp;properties</span><span class=3D"ja=
va_separator">,</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;setter=
&nbsp;</span><span class=3D"java_keyword">for</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_literal">'id'</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                Save this to a file named
                <code class=3D"filename">src/main/java/org/hibernate/tut=
orial/domain/Person.java</code>
            </p><p>
                Next, create the new mapping file as
                <code class=3D"filename">src/main/resources/org/hibernat=
e/tutorial/domain/Person.hbm.xml</code>
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.tutori=
al.domain&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Person&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">table</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PERSO=
N&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;PERSON_ID&quot;</span><span class=3D"xml_tag_symbols">&gt;<=
/span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;age&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;firstname&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;lastname&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
                Finally, add the new mapping to Hibernate's configuratio=
n:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
mapping</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">resource</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;org/hibernate/tutorial/domain=
/Event.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
mapping</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">resource</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;org/hibernate/tutorial/domain=
/Person.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span>=
<span class=3D"xml_plain"></span><br />
</pre><p>
                Create an association between these two entities. Person=
s
                can participate in events, and events have participants.=
 The design questions
                you have to deal with are: directionality, multiplicity,=
 and collection
                behavior.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-associations=
-unidirset"/>1.2.2.=C2=A0A unidirectional Set-based association</h3></di=
v></div></div><p>
                By adding a collection of events to the <code class=3D"l=
iteral">Person</code>
                class, you can easily navigate to the events for a parti=
cular person,
                without executing an explicit query - by calling
                <code class=3D"literal">Person#getEvents</code>.  Multi-=
valued associations
                are represented in Hibernate by one of the Java Collecti=
on Framework
                contracts; here we choose a <code class=3D"interfacename=
">java.util.Set</code>
                because the collection will not contain duplicate elemen=
ts and the ordering
                is not relevant to our examples:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">public</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span>=
<!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_t=
ype">Person</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span>=
<!-- <br/> --><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Set</span><span class=3D"java_plain=
">&nbsp;events&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Hash=
Set</span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_plain"=
>&nbsp;getEvents</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;events</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setEvents</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Set</span><span class=3D"java_plain">&nbsp;events</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">events&nbsp;</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_plain">=
&nbsp;events</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                Before mapping this association, let's consider the othe=
r side.
                We could just keep this unidirectional or create another=

                collection on the <code class=3D"literal">Event</code>, =
if we wanted to be
                able to navigate it from both directions.  This is not n=
ecessary,
                from a functional perspective. You can always execute an=
 explicit
                query to retrieve the participants for a particular even=
t.  This
                is a design choice left to you, but what is clear from t=
his
                discussion is the multiplicity of the association: "many=
" valued
                on both sides is called a <span class=3D"emphasis"><em>m=
any-to-many</em></span>
                association. Hence, we use Hibernate's many-to-many mapp=
ing:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;PERSON&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PERSON_ID&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;age&quot;</span><span class=3D"xml_tag_symbols"=
>/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;firstname&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;lastname&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;events&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">table</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PERSON_=
EVENT&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;PERSON_ID&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;EVENT_ID&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Event&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
                Hibernate supports a broad range of collection mappings,=
 a
                <code class=3D"literal">set</code> being most common.  F=
or a many-to-many
                association, or <span class=3D"emphasis"><em>n:m</em></s=
pan> entity relationship, an
                association table is required.  Each row in this table r=
epresents
                a link between a person and an event.  The table name is=

                decalred using the <code class=3D"literal">table</code> =
attribute of the
                <code class=3D"literal">set</code> element.  The identif=
ier column name in
                the association, for the person side, is defined with th=
e
                <code class=3D"literal">key</code> element, the column n=
ame for the event's
                side with the <code class=3D"literal">column</code> attr=
ibute of the
                <code class=3D"literal">many-to-many</code>. You also ha=
ve to tell Hibernate
                the class of the objects in your collection (the class o=
n the
                other side of the collection of references).
            </p><p>
                The database schema for this mapping is therefore:
            </p><pre class=3D"programlisting">
    _____________        __________________
   |             |      |                  |       _____________
   |   EVENTS    |      |   PERSON_EVENT   |      |             |
   |_____________|      |__________________|      |    PERSON   |
   |             |      |                  |      |_____________|
   | *EVENT_ID   | &lt;--&gt; | *EVENT_ID        |      |             |
   |  EVENT_DATE |      | *PERSON_ID       | &lt;--&gt; | *PERSON_ID  |
   |  TITLE      |      |__________________|      |  AGE        |
   |_____________|                                |  FIRSTNAME  |
                                                  |  LASTNAME   |
                                                  |_____________|
 </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepa=
ge"><div><div><h3 class=3D"title"><a id=3D"tutorial-associations-working=
"/>1.2.3.=C2=A0Working the association</h3></div></div></div><p>
                Now we will bring some people and events together in a n=
ew method in <code class=3D"literal">EventManager</code>:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">void</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;addPersonToEvent</span><!-- <br/> --><span cl=
ass=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type">L=
ong</span><!-- <br/> --><span class=3D"java_plain">&nbsp;personId</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_typ=
e">Long</span><!-- <br/> --><span class=3D"java_plain">&nbsp;eventId</sp=
an><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><s=
pan class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_=
separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">HibernateUtil</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">getSessionFactory</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">getCurrentSession</span><span c=
lass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">beginTransaction</span><span class=3D"java_sepa=
rator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Person</span><span cla=
ss=3D"java_plain">&nbsp;aPerson&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">(</span><span class=3D"java_type">Person</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;session</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">load</=
span><span class=3D"java_separator">(</span><span class=3D"java_type">Pe=
rson</span><span class=3D"java_separator">.</span><span class=3D"java_ke=
yword">class</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;personId</span><span class=3D"java_separator">);</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Event</span><span clas=
s=3D"java_plain">&nbsp;anEvent&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_type">Event</span><span class=3D"j=
ava_separator">)</span><span class=3D"java_plain">&nbsp;session</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">load</sp=
an><span class=3D"java_separator">(</span><span class=3D"java_type">Even=
t</span><span class=3D"java_separator">.</span><span class=3D"java_keywo=
rd">class</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;eventId</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;aPerson</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getEvents</span><span class=3D"java_separator">=
().</span><span class=3D"java_plain">add</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_plain">anEvent</span><span class=3D"ja=
va_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getTransaction</span><span class=3D"java_separa=
tor">().</span><span class=3D"java_plain">commit</span><span class=3D"ja=
va_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                After loading a <code class=3D"literal">Person</code> an=
d an
                <code class=3D"literal">Event</code>, simply modify the =
collection using the
                normal collection methods. There is no explicit call to
                <code class=3D"literal">update()</code> or <code class=3D=
"literal">save()</code>;
                Hibernate automatically detects that the collection has =
been modified
                and needs to be updated. This is called
                <span class=3D"emphasis"><em>automatic dirty checking</e=
m></span>. You can also try
                it by modifying the name or the date property of any of =
your
                objects.  As long as they are in <span class=3D"emphasis=
"><em>persistent</em></span>
                state, that is, bound to a particular Hibernate
                <code class=3D"interfacename">org.hibernate.Session</cod=
e>, Hibernate
                monitors any changes and executes SQL in a write-behind =
fashion.
                The process of synchronizing the memory state with the d=
atabase,
                usually only at the end of a unit of work, is called
                <span class=3D"emphasis"><em>flushing</em></span>.  In o=
ur code, the unit of work
                ends with a commit, or rollback, of the database transac=
tion.
            </p><p>
                You can load person and event in different units of work=
.  Or
                you can modify an object outside of a
                <code class=3D"interfacename">org.hibernate.Session</cod=
e>, when it
                is not in persistent state (if it was persistent before,=
 this
                state is called <span class=3D"emphasis"><em>detached</e=
m></span>).  You can even
                modify a collection when it is detached:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">void</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;addPersonToEvent</span><!-- <br/> --><span cl=
ass=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type">L=
ong</span><!-- <br/> --><span class=3D"java_plain">&nbsp;personId</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_typ=
e">Long</span><!-- <br/> --><span class=3D"java_plain">&nbsp;eventId</sp=
an><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><s=
pan class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_=
separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">HibernateUtil</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">getSessionFactory</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">getCurrentSession</span><span c=
lass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">beginTransaction</span><span class=3D"java_sepa=
rator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Person</span><span cla=
ss=3D"java_plain">&nbsp;aPerson&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">(</span><span class=3D"java_type">Person</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;session</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Query</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;select&nbsp;p&nbsp;from&nbsp;Person&nbsp;p&nbsp;left&nbsp;=
join&nbsp;fetch&nbsp;p.events&nbsp;where&nbsp;p.id&nbsp;=3D&nbsp;:pid&qu=
ot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPar=
ameter</span><span class=3D"java_separator">(</span><span class=3D"java_=
literal">&quot;pid&quot;</span><span class=3D"java_separator">,</span><s=
pan class=3D"java_plain">&nbsp;personId</span><span class=3D"java_separa=
tor">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">unique=
Result</span><span class=3D"java_separator">();</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_operator">//</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_type">Eager</span><span=
 class=3D"java_plain">&nbsp;fetch&nbsp;the&nbsp;collection&nbsp;so&nbsp;=
we&nbsp;can&nbsp;use&nbsp;it&nbsp;detached</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Event</span><span clas=
s=3D"java_plain">&nbsp;anEvent&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_type">Event</span><span class=3D"j=
ava_separator">)</span><span class=3D"java_plain">&nbsp;session</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">load</sp=
an><span class=3D"java_separator">(</span><span class=3D"java_type">Even=
t</span><span class=3D"java_separator">.</span><span class=3D"java_keywo=
rd">class</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;eventId</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getTransaction</span><span class=3D"java_separa=
tor">().</span><span class=3D"java_plain">commit</span><span class=3D"ja=
va_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">End</span><span=
 class=3D"java_plain">&nbsp;of&nbsp;first&nbsp;unit&nbsp;of&nbsp;work</s=
pan>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;aPerson</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getEvents</span><span class=3D"java_separator">=
().</span><span class=3D"java_plain">add</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_plain">anEvent</span><span class=3D"ja=
va_separator">);</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;aPerson&n=
bsp;</span><span class=3D"java_separator">(</span><span class=3D"java_pl=
ain">and&nbsp;its&nbsp;collection</span><span class=3D"java_separator">)=
</span><span class=3D"java_plain">&nbsp;is&nbsp;detached</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">Begin</span><sp=
an class=3D"java_plain">&nbsp;second&nbsp;unit&nbsp;of&nbsp;work</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session2&nbsp;</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">HibernateUtil</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">getSessionFactory</span><span class=3D"java_separa=
tor">().</span><span class=3D"java_plain">getCurrentSession</span><span =
class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session2</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">beginTransaction</span><span class=3D"java_sep=
arator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session2</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">update</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">aPerson</span><span class=3D"java_separ=
ator">);</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_operator">//</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_type">Reattachment</span><span class=3D"java_plain">&nbsp;of&n=
bsp;aPerson</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session2</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">getTransaction</span><span class=3D"java_separ=
ator">().</span><span class=3D"java_plain">commit</span><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                The call to <code class=3D"literal">update</code> makes =
a detached object
                persistent again by binding it to a new unit of work, so=
 any
                modifications you made to it while detached can be saved=
 to
                the database. This includes any modifications
                (additions/deletions) you made to a collection of that e=
ntity
                object.
            </p><p>
                This is not much use in our example, but it is an import=
ant concept you can
                incorporate into your own application. Complete this exe=
rcise by adding a new action
                to the  main method of the <code class=3D"literal">Event=
Manager</code> and call it from the command line. If
                you need the identifiers of a person and an event - the =
<code class=3D"literal">save()</code> method
                returns it (you might have to modify some of the previou=
s methods to return that identifier):
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> -->=
<span class=3D"java_keyword">else</span><!-- <br/> --><span class=3D"jav=
a_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">if</spa=
n><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><s=
pan class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_p=
lain">args</span><!-- <br/> --><span class=3D"java_separator">[</span><!=
-- <br/> --><span class=3D"java_literal">0</span><!-- <br/> --><span cla=
ss=3D"java_separator">].</span><!-- <br/> --><span class=3D"java_plain">=
equals</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <=
br/> --><span class=3D"java_literal">&quot;addpersontoevent&quot;</span>=
<!-- <br/> --><span class=3D"java_separator">))</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_se=
parator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Long</span><span class=3D"java_plain">&nbsp;eventId&nbsp;</span><span =
class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;mgr</=
span><span class=3D"java_separator">.</span><span class=3D"java_plain">c=
reateAndStoreEvent</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_literal">&quot;My&nbsp;Event&quot;</span><span class=3D"java=
_separator">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">Date</span><span class=3D"java_separator">());</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Long</span><span class=3D"java_plain">&nbsp;personId&nbsp;</span><span=
 class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;mgr<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
createAndStorePerson</span><span class=3D"java_separator">(</span><span =
class=3D"java_literal">&quot;Foo&quot;</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">&quot;Bar&quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mgr</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">addPersonToEvent</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_plain">personId</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;eventId</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">System</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">out</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">println</span><span class=3D"java_separator">(</span><span =
class=3D"java_literal">&quot;Added&nbsp;person&nbsp;&quot;</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_operator">+</span><=
span class=3D"java_plain">&nbsp;personId&nbsp;</span><span class=3D"java=
_operator">+</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">&quot;&nbsp;to&nbsp;event&nbsp;&quot;</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_operator">+</span><span cl=
ass=3D"java_plain">&nbsp;eventId</span><span class=3D"java_separator">);=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span></pre><p>=

                This is an example of an association between two equally=
 important
                classes : two entities.  As mentioned earlier, there are=
 other
                classes and types in a typical model, usually "less impo=
rtant".
                Some you have already seen, like an <code class=3D"liter=
al">int</code> or a
                <code class=3D"classname">java.lang.String</code>.  We c=
all these classes
                <span class=3D"emphasis"><em>value types</em></span>, an=
d their instances
                <span class=3D"emphasis"><em>depend</em></span> on a par=
ticular entity.  Instances of
                these types do not have their own identity, nor are they=
 shared
                between entities.  Two persons do not reference the same=

                <code class=3D"literal">firstname</code> object, even if=
 they have the same
                first name.  Value types cannot only be found in the JDK=
 , but
                you can also write dependent classes yourself
                such as an <code class=3D"literal">Address</code> or
                <code class=3D"literal">MonetaryAmount</code> class.  In=
 fact, in a Hibernate
                application all JDK classes are considered value types.
            </p><p>
                You can also design a collection of value types.  This i=
s
                conceptually different from a collection of references t=
o other
                entities, but looks almost the same in Java.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-associations=
-valuecollections"/>1.2.4.=C2=A0Collection of values</h3></div></div></d=
iv><p>
                Let's add a collection of email addresses to the
                <code class=3D"literal">Person</code> entity.  This will=
 be represented as a
                <code class=3D"interfacename">java.util.Set</code> of
                <code class=3D"classname">java.lang.String</code> instan=
ces:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">Set</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;emailAddresses&nbsp;</span><!-- <br/> --><span=
 class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</span><!=
-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span =
class=3D"java_type">HashSet</span><!-- <br/> --><span class=3D"java_sepa=
rator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_plain"=
>&nbsp;getEmailAddresses</span><span class=3D"java_separator">()</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;emailAddresses</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setEmailAddresses</span><span class=3D"java_separator">(</span><=
span class=3D"java_type">Set</span><span class=3D"java_plain">&nbsp;emai=
lAddresses</span><span class=3D"java_separator">)</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">emailAddresses=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;emailAddresses</span><span class=3D"java_separator">;</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                The mapping of this <code class=3D"literal">Set</code> i=
s as follows:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;emailAddresses&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;PERSON_EMAIL_ADDR&quot;</span><span class=3D"xm=
l_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PE=
RSON_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">element</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;st=
ring&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;EMAIL_ADDR&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
</pre><p>
                The difference compared with the earlier mapping is the =
use of
                the <code class=3D"literal">element</code> part which te=
lls Hibernate that the
                collection does not contain references to another entity=
, but is
                rather a collection whose elements are values types, her=
e specifically
                of type <code class=3D"literal">string</code>.  The lowe=
rcase name tells you
                it is a Hibernate mapping type/converter.  Again the
                <code class=3D"literal">table</code> attribute of the <c=
ode class=3D"literal">set</code>
                element determines the table name for the collection.   =
The
                <code class=3D"literal">key</code> element defines the f=
oreign-key column
                name in the collection table. The <code class=3D"literal=
">column</code>
                attribute in the <code class=3D"literal">element</code> =
element defines the
                column name where the email address values will actually=

                be stored.
            </p><p>
                Here is the updated schema:
            </p><pre class=3D"programlisting">
  _____________        __________________
 |             |      |                  |       _____________
 |   EVENTS    |      |   PERSON_EVENT   |      |             |       __=
_________________
 |_____________|      |__________________|      |    PERSON   |      |  =
                 |
 |             |      |                  |      |_____________|      | P=
ERSON_EMAIL_ADDR |
 | *EVENT_ID   | &lt;--&gt; | *EVENT_ID        |      |             |   =
   |___________________|
 |  EVENT_DATE |      | *PERSON_ID       | &lt;--&gt; | *PERSON_ID  | &l=
t;--&gt; |  *PERSON_ID       |
 |  TITLE      |      |__________________|      |  AGE        |      |  =
*EMAIL_ADDR      |
 |_____________|                                |  FIRSTNAME  |      |__=
_________________|
                                                |  LASTNAME   |
                                                |_____________|
 </pre><p>
                You can see that the primary key of the collection table=
 is in fact a composite key that
                uses both columns. This also implies that there cannot b=
e duplicate email addresses
                per person, which is exactly the semantics we need for a=
 set in Java.
            </p><p>
                You can now try to add elements to this collection, just=
 like we did before by
                linking persons and events. It is the same code in Java:=

            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">void</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;addEmailToPerson</span><!-- <br/> --><span cl=
ass=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type">L=
ong</span><!-- <br/> --><span class=3D"java_plain">&nbsp;personId</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_typ=
e">String</span><!-- <br/> --><span class=3D"java_plain">&nbsp;emailAddr=
ess</span><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">HibernateUtil</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">getSessionFactory</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">getCurrentSession</span><span c=
lass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">beginTransaction</span><span class=3D"java_sepa=
rator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Person</span><span cla=
ss=3D"java_plain">&nbsp;aPerson&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">(</span><span class=3D"java_type">Person</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;session</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">load</=
span><span class=3D"java_separator">(</span><span class=3D"java_type">Pe=
rson</span><span class=3D"java_separator">.</span><span class=3D"java_ke=
yword">class</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;personId</span><span class=3D"java_separator">);</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;adding&nbsp;to&nbsp;the&nbsp;emailAddress&nbsp;c=
ollection&nbsp;might&nbsp;trigger&nbsp;a&nbsp;lazy&nbsp;load&nbsp;of&nbs=
p;the&nbsp;collection</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;aPerson</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getEmailAddresses</span><span class=3D"java_sep=
arator">().</span><span class=3D"java_plain">add</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_plain">emailAddress</span><spa=
n class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getTransaction</span><span class=3D"java_separa=
tor">().</span><span class=3D"java_plain">commit</span><span class=3D"ja=
va_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                This time we did not use a <span class=3D"emphasis"><em>=
fetch</em></span> query to
                initialize the collection.  Monitor the SQL log and try =
to
                optimize this with an eager fetch.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-associations=
-bidirectional"/>1.2.5.=C2=A0Bi-directional associations</h3></div></div=
></div><p>
                Next you will map a bi-directional association.  You wil=
l make
                the association between person and event work from both =
sides
                in Java.  The database schema does not change, so you wi=
ll still
                have many-to-many multiplicity.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    A relational database is more flexible than a networ=
k
                    programming language, in that it does not need a nav=
igation
                    direction; data can be viewed and retrieved in any p=
ossible
                    way.
                </p></div><p>
                First, add a collection of participants to the
                <code class=3D"literal">Event</code> class:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">Set</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;participants&nbsp;</span><!-- <br/> --><span c=
lass=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain=
">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</span><!--=
 <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cl=
ass=3D"java_type">HashSet</span><!-- <br/> --><span class=3D"java_separa=
tor">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_plain"=
>&nbsp;getParticipants</span><span class=3D"java_separator">()</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;participants</span><span class=3D"java_separa=
tor">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setParticipants</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_type">Set</span><span class=3D"java_plain">&nbsp;partic=
ipants</span><span class=3D"java_separator">)</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">participants&n=
bsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_p=
lain">&nbsp;participants</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                Now map this side of the association in <code class=3D"l=
iteral">Event.hbm.xml</code>.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;participants&quot;</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">t=
able</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;PERSON_EVENT&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">inverse</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;EV=
ENT_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-many</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;PERSON_ID&quot;</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;Person&quot;</spa=
n><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
</pre><p>
                These are normal <code class=3D"literal">set</code> mapp=
ings in both mapping documents.
                Notice that the column names in <code class=3D"literal">=
key</code> and <code class=3D"literal">many-to-many</code> =

                swap in both mapping documents. The most important addit=
ion here is the
                <code class=3D"literal">inverse=3D"true"</code> attribut=
e in the <code class=3D"literal">set</code> element of the
                <code class=3D"literal">Event</code>'s collection mappin=
g.
            </p><p>
                What this means is that Hibernate should take the other =
side, the <code class=3D"literal">Person</code> class,
                when it needs to find out information about the link bet=
ween the two. This will be a lot easier to
                understand once you see how the bi-directional link betw=
een our two entities is created.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-associations=
-usingbidir"/>1.2.6.=C2=A0Working bi-directional links</h3></div></div><=
/div><p>
                First, keep in mind that Hibernate does not affect norma=
l Java semantics. How did we create a
                link between a <code class=3D"literal">Person</code> and=
 an <code class=3D"literal">Event</code> in the unidirectional
                example? You add an instance of <code class=3D"literal">=
Event</code> to the collection of event references,
                of an instance of <code class=3D"literal">Person</code>.=
  If you want to make this link
                bi-directional, you have to do the same on the other sid=
e by adding a <code class=3D"literal">Person</code>
                reference to the collection in an <code class=3D"literal=
">Event</code>. This process of "setting the link on both sides"
                is absolutely necessary with bi-directional links.
            </p><p>
                Many developers program defensively and create link mana=
gement methods to
                correctly set both sides (for example, in <code class=3D=
"literal">Person</code>):
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">protected</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</sp=
an><!-- <br/> --><span class=3D"java_type">Set</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;getEvents</span><!-- <br/> --><span class=3D=
"java_separator">()</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;</span><!-- <br/> --><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;events</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">protected</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_type">void</span><span class=3D"java_pl=
ain">&nbsp;setEvents</span><span class=3D"java_separator">(</span><span =
class=3D"java_type">Set</span><span class=3D"java_plain">&nbsp;events</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">events&nbsp;</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_plain">=
&nbsp;events</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;addToEvent</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_type">Event</span><span class=3D"java_plain">&nbsp;event</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">getEvents</spa=
n><span class=3D"java_separator">().</span><span class=3D"java_plain">ad=
d</span><span class=3D"java_separator">(</span><span class=3D"java_plain=
">event</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;event</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">getParticipants</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">add</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_keyword">this</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;removeFromEvent</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_type">Event</span><span class=3D"java_plain">&nbsp;even=
t</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">getEvents</spa=
n><span class=3D"java_separator">().</span><span class=3D"java_plain">re=
move</span><span class=3D"java_separator">(</span><span class=3D"java_pl=
ain">event</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;event</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">getParticipants</span><span class=3D"java_separat=
or">().</span><span class=3D"java_plain">remove</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_keyword">this</span><span class=
=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                The get and set methods for the collection are now prote=
cted. This allows classes in the
                same package and subclasses to still access the methods,=
 but prevents everybody else from altering
                the collections directly. Repeat the steps for the colle=
ction
                on the other side.
            </p><p>
                What about the <code class=3D"literal">inverse</code> ma=
pping attribute? For you, and for Java, a bi-directional
                link is simply a matter of setting the references on bot=
h sides correctly. Hibernate, however, does not
                have enough information to correctly arrange SQL <code c=
lass=3D"literal">INSERT</code> and <code class=3D"literal">UPDATE</code>=

                statements (to avoid constraint violations). Making one =
side of the association <code class=3D"literal">inverse</code> tells Hib=
ernate to consider it a <span class=3D"emphasis"><em>mirror</em></span> =
of the other side. That is all that is necessary
                for Hibernate to resolve any issues that arise when tran=
sforming a directional navigation model to
                a SQL database schema. The rules are straightforward: al=
l bi-directional associations
                need one side as <code class=3D"literal">inverse</code>.=
 In a one-to-many association it has to be the many-side,
                and in many-to-many association you can select either si=
de.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"tutorial-webap=
p"/>1.3.=C2=A0Part 3 - The EventManager web application</h2></div></div>=
</div><p>
            A Hibernate web application uses <code class=3D"literal">Ses=
sion</code> and <code class=3D"literal">Transaction</code>
            almost like a standalone application. However, some common p=
atterns are useful. You can now write
            an <code class=3D"literal">EventManagerServlet</code>. This =
servlet can list all events stored in the
            database, and it provides an HTML form to enter new events.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"tutorial-webapp-servlet"/>1.3.=
1.=C2=A0Writing the basic servlet</h3></div></div></div><p>
                First we need create our basic processing servlet.  Sinc=
e our
                servlet only handles HTTP <code class=3D"literal">GET</c=
ode> requests, we
                will only implement the <code class=3D"literal">doGet()<=
/code> method:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;org</s=
pan><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><=
span class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_plain">tutorial=
</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> -=
-><span class=3D"java_plain">web</span><!-- <br/> --><span class=3D"java=
_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Imports</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">EventManagerS=
ervlet</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_keyword">extends</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_type">HttpServlet</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">protected</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_type">void</span><span class=3D"java_pl=
ain">&nbsp;doGet</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">HttpServletRequest</span><span class=3D"java_plain">&nbsp;request</spa=
n><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">HttpServletResponse</span><span class=3D"java_plain">&nbsp;response</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_keyword">throws</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">ServletException</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">IOException</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">SimpleDateFormat</span=
><span class=3D"java_plain">&nbsp;dateFormatter&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_type">SimpleDateFormat</span><span class=3D"java_se=
parator">(</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_literal">&quot;dd.MM.yyyy&quot;</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Begin</span><span class=3D"java_plain">&nbsp;unit&nbsp;of&nbsp;=
work</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">HibernateUtil</span><span class=3D"java_separator">.</span><span class=
=3D"java_plain">getSessionFactory</span><span class=3D"java_separator">(=
).</span><span class=3D"java_plain">getCurrentSession</span><span class=3D=
"java_separator">().</span><span class=3D"java_plain">beginTransaction</=
span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Process</span><span class=3D"java_plain">&nbsp;request&nbsp;and=
&nbsp;render&nbsp;page</span><span class=3D"java_separator">...</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">End</span><span class=3D"java_plain">&nbsp;unit&nbsp;of&nbsp;wo=
rk</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">HibernateUtil</span><span class=3D"java_separator">.</span><span class=
=3D"java_plain">getSessionFactory</span><span class=3D"java_separator">(=
).</span><span class=3D"java_plain">getCurrentSession</span><span class=3D=
"java_separator">().</span><span class=3D"java_plain">getTransaction</sp=
an><span class=3D"java_separator">().</span><span class=3D"java_plain">c=
ommit</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">Exception</span><span class=3D"java_plain">&nb=
sp;ex</span><span class=3D"java_separator">)</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">HibernateUtil</span><span class=3D"java_separator">.</span><span class=
=3D"java_plain">getSessionFactory</span><span class=3D"java_separator">(=
).</span><span class=3D"java_plain">getCurrentSession</span><span class=3D=
"java_separator">().</span><span class=3D"java_plain">getTransaction</sp=
an><span class=3D"java_separator">().</span><span class=3D"java_plain">r=
ollback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_type">ServletException</span><span class=3D"java_separator">.</=
span><span class=3D"java_keyword">class</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">isInstance</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">&nbsp;ex&nbsp;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">ServletException</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>=
<span class=3D"java_plain">&nbsp;ex</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">else</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">new</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">ServletException</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;ex&nbsp=
;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                Save this servlet as
                <code class=3D"filename">src/main/java/org/hibernate/tut=
orial/web/EventManagerServlet.java</code>
            </p><p>
                The pattern applied here is called <span class=3D"emphas=
is"><em>session-per-request</em></span>.
                When a request hits the servlet, a new Hibernate <code c=
lass=3D"literal">Session</code> is
                opened through the first call to <code class=3D"literal"=
>getCurrentSession()</code> on the
                <code class=3D"literal">SessionFactory</code>. A databas=
e transaction is then started. All
                data access occurs inside a transaction irrespective of =
whether the data is read or written.
                Do not use the auto-commit mode in applications.
            </p><p>
                Do <span class=3D"emphasis"><em>not</em></span> use a ne=
w Hibernate <code class=3D"literal">Session</code> for
                every database operation. Use one Hibernate <code class=3D=
"literal">Session</code> that is
                scoped to the whole request. Use <code class=3D"literal"=
>getCurrentSession()</code>, so that
                it is automatically bound to the current Java thread.
            </p><p>
                Next, the possible actions of the request are processed =
and the response HTML
                is rendered. We will get to that part soon.
            </p><p>
                Finally, the unit of work ends when processing and rende=
ring are complete. If any
                problems occurred during processing or rendering, an exc=
eption will be thrown
                and the database transaction rolled back. This completes=
 the
                <code class=3D"literal">session-per-request</code> patte=
rn. Instead of the transaction
                demarcation code in every servlet, you could also write =
a servlet filter.
                See the Hibernate website and Wiki for more information =
about this pattern
                called <span class=3D"emphasis"><em>Open Session in View=
</em></span>. You will need it as soon
                as you consider rendering your view in JSP, not in a ser=
vlet.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-webapp-proce=
ssing"/>1.3.2.=C2=A0Processing and rendering</h3></div></div></div><p>
                Now you can implement the processing of the request and =
the rendering of the page.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> -->=
<span class=3D"java_operator">//</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type">Write</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;HTML&nbsp;header</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">PrintWriter</span><spa=
n class=3D"java_plain">&nbsp;out&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;response</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">getWriter</span><=
span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;&lt;html&gt;&lt;head&gt;&lt;title&g=
t;Event&nbsp;Manager&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;</span>=
<span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">Handle</span><s=
pan class=3D"java_plain">&nbsp;actions</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;=
store&quot;</span><span class=3D"java_separator">.</span><span class=3D"=
java_plain">equals</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_plain">request</span><span class=3D"java_separator">.</span>=
<span class=3D"java_plain">getParameter</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_literal">&quot;action&quot;</span><span=
 class=3D"java_separator">))</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">String</span><span class=3D"java_plain">&nbsp;eventTitle&nbsp;</span><=
span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;=
request</span><span class=3D"java_separator">.</span><span class=3D"java=
_plain">getParameter</span><span class=3D"java_separator">(</span><span =
class=3D"java_literal">&quot;eventTitle&quot;</span><span class=3D"java_=
separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">String</span><span class=3D"java_plain">&nbsp;eventDate&nbsp;</span><s=
pan class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;r=
equest</span><span class=3D"java_separator">.</span><span class=3D"java_=
plain">getParameter</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_literal">&quot;eventDate&quot;</span><span class=3D"java_se=
parator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_literal">&quot;&quot;</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">equals</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">eventTitle</span><span class=3D"ja=
va_separator">)</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_operator">||</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_literal">&quot;&quot;</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">equals</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">eventDate</span><span clas=
s=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">pri=
ntln</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;&lt;b&gt;&lt;i&gt;Please&nbsp;enter&nbsp;event&nbsp;title&n=
bsp;and&nbsp;date.&lt;/i&gt;&lt;/b&gt;&quot;</span><span class=3D"java_s=
eparator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">else</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createA=
ndStoreEvent</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">eventTitle</span><span class=3D"java_separator">,</span><sp=
an class=3D"java_plain">&nbsp;dateFormatter</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">parse</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">eventDate</span><span =
class=3D"java_separator">));</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">pri=
ntln</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;&lt;b&gt;&lt;i&gt;Added&nbsp;event.&lt;/i&gt;&lt;/b&gt;&quo=
t;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">Print</span><sp=
an class=3D"java_plain">&nbsp;page</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;printEventForm</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">out</span><span class=3D"java_separator">);</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;listEvents</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">out</span><span class=3D"java_separator">,</span><=
span class=3D"java_plain">&nbsp;dateFormatter</span><span class=3D"java_=
separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Write</span><span cla=
ss=3D"java_plain">&nbsp;HTML&nbsp;footer</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">println</span><span class=3D"java_separator">(</span><span =
class=3D"java_literal">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span><spa=
n class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">flush</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">close</span><span class=3D"java_separator">();</span></pre>=
<p>
                This coding style, with a mix of Java and HTML, would no=
t scale
                in a more complex application-keep in mind that we are o=
nly illustrating
                basic Hibernate concepts in this tutorial. The code prin=
ts an HTML
                header and a footer. Inside this page, an HTML form for =
event entry and
                a list of all events in the database are printed. The fi=
rst method is
                trivial and only outputs HTML:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">void</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;printEventForm</span><!-- <br/> --><span clas=
s=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type">Pri=
ntWriter</span><!-- <br/> --><span class=3D"java_plain">&nbsp;out</span>=
<!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_sep=
arator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;&lt;h2&gt;Add&nbsp;new&nbsp;event:&=
lt;/h2&gt;&quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;&lt;form&gt;&quot;</span><span clas=
s=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;Title:&nbsp;&lt;input&nbsp;name=3D'=
eventTitle'&nbsp;length=3D'50'/&gt;&lt;br/&gt;&quot;</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;Date&nbsp;(e.g.&nbsp;24.12.2009):&n=
bsp;&lt;input&nbsp;name=3D'eventDate'&nbsp;length=3D'10'/&gt;&lt;br/&gt;=
&quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;&lt;input&nbsp;type=3D'submit'&nbsp=
;name=3D'action'&nbsp;value=3D'store'/&gt;&quot;</span><span class=3D"ja=
va_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;out</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">println</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;&lt;/form&gt;&quot;</span><span cla=
ss=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                The <code class=3D"literal">listEvents()</code> method u=
ses the Hibernate
                <code class=3D"literal">Session</code> bound to the curr=
ent thread to execute
                a query:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">private</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span=
><!-- <br/> --><span class=3D"java_type">void</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;listEvents</span><!-- <br/> --><span class=3D=
"java_separator">(</span><!-- <br/> --><span class=3D"java_type">PrintWr=
iter</span><!-- <br/> --><span class=3D"java_plain">&nbsp;out</span><!--=
 <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type">S=
impleDateFormat</span><!-- <br/> --><span class=3D"java_plain">&nbsp;dat=
eFormatter</span><!-- <br/> --><span class=3D"java_separator">)</span><!=
-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span =
class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">List</span><span class=
=3D"java_plain">&nbsp;result&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>HibernateUtil</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">getSessionFactory</span><span class=3D"java_separator">()</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">getCur=
rentSession</span><span class=3D"java_separator">().</span><span class=3D=
"java_plain">createCriteria</span><span class=3D"java_separator">(</span=
><span class=3D"java_type">Event</span><span class=3D"java_separator">.<=
/span><span class=3D"java_keyword">class</span><span class=3D"java_separ=
ator">).</span><span class=3D"java_plain">list</span><span class=3D"java=
_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">result</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">size</span><span class=3D"java_separator"=
>()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_op=
erator">&gt;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">0</span><span class=3D"java_separator">)</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;h2&gt;Ev=
ents&nbsp;in&nbsp;database:&lt;/h2&gt;&quot;</span><span class=3D"java_s=
eparator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;table&nb=
sp;border=3D'1'&gt;&quot;</span><span class=3D"java_separator">);</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;tr&gt;&q=
uot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;th&gt;Ev=
ent&nbsp;title&lt;/th&gt;&quot;</span><span class=3D"java_separator">);<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;th&gt;Ev=
ent&nbsp;date&lt;/th&gt;&quot;</span><span class=3D"java_separator">);</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;/tr&gt;&=
quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Iterator</span><span class=3D"java_plain">&nbsp;it&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;result=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>iterator</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">while</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">it</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">hasNext</span><span =
class=3D"java_separator">())</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Event</span><span class=3D"java_plain">&nbsp;e=
vent&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_type">Event</span><span class=3D"java_separator">)</span><sp=
an class=3D"java_plain">&nbsp;it</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">next</span><span class=3D"java_separato=
r">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">pri=
ntln</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;&lt;tr&gt;&quot;</span><span class=3D"java_separator">);</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">pri=
ntln</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;&lt;td&gt;&quot;</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_operator">+</span><span class=3D"java_plain">&nb=
sp;event</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">getTitle</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_operator">+</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot=
;&lt;/td&gt;&quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">pri=
ntln</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;&lt;td&gt;&quot;</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_operator">+</span><span class=3D"java_plain">&nb=
sp;dateFormatter</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">format</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">event</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_plain">getDate</span><span class=3D"java_separato=
r">())</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_operator">+</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">&quot;&lt;/td&gt;&quot;</span><span class=3D"java_separat=
or">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">pri=
ntln</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;&lt;/tr&gt;&quot;</span><span class=3D"java_separator">);</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">println</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;&lt;/table&g=
t;&quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                Finally, the <code class=3D"literal">store</code> action=
 is dispatched to the
                <code class=3D"literal">createAndStoreEvent()</code> met=
hod, which also uses
                the <code class=3D"literal">Session</code> of the curren=
t thread:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_keyw=
ord">protected</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</sp=
an><!-- <br/> --><span class=3D"java_type">void</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;createAndStoreEvent</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_ty=
pe">String</span><!-- <br/> --><span class=3D"java_plain">&nbsp;title</s=
pan><!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java=
_type">Date</span><!-- <br/> --><span class=3D"java_plain">&nbsp;theDate=
</span><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> -=
-><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"j=
ava_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Event</span><span clas=
s=3D"java_plain">&nbsp;theEvent&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">Event</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;theEvent</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">setTitle</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">title</span><span class=3D"java_separ=
ator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;theEvent</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">setDate</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">theDate</span><span class=3D"java_sepa=
rator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">HibernateUtil</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">getSessi=
onFactory</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">getCur=
rentSession</span><span class=3D"java_separator">().</span><span class=3D=
"java_plain">save</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_plain">theEvent</span><span class=3D"java_separator">);</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>
                The servlet is now complete. A request to the servlet wi=
ll be processed
                in a single <code class=3D"literal">Session</code> and <=
code class=3D"literal">Transaction</code>. As
                earlier in the standalone application, Hibernate can aut=
omatically bind these
                objects to the current thread of execution. This gives y=
ou the freedom to layer
                your code and access the <code class=3D"literal">Session=
Factory</code> in any way you like.
                Usually you would use a more sophisticated design and mo=
ve the data access code
                into data access objects (the DAO pattern). See the Hibe=
rnate Wiki for more
                examples.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"tutorial-webapp-deplo=
y"/>1.3.3.=C2=A0Deploying and testing</h3></div></div></div><p>
                To deploy this application for testing we must create a
                Web ARchive (WAR).  First we must define the WAR descrip=
tor
                as <code class=3D"filename">src/main/webapp/WEB-INF/web.=
xml</code>
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;&nbsp;encoding=3D&quot;UTF-8&quot;?&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
web-app</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">version</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;2.4&quot;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">xmlns</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;http://java.sun.com/xml/ns/j=
2ee&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">xmlns:xsi</span><span class=3D"xml_tag_symbols">=3D<=
/span><span class=3D"xml_attribute_value">&quot;http://www.w3.org/2001/X=
MLSchema-instance&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">xsi:schemaLocation</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;http://java.sun=
.com/xml/ns/j2ee&nbsp;http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">servlet</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">servlet-name</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain">Event&nbsp;Manager</span><span class=3D"xml_tag=
_symbols">&lt;/</span><span class=3D"xml_tag_name">servlet-name</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">servlet-class</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain">org.hibernate.tutorial.web.EventManagerServlet=
</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_ta=
g_name">servlet-class</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">servlet</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">servlet-mapping=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">servlet-name</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain">Event&nbsp;Manager</span><span class=3D"xml_tag=
_symbols">&lt;/</span><span class=3D"xml_tag_name">servlet-name</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">url-pattern</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain">/eventmanager</span><span class=3D"xml_tag_symbo=
ls">&lt;/</span><span class=3D"xml_tag_name">url-pattern</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">servlet-mappin=
g</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>web-app</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
                To build and deploy call <code class=3D"literal">mvn pac=
kage</code> in your
                project directory and copy the <code class=3D"filename">=
hibernate-tutorial.war</code>
                file into your Tomcat <code class=3D"filename">webapps</=
code> directory.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    If you do not have Tomcat installed, download it fro=
m
                    <a class=3D"ulink" href=3D"http://tomcat.apache.org/=
">http://tomcat.apache.org/</a> and follow the
                    installation instructions.  Our application requires=

                    no changes to the standard Tomcat configuration.
                </p></div><p>
                Once deployed and Tomcat is running, access the applicat=
ion at
                <code class=3D"literal">http://localhost:8080/hibernate-=
tutorial/eventmanager</code>. Make
                sure you watch the Tomcat log to see Hibernate initializ=
e when the first
                request hits your servlet (the static initializer in <co=
de class=3D"literal">HibernateUtil</code>
                is called) and to get the detailed output if any excepti=
ons occurs.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"tutorial-summa=
ry"/>1.4.=C2=A0Summary</h2></div></div></div><p>
            This tutorial covered the basics of writing a simple standal=
one Hibernate application
            and a small web application.  More tutorials are available f=
rom the Hibernate
            <a class=3D"ulink" href=3D"http://hibernate.org">website</a>=
.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"architecture"/>Cha=
pter=C2=A02.=C2=A0Architecture</h2></div></div></div><div class=3D"toc">=
<dl><dt><span class=3D"section"><a href=3D"#architecture-overview">2.1. =
Overview</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#=
architecture-overview-minimal">2.1.1. Minimal architecture</a></span></d=
t><dt><span class=3D"section"><a href=3D"#architecture-overview-comprehe=
nsive">2.1.2. Comprehensive architecture</a></span></dt><dt><span class=3D=
"section"><a href=3D"#architecture-overview-terms">2.1.3. Basic APIs</a>=
</span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#architectu=
re-jmx">2.2. JMX Integration</a></span></dt><dt><span class=3D"section">=
<a href=3D"#architecture-current-session">2.3. Contextual sessions</a></=
span></dt></dl></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"architecture-overview=
"/>2.1.=C2=A0Overview</h2></div></div></div><p>
            The diagram below provides a high-level view of the Hibernat=
e architecture:
        </p><div class=3D"mediaobject" align=3D"center"><img src=3D"imag=
es/overview.png" align=3D"middle"/></div><p>
            Unfortunately we cannot provide a detailed view of all possi=
ble runtime architectures.  Hibernate is
            sufficiently flexible to be used in a number of ways in many=
, many architectures.  We will, however,
            illustrate 2 specifically since they are extremes.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"architecture-overview-minimal"=
/>2.1.1.=C2=A0Minimal architecture</h3></div></div></div><p>
                The "minimal" architecture has the application manage it=
s own JDBC connections and provide those
                connections to Hibernate; additionally the application m=
anages transactions for itself.  This approach
                uses a minimal subset of Hibernate APIs.
            </p><div class=3D"mediaobject" align=3D"center"><img src=3D"=
images/lite.png" align=3D"middle"/></div></div><div class=3D"section" la=
ng=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a i=
d=3D"architecture-overview-comprehensive"/>2.1.2.=C2=A0Comprehensive arc=
hitecture</h3></div></div></div><p>
                The "comprehensive" architecture abstracts the applicati=
on away from the underlying JDBC/JTA APIs and
                allows Hibernate to manage the details.
            </p><div class=3D"mediaobject" align=3D"center"><img src=3D"=
images/full_cream.png" align=3D"middle"/></div></div><div class=3D"secti=
on" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title=
"><a id=3D"architecture-overview-terms"/>2.1.3.=C2=A0Basic APIs</h3></di=
v></div></div><p>
                Here are quick discussions about some of the API objects=
 depicted in the preceding diagrams (you will
                see them again in more detail in later chapters).
                </p><div class=3D"variablelist"><dl><dt><span class=3D"t=
erm">SessionFactory (<code class=3D"interfacename">org.hibernate.Session=
Factory</code>)</span></dt><dd><p>
                                A thread-safe, immutable cache of compil=
ed mappings for a single database.
                                A factory for <code class=3D"interfacena=
me">org.hibernate.Session</code> instances.  A client
                                of <code class=3D"interfacename">org.hib=
ernate.connection.ConnectionProvider</code>.  Optionally
                                maintains a <code class=3D"literal">seco=
nd level cache</code> of data that is reusable between
                                transactions at a process or cluster lev=
el.
                            </p></dd><dt><span class=3D"term">Session (<=
code class=3D"interfacename">org.hibernate.Session</code>)</span></dt><d=
d><p>
                                A single-threaded, short-lived object re=
presenting a conversation between
                                the application and the persistent store=
.  Wraps a JDBC
                                <code class=3D"interfacename">java.sql.C=
onnection</code>.  Factory for
                                <code class=3D"interfacename">org.hibern=
ate.Transaction</code>.  Maintains a
                                <code class=3D"literal">first level cach=
e</code> of persistent the application's persistent objects
                                and collections; this cache is used when=
 navigating the object graph or looking up
                                objects by identifier.
                            </p></dd><dt><span class=3D"term">Persistent=
 objects and collections</span></dt><dd><p>
                                Short-lived, single threaded objects con=
taining persistent state and business
                                function.  These can be ordinary JavaBea=
ns/POJOs. They are associated with exactly one
                                <code class=3D"interfacename">org.hibern=
ate.Session</code>. Once the
                                <code class=3D"interfacename">org.hibern=
ate.Session</code> is closed, they will be detached
                                and free to use in any application layer=
 (for example, directly as data transfer objects
                                to and from presentation).  <a class=3D"=
xref" href=3D"#objectstate" title=3D"Chapter=C2=A011.=C2=A0Working with =
objects">Chapter=C2=A011, <i>Working with objects</i></a> discusses tran=
sient,
                                persistent and detached object states.
                            </p></dd><dt><span class=3D"term">Transient =
and detached objects and collections</span></dt><dd><p>
                                Instances of persistent classes that are=
 not currently associated with a
                                <code class=3D"interfacename">org.hibern=
ate.Session</code>. They may have been instantiated by
                                the application and not yet persisted, o=
r they may have been instantiated by a
                                closed <code class=3D"interfacename">org=
.hibernate.Session</code>.
                                <a class=3D"xref" href=3D"#objectstate" =
title=3D"Chapter=C2=A011.=C2=A0Working with objects">Chapter=C2=A011, <i=
>Working with objects</i></a> discusses transient, persistent and detach=
ed object states.
                            </p></dd><dt><span class=3D"term">Transactio=
n (<code class=3D"interfacename">org.hibernate.Transaction</code>)</span=
></dt><dd><p>
                                (Optional) A single-threaded, short-live=
d object used by the application to
                                specify atomic units of work. It abstrac=
ts the application from the underlying JDBC,
                                JTA or CORBA transaction. A <code class=3D=
"interfacename">org.hibernate.Session</code> might span several
                                <code class=3D"interfacename">org.hibern=
ate.Transaction</code>s in some cases. However,
                                transaction demarcation, either using th=
e underlying API or
                                <code class=3D"interfacename">org.hibern=
ate.Transaction</code>, is never optional.
                            </p></dd><dt><span class=3D"term">Connection=
Provider (<code class=3D"interfacename">org.hibernate.connection.Connect=
ionProvider</code>)</span></dt><dd><p>
                                (Optional) A factory for, and pool of, J=
DBC connections. It abstracts the application from
                                underlying <code class=3D"interfacename"=
>javax.sql.DataSource</code> or
                                <code class=3D"interfacename">java.sql.D=
riverManager</code>.  It is not exposed to application,
                                but it can be extended and/or implemente=
d by the developer.
                            </p></dd><dt><span class=3D"term">Transactio=
nFactory (<code class=3D"interfacename">org.hibernate.TransactionFactory=
</code>)</span></dt><dd><p>
                                (Optional) A factory for <code class=3D"=
interfacename">org.hibernate.Transaction</code>
                                instances. It is not exposed to the appl=
ication, but it can be extended and/or
                                implemented by the developer.
                            </p></dd><dt><span class=3D"term"><span clas=
s=3D"emphasis"><em>Extension Interfaces</em></span></span></dt><dd><p>
                                Hibernate offers a range of optional ext=
ension interfaces you can implement to customize
                                the behavior of your persistence layer. =
See the API documentation for details.
                            </p></dd></dl></div><p>
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"architecture-j=
mx"/>2.2.=C2=A0JMX Integration</h2></div></div></div><p>
            JMX is the J2EE standard for the management of Java componen=
ts. Hibernate can be managed via
            a JMX standard service. AN MBean implementation is provided =
in the distribution:
            <code class=3D"literal">org.hibernate.jmx.HibernateService</=
code>.
        </p><p>
            Another feature available as a JMX service is runtime Hibern=
ate statistics. See
            <a class=3D"xref" href=3D"#configuration-optional-statistics=
" title=3D"3.4.6.=C2=A0Hibernate statistics">Section=C2=A03.4.6, =E2=80=9C=
Hibernate statistics=E2=80=9D</a> for more information.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"architecture-current-ses=
sion"/>2.3.=C2=A0Contextual sessions</h2></div></div></div><p>
            Most applications using Hibernate need some form of "context=
ual" session, where a given
            session is in effect throughout the scope of a given context=
. However, across applications
            the definition of what constitutes a context is typically di=
fferent; different contexts
            define different scopes to the notion of current. Applicatio=
ns using Hibernate prior
            to version 3.0 tended to utilize either home-grown <code cla=
ss=3D"literal">ThreadLocal</code>-based
            contextual sessions, helper classes such as <code class=3D"l=
iteral">HibernateUtil</code>, or utilized
            third-party frameworks, such as Spring or Pico, which provid=
ed proxy/interception-based contextual sessions.
        </p><p>
            Starting with version 3.0.1, Hibernate added the <code class=
=3D"literal">SessionFactory.getCurrentSession()</code>
            method. Initially, this assumed usage of <code class=3D"lite=
ral">JTA</code> transactions, where the
            <code class=3D"literal">JTA</code> transaction defined both =
the scope and context of a current session.
            Given the maturity of the numerous stand-alone
            <code class=3D"literal">JTA TransactionManager</code> implem=
entations, most, if not all,
            applications should be using <code class=3D"literal">JTA</co=
de> transaction management, whether or not
            they are deployed into a <code class=3D"literal">J2EE</code>=
 container.  Based on that, the
            <code class=3D"literal">JTA</code>-based contextual sessions=
 are all you need to use.
        </p><p>
            However, as of version 3.1, the processing behind
            <code class=3D"literal">SessionFactory.getCurrentSession()</=
code> is now pluggable.  To that
            end, a new extension interface, <code class=3D"literal">org.=
hibernate.context.CurrentSessionContext</code>,
            and a new configuration parameter, <code class=3D"literal">h=
ibernate.current_session_context_class</code>,
            have been added to allow pluggability of the scope and conte=
xt of defining current sessions.
        </p><p>
            See the Javadocs for the <code class=3D"literal">org.hiberna=
te.context.CurrentSessionContext</code>
            interface for a detailed discussion of its contract.  It def=
ines a single method,
            <code class=3D"literal">currentSession()</code>, by which th=
e implementation is responsible for
            tracking the current contextual session.  Out-of-the-box, Hi=
bernate comes with three
            implementations of this interface:
        </p><div class=3D"itemizedlist"><ul><li><p>
                    <code class=3D"literal">org.hibernate.context.JTASes=
sionContext</code>: current sessions
                    are tracked and scoped by a <code class=3D"literal">=
JTA</code> transaction.  The processing
                    here is exactly the same as in the older JTA-only ap=
proach.  See the Javadocs
                    for details.
                </p></li><li><p>
                    <code class=3D"literal">org.hibernate.context.Thread=
LocalSessionContext</code>:current
                    sessions are tracked by thread of execution. See the=
 Javadocs for details.
                </p></li><li><p>
                    <code class=3D"literal">org.hibernate.context.Manage=
dSessionContext</code>: current
                    sessions are tracked by thread of execution. However=
, you are responsible to
                    bind and unbind a <code class=3D"literal">Session</c=
ode> instance with static methods
                    on this class: it does not open, flush, or close a <=
code class=3D"literal">Session</code>.
                </p></li></ul></div><p>
            The first two implementations provide a "one session - one d=
atabase transaction" programming
            model. This is also known and used as <span class=3D"emphasi=
s"><em>session-per-request</em></span>. The beginning
            and end of a Hibernate session is defined by the duration of=
 a database transaction.
            If you use programmatic transaction demarcation in plain JSE=
 without JTA, you are advised to
            use the Hibernate <code class=3D"literal">Transaction</code>=
 API to hide the underlying transaction system
            from your code. If you use JTA, you can utilize the JTA inte=
rfaces to demarcate transactions. If you
            execute in an EJB container that supports CMT, transaction b=
oundaries are defined declaratively
            and you do not need any transaction or session demarcation o=
perations in your code.
            Refer to <a class=3D"xref" href=3D"#transactions" title=3D"C=
hapter=C2=A013.=C2=A0Transactions and Concurrency">Chapter=C2=A013, <i>T=
ransactions and Concurrency</i></a> for more information and code exampl=
es.
        </p><p>
            The <code class=3D"literal">hibernate.current_session_contex=
t_class</code> configuration parameter
            defines which <code class=3D"literal">org.hibernate.context.=
CurrentSessionContext</code> implementation
            should be used.  For backwards compatibility, if this config=
uration parameter is not set
            but a <code class=3D"literal">org.hibernate.transaction.Tran=
sactionManagerLookup</code> is configured,
            Hibernate will use the <code class=3D"literal">org.hibernate=
.context.JTASessionContext</code>.
            Typically, the value of this parameter would just name the i=
mplementation class to
            use. For the three out-of-the-box implementations, however, =
there are three corresponding
            short names: "jta", "thread", and "managed".
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"session-configurat=
ion"/>Chapter=C2=A03.=C2=A0Configuration</h2></div></div></div><div clas=
s=3D"toc"><dl><dt><span class=3D"section"><a href=3D"#configuration-prog=
rammatic">3.1. Programmatic configuration</a></span></dt><dt><span class=
=3D"section"><a href=3D"#configuration-sessionfactory">3.2. Obtaining a =
SessionFactory</a></span></dt><dt><span class=3D"section"><a href=3D"#co=
nfiguration-hibernatejdbc">3.3. JDBC connections</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"#configuration-optional">3.4. Optional co=
nfiguration properties</a></span></dt><dd><dl><dt><span class=3D"section=
"><a href=3D"#configuration-optional-dialects">3.4.1. SQL Dialects</a></=
span></dt><dt><span class=3D"section"><a href=3D"#configuration-optional=
-outerjoin">3.4.2. Outer Join Fetching</a></span></dt><dt><span class=3D=
"section"><a href=3D"#configuration-optional-binarystreams">3.4.3. Binar=
y Streams</a></span></dt><dt><span class=3D"section"><a href=3D"#configu=
ration-optional-cacheprovider">3.4.4. Second-level and query cache</a></=
span></dt><dt><span class=3D"section"><a href=3D"#configuration-optional=
-querysubstitution">3.4.5. Query Language Substitution</a></span></dt><d=
t><span class=3D"section"><a href=3D"#configuration-optional-statistics"=
>3.4.6. Hibernate statistics</a></span></dt></dl></dd><dt><span class=3D=
"section"><a href=3D"#configuration-logging">3.5. Logging</a></span></dt=
><dt><span class=3D"section"><a href=3D"#configuration-namingstrategy">3=
.6. Implementing a NamingStrategy</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#d0e3362">3.7. Implementing a PersisterClassProvider</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#configuration-xmlcon=
fig">3.8. XML configuration file</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"#configuration-j2ee">3.9. Java EE Application Server inte=
gration</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#c=
onfiguration-optional-transactionstrategy">3.9.1. Transaction strategy c=
onfiguration</a></span></dt><dt><span class=3D"section"><a href=3D"#conf=
iguration-optional-jndi">3.9.2. JNDI-bound SessionFactory</a></span></dt=
><dt><span class=3D"section"><a href=3D"#configuration-j2ee-currentsessi=
on">3.9.3. Current Session context management with JTA</a></span></dt><d=
t><span class=3D"section"><a href=3D"#configuration-j2ee-jmx">3.9.4. JMX=
 deployment</a></span></dt></dl></dd></dl></div><p>Hibernate is designed=
 to operate in many different environments and,
  as such, there is a broad range of configuration parameters. Fortunate=
ly,
  most have sensible default values and Hibernate is distributed with an=

  example <code class=3D"literal">hibernate.properties</code> file in
  <code class=3D"literal">etc/</code> that displays the various options.=
 Simply put the
  example file in your classpath and customize it to suit your needs.</p=
><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><di=
v><h2 class=3D"title"><a id=3D"configuration-programmatic"/>3.1.=C2=A0Pr=
ogrammatic configuration</h2></div></div></div><p>An instance of
    <code class=3D"classname">org.hibernate.cfg.Configuration</code> rep=
resents an
    entire set of mappings of an application's Java types to an SQL data=
base.
    The <code class=3D"classname">org.hibernate.cfg.Configuration</code>=
 is used to
    build an immutable
    <code class=3D"interfacename">org.hibernate.SessionFactory</code>. T=
he mappings
    are compiled from various XML mapping files.</p><p>You can obtain a
    <code class=3D"classname">org.hibernate.cfg.Configuration</code> ins=
tance by
    instantiating it directly and specifying XML mapping documents. If t=
he
    mapping files are in the classpath, use <code class=3D"literal">addR=
esource()</code>.
    For example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_=
type">Configuration</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;cfg&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><=
!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span=
 class=3D"java_keyword">new</span><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;</span><!-- <br/> --><span class=3D"java_type">Configuration</s=
pan><!-- <br/> --><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addRes=
ource</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;Item.hbm.xml&quot;</span><span class=3D"java_separator">)<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addRes=
ource</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;Bid.hbm.xml&quot;</span><span class=3D"java_separator">);<=
/span></pre><p>An alternative way is to specify the mapped class and all=
ow
    Hibernate to find the mapping document for you:</p><pre xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"=
><!-- <br/> --><span class=3D"java_type">Configuration</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;cfg&nbsp;</span><!-- <br/> --><span =
class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</span><!-=
- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span c=
lass=3D"java_type">Configuration</span><!-- <br/> --><span class=3D"java=
_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addCla=
ss</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">org</span><span class=3D"java_separator">.</span><span class=3D"java_=
plain">hibernate</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">auction</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_type">Item</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_keyword">class</span><span class=3D"java_separator=
">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addCla=
ss</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">org</span><span class=3D"java_separator">.</span><span class=3D"java_=
plain">hibernate</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">auction</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_type">Bid</span><span class=3D"java_separator">.</span=
><span class=3D"java_keyword">class</span><span class=3D"java_separator"=
>);</span></pre><p>Hibernate will then search for mapping files named
    <code class=3D"filename">/org/hibernate/auction/Item.hbm.xml</code> =
and
    <code class=3D"filename">/org/hibernate/auction/Bid.hbm.xml</code> i=
n the classpath.
    This approach eliminates any hardcoded filenames.</p><p>A <code clas=
s=3D"classname">org.hibernate.cfg.Configuration</code> also allows
    you to specify configuration properties. For example:</p><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_type">Configuration</span><!-- <b=
r/> --><span class=3D"java_plain">&nbsp;cfg&nbsp;</span><!-- <br/> --><s=
pan class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_type">Configuration</span><!-- <br/> --><span class=3D"=
java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addCla=
ss</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">org</span><span class=3D"java_separator">.</span><span class=3D"java_=
plain">hibernate</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">auction</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_type">Item</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_keyword">class</span><span class=3D"java_separator=
">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addCla=
ss</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">org</span><span class=3D"java_separator">.</span><span class=3D"java_=
plain">hibernate</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">auction</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_type">Bid</span><span class=3D"java_separator">.</span=
><span class=3D"java_keyword">class</span><span class=3D"java_separator"=
>)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
perty</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;hibernate.dialect&quot;</span><span class=3D"java_separato=
r">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_l=
iteral">&quot;org.hibernate.dialect.MySQLInnoDBDialect&quot;</span><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
perty</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;hibernate.connection.datasource&quot;</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">&quot;java:comp/env/jdbc/test&quot;</span><span cl=
ass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
perty</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;hibernate.order_updates&quot;</span><span class=3D"java_se=
parator">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_literal">&quot;true&quot;</span><span class=3D"java_separator">);</=
span></pre><p>This is not the only way to pass configuration properties =
to
    Hibernate. Some alternative options include:</p><div xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" class=3D"orderedlist"><ol><l=
i><p>Pass an instance of <code class=3D"classname">java.util.Properties<=
/code>
        to <code class=3D"literal">Configuration.setProperties()</code>.=
</p></li><li><p>Place a file named <code class=3D"filename">hibernate.pr=
operties</code> in
        a root directory of the classpath.</p></li><li><p>Set <code clas=
s=3D"literal">System</code> properties using <code class=3D"literal">jav=
a
        -Dproperty=3Dvalue</code>.</p></li><li><p>Include <code class=3D=
"literal">&lt;property&gt;</code> elements in
        <code class=3D"literal">hibernate.cfg.xml</code> (this is discus=
sed later).</p></li></ol></div><p>If you want to get started
    quickly<code class=3D"filename">hibernate.properties</code> is the e=
asiest
    approach.</p><p>The <code class=3D"classname">org.hibernate.cfg.Conf=
iguration</code> is
    intended as a startup-time object that will be discarded once a
    <code class=3D"literal">SessionFactory</code> is created.</p></div><=
div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div>=
<h2 class=3D"title"><a id=3D"configuration-sessionfactory"/>3.2.=C2=A0Ob=
taining a SessionFactory</h2></div></div></div><p>When all mappings have=
 been parsed by the
    <code class=3D"classname">org.hibernate.cfg.Configuration</code>, th=
e application
    must obtain a factory for
    <code class=3D"interfacename">org.hibernate.Session</code> instances=
. This
    factory is intended to be shared by all application threads:</p><pre=
 xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" c=
lass=3D"JAVA"><!-- <br/> --><span class=3D"java_type">SessionFactory</sp=
an><!-- <br/> --><span class=3D"java_plain">&nbsp;sessions&nbsp;</span><=
!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;cfg</span><!-- <br/> --><span class=3D"java_=
separator">.</span><!-- <br/> --><span class=3D"java_plain">buildSession=
Factory</span><!-- <br/> --><span class=3D"java_separator">();</span></p=
re><p>Hibernate does allow your application to instantiate more than one=

    <code class=3D"interfacename">org.hibernate.SessionFactory</code>. T=
his is
    useful if you are using more than one database.</p></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D=
"title"><a id=3D"configuration-hibernatejdbc"/>3.3.=C2=A0JDBC connection=
s</h2></div></div></div><p>It is advisable to have the
    <code class=3D"interfacename">org.hibernate.SessionFactory</code> cr=
eate and
    pool JDBC connections for you. If you take this approach, opening a
    <code class=3D"interfacename">org.hibernate.Session</code> is as sim=
ple
    as:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRen=
dererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Ses=
sion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;<=
/span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -=
-><span class=3D"java_plain">&nbsp;sessions</span><!-- <br/> --><span cl=
ass=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">=
openSession</span><!-- <br/> --><span class=3D"java_separator">();</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_operator">//</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;open&nbsp;a&nbsp;</span><!-- <br/> --><span class=3D"java_key=
word">new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!=
-- <br/> --><span class=3D"java_type">Session</span></pre><p>Once you st=
art a task that requires access to the database, a JDBC
    connection will be obtained from the pool.</p><p>Before you can do t=
his, you first need to pass some JDBC connection
    properties to Hibernate. All Hibernate property names and semantics =
are
    defined on the class <code class=3D"classname">org.hibernate.cfg.Env=
ironment</code>.
    The most important settings for JDBC connection configuration are ou=
tlined
    below.</p><p>Hibernate will obtain and pool connections using
    <code class=3D"classname">java.sql.DriverManager</code> if you set t=
he following
    properties:</p><div class=3D"table"><a id=3D"d0e1748"/><p class=3D"t=
itle"><b>Table=C2=A03.1.=C2=A0Hibernate JDBC Properties</b></p><div clas=
s=3D"table-contents"><table summary=3D"Hibernate JDBC Properties" border=
=3D"1"><colgroup><col/><col/></colgroup><thead><tr><th>Property name</th=
><th>Purpose</th></tr></thead><tbody><tr><td><span class=3D"property">hi=
bernate.connection.driver_class</span></td><td><span class=3D"emphasis">=
<em>JDBC driver class</em></span></td></tr><tr><td><span class=3D"proper=
ty">hibernate.connection.url</span></td><td><span class=3D"emphasis"><em=
>JDBC URL</em></span></td></tr><tr><td><span class=3D"property">hibernat=
e.connection.username</span></td><td><span class=3D"emphasis"><em>databa=
se user</em></span></td></tr><tr><td><span class=3D"property">hibernate.=
connection.password</span></td><td><span class=3D"emphasis"><em>database=
 user password</em></span></td></tr><tr><td><span class=3D"property">hib=
ernate.connection.pool_size</span></td><td><span class=3D"emphasis"><em>=
maximum number of pooled
            connections</em></span></td></tr></tbody></table></div></div=
><br class=3D"table-break"/><p>Hibernate's own connection pooling algori=
thm is, however, quite
    rudimentary. It is intended to help you get started and is <span cla=
ss=3D"emphasis"><em>not
    intended for use in a production system</em></span>, or even for
    performance testing. You should use a third party pool for best
    performance and stability. Just replace the
    <span class=3D"property">hibernate.connection.pool_size</span> prope=
rty with
    connection pool specific settings. This will turn off Hibernate's in=
ternal
    pool. For example, you might like to use c3p0.</p><p>C3P0 is an open=
 source JDBC connection pool distributed along with
    Hibernate in the <code class=3D"filename">lib</code> directory. Hibe=
rnate will use
    its <code class=3D"classname">org.hibernate.connection.C3P0Connectio=
nProvider</code>
    for connection pooling if you set <span class=3D"property">hibernate=
.c3p0.*</span>
    properties. If you would like to use Proxool, refer to the packaged
    <code class=3D"filename">hibernate.properties</code> and the Hiberna=
te web site for
    more information.</p><p>The following is an example
    <code class=3D"filename">hibernate.properties</code> file for c3p0:<=
/p><pre class=3D"programlisting">hibernate.connection.driver_class =3D o=
rg.postgresql.Driver
hibernate.connection.url =3D jdbc:postgresql://localhost/mydatabase
hibernate.connection.username =3D myuser
hibernate.connection.password =3D secret
hibernate.c3p0.min_size=3D5
hibernate.c3p0.max_size=3D20
hibernate.c3p0.timeout=3D1800
hibernate.c3p0.max_statements=3D50
hibernate.dialect =3D org.hibernate.dialect.PostgreSQLDialect</pre><p>Fo=
r use inside an application server, you should almost always
    configure Hibernate to obtain connections from an application server=

    <code class=3D"interfacename">javax.sql.Datasource</code> registered=
 in JNDI.
    You will need to set at least one of the following properties:</p><d=
iv class=3D"table"><a id=3D"d0e1830"/><p class=3D"title"><b>Table=C2=A03=
.2.=C2=A0Hibernate Datasource Properties</b></p><div class=3D"table-cont=
ents"><table summary=3D"Hibernate Datasource Properties" border=3D"1"><c=
olgroup><col/><col/></colgroup><thead><tr><th>Property name</th><th>Purp=
ose</th></tr></thead><tbody><tr><td><span class=3D"property">hibernate.c=
onnection.datasource</span></td><td><span class=3D"emphasis"><em>datasou=
rce JNDI name</em></span></td></tr><tr><td><span class=3D"property">hibe=
rnate.jndi.url</span></td><td><span class=3D"emphasis"><em>URL of the JN=
DI provider</em></span>
            (optional)</td></tr><tr><td><span class=3D"property">hiberna=
te.jndi.class</span></td><td><span class=3D"emphasis"><em>class of the J=
NDI
            <code class=3D"literal">InitialContextFactory</code></em></s=
pan>
            (optional)</td></tr><tr><td><span class=3D"property">hiberna=
te.connection.username</span></td><td><span class=3D"emphasis"><em>datab=
ase user</em></span> (optional)</td></tr><tr><td><span class=3D"property=
">hibernate.connection.password</span></td><td><span class=3D"emphasis">=
<em>database user password</em></span>
            (optional)</td></tr></tbody></table></div></div><br class=3D=
"table-break"/><p>Here is an example <code class=3D"filename">hibernate.=
properties</code> file
    for an application server provided JNDI datasource:</p><pre class=3D=
"programlisting">hibernate.connection.datasource =3D java:/comp/env/jdbc=
/test
hibernate.transaction.factory_class =3D \
    org.hibernate.transaction.JTATransactionFactory
hibernate.transaction.manager_lookup_class =3D \
    org.hibernate.transaction.JBossTransactionManagerLookup
hibernate.dialect =3D org.hibernate.dialect.PostgreSQLDialect</pre><p>JD=
BC connections obtained from a JNDI datasource will automatically
    participate in the container-managed transactions of the application=

    server.</p><p>Arbitrary connection properties can be given by prepen=
ding
    "<code class=3D"literal">hibernate.connection</code>" to the connect=
ion property name.
    For example, you can specify a <span class=3D"property">charSet</spa=
n> connection
    property using <span class=3D"property">hibernate.connection.charSet=
</span>.</p><p>You can define your own plugin strategy for obtaining JDB=
C
    connections by implementing the interface
    <code class=3D"interfacename">org.hibernate.connection.ConnectionPro=
vider</code>,
    and specifying your custom implementation via the
    <span class=3D"property">hibernate.connection.provider_class</span> =
property.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"t=
itlepage"><div><div><h2 class=3D"title"><a id=3D"configuration-optional"=
/>3.4.=C2=A0Optional configuration properties</h2></div></div></div><p>T=
here are a number of other properties that control the behavior of
    Hibernate at runtime. All are optional and have reasonable default
    values.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"warning"><h2>Warning</h2><p><span class=3D"emphasis"><em=
>Some of these properties are "system-level"
        only.</em></span> System-level properties can be set only via
        <code class=3D"literal">java -Dproperty=3Dvalue</code> or
        <code class=3D"filename">hibernate.properties</code>. They
        <span class=3D"emphasis"><em>cannot</em></span> be set by the ot=
her techniques described
        above.</p></div><div class=3D"table"><a id=3D"configuration-opti=
onal-properties"/><p class=3D"title"><b>Table=C2=A03.3.=C2=A0Hibernate C=
onfiguration Properties</b></p><div class=3D"table-contents"><table summ=
ary=3D"Hibernate Configuration Properties" border=3D"1"><colgroup><col/>=
<col/></colgroup><thead><tr><th>Property name</th><th>Purpose</th></tr><=
/thead><tbody><tr><td><span class=3D"property">hibernate.dialect</span><=
/td><td>The classname of a Hibernate
            <code class=3D"classname">org.hibernate.dialect.Dialect</cod=
e> which allows
            Hibernate to generate SQL optimized for a particular relatio=
nal
            database. <p> <span class=3D"strong"><strong>e.g.</strong></=
span>
            <code class=3D"literal">full.classname.of.Dialect</code> </p=
> <p> In
            most cases Hibernate will actually be able to choose the cor=
rect
            <code class=3D"classname">org.hibernate.dialect.Dialect</cod=
e>
            implementation based on the <code class=3D"literal">JDBC met=
adata</code>
            returned by the JDBC driver. </p></td></tr><tr><td><span cla=
ss=3D"property">hibernate.show_sql</span></td><td>Write all SQL statemen=
ts to console. This is an alternative
            to setting the log category <code class=3D"literal">org.hibe=
rnate.SQL</code>
            to <code class=3D"literal">debug</code>. <p> <span class=3D"=
strong"><strong>e.g.</strong></span> <code class=3D"literal">true</code>=
 |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.format_sql</span></td><td>Pretty print=
 the SQL in the log and console. <p>
            <span class=3D"strong"><strong>e.g.</strong></span> <code cl=
ass=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.default_schema</span></td><td>Qualify =
unqualified table names with the given
            schema/tablespace in generated SQL. <p> <span class=3D"stron=
g"><strong>e.g.</strong></span> <code class=3D"literal">SCHEMA_NAME</cod=
e>
            </p></td></tr><tr><td><span class=3D"property">hibernate.def=
ault_catalog</span></td><td>Qualifies unqualified table names with the g=
iven catalog in
            generated SQL. <p> <span class=3D"strong"><strong>e.g.</stro=
ng></span>
            <code class=3D"literal">CATALOG_NAME</code> </p></td></tr><t=
r><td><span class=3D"property">hibernate.session_factory_name</span></td=
><td>The
            <code class=3D"interfacename">org.hibernate.SessionFactory</=
code> will
            be automatically bound to this name in JNDI after it has bee=
n
            created. <p> <span class=3D"strong"><strong>e.g.</strong></s=
pan>
            <code class=3D"literal">jndi/composite/name</code> </p></td>=
</tr><tr><td><span class=3D"property">hibernate.max_fetch_depth</span></=
td><td>Sets a maximum "depth" for the outer join fetch tree for
            single-ended associations (one-to-one, many-to-one). A
            <code class=3D"literal">0</code> disables default outer join=
 fetching. <p>
            <span class=3D"strong"><strong>e.g.</strong></span> recommen=
ded values between
            <code class=3D"literal">0</code> and <code class=3D"literal"=
>3</code> </p></td></tr><tr><td><span class=3D"property">hibernate.defau=
lt_batch_fetch_size</span></td><td>Sets a default size for Hibernate bat=
ch fetching of
            associations. <p> <span class=3D"strong"><strong>e.g.</stron=
g></span>
            recommended values <code class=3D"literal">4</code>, <code c=
lass=3D"literal">8</code>,
            <code class=3D"literal">16</code> </p></td></tr><tr><td><spa=
n class=3D"property">hibernate.default_entity_mode</span></td><td>Sets a=
 default mode for entity representation for all
            sessions opened from this <code class=3D"literal">SessionFac=
tory</code> <p>
            <code class=3D"literal">dynamic-map</code>, <code class=3D"l=
iteral">dom4j</code>,
            <code class=3D"literal">pojo</code> </p></td></tr><tr><td><s=
pan class=3D"property">hibernate.order_updates</span></td><td>Forces Hib=
ernate to order SQL updates by the primary key
            value of the items being updated. This will result in fewer
            transaction deadlocks in highly concurrent systems. <p>
            <span class=3D"strong"><strong>e.g.</strong></span> <code cl=
ass=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.generate_statistics</span></td><td>If =
enabled, Hibernate will collect statistics useful for
            performance tuning. <p> <span class=3D"strong"><strong>e.g.<=
/strong></span>
            <code class=3D"literal">true</code> | <code class=3D"literal=
">false</code> </p></td></tr><tr><td><span class=3D"property">hibernate.=
use_identifier_rollback</span></td><td>If enabled, generated identifier =
properties will be reset
            to default values when objects are deleted. <p> <span class=3D=
"strong"><strong>e.g.</strong></span> <code class=3D"literal">true</code=
> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.use_sql_comments</span></td><td>If tur=
ned on, Hibernate will generate comments inside the
            SQL, for easier debugging, defaults to <code class=3D"litera=
l">false</code>.
            <p> <span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">true</code> | <code class=3D"literal=
">false</code> </p></td></tr><tr><td><span class=3D"property">hibernate.=
id.new_generator_mappings</span></td><td>Setting is relevant when using
            <code class=3D"classname">@GeneratedValue</code>. It indicat=
es whether or
            not the new <code class=3D"classname">IdentifierGenerator</c=
ode>
            implementations are used for
            <code class=3D"classname">javax.persistence.GenerationType.A=
UTO</code>,
            <code class=3D"classname">javax.persistence.GenerationType.T=
ABLE</code> and
            <code class=3D"classname">javax.persistence.GenerationType.S=
EQUENCE</code>.
            Default to <code class=3D"literal">false</code> to keep back=
ward
            compatibility. <p> <span class=3D"strong"><strong>e.g.</stro=
ng></span>
            <code class=3D"literal">true</code> | <code class=3D"literal=
">false</code> </p></td></tr></tbody></table></div></div><br class=3D"ta=
ble-break"/><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"note"><h2>Note</h2><p>We recommend all new projects which m=
ake use of to use
      <code class=3D"classname">@GeneratedValue</code> to also set
      <code class=3D"code">hibernate.id.new_generator_mappings=3Dtrue</c=
ode> as the new
      generators are more efficient and closer to the JPA 2 specificatio=
n
      semantic. However they are not backward compatible with existing
      databases (if a sequence or a table is used for id generation).</p=
></div><div class=3D"table"><a id=3D"configuration-jdbc-properties"/><p =
class=3D"title"><b>Table=C2=A03.4.=C2=A0Hibernate JDBC and Connection Pr=
operties</b></p><div class=3D"table-contents"><table summary=3D"Hibernat=
e JDBC and Connection Properties" border=3D"1"><colgroup><col/><col/></c=
olgroup><thead><tr><th>Property name</th><th>Purpose</th></tr></thead><t=
body><tr><td><span class=3D"property">hibernate.jdbc.fetch_size</span></=
td><td>A non-zero value determines the JDBC fetch size (calls
            <code class=3D"literal">Statement.setFetchSize()</code>).</t=
d></tr><tr><td><span class=3D"property">hibernate.jdbc.batch_size</span>=
</td><td>A non-zero value enables use of JDBC2 batch updates by
            Hibernate. <p> <span class=3D"strong"><strong>e.g.</strong><=
/span>
            recommended values between <code class=3D"literal">5</code> =
and
            <code class=3D"literal">30</code> </p></td></tr><tr><td><spa=
n class=3D"property">hibernate.jdbc.batch_versioned_data</span></td><td>=
Set this property to <code class=3D"literal">true</code> if your JDBC
            driver returns correct row counts from
            <code class=3D"literal">executeBatch()</code>. It is usually=
 safe to turn this
            option on. Hibernate will then use batched DML for automatic=
ally
            versioned data. Defaults to <code class=3D"literal">false</c=
ode>. <p>
            <span class=3D"strong"><strong>e.g.</strong></span> <code cl=
ass=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.jdbc.factory_class</span></td><td>Sele=
ct a custom
            <code class=3D"interfacename">org.hibernate.jdbc.Batcher</co=
de>. Most
            applications will not need this configuration property. <p>
            <span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">classname.of.BatcherFactory</code> <=
/p></td></tr><tr><td><span class=3D"property">hibernate.jdbc.use_scrolla=
ble_resultset</span></td><td>Enables use of JDBC2 scrollable resultsets =
by Hibernate.
            This property is only necessary when using user-supplied JDB=
C
            connections. Hibernate uses connection metadata otherwise. <=
p>
            <span class=3D"strong"><strong>e.g.</strong></span> <code cl=
ass=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.jdbc.use_streams_for_binary</span></td=
><td>Use streams when writing/reading <code class=3D"literal">binary</co=
de>
            or <code class=3D"literal">serializable</code> types to/from=
 JDBC.
            <span class=3D"emphasis"><em>*system-level property*</em></s=
pan> <p> <span class=3D"strong"><strong>e.g.</strong></span> <code class=
=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
span class=3D"property">hibernate.jdbc.use_get_generated_keys</span></td=
><td>Enables use of JDBC3
            <code class=3D"literal">PreparedStatement.getGeneratedKeys()=
</code> to
            retrieve natively generated keys after insert. Requires JDBC=
3+
            driver and JRE1.4+, set to false if your driver has problems=
 with
            the Hibernate identifier generators. By default, it tries to=

            determine the driver capabilities using connection metadata.=

            <p> <span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">true|false</code> </p></td></tr><tr>=
<td><span class=3D"property">hibernate.connection.provider_class</span><=
/td><td>The classname of a custom
            <code class=3D"interfacename">org.hibernate.connection.Conne=
ctionProvider</code>
            which provides JDBC connections to Hibernate. <p> <span clas=
s=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">classname.of.ConnectionProvider</cod=
e> </p></td></tr><tr><td><span class=3D"property">hibernate.connection.i=
solation</span></td><td>Sets the JDBC transaction isolation level. Check=

            <code class=3D"interfacename">java.sql.Connection</code> for=
 meaningful
            values, but note that most databases do not support all isol=
ation
            levels and some define additional, non-standard isolations. =
<p>
            <span class=3D"strong"><strong>e.g.</strong></span> <code cl=
ass=3D"literal">1, 2, 4,
            8</code> </p></td></tr><tr><td><span class=3D"property">hibe=
rnate.connection.autocommit</span></td><td>Enables autocommit for JDBC p=
ooled connections (it is not
            recommended). <p> <span class=3D"strong"><strong>e.g.</stron=
g></span>
            <code class=3D"literal">true</code> | <code class=3D"literal=
">false</code> </p></td></tr><tr><td><span class=3D"property">hibernate.=
connection.release_mode</span></td><td>Specifies when Hibernate should r=
elease JDBC connections.
            By default, a JDBC connection is held until the session is
            explicitly closed or disconnected. For an application server=
 JTA
            datasource, use <code class=3D"literal">after_statement</cod=
e> to aggressively
            release connections after every JDBC call. For a non-JTA
            connection, it often makes sense to release the connection a=
t the
            end of each transaction, by using
            <code class=3D"literal">after_transaction</code>. <code clas=
s=3D"literal">auto</code> will
            choose <code class=3D"literal">after_statement</code> for th=
e JTA and CMT
            transaction strategies and <code class=3D"literal">after_tra=
nsaction</code>
            for the JDBC transaction strategy. <p> <span class=3D"strong=
"><strong>e.g.</strong></span> <code class=3D"literal">auto</code> (defa=
ult) |
            <code class=3D"literal">on_close</code> | <code class=3D"lit=
eral">after_transaction</code>
            | <code class=3D"literal">after_statement</code> </p> <p> Th=
is setting
            only affects <code class=3D"literal">Session</code>s returne=
d from
            <code class=3D"literal">SessionFactory.openSession</code>. F=
or
            <code class=3D"literal">Session</code>s obtained through
            <code class=3D"literal">SessionFactory.getCurrentSession</co=
de>, the
            <code class=3D"literal">CurrentSessionContext</code> impleme=
ntation configured
            for use controls the connection release mode for those
            <code class=3D"literal">Session</code>s. See <a class=3D"xre=
f" href=3D"#architecture-current-session" title=3D"2.3.=C2=A0Contextual =
sessions">Section=C2=A02.3, =E2=80=9CContextual sessions=E2=80=9D</a> </=
p></td></tr><tr><td><span class=3D"property">hibernate.connection.</span=
><span class=3D"emphasis"><em>&lt;propertyName&gt;</em></span></td><td>P=
ass the JDBC property
            <span class=3D"emphasis"><em>&lt;propertyName&gt;</em></span=
> to
            <code class=3D"literal">DriverManager.getConnection()</code>=
.</td></tr><tr><td><span class=3D"property">hibernate.jndi.</span><span =
class=3D"emphasis"><em>&lt;propertyName&gt;</em></span></td><td>Pass the=
 property <span class=3D"emphasis"><em>&lt;propertyName&gt;</em></span>
            to the JNDI <code class=3D"literal">InitialContextFactory</c=
ode>.</td></tr></tbody></table></div></div><br class=3D"table-break"/><d=
iv class=3D"table"><a id=3D"configuration-cache-properties"/><p class=3D=
"title"><b>Table=C2=A03.5.=C2=A0Hibernate Cache Properties</b></p><div c=
lass=3D"table-contents"><table summary=3D"Hibernate Cache Properties" bo=
rder=3D"1"><colgroup><col/><col/></colgroup><thead><tr><th>Property name=
</th><th>Purpose</th></tr></thead><tbody><tr><td><code class=3D"literal"=
>hibernate.cache.provider_class</code></td><td>The classname of a custom=
 <code class=3D"literal">CacheProvider</code>.
            <p> <span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">classname.of.CacheProvider</code> </=
p></td></tr><tr><td><code class=3D"literal">hibernate.cache.use_minimal_=
puts</code></td><td>Optimizes second-level cache operation to minimize w=
rites,
            at the cost of more frequent reads. This setting is most use=
ful
            for clustered caches and, in Hibernate3, is enabled by defau=
lt for
            clustered cache implementations. <p> <span class=3D"strong">=
<strong>e.g.</strong></span> <code class=3D"literal">true|false</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.cach=
e.use_query_cache</code></td><td>Enables the query cache. Individual que=
ries still have to
            be set cachable. <p> <span class=3D"strong"><strong>e.g.</st=
rong></span>
            <code class=3D"literal">true|false</code> </p></td></tr><tr>=
<td><code class=3D"literal">hibernate.cache.use_second_level_cache</code=
></td><td>Can be used to completely disable the second level cache,
            which is enabled by default for classes which specify a
            <code class=3D"literal">&lt;cache&gt;</code> mapping. <p> <s=
pan class=3D"strong"><strong>e.g.</strong></span> <code class=3D"literal=
">true|false</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.cach=
e.query_cache_factory</code></td><td>The classname of a custom <code cla=
ss=3D"literal">QueryCache</code>
            interface, defaults to the built-in
            <code class=3D"literal">StandardQueryCache</code>. <p> <span=
 class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">classname.of.QueryCache</code> </p><=
/td></tr><tr><td><code class=3D"literal">hibernate.cache.region_prefix</=
code></td><td>A prefix to use for second-level cache region names. <p>
            <span class=3D"strong"><strong>e.g.</strong></span> <code cl=
ass=3D"literal">prefix</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.cach=
e.use_structured_entries</code></td><td>Forces Hibernate to store data i=
n the second-level cache in
            a more human-friendly format. <p> <span class=3D"strong"><st=
rong>e.g.</strong></span> <code class=3D"literal">true|false</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.cach=
e.default_cache_concurrency_strategy</code></td><td>Setting used to give=
 the name of the default
            <code class=3D"classname">org.hibernate.annotations.CacheCon=
currencyStrategy</code>
            to use when either <code class=3D"classname">@Cacheable</cod=
e> or
            <code class=3D"classname">@Cache</code> is used.
            <code class=3D"code">@Cache(strategy=3D"..")</code> is used =
to override this
            default.</td></tr></tbody></table></div></div><br class=3D"t=
able-break"/><div class=3D"table"><a id=3D"configuration-transaction-pro=
perties"/><p class=3D"title"><b>Table=C2=A03.6.=C2=A0Hibernate Transacti=
on Properties</b></p><div class=3D"table-contents"><table summary=3D"Hib=
ernate Transaction Properties" border=3D"1"><colgroup><col/><col/></colg=
roup><thead><tr><th>Property name</th><th>Purpose</th></tr></thead><tbod=
y><tr><td><code class=3D"literal">hibernate.transaction.factory_class</c=
ode></td><td>The classname of a <code class=3D"literal">TransactionFacto=
ry</code> to
            use with Hibernate <code class=3D"literal">Transaction</code=
> API (defaults to
            <code class=3D"literal">JDBCTransactionFactory</code>). <p> =
<span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">classname.of.TransactionFactory</cod=
e> </p></td></tr><tr><td><code class=3D"literal">jta.UserTransaction</co=
de></td><td>A JNDI name used by
            <code class=3D"literal">JTATransactionFactory</code> to obta=
in the JTA
            <code class=3D"literal">UserTransaction</code> from the appl=
ication server.
            <p> <span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">jndi/composite/name</code> </p></td>=
</tr><tr><td><code class=3D"literal">hibernate.transaction.manager_looku=
p_class</code></td><td>The classname of a
            <code class=3D"literal">TransactionManagerLookup</code>. It =
is required when
            JVM-level caching is enabled or when using hilo generator in=
 a JTA
            environment. <p> <span class=3D"strong"><strong>e.g.</strong=
></span>
            <code class=3D"literal">classname.of.TransactionManagerLooku=
p</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.tran=
saction.flush_before_completion</code></td><td>If enabled, the session w=
ill be automatically flushed
            during the before completion phase of the transaction. Built=
-in
            and automatic session context management is preferred, see <=
a class=3D"xref" href=3D"#architecture-current-session" title=3D"2.3.=C2=
=A0Contextual sessions">Section=C2=A02.3, =E2=80=9CContextual sessions=E2=
=80=9D</a>. <p> <span class=3D"strong"><strong>e.g.</strong></span> <cod=
e class=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr><tr><td><=
code class=3D"literal">hibernate.transaction.auto_close_session</code></=
td><td>If enabled, the session will be automatically closed during
            the after completion phase of the transaction. Built-in and
            automatic session context management is preferred, see <a cl=
ass=3D"xref" href=3D"#architecture-current-session" title=3D"2.3.=C2=A0C=
ontextual sessions">Section=C2=A02.3, =E2=80=9CContextual sessions=E2=80=
=9D</a>. <p> <span class=3D"strong"><strong>e.g.</strong></span> <code c=
lass=3D"literal">true</code> |
            <code class=3D"literal">false</code> </p></td></tr></tbody><=
/table></div></div><br class=3D"table-break"/><div class=3D"table"><a id=
=3D"configuration-misc-properties"/><p class=3D"title"><b>Table=C2=A03.7=
.=C2=A0Miscellaneous Properties</b></p><div class=3D"table-contents"><ta=
ble summary=3D"Miscellaneous Properties" border=3D"1"><colgroup><col/><c=
ol/></colgroup><thead><tr><th>Property name</th><th>Purpose</th></tr></t=
head><tbody><tr><td><code class=3D"literal">hibernate.current_session_co=
ntext_class</code></td><td>Supply a custom strategy for the scoping of t=
he "current"
            <code class=3D"literal">Session</code>. See <a class=3D"xref=
" href=3D"#architecture-current-session" title=3D"2.3.=C2=A0Contextual s=
essions">Section=C2=A02.3, =E2=80=9CContextual sessions=E2=80=9D</a> for=
 more information
            about the built-in strategies. <p> <span class=3D"strong"><s=
trong>e.g.</strong></span> <code class=3D"literal">jta</code> |
            <code class=3D"literal">thread</code> | <code class=3D"liter=
al">managed</code> |
            <code class=3D"literal">custom.Class</code> </p></td></tr><t=
r><td><code class=3D"literal">hibernate.query.factory_class</code></td><=
td>Chooses the HQL parser implementation. <p> <span class=3D"strong"><st=
rong>e.g.</strong></span>
            <code class=3D"literal">org.hibernate.hql.ast.ASTQueryTransl=
atorFactory</code>
            or
            <code class=3D"literal">org.hibernate.hql.classic.ClassicQue=
ryTranslatorFactory</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.quer=
y.substitutions</code></td><td>Is used to map from tokens in Hibernate q=
ueries to SQL
            tokens (tokens might be function or literal names, for examp=
le).
            <p> <span class=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">hqlLiteral=3DSQL_LITERAL, hqlFunctio=
n=3DSQLFUNC</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.hbm2=
ddl.auto</code></td><td>Automatically validates or exports schema DDL to=
 the
            database when the <code class=3D"literal">SessionFactory</co=
de> is created.
            With <code class=3D"literal">create-drop</code>, the databas=
e schema will be
            dropped when the <code class=3D"literal">SessionFactory</cod=
e> is closed
            explicitly. <p> <span class=3D"strong"><strong>e.g.</strong>=
</span>
            <code class=3D"literal">validate</code> | <code class=3D"lit=
eral">update</code> |
            <code class=3D"literal">create</code> | <code class=3D"liter=
al">create-drop</code>
            </p></td></tr><tr><td><code class=3D"literal">hibernate.hbm2=
ddl.import_files</code></td><td><p>Comma-separated names of the optional=
 files
            containing SQL DML statements executed during the
            <code class=3D"classname">SessionFactory</code> creation. Th=
is is useful for
            testing or demoing: by adding INSERT statements for example =
you
            can populate your database with a minimal set of data when i=
t is
            deployed.</p><p>File order matters, the statements of a give=

            file are executed before the statements of the following fil=
es.
            These statements are only executed if the schema is created =
ie if
            <code class=3D"literal">hibernate.hbm2ddl.auto</code> is set=
 to
            <code class=3D"literal">create</code> or
            <code class=3D"literal">create-drop</code>.</p><p> <span cla=
ss=3D"strong"><strong>e.g.</strong></span>
            <code class=3D"literal">/humans.sql,/dogs.sql</code> </p></t=
d></tr><tr><td><code class=3D"literal">hibernate.bytecode.use_reflection=
_optimizer</code></td><td><p>Enables the use of bytecode manipulation in=
stead of
            runtime reflection. This is a System-level property and cann=
ot be
            set in <code class=3D"literal">hibernate.cfg.xml</code>. Ref=
lection can
            sometimes be useful when troubleshooting. Hibernate always
            requires either CGLIB or javassist even if you turn off the
            optimizer.</p><p> <span class=3D"strong"><strong>e.g.</stron=
g></span>
            <code class=3D"literal">true</code> | <code class=3D"literal=
">false</code> </p></td></tr><tr><td><code class=3D"literal">hibernate.b=
ytecode.provider</code></td><td><p>Both javassist or cglib can be used a=
s byte
            manipulation engines; the default is
            <code class=3D"literal">javassist</code>.</p><p> <span class=
=3D"strong"><strong>e.g.</strong></span> <code class=3D"literal">javassi=
st</code> |
            <code class=3D"literal">cglib</code> </p></td></tr></tbody><=
/table></div></div><br class=3D"table-break"/><div class=3D"section" lan=
g=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=
=3D"configuration-optional-dialects"/>3.4.1.=C2=A0SQL Dialects</h3></div=
></div></div><p>Always set the <code class=3D"literal">hibernate.dialect=
</code> property to
      the correct <code class=3D"literal">org.hibernate.dialect.Dialect<=
/code> subclass
      for your database. If you specify a dialect, Hibernate will use se=
nsible
      defaults for some of the other properties listed above. This means=
 that
      you will not have to specify them manually.</p><div class=3D"table=
"><a id=3D"sql-dialects"/><p class=3D"title"><b>Table=C2=A03.8.=C2=A0Hib=
ernate SQL Dialects
        (<code class=3D"literal">hibernate.dialect</code>)</b></p><div c=
lass=3D"table-contents"><table summary=3D"Hibernate SQL Dialects&#xA;   =
     (hibernate.dialect)" border=3D"1"><colgroup><col/><col/></colgroup>=
<thead><tr><th>RDBMS</th><th>Dialect</th></tr></thead><tbody><tr><td>DB2=
</td><td><code class=3D"literal">org.hibernate.dialect.DB2Dialect</code>=
</td></tr><tr><td>DB2 AS/400</td><td><code class=3D"literal">org.hiberna=
te.dialect.DB2400Dialect</code></td></tr><tr><td>DB2 OS390</td><td><code=
 class=3D"literal">org.hibernate.dialect.DB2390Dialect</code></td></tr><=
tr><td>PostgreSQL</td><td><code class=3D"literal">org.hibernate.dialect.=
PostgreSQLDialect</code></td></tr><tr><td>MySQL5</td><td><code class=3D"=
literal">org.hibernate.dialect.MySQL5Dialect</code></td></tr><tr><td>MyS=
QL5 with InnoDB</td><td><code class=3D"literal">org.hibernate.dialect.My=
SQL5InnoDBDialect</code></td></tr><tr><td>MySQL with MyISAM</td><td><cod=
e class=3D"literal">org.hibernate.dialect.MySQLMyISAMDialect</code></td>=
</tr><tr><td>Oracle (any version)</td><td><code class=3D"literal">org.hi=
bernate.dialect.OracleDialect</code></td></tr><tr><td>Oracle 9i</td><td>=
<code class=3D"literal">org.hibernate.dialect.Oracle9iDialect</code></td=
></tr><tr><td>Oracle 10g</td><td><code class=3D"literal">org.hibernate.d=
ialect.Oracle10gDialect</code></td></tr><tr><td>Oracle 11g</td><td><code=
 class=3D"literal">org.hibernate.dialect.Oracle10gDialect</code></td></t=
r><tr><td>Sybase</td><td><code class=3D"literal">org.hibernate.dialect.S=
ybaseASE15Dialect</code></td></tr><tr><td>Sybase Anywhere</td><td><code =
class=3D"literal">org.hibernate.dialect.SybaseAnywhereDialect</code></td=
></tr><tr><td>Microsoft SQL Server 2000</td><td><code class=3D"literal">=
org.hibernate.dialect.SQLServerDialect</code></td></tr><tr><td>Microsoft=
 SQL Server 2005</td><td><code class=3D"literal">org.hibernate.dialect.S=
QLServer2005Dialect</code></td></tr><tr><td>Microsoft SQL Server 2008</t=
d><td><code class=3D"literal">org.hibernate.dialect.SQLServer2008Dialect=
</code></td></tr><tr><td>SAP DB</td><td><code class=3D"literal">org.hibe=
rnate.dialect.SAPDBDialect</code></td></tr><tr><td>Informix</td><td><cod=
e class=3D"literal">org.hibernate.dialect.InformixDialect</code></td></t=
r><tr><td>HypersonicSQL</td><td><code class=3D"literal">org.hibernate.di=
alect.HSQLDialect</code></td></tr><tr><td>H2 Database</td><td><code clas=
s=3D"literal">org.hibernate.dialect.H2Dialect</code></td></tr><tr><td>In=
gres</td><td><code class=3D"literal">org.hibernate.dialect.IngresDialect=
</code></td></tr><tr><td>Progress</td><td><code class=3D"literal">org.hi=
bernate.dialect.ProgressDialect</code></td></tr><tr><td>Mckoi SQL</td><t=
d><code class=3D"literal">org.hibernate.dialect.MckoiDialect</code></td>=
</tr><tr><td>Interbase</td><td><code class=3D"literal">org.hibernate.dia=
lect.InterbaseDialect</code></td></tr><tr><td>Pointbase</td><td><code cl=
ass=3D"literal">org.hibernate.dialect.PointbaseDialect</code></td></tr><=
tr><td>FrontBase</td><td><code class=3D"literal">org.hibernate.dialect.F=
rontbaseDialect</code></td></tr><tr><td>Firebird</td><td><code class=3D"=
literal">org.hibernate.dialect.FirebirdDialect</code></td></tr></tbody><=
/table></div></div><br class=3D"table-break"/></div><div class=3D"sectio=
n" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"=
><a id=3D"configuration-optional-outerjoin"/>3.4.2.=C2=A0Outer Join Fetc=
hing</h3></div></div></div><p>If your database supports ANSI, Oracle or =
Sybase style outer
      joins, <span class=3D"emphasis"><em>outer join fetching</em></span=
> will often increase
      performance by limiting the number of round trips to and from the
      database. This is, however, at the cost of possibly more work perf=
ormed
      by the database itself. Outer join fetching allows a whole graph o=
f
      objects connected by many-to-one, one-to-many, many-to-many and
      one-to-one associations to be retrieved in a single SQL
      <code class=3D"literal">SELECT</code>.</p><p>Outer join fetching c=
an be disabled <span class=3D"emphasis"><em>globally</em></span>
      by setting the property <code class=3D"literal">hibernate.max_fetc=
h_depth</code> to
      <code class=3D"literal">0</code>. A setting of <code class=3D"lite=
ral">1</code> or higher
      enables outer join fetching for one-to-one and many-to-one associa=
tions
      that have been mapped with <code class=3D"literal">fetch=3D"join"<=
/code>.</p><p>See <a class=3D"xref" href=3D"#performance-fetching" title=
=3D"21.1.=C2=A0Fetching strategies">Section=C2=A021.1, =E2=80=9CFetching=
 strategies=E2=80=9D</a> for more
      information.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"configuration-=
optional-binarystreams"/>3.4.3.=C2=A0Binary Streams</h3></div></div></di=
v><p>Oracle limits the size of <code class=3D"literal">byte</code> array=
s that can
      be passed to and/or from its JDBC driver. If you wish to use large=

      instances of <code class=3D"literal">binary</code> or
      <code class=3D"literal">serializable</code> type, you should enabl=
e
      <code class=3D"literal">hibernate.jdbc.use_streams_for_binary</cod=
e>. <span class=3D"emphasis"><em>This
      is a system-level setting only.</em></span></p></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"configuration-optional-cacheprovider"/>3.4.4.=C2=A0Seco=
nd-level and query cache</h3></div></div></div><p>The properties prefixe=
d by <code class=3D"literal">hibernate.cache</code>
      allow you to use a process or cluster scoped second-level cache sy=
stem
      with Hibernate. See the <a class=3D"xref" href=3D"#performance-cac=
he" title=3D"21.2.=C2=A0The Second Level Cache">Section=C2=A021.2, =E2=80=
=9CThe Second Level Cache=E2=80=9D</a> for more
      information.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"configuration-=
optional-querysubstitution"/>3.4.5.=C2=A0Query Language Substitution</h3=
></div></div></div><p>You can define new Hibernate query tokens using
      <code class=3D"literal">hibernate.query.substitutions</code>. For =
example:</p><pre class=3D"programlisting">hibernate.query.substitutions =
true=3D1, false=3D0</pre><p>This would cause the tokens <code class=3D"l=
iteral">true</code> and
      <code class=3D"literal">false</code> to be translated to integer l=
iterals in the
      generated SQL.</p><pre class=3D"programlisting">hibernate.query.su=
bstitutions toLowercase=3DLOWER</pre><p>This would allow you to rename t=
he SQL <code class=3D"literal">LOWER</code>
      function.</p></div><div class=3D"section" lang=3D"en-US"><div clas=
s=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"configuration-opt=
ional-statistics"/>3.4.6.=C2=A0Hibernate statistics</h3></div></div></di=
v><p>If you enable <code class=3D"literal">hibernate.generate_statistics=
</code>,
      Hibernate exposes a number of metrics that are useful when tuning =
a
      running system via <code class=3D"literal">SessionFactory.getStati=
stics()</code>.
      Hibernate can even be configured to expose these statistics via JM=
X.
      Read the Javadoc of the interfaces in
      <code class=3D"literal">org.hibernate.stats</code> for more inform=
ation.</p></div></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"configuration-logging=
"/>3.5.=C2=A0Logging</h2></div></div></div><p>Hibernate utilizes <a clas=
s=3D"ulink" href=3D"http://www.slf4j.org/">Simple Logging
    Facade for Java</a> (SLF4J) in order to log various system events.
    SLF4J can direct your logging output to several logging frameworks (=
NOP,
    Simple, log4j version 1.2, JDK 1.4 logging, JCL or logback) dependin=
g on
    your chosen binding. In order to setup logging you will need
    <code class=3D"filename">slf4j-api.jar</code> in your classpath toge=
ther with the jar
    file for your preferred binding - <code class=3D"filename">slf4j-log=
4j12.jar</code>
    in the case of Log4J. See the SLF4J <a class=3D"ulink" href=3D"http:=
//www.slf4j.org/manual.html">documentation</a> for more
    detail. To use Log4j you will also need to place a
    <code class=3D"filename">log4j.properties</code> file in your classp=
ath. An example
    properties file is distributed with Hibernate in the
    <code class=3D"literal">src/</code> directory.</p><p>It is recommend=
ed that you familiarize yourself with Hibernate's log
    messages. A lot of work has been put into making the Hibernate log a=
s
    detailed as possible, without making it unreadable. It is an essenti=
al
    troubleshooting device. The most interesting log categories are the
    following:</p><div class=3D"table"><a id=3D"log-categories"/><p clas=
s=3D"title"><b>Table=C2=A03.9.=C2=A0Hibernate Log Categories</b></p><div=
 class=3D"table-contents"><table summary=3D"Hibernate Log Categories" bo=
rder=3D"1"><colgroup><col/><col/></colgroup><thead><tr><th>Category</th>=
<th>Function</th></tr></thead><tbody><tr><td><code class=3D"literal">org=
.hibernate.SQL</code></td><td>Log all SQL DML statements as they are exe=
cuted</td></tr><tr><td><code class=3D"literal">org.hibernate.type</code>=
</td><td>Log all JDBC parameters</td></tr><tr><td><code class=3D"literal=
">org.hibernate.tool.hbm2ddl</code></td><td>Log all SQL DDL statements a=
s they are executed</td></tr><tr><td><code class=3D"literal">org.hiberna=
te.pretty</code></td><td>Log the state of all entities (max 20 entities)=
 associated
            with the session at flush time</td></tr><tr><td><code class=3D=
"literal">org.hibernate.cache</code></td><td>Log all second-level cache =
activity</td></tr><tr><td><code class=3D"literal">org.hibernate.transact=
ion</code></td><td>Log transaction related activity</td></tr><tr><td><co=
de class=3D"literal">org.hibernate.jdbc</code></td><td>Log all JDBC reso=
urce acquisition</td></tr><tr><td><code class=3D"literal">org.hibernate.=
hql.ast.AST</code></td><td>Log HQL and SQL ASTs during query parsing</td=
></tr><tr><td><code class=3D"literal">org.hibernate.secure</code></td><t=
d>Log all JAAS authorization requests</td></tr><tr><td><code class=3D"li=
teral">org.hibernate</code></td><td>Log everything. This is a lot of inf=
ormation but it is
            useful for troubleshooting</td></tr></tbody></table></div></=
div><br class=3D"table-break"/><p>When developing applications with Hibe=
rnate, you should almost
    always work with <code class=3D"literal">debug</code> enabled for th=
e category
    <code class=3D"literal">org.hibernate.SQL</code>, or, alternatively,=
 the property
    <code class=3D"literal">hibernate.show_sql</code> enabled.</p></div>=
<div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div=
><h2 class=3D"title"><a id=3D"configuration-namingstrategy"/>3.6.=C2=A0I=
mplementing a <code class=3D"literal">NamingStrategy</code></h2></div></=
div></div><p>The interface <code class=3D"literal">org.hibernate.cfg.Nam=
ingStrategy</code>
    allows you to specify a "naming standard" for database objects and s=
chema
    elements.</p><p>You can provide rules for automatically generating d=
atabase
    identifiers from Java identifiers or for processing "logical" column=
 and
    table names given in the mapping file into "physical" table and colu=
mn
    names. This feature helps reduce the verbosity of the mapping docume=
nt,
    eliminating repetitive noise (<code class=3D"literal">TBL_</code> pr=
efixes, for
    example). The default strategy used by Hibernate is quite minimal.</=
p><p>You can specify a different strategy by calling
    <code class=3D"literal">Configuration.setNamingStrategy()</code> bef=
ore adding
    mappings:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_typ=
e">SessionFactory</span><!-- <br/> --><span class=3D"java_plain">&nbsp;s=
f&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!--=
 <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cl=
ass=3D"java_keyword">new</span><!-- <br/> --><span class=3D"java_plain">=
&nbsp;</span><!-- <br/> --><span class=3D"java_type">Configuration</span=
><!-- <br/> --><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setNam=
ingStrategy</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">ImprovedNamingStrategy</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">INSTANCE</span><span class=3D"java_sep=
arator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addFil=
e</span><span class=3D"java_separator">(</span><span class=3D"java_liter=
al">&quot;Item.hbm.xml&quot;</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addFil=
e</span><span class=3D"java_separator">(</span><span class=3D"java_liter=
al">&quot;Bid.hbm.xml&quot;</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">buildS=
essionFactory</span><span class=3D"java_separator">();</span></pre><p><c=
ode class=3D"literal">org.hibernate.cfg.ImprovedNamingStrategy</code> is=
 a
    built-in strategy that might be a useful starting point for some
    applications.</p></div><div class=3D"section" lang=3D"en-US"><div cl=
ass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"d0e3362"/>3.7.=C2=
=A0Implementing a PersisterClassProvider</h2></div></div></div><p>You ca=
n configure the persister implementation used to persist your
    entities and collections:</p><div class=3D"itemizedlist"><ul><li><p>=
by default, Hibernate uses persisters that make sense in a
        relational model and follow Java Persistence's specification</p>=
</li><li><p>you can define a <code class=3D"classname">PersisterClassPro=
vider</code>
        implementation that provides the persister class used of a given=

        entity or collection</p></li><li><p>finally, you can override th=
em on a per entity and collection
        basis in the mapping using <code class=3D"classname">@Persister<=
/code> or its
        XML equivalent</p></li></ul></div><p>The latter in the list the =
higher in priority.</p><p>You can pass the <code class=3D"classname">Per=
sisterClassProvider</code>
    instance to the <code class=3D"classname">Configuration</code> objec=
t.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">SessionF=
actory</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sf&nbsp;</sp=
an><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java=
_keyword">new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</spa=
n><!-- <br/> --><span class=3D"java_type">Configuration</span><!-- <br/>=
 --><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPer=
sisterClassProvider</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">customPersisterClassProvider</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addAnn=
otatedClass</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">Order</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_keyword">class</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">buildS=
essionFactory</span><span class=3D"java_separator">();</span></pre><p>Th=
e persister class provider methods, when returning a non null
    persister class, override the default Hibernate persisters. The enti=
ty
    name or the collection role are passed to the methods. It is a nice =
way to
    centralize the overriding logic of the persisters instead of spreadi=
ng
    them on each entity or collection mapping.</p></div><div class=3D"se=
ction" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"ti=
tle"><a id=3D"configuration-xmlconfig"/>3.8.=C2=A0XML configuration file=
</h2></div></div></div><p>An alternative approach to configuration is to=
 specify a full
    configuration in a file named <code class=3D"literal">hibernate.cfg.=
xml</code>. This
    file can be used as a replacement for the
    <code class=3D"literal">hibernate.properties</code> file or, if both=
 are present, to
    override properties.</p><p>The XML configuration file is by default =
expected to be in the root
    of your <code class=3D"literal">CLASSPATH</code>. Here is an example=
:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jh=
ighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D'1.0'=
&nbsp;encoding=3D'utf-8'?&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-config=
uration</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_value">&quot;-//Hibernate/Hibernate&nbsp;Configuration&nbs=
p;DTD//EN&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_value">&quot;http://www.hibernate.org/dtd/hibernate-config=
uration-3.0.dtd&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-configuration</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;a&nbsp;SessionFactory&nbsp;instance&nbsp;liste=
d&nbsp;as&nbsp;/jndi/name&nbsp;--&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">session-factory=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">name</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;java:=
hibernate/SessionFactory&quot;</span><span class=3D"xml_tag_symbols">&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;properties&nbsp;--&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;connection.datasource&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain">java:/comp/env/jdbc/MyDB</span><span class=3D"xml_tag_symbols">&=
lt;/</span><span class=3D"xml_tag_name">property</span><span class=3D"xm=
l_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;dialect&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">org.hi=
bernate.dialect.MySQLDialect</span><span class=3D"xml_tag_symbols">&lt;/=
</span><span class=3D"xml_tag_name">property</span><span class=3D"xml_ta=
g_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;show_sql&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">false=
</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_ta=
g_name">property</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;transaction.factory_cla=
ss&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;org.hibernate.transaction.JTATransactionFactor=
y</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">property</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;jta.UserTransaction&quo=
t;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain">java:comp/UserTransaction</span><span class=3D"xml_tag_symbols">&l=
t;/</span><span class=3D"xml_tag_name">property</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;mapping&nbsp;files&nbs=
p;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">mapping</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">resource</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org/hibernate/auctio=
n/Item.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">mapping</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">resource</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;org/hibernate/auctio=
n/Bid.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;cache&nbsp;settings&nb=
sp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">class-cache</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.aucti=
on.Item&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">usage</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;read-write&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">class-cache</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.aucti=
on.Bid&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">usage</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;read-only&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">collection-cache</span><span class=3D"xml_plain">&nbsp;</span><=
span class=3D"xml_attribute_name">collection</span><span class=3D"xml_ta=
g_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;org.hiber=
nate.auction.Item.bids&quot;</span><span class=3D"xml_plain">&nbsp;</spa=
n><span class=3D"xml_attribute_name">usage</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;read-write&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">session-factor=
y</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-configuration</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
</pre><p>The advantage of this approach is the externalization of the ma=
pping
    file names to configuration. The <code class=3D"literal">hibernate.c=
fg.xml</code> is
    also more convenient once you have to tune the Hibernate cache. It i=
s your
    choice to use either <code class=3D"literal">hibernate.properties</c=
ode> or
    <code class=3D"literal">hibernate.cfg.xml</code>. Both are equivalen=
t, except for the
    above mentioned benefits of using the XML syntax.</p><p>With the XML=
 configuration, starting Hibernate is then as simple
    as:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRen=
dererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Ses=
sionFactory</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sf&nbsp=
;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/>=
 --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_keyword">new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;=
</span><!-- <br/> --><span class=3D"java_type">Configuration</span><!-- =
<br/> --><span class=3D"java_separator">().</span><!-- <br/> --><span cl=
ass=3D"java_plain">configure</span><!-- <br/> --><span class=3D"java_sep=
arator">().</span><!-- <br/> --><span class=3D"java_plain">buildSessionF=
actory</span><!-- <br/> --><span class=3D"java_separator">();</span></pr=
e><p>You can select a different XML configuration file using:</p><pre xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" clas=
s=3D"JAVA"><!-- <br/> --><span class=3D"java_type">SessionFactory</span>=
<!-- <br/> --><span class=3D"java_plain">&nbsp;sf&nbsp;</span><!-- <br/>=
 --><span class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> =
--><span class=3D"java_type">Configuration</span><!-- <br/> --><span cla=
ss=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">config=
ure</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">&quot;catdb.cfg.xml&quot;</span><span class=3D"java_separator">)</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">buildS=
essionFactory</span><span class=3D"java_separator">();</span></pre></div=
><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><di=
v><h2 class=3D"title"><a id=3D"configuration-j2ee"/>3.9.=C2=A0Java EE Ap=
plication Server integration</h2></div></div></div><p>Hibernate has the =
following integration points for J2EE
    infrastructure:</p><div class=3D"itemizedlist"><ul><li><p><span clas=
s=3D"emphasis"><em>Container-managed datasources</em></span>: Hibernate
        can use JDBC connections managed by the container and provided t=
hrough
        JNDI. Usually, a JTA compatible <code class=3D"literal">Transact=
ionManager</code>
        and a <code class=3D"literal">ResourceManager</code> take care o=
f transaction
        management (CMT), especially distributed transaction handling ac=
ross
        several datasources. You can also demarcate transaction boundari=
es
        programmatically (BMT), or you might want to use the optional
        Hibernate <code class=3D"literal">Transaction</code> API for thi=
s to keep your
        code portable.</p></li></ul></div><div class=3D"itemizedlist"><u=
l><li><p><span class=3D"emphasis"><em>Automatic JNDI binding</em></span>=
: Hibernate can bind
        its <code class=3D"literal">SessionFactory</code> to JNDI after =
startup.</p></li></ul></div><div class=3D"itemizedlist"><ul><li><p><span=
 class=3D"emphasis"><em>JTA Session binding:</em></span> the Hibernate
        <code class=3D"literal">Session</code> can be automatically boun=
d to the scope of
        JTA transactions. Simply lookup the <code class=3D"literal">Sess=
ionFactory</code>
        from JNDI and get the current <code class=3D"literal">Session</c=
ode>. Let
        Hibernate manage flushing and closing the <code class=3D"literal=
">Session</code>
        when your JTA transaction completes. Transaction demarcation is =
either
        declarative (CMT) or programmatic (BMT/UserTransaction).</p></li=
></ul></div><div class=3D"itemizedlist"><ul><li><p><span class=3D"emphas=
is"><em>JMX deployment:</em></span> if you have a JMX capable
        application server (e.g. JBoss AS), you can choose to deploy Hib=
ernate
        as a managed MBean. This saves you the one line startup code to =
build
        your <code class=3D"literal">SessionFactory</code> from a
        <code class=3D"literal">Configuration</code>. The container will=
 startup your
        <code class=3D"literal">HibernateService</code> and also take ca=
re of service
        dependencies (datasource has to be available before Hibernate st=
arts,
        etc).</p></li></ul></div><p>Depending on your environment, you m=
ight have to set the
    configuration option
    <code class=3D"literal">hibernate.connection.aggressive_release</cod=
e> to true if your
    application server shows "connection containment" exceptions.</p><di=
v class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h=
3 class=3D"title"><a id=3D"configuration-optional-transactionstrategy"/>=
3.9.1.=C2=A0Transaction strategy configuration</h3></div></div></div><p>=
The Hibernate <code class=3D"literal">Session</code> API is independent =
of any
      transaction demarcation system in your architecture. If you let
      Hibernate use JDBC directly through a connection pool, you can beg=
in and
      end your transactions by calling the JDBC API. If you run in a J2E=
E
      application server, you might want to use bean-managed transaction=
s and
      call the JTA API and <code class=3D"literal">UserTransaction</code=
> when
      needed.</p><p>To keep your code portable between these two (and ot=
her)
      environments we recommend the optional Hibernate
      <code class=3D"literal">Transaction</code> API, which wraps and hi=
des the underlying
      system. You have to specify a factory class for
      <code class=3D"literal">Transaction</code> instances by setting th=
e Hibernate
      configuration property
      <code class=3D"literal">hibernate.transaction.factory_class</code>=
.</p><p>There are three standard, or built-in, choices:</p><div class=3D=
"variablelist"><dl><dt><span class=3D"term"><code class=3D"literal">org.=
hibernate.transaction.JDBCTransactionFactory</code></span></dt><dd><p>de=
legates to database (JDBC) transactions (default)</p></dd><dt><span clas=
s=3D"term"><code class=3D"literal">org.hibernate.transaction.JTATransact=
ionFactory</code></span></dt><dd><p>delegates to container-managed trans=
actions if an existing
            transaction is underway in this context (for example, EJB se=
ssion
            bean method). Otherwise, a new transaction is started and
            bean-managed transactions are used.</p></dd><dt><span class=3D=
"term"><code class=3D"literal">org.hibernate.transaction.CMTTransactionF=
actory</code></span></dt><dd><p>delegates to container-managed JTA trans=
actions</p></dd></dl></div><p>You can also define your own transaction s=
trategies (for a CORBA
      transaction service, for example).</p><p>Some features in Hibernat=
e (i.e., the second level cache,
      Contextual Sessions with JTA, etc.) require access to the JTA
      <code class=3D"literal">TransactionManager</code> in a managed env=
ironment. In an
      application server, since J2EE does not standardize a single mecha=
nism,
      you have to specify how Hibernate should obtain a reference to the=

      <code class=3D"literal">TransactionManager</code>:</p><div class=3D=
"table"><a id=3D"jtamanagerlookup"/><p class=3D"title"><b>Table=C2=A03.1=
0.=C2=A0JTA TransactionManagers</b></p><div class=3D"table-contents"><ta=
ble summary=3D"JTA TransactionManagers" border=3D"1"><colgroup><col/><co=
l/></colgroup><thead><tr><th>Transaction Factory</th><th align=3D"center=
">Application Server</th></tr></thead><tbody><tr><td><code class=3D"lite=
ral">org.hibernate.transaction.JBossTransactionManagerLookup</code></td>=
<td align=3D"center">JBoss AS</td></tr><tr><td><code class=3D"literal">o=
rg.hibernate.transaction.WeblogicTransactionManagerLookup</code></td><td=
 align=3D"center">Weblogic</td></tr><tr><td><code class=3D"literal">org.=
hibernate.transaction.WebSphereTransactionManagerLookup</code></td><td a=
lign=3D"center">WebSphere</td></tr><tr><td><code class=3D"literal">org.h=
ibernate.transaction.WebSphereExtendedJTATransactionLookup</code></td><t=
d align=3D"center">WebSphere 6</td></tr><tr><td><code class=3D"literal">=
org.hibernate.transaction.OrionTransactionManagerLookup</code></td><td a=
lign=3D"center">Orion</td></tr><tr><td><code class=3D"literal">org.hiber=
nate.transaction.ResinTransactionManagerLookup</code></td><td align=3D"c=
enter">Resin</td></tr><tr><td><code class=3D"literal">org.hibernate.tran=
saction.JOTMTransactionManagerLookup</code></td><td align=3D"center">JOT=
M</td></tr><tr><td><code class=3D"literal">org.hibernate.transaction.JOn=
ASTransactionManagerLookup</code></td><td align=3D"center">JOnAS</td></t=
r><tr><td><code class=3D"literal">org.hibernate.transaction.JRun4Transac=
tionManagerLookup</code></td><td align=3D"center">JRun4</td></tr><tr><td=
><code class=3D"literal">org.hibernate.transaction.BESTransactionManager=
Lookup</code></td><td align=3D"center">Borland ES</td></tr><tr><td><code=
 class=3D"literal">org.hibernate.transaction.JBossTSStandaloneTransactio=
nManagerLookup</code></td><td align=3D"center">JBoss TS used standalone =
(ie. outside
              JBoss AS and a JNDI environment generally). Known to work =
for
              <code class=3D"literal">org.jboss.jbossts:jbossjta:4.11.0.=
Final</code></td></tr></tbody></table></div></div><br class=3D"table-bre=
ak"/></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage=
"><div><div><h3 class=3D"title"><a id=3D"configuration-optional-jndi"/>3=
.9.2.=C2=A0JNDI-bound <code class=3D"literal">SessionFactory</code></h3>=
</div></div></div><p>A JNDI-bound Hibernate <code class=3D"literal">Sess=
ionFactory</code> can
      simplify the lookup function of the factory and create new
      <code class=3D"literal">Session</code>s. This is not, however, rel=
ated to a JNDI
      bound <code class=3D"literal">Datasource</code>; both simply use t=
he same
      registry.</p><p>If you wish to have the <code class=3D"literal">Se=
ssionFactory</code> bound to
      a JNDI namespace, specify a name (e.g.
      <code class=3D"literal">java:hibernate/SessionFactory</code>) usin=
g the property
      <code class=3D"literal">hibernate.session_factory_name</code>. If =
this property is
      omitted, the <code class=3D"literal">SessionFactory</code> will no=
t be bound to
      JNDI. This is especially useful in environments with a read-only J=
NDI
      default implementation (in Tomcat, for example).</p><p>When bindin=
g the <code class=3D"literal">SessionFactory</code> to JNDI,
      Hibernate will use the values of <code class=3D"literal">hibernate=
.jndi.url</code>,
      <code class=3D"literal">hibernate.jndi.class</code> to instantiate=
 an initial
      context. If they are not specified, the default
      <code class=3D"literal">InitialContext</code> will be used.</p><p>=
Hibernate will automatically place the
      <code class=3D"literal">SessionFactory</code> in JNDI after you ca=
ll
      <code class=3D"literal">cfg.buildSessionFactory()</code>. This mea=
ns you will have
      this call in some startup code, or utility class in your applicati=
on,
      unless you use JMX deployment with the
      <code class=3D"literal">HibernateService</code> (this is discussed=
 later in greater
      detail).</p><p>If you use a JNDI <code class=3D"literal">SessionFa=
ctory</code>, an EJB or any
      other class, you can obtain the <code class=3D"literal">SessionFac=
tory</code> using
      a JNDI lookup.</p><p>It is recommended that you bind the
      <code class=3D"literal">SessionFactory</code> to JNDI in a managed=
 environment and
      use a <code class=3D"literal">static</code> singleton otherwise. T=
o shield your
      application code from these details, we also recommend to hide the=

      actual lookup code for a <code class=3D"literal">SessionFactory</c=
ode> in a helper
      class, such as <code class=3D"literal">HibernateUtil.getSessionFac=
tory()</code>.
      Note that such a class is also a convenient way to startup Hiberna=
te=E2=80=94see
      chapter 1.</p></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"configuration-j2=
ee-currentsession"/>3.9.3.=C2=A0Current Session context management with =
JTA</h3></div></div></div><p>The easiest way to handle <code class=3D"li=
teral">Sessions</code> and
      transactions is Hibernate's automatic "current"
      <code class=3D"literal">Session</code> management. For a discussio=
n of contextual
      sessions see <a class=3D"xref" href=3D"#architecture-current-sessi=
on" title=3D"2.3.=C2=A0Contextual sessions">Section=C2=A02.3, =E2=80=9CC=
ontextual sessions=E2=80=9D</a>. Using the
      <code class=3D"literal">"jta"</code> session context, if there is =
no Hibernate
      <code class=3D"literal">Session</code> associated with the current=
 JTA transaction,
      one will be started and associated with that JTA transaction the f=
irst
      time you call <code class=3D"literal">sessionFactory.getCurrentSes=
sion()</code>. The
      <code class=3D"literal">Session</code>s retrieved via
      <code class=3D"literal">getCurrentSession()</code> in the <code cl=
ass=3D"literal">"jta"</code>
      context are set to automatically flush before the transaction comp=
letes,
      close after the transaction completes, and aggressively release JD=
BC
      connections after each statement. This allows the
      <code class=3D"literal">Session</code>s to be managed by the life =
cycle of the JTA
      transaction to which it is associated, keeping user code clean of =
such
      management concerns. Your code can either use JTA programmatically=

      through <code class=3D"literal">UserTransaction</code>, or (recomm=
ended for portable
      code) use the Hibernate <code class=3D"literal">Transaction</code>=
 API to set
      transaction boundaries. If you run in an EJB container, declarativ=
e
      transaction demarcation with CMT is preferred.</p></div><div class=
=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=
=3D"title"><a id=3D"configuration-j2ee-jmx"/>3.9.4.=C2=A0JMX deployment<=
/h3></div></div></div><p>The line <code class=3D"literal">cfg.buildSessi=
onFactory()</code> still has to
      be executed somewhere to get a <code class=3D"literal">SessionFact=
ory</code> into
      JNDI. You can do this either in a <code class=3D"literal">static</=
code> initializer
      block, like the one in <code class=3D"literal">HibernateUtil</code=
>, or you can
      deploy Hibernate as a <span class=3D"emphasis"><em>managed service=
</em></span>.</p><p>Hibernate is distributed with
      <code class=3D"literal">org.hibernate.jmx.HibernateService</code> =
for deployment on
      an application server with JMX capabilities, such as JBoss AS. The=

      actual deployment and configuration is vendor-specific. Here is an=

      example <code class=3D"literal">jboss-service.xml</code> for JBoss=
 4.0.x:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRen=
dererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (htt=
p://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
server</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
mbean</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">code</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;org.hibernate.jmx.HibernateService&=
quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;jboss.jca:service=3DHibernate=
Factory,name=3DHibernateFactory&quot;</span><span class=3D"xml_tag_symbo=
ls">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Required&nbsp;services&nbsp;--&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">depends</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">jbos=
s.jca:service=3DRARDeployer</span><span class=3D"xml_tag_symbols">&lt;/<=
/span><span class=3D"xml_tag_name">depends</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">depends</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">jbos=
s.jca:service=3DLocalTxCM,name=3DHsqlDS</span><span class=3D"xml_tag_sym=
bols">&lt;/</span><span class=3D"xml_tag_name">depends</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Bind&nbsp;the&nbsp;Hibernate&nbsp;service&nbsp=
;to&nbsp;JNDI&nbsp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;JndiName&quot;</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">java:/hibernate/SessionFacto=
ry</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">attribute</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Datasource&nbsp;settings&nbsp;--&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;Datasource&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain">java:HsqlDS</span><span cl=
ass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">attribu=
te</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;Dialect&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain">org.hibernate.dialect.HSQLDia=
lect</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xm=
l_tag_name">attribute</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Transaction&nbsp;integration&nbsp;--&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;TransactionStrategy&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;org.hibernate.transaction.JTATransactionFactory</span><span class=3D"x=
ml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;TransactionManagerLookupStrategy&quot;</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;org.hibernate.transaction.JBossTransactionManagerLookup</span><span cl=
ass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">attribu=
te</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;FlushBeforeCompletionEnabled&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">true</sp=
an><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_na=
me">attribute</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;AutoCloseSessionEnabled&quot;</span><span clas=
s=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">true</span><s=
pan class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">a=
ttribute</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Fetching&nbsp;options&nbsp;--&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;MaximumFetchDepth&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain">5</span><span class=
=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">attribute<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Second-level&nbsp;caching&nbsp;--&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;SecondLevelCacheEnabled&quot;</span><span clas=
s=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">true</span><s=
pan class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">a=
ttribute</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;CacheProviderClass&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain">org.hibernate.cach=
e.EhCacheProvider</span><span class=3D"xml_tag_symbols">&lt;/</span><spa=
n class=3D"xml_tag_name">attribute</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;QueryCacheEnabled&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain">true</span><span cl=
ass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">attribu=
te</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Logging&nbsp;--&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;ShowSqlEnabled&quot;</span><span class=3D"xml_=
tag_symbols">&gt;</span><span class=3D"xml_plain">true</span><span class=
=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">attribute<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;Mapping&nbsp;files&nbsp;--&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">attribute</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;MapResources&quot;</span><span class=3D"xml_ta=
g_symbols">&gt;</span><span class=3D"xml_plain">auction/Item.hbm.xml,auc=
tion/Category.hbm.xml</span><span class=3D"xml_tag_symbols">&lt;/</span>=
<span class=3D"xml_tag_name">attribute</span><span class=3D"xml_tag_symb=
ols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>mbean</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>server</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
</pre><p>This file is deployed in a directory called
      <code class=3D"literal">META-INF</code> and packaged in a JAR file=
 with the
      extension <code class=3D"literal">.sar</code> (service archive). Y=
ou also need to
      package Hibernate, its required third-party libraries, your compil=
ed
      persistent classes, as well as your mapping files in the same arch=
ive.
      Your enterprise beans (usually session beans) can be kept in their=
 own
      JAR file, but you can include this EJB JAR file in the main servic=
e
      archive to get a single (hot-)deployable unit. Consult the JBoss A=
S
      documentation for more information about JMX service and EJB
      deployment.</p></div></div></div><div class=3D"chapter" lang=3D"en=
-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"per=
sistent-classes"/>Chapter=C2=A04.=C2=A0Persistent Classes</h2></div></di=
v></div><div class=3D"toc"><dl><dt><span class=3D"section"><a href=3D"#p=
ersistent-classes-pojo">4.1. A simple POJO example</a></span></dt><dd><d=
l><dt><span class=3D"section"><a href=3D"#persistent-classes-pojo-constr=
uctor">4.1.1. Implement a no-argument constructor</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"#persistent-classes-pojo-identifier">4.1=
.2. Provide an identifier property</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"#persistent-classes-pojo-final">4.1.3. Prefer non-final=
 classes (semi-optional)</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"#persistent-classes-pojo-accessors">4.1.4. Declare accessors and =
mutators for persistent fields (optional)</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"#persistent-classes-inheritance">4.2. =
Implementing inheritance</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"#persistent-classes-equalshashcode">4.3. Implementing equals() an=
d
    hashCode()</a></span></dt><dt><span class=3D"section"><a href=3D"#pe=
rsistent-classes-dynamicmodels">4.4. Dynamic models</a></span></dt><dt><=
span class=3D"section"><a href=3D"#persistent-classes-tuplizers">4.5. Tu=
plizers</a></span></dt><dt><span class=3D"section"><a href=3D"#persisten=
t-classes-entity-name-resolver">4.6. EntityNameResolvers</a></span></dt>=
</dl></div><p>
        Persistent classes are classes in an application that implement =
the entities of the business problem
        (e.g. Customer and Order in an E-commerce application).  The ter=
m "persistent" here means that the classes
        are able to be persisted, not that they are in the persistent st=
ate (see <a class=3D"xref" href=3D"#objectstate-overview" title=3D"11.1.=
=C2=A0Hibernate object states">Section=C2=A011.1, =E2=80=9CHibernate obj=
ect states=E2=80=9D</a>
        for discussion).
    </p><p>
        Hibernate works best if these classes follow some simple rules, =
also known as the Plain Old Java Object (POJO)
        programming model. However, none of these rules are hard require=
ments. Indeed, Hibernate assumes very little
        about the nature of your persistent objects. You can express a d=
omain model in other ways (using trees of
        <code class=3D"interfacename">java.util.Map</code> instances, fo=
r example).
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"persistent-classes-pojo"/>4.1.=C2=A0=
A simple POJO example</h2></div></div></div><div class=3D"example"><a id=
=3D"persistent-classes-pojo-example-cat"/><p class=3D"title"><b>Example=C2=
=A04.1.=C2=A0Simple POJO representing a cat</b></p><div class=3D"example=
-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRen=
dererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword">=
package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;eg</span><!=
-- <br/> --><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Set</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Date</span><span class=3D"java_separator">;</s=
pan>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan>
<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Long</span><span clas=
s=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">;</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">//<=
/span><span class=3D"java_plain">&nbsp;identifier</span>
</span>
<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Date</span><span clas=
s=3D"java_plain">&nbsp;birthdate</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Color</span><span cla=
ss=3D"java_plain">&nbsp;color</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">char</span><span clas=
s=3D"java_plain">&nbsp;sex</span><span class=3D"java_separator">;</span>=

<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">float</span><span cla=
ss=3D"java_plain">&nbsp;weight</span><span class=3D"java_separator">;</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">int</span><span class=3D"java_plain=
">&nbsp;litterId</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Cat</span><span class=3D"java_plain=
">&nbsp;mother</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Set</span><span class=3D"java_plain=
">&nbsp;kittens&nbsp;</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Has=
hSet</span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">void</span><span class=3D"java_plai=
n">&nbsp;setId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">id</span><span=
 class=3D"java_operator">=3D</span><span class=3D"java_plain">id</span><=
span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tBirthdate</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_type">Date</span><span class=3D"java_plain">&nbsp;date</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;birthdate&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;date</span><span class=3D"java_s=
eparator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Date</span><span class=3D"java_plain=
">&nbsp;getBirthdate</span><span class=3D"java_separator">()</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;birthdate</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tWeight</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">float</span><span class=3D"java_plain">&nbsp;weight</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">weight&nbsp;</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_plain">=
&nbsp;weight</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">float</span><span class=3D"java_plai=
n">&nbsp;getWeight</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;weight</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Color</span><span class=3D"java_plai=
n">&nbsp;getColor</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;color</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tColor</span><span class=3D"java_separator">(</span><span class=3D"java_=
type">Color</span><span class=3D"java_plain">&nbsp;color</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">color&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;color</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tSex</span><span class=3D"java_separator">(</span><span class=3D"java_ty=
pe">char</span><span class=3D"java_plain">&nbsp;sex</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">sex</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_plain">sex</span=
><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">char</span><span class=3D"java_plain=
">&nbsp;getSex</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;sex</span><span class=3D"java_separator">;</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tLitterId</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_type">int</span><span class=3D"java_plain">&nbsp;id</span><span class=
=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">litterId&nbsp;=
</span><span class=3D"java_operator">=3D</span><span class=3D"java_plain=
">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_plain"=
>&nbsp;getLitterId</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;litterId</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tMother</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Cat</span><span class=3D"java_plain">&nbsp;mother</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">mother&nbsp;</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_plain">=
&nbsp;mother</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Cat</span><span class=3D"java_plain"=
>&nbsp;getMother</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;mother</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tKittens</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_type">Set</span><span class=3D"java_plain">&nbsp;kittens</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">kittens&nbsp;<=
/span><span class=3D"java_operator">=3D</span><span class=3D"java_plain"=
>&nbsp;kittens</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_plain"=
>&nbsp;getKittens</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;kittens</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
addKitten&nbsp;not&nbsp;needed&nbsp;by&nbsp;</span><span class=3D"java_t=
ype">Hibernate</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;addKitten</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp;kitten</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;kitten</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">setMother</span><span class=3D"java_separator">(=
</span><span class=3D"java_keyword">this</span><span class=3D"java_separ=
ator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;kitten<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
setLitterId</span><span class=3D"java_separator">(</span><span class=3D"=
java_plain">&nbsp;kittens</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">size</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;kittens</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">add</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_plain">kitten</span><span class=3D"java_separator"=
>);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>
            The four main rules of persistent classes are explored in mo=
re detail in the following sections.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"persistent-classes-pojo-constr=
uctor"/>4.1.1.=C2=A0Implement a no-argument constructor</h3></div></div>=
</div><p>
                <code class=3D"classname">Cat</code> has a no-argument c=
onstructor. All persistent classes must have a default
                constructor (which can be non-public) so that Hibernate =
can instantiate them using
                <code class=3D"literal"><code class=3D"classname">java.l=
ang.reflect.Constructor</code>.newInstance()</code>.  It is recommended
                that this constructor be defined with at least <span cla=
ss=3D"emphasis"><em>package</em></span> visibility in order for
                runtime proxy generation to work properly.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"persistent-classes-po=
jo-identifier"/>4.1.2.=C2=A0Provide an identifier property</h3></div></d=
iv></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory"=
 class=3D"note"><h2>Note</h2><p>
                    Historically this was considered option.  While stil=
l not (yet) enforced, this should be considered
                    a deprecated feature as it will be completely requir=
ed to provide a identifier property in an
                    upcoming release.
                </p></div><p>
                <code class=3D"classname">Cat</code> has a property name=
d <code class=3D"literal">id</code>.  This property maps to the
                primary key column(s) of the underlying database table. =
 The type of the identifier property can
                be any "basic" type (see <a class=3D"xref" href=3D"#">??=
?</a>).  See <a class=3D"xref" href=3D"#components-compositeid" title=3D=
"9.4.=C2=A0Components as composite identifiers">Section=C2=A09.4, =E2=80=
=9CComponents as composite identifiers=E2=80=9D</a>
                for information on mapping composite (multi-column) iden=
tifiers.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    Identifiers do not necessarily need to identify colu=
mn(s) in the database physically defined
                    as a primary key.  They should just identify columns=
 that can be used to uniquely identify rows
                    in the underlying table.
                </p></div><p>
                We recommend that you declare consistently-named identif=
ier properties on persistent classes and that you use
                a nullable (i.e., non-primitive) type.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"persistent-classes-po=
jo-final"/>4.1.3.=C2=A0Prefer non-final classes (semi-optional)</h3></di=
v></div></div><p>
                A central feature of Hibernate, <span class=3D"emphasis"=
><em>proxies</em></span> (lazy loading), depends upon the
                persistent class being either non-final, or the implemen=
tation of an interface that declares all public
                methods.  You can persist <code class=3D"literal">final<=
/code> classes that do not implement an interface with
                Hibernate; you will not, however, be able to use proxies=
 for lazy association fetching which will
                ultimately limit your options for performance tuning.  T=
o persist a <code class=3D"literal">final</code>
                class which does not implement a "full" interface you mu=
st disable proxy generation.  See
                <a class=3D"xref" href=3D"#persistent-classes-pojo-final=
-example-disable-proxies-xml" title=3D"Example=C2=A04.2.=C2=A0Disabling =
proxies in hbm.xml">Example=C2=A04.2, =E2=80=9CDisabling proxies in hbm.=
xml=E2=80=9D</a> and
                <a class=3D"xref" href=3D"#persistent-classes-pojo-final=
-example-disable-proxies-ann" title=3D"Example=C2=A04.3.=C2=A0Disabling =
proxies in annotations">Example=C2=A04.3, =E2=80=9CDisabling proxies in =
annotations=E2=80=9D</a>.
            </p><div class=3D"example"><a id=3D"persistent-classes-pojo-=
final-example-disable-proxies-xml"/><p class=3D"title"><b>Example=C2=A04=
.2.=C2=A0Disabling proxies in <code class=3D"literal">hbm.xml</code></b>=
</p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generate=
d by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Cat&quot;</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">lazy</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;false&quot;</span><span class=3D"xml_plain">...</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">...</span><span c=
lass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"persistent-classes-pojo-final-example-disable-proxies-ann"/><p cl=
ass=3D"title"><b>Example=C2=A04.3.=C2=A0Disabling proxies in annotations=
</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> -->=
<span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_typ=
e">Entity</span><!-- <br/> --><span class=3D"java_plain">&nbsp;@</span><=
!-- <br/> --><span class=3D"java_type">Proxy</span><!-- <br/> --><span c=
lass=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_plain"=
>lazy</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <=
br/> --><span class=3D"java_literal">false</span><!-- <br/> --><span cla=
ss=3D"java_separator">)</span><!-- <br/> --><span class=3D"java_plain">&=
nbsp;</span><!-- <br/> --><span class=3D"java_keyword">public</span><!--=
 <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cl=
ass=3D"java_keyword">class</span><!-- <br/> --><span class=3D"java_plain=
">&nbsp;</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <b=
r/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=
=3D"java_separator">{</span><!-- <br/> --><span class=3D"java_plain">&nb=
sp;</span><!-- <br/> --><span class=3D"java_separator">...</span><!-- <b=
r/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=
=3D"java_separator">}</span></pre></div></div><br class=3D"example-break=
"/><p>
                If the <code class=3D"literal">final</code> class does i=
mplement a proper interface, you could alternatively tell
                Hibernate to use the interface instead when generating t=
he proxies.  See
                <a class=3D"xref" href=3D"#persistent-classes-pojo-final=
-example-proxy-interface-xml" title=3D"Example=C2=A04.4.=C2=A0Proxying a=
n interface in hbm.xml">Example=C2=A04.4, =E2=80=9CProxying an interface=
 in hbm.xml=E2=80=9D</a> and
                <a class=3D"xref" href=3D"#persistent-classes-pojo-final=
-example-proxy-interface-ann" title=3D"Example=C2=A04.5.=C2=A0Proxying a=
n interface in annotations">Example=C2=A04.5, =E2=80=9CProxying an inter=
face in annotations=E2=80=9D</a>.

            </p><div class=3D"example"><a id=3D"persistent-classes-pojo-=
final-example-proxy-interface-xml"/><p class=3D"title"><b>Example=C2=A04=
.4.=C2=A0Proxying an interface in <code class=3D"literal">hbm.xml</code>=
</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : gene=
rated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Cat&quot;</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">proxy</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;ICat&quot;</span><span class=3D"xml_plain">...</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">...</span><span c=
lass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"persistent-classes-pojo-final-example-proxy-interface-ann"/><p cl=
ass=3D"title"><b>Example=C2=A04.5.=C2=A0Proxying an interface in annotat=
ions</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"=
java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/>=
 --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java=
_type">Entity</span><!-- <br/> --><span class=3D"java_plain">&nbsp;@</sp=
an><!-- <br/> --><span class=3D"java_type">Proxy</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_pl=
ain">proxyClass</span><!-- <br/> --><span class=3D"java_operator">=3D</s=
pan><!-- <br/> --><span class=3D"java_type">ICat</span><!-- <br/> --><sp=
an class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_ke=
yword">class</span><!-- <br/> --><span class=3D"java_separator">)</span>=
<!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><spa=
n class=3D"java_keyword">public</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">class</sp=
an><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><=
span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">implements</=
span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --=
><span class=3D"java_type">ICat</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">{</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_separator">...</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">}</span=
></pre></div></div><br class=3D"example-break"/><p>
                You should also avoid declaring <code class=3D"literal">=
public final</code> methods as this will again limit
                the ability to generate <span class=3D"emphasis"><em>pro=
xies</em></span> from this class.  If you want to use a
                class with <code class=3D"literal">public final</code> m=
ethods, you must explicitly disable proxying.  Again, see
                <a class=3D"xref" href=3D"#persistent-classes-pojo-final=
-example-disable-proxies-xml" title=3D"Example=C2=A04.2.=C2=A0Disabling =
proxies in hbm.xml">Example=C2=A04.2, =E2=80=9CDisabling proxies in hbm.=
xml=E2=80=9D</a> and
                <a class=3D"xref" href=3D"#persistent-classes-pojo-final=
-example-disable-proxies-ann" title=3D"Example=C2=A04.3.=C2=A0Disabling =
proxies in annotations">Example=C2=A04.3, =E2=80=9CDisabling proxies in =
annotations=E2=80=9D</a>.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"persistent-classes-po=
jo-accessors"/>4.1.4.=C2=A0Declare accessors and mutators for persistent=
 fields (optional)</h3></div></div></div><p>
                <code class=3D"classname">Cat</code> declares accessor m=
ethods for all its persistent fields. Many other ORM
                tools directly persist instance variables. It is better =
to provide an indirection between the relational
                schema and internal data structures of the class. By def=
ault, Hibernate persists JavaBeans style
                properties and recognizes method names of the form <code=
 class=3D"literal">getFoo</code>, <code class=3D"literal">isFoo</code>
                and <code class=3D"literal">setFoo</code>.  If required,=
 you can switch to direct field access for particular
                properties.
            </p><p>
                Properties need <span class=3D"emphasis"><em>not</em></s=
pan> be declared public.  Hibernate can persist a property declared
                with <code class=3D"literal">package</code>, <code class=
=3D"literal">protected</code> or <code class=3D"literal">private</code> =
visibility
                as well.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"persistent-cla=
sses-inheritance"/>4.2.=C2=A0Implementing inheritance</h2></div></div></=
div><p>A subclass must also observe the first and second rules. It inher=
its
    its identifier property from the superclass, <code class=3D"literal"=
>Cat</code>. For
    example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyw=
ord">package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;eg</sp=
an><!-- <br/> --><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">DomesticCat</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword=
">extends</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Cat</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">private</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">String</spa=
n><span class=3D"java_plain">&nbsp;name</span><span class=3D"java_separa=
tor">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">public</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">String</span=
><span class=3D"java_plain">&nbsp;getName</span><span class=3D"java_sepa=
rator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">protected</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_type">void</spa=
n><span class=3D"java_plain">&nbsp;setName</span><span class=3D"java_sep=
arator">(</span><span class=3D"java_type">String</span><span class=3D"ja=
va_plain">&nbsp;name</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">this</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">name</span><span class=3D"java_s=
eparator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 cl=
ass=3D"title"><a id=3D"persistent-classes-equalshashcode"/>4.3.=C2=A0Imp=
lementing <code class=3D"literal">equals()</code> and
    <code class=3D"literal">hashCode()</code></h2></div></div></div><p>Y=
ou have to override the <code class=3D"literal">equals()</code> and
    <code class=3D"literal">hashCode()</code> methods if you:</p><div cl=
ass=3D"itemizedlist"><ul compact=3D"compact"><li><p>intend to put instan=
ces of persistent classes in a
        <code class=3D"literal">Set</code> (the recommended way to repre=
sent many-valued
        associations); <span class=3D"emphasis"><em>and</em></span></p><=
/li><li><p>intend to use reattachment of detached instances</p></li></ul=
></div><p>Hibernate guarantees equivalence of persistent identity (datab=
ase
    row) and Java identity only inside a particular session scope. When =
you
    mix instances retrieved in different sessions, you must implement
    <code class=3D"literal">equals()</code> and <code class=3D"literal">=
hashCode()</code> if you wish
    to have meaningful semantics for <code class=3D"literal">Set</code>s=
.</p><p>The most obvious way is to implement
    <code class=3D"literal">equals()</code>/<code class=3D"literal">hash=
Code()</code> by comparing the
    identifier value of both objects. If the value is the same, both mus=
t be
    the same database row, because they are equal. If both are added to =
a
    <code class=3D"literal">Set</code>, you will only have one element i=
n the
    <code class=3D"literal">Set</code>). Unfortunately, you cannot use t=
hat approach with
    generated identifiers. Hibernate will only assign identifier values =
to
    objects that are persistent; a newly created instance will not have =
any
    identifier value. Furthermore, if an instance is unsaved and current=
ly in
    a <code class=3D"literal">Set</code>, saving it will assign an ident=
ifier value to the
    object. If <code class=3D"literal">equals()</code> and <code class=3D=
"literal">hashCode()</code>
    are based on the identifier value, the hash code would change, break=
ing
    the contract of the <code class=3D"literal">Set</code>. See the Hibe=
rnate website for
    a full discussion of this problem. This is not a Hibernate issue, bu=
t
    normal Java semantics of object identity and equality.</p><p>It is r=
ecommended that you implement <code class=3D"literal">equals()</code> an=
d
    <code class=3D"literal">hashCode()</code> using <span class=3D"empha=
sis"><em>Business key
    equality</em></span>. Business key equality means that the
    <code class=3D"literal">equals()</code> method compares only the pro=
perties that form
    the business key. It is a key that would identify our instance in th=
e real
    world (a <span class=3D"emphasis"><em>natural</em></span> candidate =
key):</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRende=
rerFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword">pu=
blic</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <b=
r/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span clas=
s=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type">Ca=
t</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/>=
 --><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">boolean</span><span class=3D"java_pl=
ain">&nbsp;equals</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;other</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_keyword">this</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_operator">=3D=3D</span><span class=3D"java_plai=
n">&nbsp;other</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_keyword">return</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">true</s=
pan><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">!</sp=
an><span class=3D"java_separator">(</span><span class=3D"java_plain">oth=
er&nbsp;</span><span class=3D"java_keyword">instanceof</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">return</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_literal">false</span><span class=3D=
"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">final</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;cat&nbsp;</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_type">Cat</span><span class=3D"=
java_separator">)</span><span class=3D"java_plain">&nbsp;other</span><sp=
an class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">!</sp=
an><span class=3D"java_plain">cat</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">getLitterId</span><span class=3D"java_=
separator">().</span><span class=3D"java_plain">equals</span><span class=
=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;getLitterId=
</span><span class=3D"java_separator">()</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">fals=
e</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">!</sp=
an><span class=3D"java_plain">cat</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">getMother</span><span class=3D"java_se=
parator">().</span><span class=3D"java_plain">equals</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;getMother</spa=
n><span class=3D"java_separator">()</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">)</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">)</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">false</sp=
an><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">true</spa=
n><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_plain"=
>&nbsp;hashCode</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">int</span><span class=3D=
"java_plain">&nbsp;result</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;result&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;getMother</span><span class=3D"java=
_separator">().</span><span class=3D"java_plain">hashCode</span><span cl=
ass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;result&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal"=
>29</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_op=
erator">*</span><span class=3D"java_plain">&nbsp;result&nbsp;</span><spa=
n class=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;getLi=
tterId</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;result</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>A business=
 key does not have to be as solid as a database primary
    key candidate (see <a class=3D"xref" href=3D"#transactions-basics-id=
entity" title=3D"13.1.3.=C2=A0Considering object identity">Section=C2=A0=
13.1.3, =E2=80=9CConsidering object identity=E2=80=9D</a>).
    Immutable or unique properties are usually good candidates for a bus=
iness
    key.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"persistent-classes-dynam=
icmodels"/>4.4.=C2=A0Dynamic models</h2></div></div></div><div xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note<=
/h2><p><span class=3D"emphasis"><em>The following features are currently=
 considered
      experimental and may change in the near future.</em></span></p></d=
iv><p>Persistent entities do not necessarily have to be represented as
    POJO classes or as JavaBean objects at runtime. Hibernate also suppo=
rts
    dynamic models (using <code class=3D"literal">Map</code>s of <code c=
lass=3D"literal">Map</code>s
    at runtime) and the representation of entities as DOM4J trees. With =
this
    approach, you do not write persistent classes, only mapping files.</=
p><p>By default, Hibernate works in normal POJO mode. You can set a
    default entity representation mode for a particular
    <code class=3D"literal">SessionFactory</code> using the
    <code class=3D"literal">default_entity_mode</code> configuration opt=
ion (see <a class=3D"xref" href=3D"#configuration-optional-properties" t=
itle=3D"Table=C2=A03.3.=C2=A0Hibernate Configuration Properties">Table=C2=
=A03.3, =E2=80=9CHibernate Configuration Properties=E2=80=9D</a>).</p><p=
>The following examples demonstrate the representation using
    <code class=3D"literal">Map</code>s. First, in the mapping file an
    <code class=3D"literal">entity-name</code> has to be declared instea=
d of, or in
    addition to, a class name:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated =
by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">e=
ntity-name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Customer&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;long&quot;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;ID&quot;</span><span class=3D"xml_tag_symbols">&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;NAME&quot;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;address&quot;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;ADDRESS&quot;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;organization&quot;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;ORGANIZATION_ID&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Organization&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">bag</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;orders&quot;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inve=
rse</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">lazy=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;false&quot;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">casc=
ade</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;all&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CU=
STOMER_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Order&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">bag</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>Even though associations are declared using target class names,=
 the
    target type of associations can also be a dynamic entity instead of =
a
    POJO.</p><p>After setting the default entity mode to
    <code class=3D"literal">dynamic-map</code> for the <code class=3D"li=
teral">SessionFactory</code>,
    you can, at runtime, work with <code class=3D"literal">Map</code>s o=
f
    <code class=3D"literal">Map</code>s:</p><pre xmlns=3D"" xmlns:rf=3D"=
java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/>=
 --><span class=3D"java_type">Session</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;s&nbsp;</span><!-- <br/> --><span class=3D"java_opera=
tor">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;openSessio=
n</span><!-- <br/> --><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">beginTransaction</span><span class=3D=
"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Create</span><span class=3D=
"java_plain">&nbsp;a&nbsp;customer</span>
<!--  --><br/><span class=3D"java_type">Map</span><span class=3D"java_pl=
ain">&nbsp;david&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Ha=
shMap</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">david</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">put</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</s=
pan><span class=3D"java_separator">,</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_literal">&quot;David&quot;</span><span cl=
ass=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Create</span><span class=3D=
"java_plain">&nbsp;an&nbsp;organization</span>
<!--  --><br/><span class=3D"java_type">Map</span><span class=3D"java_pl=
ain">&nbsp;foobar&nbsp;</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">H=
ashMap</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">foobar</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">put</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_literal">&quot;Foobar&nbsp;Inc.&quot;</s=
pan><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Link</span><span class=3D=
"java_plain">&nbsp;both</span>
<!--  --><br/><span class=3D"java_plain">david</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">put</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;organization&=
quot;</span><span class=3D"java_separator">,</span><span class=3D"java_p=
lain">&nbsp;foobar</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Save</span><span class=3D=
"java_plain">&nbsp;both</span>
<!--  --><br/><span class=3D"java_plain">s</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">save</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_literal">&quot;Customer&quot;</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;david</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">s</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">save</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_literal">&quot;Organization&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;foobar</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">s</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">close</span><span class=3D"ja=
va_separator">();</span></pre><p>One of the main advantages of dynamic m=
apping is quick turnaround
    time for prototyping, without the need for entity class implementati=
on.
    However, you lose compile-time type checking and will likely deal wi=
th
    many exceptions at runtime. As a result of the Hibernate mapping, th=
e
    database schema can easily be normalized and sound, allowing to add =
a
    proper domain model implementation on top later on.</p><p>Entity rep=
resentation modes can also be set on a per
    <code class=3D"literal">Session</code> basis:</p><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_type">Session</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;dynamicSession&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_p=
lain">&nbsp;pojoSession</span><!-- <br/> --><span class=3D"java_separato=
r">.</span><!-- <br/> --><span class=3D"java_plain">getSession</span><!-=
- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span cl=
ass=3D"java_type">EntityMode</span><!-- <br/> --><span class=3D"java_sep=
arator">.</span><!-- <br/> --><span class=3D"java_plain">MAP</span><!-- =
<br/> --><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Create</span><span class=3D=
"java_plain">&nbsp;a&nbsp;customer</span>
<!--  --><br/><span class=3D"java_type">Map</span><span class=3D"java_pl=
ain">&nbsp;david&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Ha=
shMap</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">david</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">put</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</s=
pan><span class=3D"java_separator">,</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_literal">&quot;David&quot;</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">dynamicSession</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">save</span><span=
 class=3D"java_separator">(</span><span class=3D"java_literal">&quot;Cus=
tomer&quot;</span><span class=3D"java_separator">,</span><span class=3D"=
java_plain">&nbsp;david</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">dynamicSession</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">flush</span><spa=
n class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">dynamicSession</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">close</span><spa=
n class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Continue</span><span clas=
s=3D"java_plain">&nbsp;on&nbsp;pojoSession</span>
</pre><p>Please note that the call to <code class=3D"literal">getSession=
()</code> using
    an <code class=3D"literal">EntityMode</code> is on the <code class=3D=
"literal">Session</code> API,
    not the <code class=3D"literal">SessionFactory</code>. That way, the=
 new
    <code class=3D"literal">Session</code> shares the underlying JDBC co=
nnection,
    transaction, and other context information. This means you do not ha=
ve to
    call <code class=3D"literal">flush()</code> and <code class=3D"liter=
al">close()</code> on the
    secondary <code class=3D"literal">Session</code>, and also leave the=
 transaction and
    connection handling to the primary unit of work.</p><p>More informat=
ion about the XML representation capabilities can be
    found in <a class=3D"xref" href=3D"#xml" title=3D"Chapter=C2=A020.=C2=
=A0XML Mapping">Chapter=C2=A020, <i>XML Mapping</i></a>.</p></div><div c=
lass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 c=
lass=3D"title"><a id=3D"persistent-classes-tuplizers"/>4.5.=C2=A0Tuplize=
rs</h2></div></div></div><p>
            <code class=3D"interfacename">org.hibernate.tuple.Tuplizer</=
code> and its sub-interfaces are responsible for
            managing a particular representation of a piece of data give=
n that representation's
            <code class=3D"classname">org.hibernate.EntityMode</code>.  =
If a given piece of data is thought of as a data
            structure, then a tuplizer is the thing that knows how to cr=
eate such a data structure, how to extract
            values from such a data structure and how to inject values i=
nto such a data structure.  For example, for
            the POJO entity mode, the corresponding tuplizer knows how c=
reate the POJO through its constructor.
            It also knows how to access the POJO properties using the de=
fined property accessors.
        </p><p>
            There are two (high-level) types of Tuplizers:
            </p><div class=3D"itemizedlist"><ul><li><p>
                        <code class=3D"interfacename">org.hibernate.tupl=
e.entity.EntityTuplizer</code> which is
                        responsible for managing the above mentioned con=
tracts in regards to entities
                    </p></li><li><p>
                        <code class=3D"interfacename">org.hibernate.tupl=
e.component.ComponentTuplizer</code> which does the
                        same for components
                    </p></li></ul></div><p>
        </p><p>
            Users can also plug in their own tuplizers. Perhaps you requ=
ire that
            <code class=3D"interfacename">java.util.Map</code> implement=
ation other than
            <code class=3D"classname">java.util.HashMap</code> be used w=
hile in the dynamic-map entity-mode.  Or perhaps you
            need to define a different proxy generation strategy than th=
e one used by default.  Both would be achieved
            by defining a custom tuplizer implementation.  Tuplizer defi=
nitions are attached to the entity or component
            mapping they are meant to manage.  Going back to the example=
 of our <code class=3D"classname">Customer</code> entity,
            <a class=3D"xref" href=3D"#example-specify-custom-tuplizer-a=
nn" title=3D"Example=C2=A04.6.=C2=A0Specify custom tuplizers in annotati=
ons">Example=C2=A04.6, =E2=80=9CSpecify custom tuplizers in annotations=E2=
=80=9D</a> shows how to specify a custom
            <code class=3D"interfacename">org.hibernate.tuple.entity.Ent=
ityTuplizer</code> using annotations while
            <a class=3D"xref" href=3D"#example-specify-custom-tuplizer-x=
ml" title=3D"Example=C2=A04.7.=C2=A0Specify custom tuplizers in hbm.xml"=
>Example=C2=A04.7, =E2=80=9CSpecify custom tuplizers in hbm.xml=E2=80=9D=
</a> shows how to do the same in <code class=3D"literal">hbm.xml</code>
        </p><div class=3D"example"><a id=3D"example-specify-custom-tupli=
zer-ann"/><p class=3D"title"><b>Example=C2=A04.6.=C2=A0Specify custom tu=
plizers in annotations</b></p><div class=3D"example-contents"><pre xmlns=
=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><s=
pan class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Tuplizer</span><span class=3D"java_separator">(</span><span class=3D"=
java_plain">impl&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_type">DynamicEn=
tityTuplizer</span><span class=3D"java_separator">.</span><span class=3D=
"java_keyword">class</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">interface</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cuisine</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">GeneratedValue</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span c=
lass=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setName</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;name</span>=
<span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Tuplizer</span><span class=3D"java_separator"=
>(</span><span class=3D"java_plain">impl&nbsp;</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_type">DynamicComponentTuplizer</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_keyword">class</span><span class=3D"jav=
a_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Country</span><span class=3D"java_pl=
ain">&nbsp;getCountry</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setCountry</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_type">Country</span><span class=3D"java_plain">&nbsp;country=
</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><div class=3D"example"><a id=3D"example-spec=
ify-custom-tuplizer-xml"/><p class=3D"title"><b>Example=C2=A04.7.=C2=A0S=
pecify custom tuplizers in <code class=3D"literal">hbm.xml</code></b></p=
><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated b=
y JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">e=
ntity-name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Customer&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;Override&nbsp;the&nbsp;dynamic-map&nbsp;enti=
ty-mode</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;tuplizer&nbsp;for&nbsp;the&nbsp;customer&nbs=
p;entity</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">tuplizer</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">entity-mode</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;dynamic-map&quot=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;CustomMapTuplizerImpl&quot;<=
/span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;ID&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_comment">&lt;!--&nbsp;other&nbsp;properties&=
nbsp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/></div><div class=3D"secti=
on" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title=
"><a id=3D"persistent-classes-entity-name-resolver"/>4.6.=C2=A0EntityNam=
eResolvers</h2></div></div></div><p>
            <code class=3D"interfacename">org.hibernate.EntityNameResolv=
er</code> is a contract for resolving the entity name
            of a given entity instance. The interface defines a single m=
ethod <code class=3D"methodname">resolveEntityName</code>
            which is passed the entity instance and is expected to retur=
n the appropriate entity name (null is
            allowed and would indicate that the resolver does not know h=
ow to resolve the entity name of the given entity
            instance). Generally speaking, an <code class=3D"interfacena=
me">org.hibernate.EntityNameResolver</code> is going
            to be most useful in the case of dynamic models. One example=
 might be using proxied interfaces as your
            domain model. The hibernate test suite has an example of thi=
s exact style of usage under the
            <span class=3D"package">org.hibernate.test.dynamicentity.tup=
lizer2</span>. Here is some of the code from that package
            for illustration.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_javadoc_=
comment">/**</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;A&nbsp;v=
ery&nbsp;trivial&nbsp;JDK&nbsp;Proxy&nbsp;InvocationHandler&nbsp;impleme=
ntation&nbsp;where&nbsp;we&nbsp;proxy&nbsp;an</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;interfac=
e&nbsp;as&nbsp;the&nbsp;domain&nbsp;model&nbsp;and&nbsp;simply&nbsp;stor=
e&nbsp;persistent&nbsp;state&nbsp;in&nbsp;an&nbsp;internal</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;Map.&nbs=
p;&nbsp;This&nbsp;is&nbsp;an&nbsp;extremely&nbsp;trivial&nbsp;example&nb=
sp;meant&nbsp;only&nbsp;for&nbsp;illustration.</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*/</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">final</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">class</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Data=
ProxyHandler</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_keyword">implements</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_type">InvocationHandler</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;entityName</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">HashMap</span><span class=3D"java_p=
lain">&nbsp;data&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Ha=
shMap</span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">DataProxyHandler</span><span class=3D=
"java_separator">(</span><span class=3D"java_type">String</span><span cl=
ass=3D"java_plain">&nbsp;entityName</span><span class=3D"java_separator"=
>,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_typ=
e">Serializable</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">entityName&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;entityName</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;data</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">put</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quo=
t;Id&quot;</span><span class=3D"java_separator">,</span><span class=3D"j=
ava_plain">&nbsp;id&nbsp;</span><span class=3D"java_separator">);</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Object</span><span class=3D"java_pla=
in">&nbsp;invoke</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;proxy</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_type">Method</span><span class=3D"java_plai=
n">&nbsp;method</span><span class=3D"java_separator">,</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_type">Object</span><spa=
n class=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;arg=
s</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_keyword">throws</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Throwable</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;methodName&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;method</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">getName</span><sp=
an class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;methodName</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">startsWith</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">&quot;set&quot;</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">)</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">String</span><span class=3D"java_plain">&nbsp;propertyName&nbsp;</span=
><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbs=
p;methodName</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">substring</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">3</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">put</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">&nbsp;propertyName</sp=
an><span class=3D"java_separator">,</span><span class=3D"java_plain">&nb=
sp;args</span><span class=3D"java_separator">[</span><span class=3D"java=
_literal">0</span><span class=3D"java_separator">]</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">if</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</=
span><span class=3D"java_plain">&nbsp;methodName</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">startsWith</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_literal">&quot;get&quot;</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">)</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">String</span><span class=3D"java_plain">&nbsp;propertyName&nbsp;</span=
><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbs=
p;methodName</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">substring</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">3</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">return</span><span class=3D"java_plain">&nbsp;data</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">get</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;proper=
tyName&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">if</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal=
">&quot;toString&quot;</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">equals</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;methodName&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">return</span><span class=3D"java_plain">&nbsp;entityName&nbsp;</spa=
n><span class=3D"java_operator">+</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_literal">&quot;#&quot;</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_operator">+</span><span cla=
ss=3D"java_plain">&nbsp;data</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_plain">get</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_litera=
l">&quot;Id&quot;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">if</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal=
">&quot;hashCode&quot;</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">equals</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;methodName&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">return</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">Integer</span><span class=3D"java_separator">(</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">thi=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">hashCode</span><span class=3D"java_separator">()</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">null</spa=
n><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getEntityName</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;entityName</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">HashMap</span><span class=3D"java_pl=
ain">&nbsp;getData</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;data</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">ProxyHelper</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_keyword">static</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">String</span><span class=3D=
"java_plain">&nbsp;extractEntityName</span><span class=3D"java_separator=
">(</span><span class=3D"java_type">Object</span><span class=3D"java_pla=
in">&nbsp;object</span><span class=3D"java_separator">)</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">Our</span><span=
 class=3D"java_plain">&nbsp;custom&nbsp;java</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">lang</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">reflect</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_type">Proxy</span><sp=
an class=3D"java_plain">&nbsp;instances&nbsp;actually&nbsp;bundle</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;their&nbsp;appropriate&nbsp;entity&nbsp;name</sp=
an><span class=3D"java_separator">,</span><span class=3D"java_plain">&nb=
sp;so&nbsp;we&nbsp;simply&nbsp;extract&nbsp;it&nbsp;from&nbsp;there</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">if</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">this</=
span><span class=3D"java_plain">&nbsp;represents&nbsp;one&nbsp;of&nbsp;o=
ur&nbsp;proxies</span><span class=3D"java_separator">;</span><span class=
=3D"java_plain">&nbsp;otherwise</span><span class=3D"java_separator">,</=
span><span class=3D"java_plain">&nbsp;we&nbsp;</span><span class=3D"java=
_keyword">return</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">null</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Proxy</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">isP=
roxyClass</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_plain">&nbsp;object</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">getClass</span><span class=3D"java_separator">()<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">InvocationHandler</span><span class=3D"java_plain">&nbsp;handler&nbsp;=
</span><span class=3D"java_operator">=3D</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_type">Proxy</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">getInvocationHandler</spa=
n><span class=3D"java_separator">(</span><span class=3D"java_plain">&nbs=
p;object&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_type">DataProxyHandler</span><span class=3D"java_separator">.</=
span><span class=3D"java_keyword">class</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">isAssignableFrom</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;handler</=
span><span class=3D"java_separator">.</span><span class=3D"java_plain">g=
etClass</span><span class=3D"java_separator">()</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">DataProxyHandler</span><span class=3D"java_pla=
in">&nbsp;myHandler&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>DataProxyHandler</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;handler<=
/span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;myHandler</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">getEntityName</span><span class=3D"java_separator">();</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">null</spa=
n><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
various&nbsp;other&nbsp;utility&nbsp;methods&nbsp;</span><span class=3D"=
java_separator">....</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_javadoc_comment">/**</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;The&nbsp=
;EntityNameResolver&nbsp;implementation.</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;IMPL&nbs=
p;NOTE&nbsp;:&nbsp;An&nbsp;EntityNameResolver&nbsp;really&nbsp;defines&n=
bsp;a&nbsp;strategy&nbsp;for&nbsp;how&nbsp;entity&nbsp;names</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;should&n=
bsp;be&nbsp;resolved.&nbsp;&nbsp;Since&nbsp;this&nbsp;particular&nbsp;im=
pl&nbsp;can&nbsp;handle&nbsp;resolution&nbsp;for&nbsp;all&nbsp;of&nbsp;o=
ur</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;entities=
&nbsp;we&nbsp;want&nbsp;to&nbsp;take&nbsp;advantage&nbsp;of&nbsp;the&nbs=
p;fact&nbsp;that&nbsp;SessionFactoryImpl&nbsp;keeps&nbsp;these</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;in&nbsp;=
a&nbsp;Set&nbsp;so&nbsp;that&nbsp;we&nbsp;only&nbsp;ever&nbsp;have&nbsp;=
one&nbsp;instance&nbsp;registered.&nbsp;&nbsp;Why?&nbsp;&nbsp;Well,&nbsp=
;when&nbsp;it</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;comes&nb=
sp;time&nbsp;to&nbsp;resolve&nbsp;an&nbsp;entity&nbsp;name,&nbsp;Hiberna=
te&nbsp;must&nbsp;iterate&nbsp;over&nbsp;all&nbsp;the&nbsp;registered</s=
pan>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;resolver=
s.&nbsp;&nbsp;So&nbsp;keeping&nbsp;that&nbsp;number&nbsp;down&nbsp;helps=
&nbsp;that&nbsp;process&nbsp;be&nbsp;as&nbsp;speedy&nbsp;as&nbsp;possibl=
e.</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*&nbsp;Hence&nb=
sp;the&nbsp;equals&nbsp;and&nbsp;hashCode&nbsp;implementations&nbsp;as&n=
bsp;is</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;*/</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">MyEntityNameR=
esolver</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_keyword">implements</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_type">EntityNameResolver</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_keyword">static</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_keyword">final</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_type">MyEntityNameResol=
ver</span><span class=3D"java_plain">&nbsp;INSTANCE&nbsp;</span><span cl=
ass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_type">MyEntityNameResolver</span><span class=3D=
"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;resolveEntityName</span><span class=3D"java_separator">(</span=
><span class=3D"java_type">Object</span><span class=3D"java_plain">&nbsp=
;entity</span><span class=3D"java_separator">)</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">ProxyHelper<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
extractEntityName</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_plain">&nbsp;entity&nbsp;</span><span class=3D"java_separator=
">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">boolean</span><span class=3D"java_pl=
ain">&nbsp;equals</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;obj</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;getClass</span><span class=3D"java_separator"=
>().</span><span class=3D"java_plain">equals</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_plain">&nbsp;obj</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">getClass</span><s=
pan class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_plain"=
>&nbsp;hashCode</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;getClass</span><span class=3D"java_separator"=
>().</span><span class=3D"java_plain">hashCode</span><span class=3D"java=
_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">MyEntityTupli=
zer</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ke=
yword">extends</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_type">PojoEntityTuplizer</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">MyEntityTuplizer</span><span class=3D=
"java_separator">(</span><span class=3D"java_type">EntityMetamodel</span=
><span class=3D"java_plain">&nbsp;entityMetamodel</span><span class=3D"j=
ava_separator">,</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">PersistentClass</span><span class=3D"java_plain">&nbsp;=
mappedEntity</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">super</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;entityM=
etamodel</span><span class=3D"java_separator">,</span><span class=3D"jav=
a_plain">&nbsp;mappedEntity&nbsp;</span><span class=3D"java_separator">)=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">EntityNameResolver</span><span class=
=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;getEntityN=
ameResolvers</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Entit=
yNameResolver</span><span class=3D"java_separator">[]</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">MyEntityNameR=
esolver</span><span class=3D"java_separator">.</span><span class=3D"java=
_plain">INSTANCE&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;determineConcreteSubclassEntityName</span><span class=3D"java_=
separator">(</span><span class=3D"java_type">Object</span><span class=3D=
"java_plain">&nbsp;entityInstance</span><span class=3D"java_separator">,=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>SessionFactoryImplementor</span><span class=3D"java_plain">&nbsp;factor=
y</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;entityName&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">ProxyHelper</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">extractEntityName</span><span class=3D"java_separat=
or">(</span><span class=3D"java_plain">&nbsp;entityInstance&nbsp;</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;entityName&nbsp;</span><span class=3D"java=
_operator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_literal">null</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entityName&nbsp;</span><span cl=
ass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_keyword">super</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">determineConcreteSubclassEntityName</=
span><span class=3D"java_separator">(</span><span class=3D"java_plain">&=
nbsp;entityInstance</span><span class=3D"java_separator">,</span><span c=
lass=3D"java_plain">&nbsp;factory&nbsp;</span><span class=3D"java_separa=
tor">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;entityName</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
</pre><p>
            In order to register an <code class=3D"interfacename">org.hi=
bernate.EntityNameResolver</code> users must either:
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"orderedlist"><ol><li><p>
                        Implement a custom tuplizer (see <a class=3D"xre=
f" href=3D"#persistent-classes-tuplizers" title=3D"4.5.=C2=A0Tuplizers">=
Section=C2=A04.5, =E2=80=9CTuplizers=E2=80=9D</a>), implementing
                        the <code class=3D"methodname">getEntityNameReso=
lvers</code> method
                    </p></li><li><p>
                        Register it with the <code class=3D"classname">o=
rg.hibernate.impl.SessionFactoryImpl</code> (which is the
                        implementation class for <code class=3D"interfac=
ename">org.hibernate.SessionFactory</code>) using the
                        <code class=3D"methodname">registerEntityNameRes=
olver</code> method.
                    </p></li></ol></div><p>
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"mapping"/>Chapter=C2=
=A05.=C2=A0Basic O/R Mapping</h2></div></div></div><div class=3D"toc"><d=
l><dt><span class=3D"section"><a href=3D"#mapping-declaration">5.1. Mapp=
ing declaration</a></span></dt><dd><dl><dt><span class=3D"section"><a hr=
ef=3D"#mapping-declaration-class">5.1.1. Entity</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#mapping-declaration-id">5.1.2. Identifier=
s</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e5844">5.1.3.=
 Optimistic locking properties (optional)</a></span></dt><dt><span class=
=3D"section"><a href=3D"#mapping-declaration-property">5.1.4. Property</=
a></span></dt><dt><span class=3D"section"><a href=3D"#mapping-declaratio=
n-component">5.1.5. Embedded objects (aka components)</a></span></dt><dt=
><span class=3D"section"><a href=3D"#d0e6906">5.1.6. Inheritance strateg=
y</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e7576">5.1.7.=
 Mapping one to one and one to many associations</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"#mapping-declaration-naturalid">5.1.8. Na=
tural-id</a></span></dt><dt><span class=3D"section"><a href=3D"#mapping-=
types-anymapping">5.1.9. Any</a></span></dt><dt><span class=3D"section">=
<a href=3D"#mapping-declaration-properties">5.1.10. Properties</a></span=
></dt><dt><span class=3D"section"><a href=3D"#d0e8351">5.1.11. Some hbm.=
xml specificities</a></span></dt></dl></dd><dt><span class=3D"section"><=
a href=3D"#mapping-types">5.2. Hibernate types</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"#mapping-types-entitiesvalues">5.2.=
1. Entities and values</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"#mapping-types-basictypes">5.2.2. Basic value types</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#mapping-types-custom">5.2.3. Cus=
tom value types</a></span></dt></dl></dd><dt><span class=3D"section"><a =
href=3D"#mapping-entityname">5.3. Mapping a class more than once</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"#mapping-quotedidentifier=
s">5.4. SQL quoted identifiers</a></span></dt><dt><span class=3D"section=
"><a href=3D"#mapping-generated">5.5. Generated properties</a></span></d=
t><dt><span class=3D"section"><a href=3D"#mapping-column-read-and-write"=
>5.6. Column transformers: read and write expressions</a></span></dt><dt=
><span class=3D"section"><a href=3D"#mapping-database-object">5.7. Auxil=
iary database objects</a></span></dt></dl></div><div class=3D"section" l=
ang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a =
id=3D"mapping-declaration"/>5.1.=C2=A0Mapping declaration</h2></div></di=
v></div><p>Object/relational mappings can be defined in three
    approaches:</p><div class=3D"itemizedlist"><ul><li><p>using Java 5 a=
nnotations (via the Java Persistence 2
        annotations)</p></li><li><p>using JPA 2 XML deployment descripto=
rs (described in chapter
        XXX)</p></li><li><p>using the Hibernate legacy XML files approac=
h known as
        hbm.xml</p></li></ul></div><p>Annotations are split in two categ=
ories, the logical mapping
    annotations (describing the object model, the association between tw=
o
    entities etc.) and the physical mapping annotations (describing the
    physical schema, tables, columns, indexes, etc). We will mix annotat=
ions
    from both categories in the following code examples.</p><p>JPA annot=
ations are in the <code class=3D"literal">javax.persistence.*</code>
    package. Hibernate specific extensions are in
    <code class=3D"literal">org.hibernate.annotations.*</code>. You favo=
rite IDE can
    auto-complete annotations and their attributes for you (even without=
 a
    specific "JPA" plugin, since JPA annotations are plain Java 5
    annotations).</p><p>Here is an example of mapping</p><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAV=
A"><!-- <br/> --><span class=3D"java_keyword">package</span><!-- <br/> -=
-><span class=3D"java_plain">&nbsp;eg</span><!-- <br/> --><span class=3D=
"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Table</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">name</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;cats&quot;</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;@</span><span class=3D"java_type">=
Inheritance</span><span class=3D"java_separator">(</span><span class=3D"=
java_plain">strategy</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">SINGLE_TABLE</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorValue</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;C&quot;</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"java_=
type">DiscriminatorColumn</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">name</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_literal">&quot;subclass&quot;</span><span class=
=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;discriminat=
orType</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">CHAR</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Integer</span><span class=3D"java_plain">&=
nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</spa=
n><span class=3D"java_plain">&nbsp;id</span><span class=3D"java_separato=
r">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">BigDecimal</span><span class=3D"java_plain=
">&nbsp;getWeight</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;weight</span><span class=3D"ja=
va_separator">;</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setWeight</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">BigDecimal</span><span class=3D"java_plain">&nbsp;weight</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">weight&nbsp;</span><sp=
an class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;we=
ight</span><span class=3D"java_separator">;</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">BigDecimal</span><span class=3D"java_plai=
n">&nbsp;weight</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Temporal</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">DATE</span><span class=3D"java_separator">=
)</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"java_typ=
e">NotNull</span><span class=3D"java_plain">&nbsp;@</span><span class=3D=
"java_type">Column</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_plain">updatable</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_literal">false</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Date</span><span class=3D"java_plain">&nbs=
p;getBirthdate</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return<=
/span><span class=3D"java_plain">&nbsp;birthdate</span><span class=3D"ja=
va_separator">;</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setBirthdate</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Date</span><span class=3D"java_plain">&nbsp;birthdate</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">birthdate&nbsp;</span><s=
pan class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;b=
irthdate</span><span class=3D"java_separator">;</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Date</span><span class=3D"java_plain">&nb=
sp;birthdate</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@org</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">hibernat=
e</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">annotations</span><span class=3D"java_separator">.</span><span class=3D=
"java_type">Type</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">type</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_literal">&quot;eg.types.ColorUserType&quot;</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">NotNull</span><span class=3D"java_plain">&nbsp;@</s=
pan><span class=3D"java_type">Column</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">updatable</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">false</span><span clas=
s=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">ColorType</span><span class=3D"java_plain"=
>&nbsp;getColor</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return=
</span><span class=3D"java_plain">&nbsp;color</span><span class=3D"java_=
separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setColor</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_type">ColorType</span><span class=3D"java_plain">&nbsp;color</span><=
span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">color&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;color<=
/span><span class=3D"java_separator">;</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">ColorType</span><span class=3D"java_plain=
">&nbsp;color</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">NotNull</span><span class=3D"java_plain">&nbsp;@</s=
pan><span class=3D"java_type">Column</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">updatable</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">false</span><span clas=
s=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getSex</span><span class=3D"java_separator">()</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</spa=
n><span class=3D"java_plain">&nbsp;sex</span><span class=3D"java_separat=
or">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setSex</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_type">String</span><span class=3D"java_plain">&nbsp;sex</span><span cl=
ass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_keyword">this</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">sex&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;sex</span><span=
 class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;sex</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">NotNull</span><span class=3D"java_plain">&nbsp;@</s=
pan><span class=3D"java_type">Column</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">updatable</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">false</span><span clas=
s=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Integer</span><span class=3D"java_plain">&=
nbsp;getLitterId</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retur=
n</span><span class=3D"java_plain">&nbsp;litterId</span><span class=3D"j=
ava_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setLitterId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Integer</span><span class=3D"java_plain">&nbsp;litterId</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">litterId&nbsp;</span><=
span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;=
litterId</span><span class=3D"java_separator">;</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;litterId</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span><span class=3D"java_plain">&nbsp;@<=
/span><span class=3D"java_type">JoinColumn</span><span class=3D"java_sep=
arator">(</span><span class=3D"java_plain">name</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_literal">&quot;mother_id&quot;=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;updatable</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_literal">false</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp=
;getMother</span><span class=3D"java_separator">()</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</spa=
n><span class=3D"java_plain">&nbsp;mother</span><span class=3D"java_sepa=
rator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setMother</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">Cat</span><span class=3D"java_plain">&nbsp;mother</span><span=
 class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">this</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">mother&nbsp;</span><span clas=
s=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;mother</s=
pan><span class=3D"java_separator">;</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbs=
p;mother</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToMany</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">mappedBy</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;mother&quot;</span><spa=
n class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;@</s=
pan><span class=3D"java_type">OrderBy</span><span class=3D"java_separato=
r">(</span><span class=3D"java_literal">&quot;litterId&quot;</span><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Set</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">Cat</span><span class=3D"java_operato=
r">&gt;</span><span class=3D"java_plain">&nbsp;getKittens</span><span cl=
ass=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">return</span><span class=3D"java_pla=
in">&nbsp;kittens</span><span class=3D"java_separator">;</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setKittens</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Set</span><span class=3D"java_operator">&lt;</span><span cla=
ss=3D"java_type">Cat</span><span class=3D"java_operator">&gt;</span><spa=
n class=3D"java_plain">&nbsp;kittens</span><span class=3D"java_separator=
">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_keyword">this</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_plain">kittens&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;kittens</span><span class=3D"jav=
a_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Set</span><span class=3D"java_operator">&=
lt;</span><span class=3D"java_type">Cat</span><span class=3D"java_operat=
or">&gt;</span><span class=3D"java_plain">&nbsp;kittens&nbsp;</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_keyword">new</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">HashSet</span><span class=3D"java_o=
perator">&lt;</span><span class=3D"java_type">Cat</span><span class=3D"j=
ava_operator">&gt;</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"=
java_type">DiscriminatorValue</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_literal">&quot;D&quot;</span><span class=3D"java_=
separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">DomesticCat</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword=
">extends</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Cat</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getName</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;name</span><span class=3D"java_separ=
ator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setName</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_type">String</span><span class=3D"java_plain">&nbsp;name</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_keyword">this</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">name&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;name&nbsp;</s=
pan><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Dog</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">}</span></pre><p>The legacy hbm.xml approach uses an XML sch=
ema designed to be
    readable and hand-editable. The mapping language is Java-centric, me=
aning
    that mappings are constructed around persistent class declarations a=
nd not
    table declarations.</p><p>Please note that even though many Hibernat=
e users choose to write
    the XML by hand, a number of tools exist to generate the mapping doc=
ument.
    These include XDoclet, Middlegen and AndroMDA.</p><p>Here is an exam=
ple mapping:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-mappin=
g</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_attribute_value">&quot;-//Hibernate/Hibernate&nbsp;Mappi=
ng&nbsp;DTD&nbsp;3.0//EN&quot;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span><span class=3D"xml_attribute_value">&quot;http://ww=
w.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;eg&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;Cat&quot;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">tabl=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;cats&quot;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">disc=
riminator-value</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;C&quot;</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">discriminator</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;subclass&quot;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;character&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;weight&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;birthdate&quot;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">type</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;date&=
quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;color&quot;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">type</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.ty=
pes.ColorUserType&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;sex&quot;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;litterId&quot;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;lit=
terId&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;mother&quot;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;mot=
her_id&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;kittens&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">inverse</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">order-by</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;li=
tter_id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;mo=
ther_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Cat&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;DomesticCat&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">discriminator-value</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;D&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;name&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;string&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">class</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;Dog&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;mapping&nbsp;for&nbsp;Dog&nbsp;could&nbsp;go&n=
bsp;here&nbsp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">class</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>We will now discuss the concepts of the mapping documents (both=

    annotations and XML). We will only describe, however, the document
    elements and attributes that are used by Hibernate at runtime. The m=
apping
    document also contains some extra optional attributes and elements t=
hat
    affect the database schemas exported by the schema export tool (for
    example, the <code class=3D"literal"> not-null</code> attribute).</p=
><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><di=
v><h3 class=3D"title"><a id=3D"mapping-declaration-class"/>5.1.1.=C2=A0E=
ntity</h3></div></div></div><p>An entity is a regular Java object (aka P=
OJO) which will be
      persisted by Hibernate.</p><p>To mark an object as an entity in an=
notations, use the
      <code class=3D"classname">@Entity</code> annotation.</p><pre xmlns=
=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><s=
pan class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Long</span><span class=3D"java_plain">&nbsp;id=
</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;id</span><span class=3D"java_separat=
or">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">this</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span =
class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p=
re><p>That's pretty much it, the rest is optional. There are however any=

      options to tweak your entity mapping, let's explore them.</p><p><c=
ode class=3D"classname">@Table</code> lets you define the table the enti=
ty
      will be persisted into. If undefined, the table name is the unqual=
ified
      class name of the entity. You can also optionally define the catal=
og,
      the schema as well as unique constraints on the table.</p><pre xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=
=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --=
><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Table</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">name</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;TBL_FLIGHT&quot;</span><span class=3D"java_separato=
r">,</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;schema</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;AIR_COMMAND&quot;</span><span class=3D"java_s=
eparator">,</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;uniqueConstraints</span><span class=3D"java_operator">=3D</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">Uni=
queConstraint</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><s=
pan class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot=
;flight_number&quot;</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columnNames</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_separat=
or">{</span><span class=3D"java_literal">&quot;comp_prefix&quot;</span><=
span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_literal">&quot;flight_number&quot;</span><span=
 class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;comp_prefix&quot;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getCompagnyPrefix</span><span class=3D"java_separator">()</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_key=
word">return</span><span class=3D"java_plain">&nbsp;companyPrefix</span>=
<span class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;flight_number&quot;</spa=
n><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getNumber</span><span class=3D"java_separator">()</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">re=
turn</span><span class=3D"java_plain">&nbsp;number</span><span class=3D"=
java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>The constr=
aint name is optional (generated if left undefined). The
      column names composing the constraint correspond to the column nam=
es as
      defined before the Hibernate <code class=3D"classname">NamingStrat=
egy</code> is
      applied.</p><p><code class=3D"literal">@Entity.name</code> lets yo=
u define the shortcut name
      of the entity you can used in JP-QL and HQL queries. It defaults t=
o the
      unqualified class name of the class.</p><p>Hibernate goes beyond t=
he JPA specification and provide additional
      configurations. Some of them are hosted on
      <code class=3D"classname">@org.hibernate.annotations.Entity</code>=
:</p><div class=3D"itemizedlist"><ul><li><p><code class=3D"literal">dyna=
micInsert</code> /
          <code class=3D"literal">dynamicUpdate</code> (defaults to fals=
e): specifies that
          <code class=3D"literal">INSERT</code> / <code class=3D"literal=
">UPDATE</code> SQL should be
          generated at runtime and contain only the columns whose values=
 are
          not null. The <code class=3D"literal">dynamic-update</code> an=
d
          <code class=3D"literal">dynamic-insert</code> settings are not=
 inherited by
          subclasses. Although these settings can increase performance i=
n some
          cases, they can actually decrease performance in others.</p></=
li><li><p><code class=3D"literal">selectBeforeUpdate</code> (defaults to=
 false):
          specifies that Hibernate should <span class=3D"emphasis"><em>n=
ever</em></span> perform
          an SQL <code class=3D"literal">UPDATE</code> unless it is cert=
ain that an object
          is actually modified. Only when a transient object has been
          associated with a new session using <code class=3D"literal">up=
date()</code>,
          will Hibernate perform an extra SQL <code class=3D"literal">SE=
LECT</code> to
          determine if an <code class=3D"literal">UPDATE</code> is actua=
lly required. Use
          of <code class=3D"literal">select-before-update</code> will us=
ually decrease
          performance. It is useful to prevent a database update trigger=
 being
          called unnecessarily if you reattach a graph of detached insta=
nces
          to a <code class=3D"literal">Session</code>.</p></li><li><p><c=
ode class=3D"literal">polymorphisms</code> (defaults to
          <code class=3D"literal">IMPLICIT</code>): determines whether i=
mplicit or
          explicit query polymorphisms is used. <span class=3D"emphasis"=
><em>Implicit</em></span>
          polymorphisms means that instances of the class will be return=
ed by
          a query that names any superclass or implemented interface or =
class,
          and that instances of any subclass of the class will be return=
ed by
          a query that names the class itself. <span class=3D"emphasis">=
<em>Explicit</em></span>
          polymorphisms means that class instances will be returned only=
 by
          queries that explicitly name that class. Queries that name the=
 class
          will return only instances of subclasses mapped. For most purp=
oses,
          the default <code class=3D"literal">polymorphisms=3DIMPLICIT</=
code> is
          appropriate. Explicit polymorphisms is useful when two differe=
nt
          classes are mapped to the same table This allows a "lightweigh=
t"
          class that contains a subset of the table columns.</p></li><li=
><p><code class=3D"literal">persister</code>: specifies a custom
          <code class=3D"literal">ClassPersister</code>. The <code class=
=3D"literal">persister</code>
          attribute lets you customize the persistence strategy used for=
 the
          class. You can, for example, specify your own subclass of
          <code class=3D"literal">org.hibernate.persister.EntityPersiste=
r</code>, or you
          can even provide a completely new implementation of the interf=
ace
          <code class=3D"literal">org.hibernate.persister.ClassPersister=
</code> that
          implements, for example, persistence via stored procedure call=
s,
          serialization to flat files or LDAP. See
          <code class=3D"literal">org.hibernate.test.CustomPersister</co=
de> for a simple
          example of "persistence" to a <code class=3D"literal">Hashtabl=
e</code>.</p></li><li><p><code class=3D"literal">optimisticLock</code> (=
defaults to
          <code class=3D"literal">VERSION</code>): determines the optimi=
stic locking
          strategy. If you enable <code class=3D"literal">dynamicUpdate<=
/code>, you will
          have a choice of optimistic locking strategies:</p><div class=3D=
"itemizedlist"><ul><li><p><code class=3D"literal">version</code>: check =
the version/timestamp
              columns</p></li><li><p><code class=3D"literal">all</code>:=
 check all columns</p></li><li><p><code class=3D"literal">dirty</code>: =
check the changed columns,
              allowing some concurrent updates</p></li><li><p><code clas=
s=3D"literal">none</code>: do not use optimistic
              locking</p></li></ul></div><p>It is <span class=3D"emphasi=
s"><em>strongly</em></span> recommended that you use
          version/timestamp columns for optimistic locking with Hibernat=
e.
          This strategy optimizes performance and correctly handles
          modifications made to detached instances (i.e. when
          <code class=3D"literal">Session.merge()</code> is used).</p></=
li></ul></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" class=3D"tip"><h2>Tip</h2><p>Be sure to import
        <code class=3D"classname">@javax.persistence.Entity</code> to ma=
rk a class as an
        entity. It's a common mistake to import
        <code class=3D"classname">@org.hibernate.annotations.Entity</cod=
e> by
        accident.</p></div><p>Some entities are not mutable. They cannot=
 be updated or deleted
      by the application. This allows Hibernate to make some minor perfo=
rmance
      optimizations.. Use the <code class=3D"classname">@Immutable</code=
>
      annotation.</p><p>You can also alter how Hibernate deals with lazy=
 initialization
      for this class. On <code class=3D"classname">@Proxy</code>, use
      <code class=3D"literal">lazy</code>=3Dfalse to disable lazy fetchi=
ng (not
      recommended). You can also specify an interface to use for lazy
      initializing proxies (defaults to the class itself): use
      <code class=3D"literal">proxyClass</code> on <code class=3D"classn=
ame">@Proxy</code>.
      Hibernate will initially return proxies (Javassist or CGLIB) that
      implement the named interface. The persistent object will load whe=
n a
      method of the proxy is invoked. See "Initializing collections and
      proxies" below.</p><p><code class=3D"classname">@BatchSize</code> =
specifies a "batch size" for
      fetching instances of this class by identifier. Not yet loaded ins=
tances
      are loaded batch-size at a time (default 1).</p><p>You can specifi=
c an arbitrary SQL WHERE condition to be used when
      retrieving objects of this class. Use <code class=3D"classname">@W=
here</code> for
      that.</p><p>In the same vein, <code class=3D"classname">@Check</co=
de> lets you define an
      SQL expression used to generate a multi-row <span class=3D"emphasi=
s"><em>check</em></span>
      constraint for automatic schema generation.</p><p>There is no diff=
erence between a view and a base table for a
      Hibernate mapping. This is transparent at the database level, alth=
ough
      some DBMS do not support views properly, especially with updates.
      Sometimes you want to use a view, but you cannot create one in the=

      database (i.e. with a legacy schema). In this case, you can map an=

      immutable and read-only entity to a given SQL subselect expression=
 using
      <code class=3D"classname">@org.hibernate.annotations.Subselect</co=
de>:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</sp=
an><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Subselect</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;select&nbsp;item.name,&nbsp;max(bid.amount),&nbsp;c=
ount(*)&nbsp;&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">+</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;from&nb=
sp;item&nbsp;&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">+</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;join&nb=
sp;bid&nbsp;on&nbsp;bid.item_id&nbsp;=3D&nbsp;item.id&nbsp;&quot;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">+</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;group&n=
bsp;by&nbsp;item.name&quot;</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Synchronize</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_literal">&quot;item&quot;</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">&quot;bid&quot;</span><span class=3D"java_separator">}</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_operato=
r">//</span><span class=3D"java_plain">tables&nbsp;impacted</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Summary</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getId</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return=
</span><span class=3D"java_plain">&nbsp;id</span><span class=3D"java_sep=
arator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>Declare th=
e tables to synchronize this entity with, ensuring that
      auto-flush happens correctly and that queries against the derived =
entity
      do not return stale data. The <code class=3D"literal">&lt;subselec=
t&gt;</code> is
      available both as an attribute and a nested mapping element.</p><p=
>We will now explore the same options using the hbm.xml structure.
      You can declare a persistent class using the <code class=3D"litera=
l">class</code>
      element. For example:</p><div class=3D"programlistingco"><pre clas=
s=3D"programlisting">&lt;class
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"class1"><img src=3D"=
images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>ClassNa=
me"
        table=3D<span xmlns=3D"" class=3D"co" id=3D"class2"><img src=3D"=
images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>"tableN=
ame"
        discri<span xmlns=3D"" class=3D"co" id=3D"class3"><img src=3D"im=
ages/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>minator-v=
alue=3D"discriminator_value"
        mutabl<span xmlns=3D"" class=3D"co" id=3D"class4"><img src=3D"im=
ages/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>e=3D"true=
|false"
        schema<span xmlns=3D"" class=3D"co" id=3D"class5"><img src=3D"im=
ages/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"owner=
"
        catalo<span xmlns=3D"" class=3D"co" id=3D"class6"><img src=3D"im=
ages/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>g=3D"cata=
log"
        proxy=3D<span xmlns=3D"" class=3D"co" id=3D"class7"><img src=3D"=
images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>"ProxyI=
nterface"
        dynami<span xmlns=3D"" class=3D"co" id=3D"class8"><img src=3D"im=
ages/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></span>c-update=3D=
"true|false"
        dynami<span xmlns=3D"" class=3D"co" id=3D"class9"><img src=3D"im=
ages/org/hibernate/docbook/callouts/9.png" alt=3D"(9)"/></span>c-insert=3D=
"true|false"
        select<span xmlns=3D"" class=3D"co" id=3D"class10"><img src=3D"i=
mages/org/hibernate/docbook/callouts/10.png" alt=3D"(10)"/></span>-befor=
e-update=3D"true|false"
        polymo<span xmlns=3D"" class=3D"co" id=3D"class11"><img src=3D"i=
mages/org/hibernate/docbook/callouts/11.png" alt=3D"(11)"/></span>rphism=
=3D"implicit|explicit"
        where=3D<span xmlns=3D"" class=3D"co" id=3D"class12"><img src=3D=
"images/org/hibernate/docbook/callouts/12.png" alt=3D"(12)"/></span>"arb=
itrary sql where condition"
        persis<span xmlns=3D"" class=3D"co" id=3D"class13"><img src=3D"i=
mages/org/hibernate/docbook/callouts/13.png" alt=3D"(13)"/></span>ter=3D=
"PersisterClass"
        batch-<span xmlns=3D"" class=3D"co" id=3D"class14"><img src=3D"i=
mages/org/hibernate/docbook/callouts/14.png" alt=3D"(14)"/></span>size=3D=
"N"
        optimi<span xmlns=3D"" class=3D"co" id=3D"class15"><img src=3D"i=
mages/org/hibernate/docbook/callouts/15.png" alt=3D"(15)"/></span>stic-l=
ock=3D"none|version|dirty|all"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"class16">(16)</span>=
true|false"
        entity<span xmlns=3D"" class=3D"co" id=3D"class17">(17)</span>-n=
ame=3D"EntityName"
        check=3D<span xmlns=3D"" class=3D"co" id=3D"class18">(18)</span>=
"arbitrary sql check condition"
        rowid=3D<span xmlns=3D"" class=3D"co" id=3D"class19">(19)</span>=
"rowid"
        subsel<span xmlns=3D"" class=3D"co" id=3D"class20">(20)</span>ec=
t=3D"SQL expression"
        abstra<span xmlns=3D"" class=3D"co" id=3D"class21">(21)</span>ct=
=3D"true|false"
        node=3D"element-name"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">name</code> (optional): the fully qualified J=
ava
            class name of the persistent class or interface. If this att=
ribute
            is missing, it is assumed that the mapping is for a non-POJO=

            entity.</p></td></tr><tr><td width=3D"5%" valign=3D"top" ali=
gn=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2.png" al=
t=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=
=3D"top" align=3D"left"><p><code class=3D"literal">table</code> (optiona=
l - defaults to the
            unqualified class name): the name of its database table.</p>=
</td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">discriminator-value</code> (optional - defaul=
ts
            to the class name): a value that distinguishes individual
            subclasses that is used for polymorphic behavior. Acceptable=

            values include <code class=3D"literal">null</code> and <code=
 class=3D"literal">not
            null</code>.</p></td></tr><tr><td width=3D"5%" valign=3D"top=
" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/4.pn=
g" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">mutable</code> (=
optional - defaults to
            <code class=3D"literal">true</code>): specifies that instanc=
es of the class
            are (not) mutable.</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
5.png" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">schema</code=
> (optional): overrides the schema
            name specified by the root
            <code class=3D"literal">&lt;hibernate-mapping&gt;</code> ele=
ment.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p=
><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" src=3D"images/org/hibernate/docbook/callouts/6.png" alt=3D"6" border=
=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=
=3D"left"><p><code class=3D"literal">catalog</code> (optional): override=
s the catalog
            name specified by the root
            <code class=3D"literal">&lt;hibernate-mapping&gt;</code> ele=
ment.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p=
><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" src=3D"images/org/hibernate/docbook/callouts/7.png" alt=3D"7" border=
=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=
=3D"left"><p><code class=3D"literal">proxy</code> (optional): specifies =
an interface
            to use for lazy initializing proxies. You can specify the na=
me of
            the class itself.</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
8.png" alt=3D"8" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">dynamic-upda=
te</code> (optional - defaults to
            <code class=3D"literal">false</code>): specifies that
            <code class=3D"literal">UPDATE</code> SQL should be generate=
d at runtime and
            can contain only those columns whose values have changed.</p=
></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/9.png" alt=3D"9" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">dynamic-insert</code> (optional - defaults to=

            <code class=3D"literal">false</code>): specifies that
            <code class=3D"literal">INSERT</code> SQL should be generate=
d at runtime and
            contain only the columns whose values are not null.</p></td>=
</tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/10.png" alt=3D"10" border=3D"0" heigh=
t=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p=
><code class=3D"literal">select-before-update</code> (optional - default=
s
            to <code class=3D"literal">false</code>): specifies that Hib=
ernate should
            <span class=3D"emphasis"><em>never</em></span> perform an SQ=
L
            <code class=3D"literal">UPDATE</code> unless it is certain t=
hat an object is
            actually modified. Only when a transient object has been
            associated with a new session using <code class=3D"literal">=
update()</code>,
            will Hibernate perform an extra SQL <code class=3D"literal">=
SELECT</code> to
            determine if an <code class=3D"literal">UPDATE</code> is act=
ually
            required.</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/11.png"=
 alt=3D"11" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td va=
lign=3D"top" align=3D"left"><p><code class=3D"literal">polymorphisms</co=
de> (optional - defaults to
            <code class=3D"literal">implicit</code>): determines whether=
 implicit or
            explicit query polymorphisms is used.</p></td></tr><tr><td w=
idth=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibern=
ate/docbook/callouts/12.png" alt=3D"12" border=3D"0" height=3D"17px" wid=
th=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D=
"literal">where</code> (optional): specifies an arbitrary
            SQL <code class=3D"literal">WHERE</code> condition to be use=
d when retrieving
            objects of this class.</p></td></tr><tr><td width=3D"5%" val=
ign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss=
.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/cal=
louts/13.png" alt=3D"13" border=3D"0" height=3D"17px" width=3D"17px"/></=
p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">pers=
ister</code> (optional): specifies a custom
            <code class=3D"literal">ClassPersister</code>.</p></td></tr>=
<tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xm=
lns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/o=
rg/hibernate/docbook/callouts/14.png" alt=3D"14" border=3D"0" height=3D"=
17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><cod=
e class=3D"literal">batch-size</code> (optional - defaults to
            <code class=3D"literal">1</code>): specifies a "batch size" =
for fetching
            instances of this class by identifier.</p></td></tr><tr><td =
width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibern=
ate/docbook/callouts/15.png" alt=3D"15" border=3D"0" height=3D"17px" wid=
th=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D=
"literal">optimistic-lock</code> (optional - defaults to
            <code class=3D"literal">version</code>): determines the opti=
mistic locking
            strategy.</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p>(16)</p></td><td valign=3D"top" align=3D"left"><p><code=
 class=3D"literal">lazy</code> (optional): lazy fetching can be
            disabled by setting <code class=3D"literal">lazy=3D"false"</=
code>.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><=
p>(17)</p></td><td valign=3D"top" align=3D"left"><p><code class=3D"liter=
al">entity-name</code> (optional - defaults to the
            class name): Hibernate3 allows a class to be mapped multiple=

            times, potentially to different tables. It also allows entit=
y
            mappings that are represented by Maps or XML at the Java lev=
el. In
            these cases, you should provide an explicit arbitrary name f=
or the
            entity. See <a class=3D"xref" href=3D"#persistent-classes-dy=
namicmodels" title=3D"4.4.=C2=A0Dynamic models">Section=C2=A04.4, =E2=80=
=9CDynamic models=E2=80=9D</a>
            and <a class=3D"xref" href=3D"#xml" title=3D"Chapter=C2=A020=
.=C2=A0XML Mapping">Chapter=C2=A020, <i>XML Mapping</i></a> for more inf=
ormation.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left=
"><p>(18)</p></td><td valign=3D"top" align=3D"left"><p><code class=3D"li=
teral">check</code> (optional): an SQL expression used
            to generate a multi-row <span class=3D"emphasis"><em>check</=
em></span> constraint for
            automatic schema generation.</p></td></tr><tr><td width=3D"5=
%" valign=3D"top" align=3D"left"><p>(19)</p></td><td valign=3D"top" alig=
n=3D"left"><p><code class=3D"literal">rowid</code> (optional): Hibernate=
 can use
            ROWIDs on databases. On Oracle, for example, Hibernate can u=
se the
            <code class=3D"literal">rowid</code> extra column for fast u=
pdates once this
            option has been set to <code class=3D"literal">rowid</code>.=
 A ROWID is an
            implementation detail and represents the physical location o=
f a
            stored tuple.</p></td></tr><tr><td width=3D"5%" valign=3D"to=
p" align=3D"left"><p>(20)</p></td><td valign=3D"top" align=3D"left"><p><=
code class=3D"literal">subselect</code> (optional): maps an immutable
            and read-only entity to a database subselect. This is useful=
 if
            you want to have a view instead of a base table. See below f=
or
            more information.</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p>(21)</p></td><td valign=3D"top" align=3D"left"><=
p><code class=3D"literal">abstract</code> (optional): is used to mark
            abstract superclasses in <code class=3D"literal">&lt;union-s=
ubclass&gt;</code>
            hierarchies.</p></td></tr></table></div></div><p>It is accep=
table for the named persistent class to be an
      interface. You can declare implementing classes of that interface =
using
      the <code class=3D"literal">&lt;subclass&gt;</code> element. You c=
an persist any
      <span class=3D"emphasis"><em>static</em></span> inner class. Speci=
fy the class name using
      the standard form i.e. <code class=3D"literal">e.g.Foo$Bar</code>.=
</p><p>Here is how to do a virtual view (subselect) in XML:</p><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.jav=
a.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Summary&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subselect</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;select&nbsp;item.name,&nbsp;max(bid.amount),&nbsp;count(*)</span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;from&nbsp;item</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;join&nbsp;bid&nbsp;on&nbsp;bid.item_id&nbsp;=3D&nbsp;item.id</span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;group&nbsp;by&nbsp;item.name</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subselect</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">synchronize</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;item&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">synchronize</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;bid&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;name&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>The <code class=3D"literal">&lt;subselect&gt;</code> is availab=
le both as an
      attribute and a nested mapping element.</p></div><div class=3D"sec=
tion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"tit=
le"><a id=3D"mapping-declaration-id"/>5.1.2.=C2=A0Identifiers</h3></div>=
</div></div><p>Mapped classes <span class=3D"emphasis"><em>must</em></sp=
an> declare the primary key
      column of the database table. Most classes will also have a
      JavaBeans-style property holding the unique identifier of an
      instance.</p><p>Mark the identifier property with
      <code class=3D"classname">@Id</code>.</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"jav=
a_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Person</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;g=
etId</span><span class=3D"java_separator">()</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">...</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In hbm.xml=
, use the <code class=3D"literal">&lt;id&gt;</code> element which
      defines the mapping from that property to the primary key column.<=
/p><div class=3D"programlistingco"><pre class=3D"programlisting">&lt;id
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"id1"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>propertyNa=
me"
        type=3D"<span xmlns=3D"" class=3D"co" id=3D"id2"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>typename"
        column<span xmlns=3D"" class=3D"co" id=3D"id3"><img src=3D"image=
s/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>=3D"column_n=
ame"
        unsave<span xmlns=3D"" class=3D"co" id=3D"id4"><img src=3D"image=
s/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>d-value=3D"n=
ull|any|none|undefined|id_value"
        access<span xmlns=3D"" class=3D"co" id=3D"id5"><img src=3D"image=
s/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"field|pr=
operty|ClassName"&gt;
        node=3D"element-name|@attribute-name|element/@attribute|."

        &lt;generator class=3D"generatorClass"/&gt;
&lt;/id&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D=
"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><im=
g xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"=
0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"=
left"><p><code class=3D"literal">name</code> (optional): the name of the=

            identifier property.</p></td></tr><tr><td width=3D"5%" valig=
n=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.h=
ighlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callo=
uts/2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></=
td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">type</co=
de> (optional): a name that indicates
            the Hibernate type.</p></td></tr><tr><td width=3D"5%" valign=
=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callou=
ts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></t=
d><td valign=3D"top" align=3D"left"><p><code class=3D"literal">column</c=
ode> (optional - defaults to the
            property name): the name of the primary key column.</p></td>=
</tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">unsaved-value</code> (optional - defaults to a
            "sensible" value): an identifier property value that indicat=
es an
            instance is newly instantiated (unsaved), distinguishing it =
from
            detached instances that were saved or loaded in a previous
            session.</p></td></tr><tr><td width=3D"5%" valign=3D"top" al=
ign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/5.png" a=
lt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valig=
n=3D"top" align=3D"left"><p><code class=3D"literal">access</code> (optio=
nal - defaults to
            <code class=3D"literal">property</code>): the strategy Hiber=
nate should use
            for accessing the property value.</p></td></tr></table></div=
></div><p>If the <code class=3D"literal">name</code> attribute is missin=
g, it is assumed
      that the class has no identifier property.</p><p>The <code class=3D=
"literal">unsaved-value</code> attribute is almost never
      needed in Hibernate3 and indeed has no corresponding element in
      annotations.</p><p>You can also declare the identifier as a compos=
ite identifier.
      This allows access to legacy data with composite keys. Its use is
      strongly discouraged for anything else.</p><div class=3D"section" =
lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"title"><a=
 id=3D"d0e4819"/>5.1.2.1.=C2=A0Composite identifier</h4></div></div></di=
v><p>You can define a composite primary key through several
        syntaxes:</p><div class=3D"itemizedlist"><ul><li><p>use a compon=
ent type to represent the identifier and map it
            as a property in the entity: you then annotated the property=
 as
            <code class=3D"classname">@EmbeddedId</code>. The component =
type has to be
            <code class=3D"classname">Serializable</code>.</p></li><li><=
p>map multiple properties as <code class=3D"classname">@Id</code>
            properties: the identifier type is then the entity class its=
elf
            and needs to be <code class=3D"classname">Serializable</code=
>. This approach
            is unfortunately not standard and only supported by
            Hibernate.</p></li><li><p>map multiple properties as <code c=
lass=3D"classname">@Id</code>
            properties and declare an external class to be the identifie=
r
            type. This class, which needs to be
            <code class=3D"classname">Serializable</code>, is declared o=
n the entity via
            the <code class=3D"classname">@IdClass</code> annotation. Th=
e identifier
            type must contain the same properties as the identifier prop=
erties
            of the entity: each property name must be the same, its type=
 must
            be the same as well if the entity property is of a basic typ=
e, its
            type must be the type of the primary key of the associated e=
ntity
            if the entity property is an association (either a
            <code class=3D"classname">@OneToOne</code> or a
            <code class=3D"classname">@ManyToOne</code>).</p></li></ul><=
/div><p>As you can see the last case is far from obvious. It has been
        inherited from the dark ages of EJB 2 for backward compatibiliti=
es and
        we recommend you not to use it (for simplicity sake).</p><p>Let'=
s explore all three cases using examples.</p><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D=
"d0e4865"/>5.1.2.1.1.=C2=A0id as a property using a component type</h5><=
/div></div></div><p>Here is a simple example of
          <code class=3D"classname">@EmbeddedId</code>.</p><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><spa=
n class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">AttributeOverride</span><span class=3D"java_separat=
or">(</span><span class=3D"java_plain">name</span><span class=3D"java_op=
erator">=3D</span><span class=3D"java_literal">&quot;firstName&quot;</sp=
an><span class=3D"java_separator">,</span><span class=3D"java_plain">&nb=
sp;column</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">@</span><span class=3D"java_type">Column</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">name</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;fld_fi=
rstname&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">UserId</span><span class=3D"java_plain">&nbsp;id</sp=
an><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;age</=
span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">UserId</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Se=
rializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>You can no=
tice that the <code class=3D"classname">UserId</code> class is
          serializable. To override the column mapping, use
          <code class=3D"classname">@AttributeOverride</code>.</p><p>An =
embedded id can itself contains the primary key of an
          associated entity.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jbo=
ss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span cl=
ass=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_type">Entit=
y</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Customer</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">CustomerId</span><span class=3D"java_pla=
in">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">boolean</span><span class=3D"java_plain">&nbsp;prefe=
rredCustomer</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">MapsId</span><span class=3D"java_separator">(</span=
><span class=3D"java_literal">&quot;userId&quot;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userfirs=
tname_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><=
span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userlast=
name_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;lastName&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToOne</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">User</span><span class=3D"java_plain">&nbs=
p;user</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">CustomerId</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implement=
s</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">UserId</span><span class=3D"java_plain">&nbsp;userId=
</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;custom=
erNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">UserId</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;age</=
span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">UserId</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Se=
rializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In the emb=
edded id object, the association is represented as
          the identifier of the associated entity. But you can link its =
value
          to a regular association in the entity via the
          <code class=3D"classname">@MapsId</code> annotation. The
          <code class=3D"classname">@MapsId</code> value correspond to t=
he property name
          of the embedded id object containing the associated entity's
          identifier. In the database, it means that the
          <code class=3D"literal">Customer.user</code> and the
          <code class=3D"literal">CustomerId.userId</code> properties sh=
are the same
          underlying column (<code class=3D"literal">user_fk</code> in t=
his case).</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" class=3D"tip"><h2>Tip</h2><p>The component type used as identifier=
 must implement
            <code class=3D"methodname">equals()</code> and
            <code class=3D"methodname">hashCode()</code>.</p></div><p>In=
 practice, your code only sets the
          <code class=3D"literal">Customer.user</code> property and the =
user id value is
          copied by Hibernate into the <code class=3D"literal">CustomerI=
d.userId</code>
          property.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"warning"><h2>Warning</h2><p>The id value can be =
copied as late as flush time, don't rely
            on it until after flush time.</p></div><p>While not supporte=
d in JPA, Hibernate lets you place your
          association directly in the embedded id component (instead of =
having
          to use the <code class=3D"classname">@MapsId</code> annotation=
).</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span=
><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Customer</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">CustomerId</span><span class=3D"java_pla=
in">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">boolean</span><span class=3D"java_plain">&nbsp;prefe=
rredCustomer</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">CustomerId</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implement=
s</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userfirs=
tname_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><=
span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userlast=
name_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;lastName&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span><span class=3D"java_plain">&nbsp;</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">User</span><span class=3D"java_plain">&nbsp;user</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;custom=
erNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">UserId</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;age</=
span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">UserId</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Se=
rializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>Let's now =
rewrite these examples using the hbm.xml
          syntax.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highligh=
t.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight=
 v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
composite-id</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">name</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;prope=
rtyName&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">class</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Clas=
sName&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">mapped</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e|false&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">access</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fie=
ld|property|ClassName&quot;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">node</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eleme=
nt-name|.&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;propertyName&quot;<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;typename&quot;</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;column_name&quot;</span><span class=3D"xml_tag_symbols">/&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-many-to-one</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;propertyName&quo=
t;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">class</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;ClassName&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;column_name&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;......</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>composite-id</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
</pre><p>First a simple example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generate=
d by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;firstName&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column<=
/span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attri=
bute_value">&quot;fld_firstname&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;lastName&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>Then an example showing how an association can be
          mapped.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highligh=
t.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight=
 v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Customer=
Id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;firstName&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column<=
/span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attri=
bute_value">&quot;userfirstname_fk&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;lastName&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;userfirstname_fk&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;customerNumber&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;preferredCustomer&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;user&quot;</span><span class=3D"xml_tag_symbols">&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">col=
umn</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;userfirstname_fk&quot;</span><span cl=
ass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">updata=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">insertable</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fa=
lse&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">col=
umn</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;userlastname_fk&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">updatab=
le</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">insertable</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fa=
lse&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">many-to-one</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;firstName&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;lastName&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;age&quot;</span><span class=3D"xml_tag_symbols">/&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>Notice a few things in the previous example:</p><div class=3D"i=
temizedlist"><ul><li><p>the order of the properties (and column) matters=
. It must
              be the same between the association and the primary key of=
 the
              associated entity</p></li><li><p>the many to one uses the =
same columns as the primary key
              and thus must be marked as read only
              (<code class=3D"literal">insertable</code> and <code class=
=3D"literal">updatable</code>
              to false).</p></li><li><p>unlike with <code class=3D"class=
name">@MapsId</code>, the id value
              of the associated entity is not transparently copied, chec=
k the
              <code class=3D"literal">foreign</code> id generator for mo=
re
              information.</p></li></ul></div><p>The last example shows =
how to map association directly in the
          embedded id component.</p><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generate=
d by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Customer=
Id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;user&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;userfirstname_fk&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;userlastname_fk&quo=
t;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">ke=
y-many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;customerNumber&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;preferredCustomer&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;firstName&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;lastName&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;age&quot;</span><span class=3D"xml_tag_symbols">/&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>This is the recommended approach to map composite identifier.
          The following options should not be considered unless some
          constraint are present.</p></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"=
d0e4973"/>5.1.2.1.2.=C2=A0Multiple id properties without identifier type=
</h5></div></div></div><p>Another, arguably more natural, approach is to=
 place
          <code class=3D"classname">@Id</code> on multiple properties of=
 your entity.
          This approach is only supported by Hibernate (not JPA complian=
t) but
          does not require an extra embeddable component.</p><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><spa=
n class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Customer</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">OneToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userfirs=
tname_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><=
span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userlast=
name_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;lastName&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">User</span><span class=3D"java_plain">&nbsp;user</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;cu=
stomerNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">boolean</span><span class=3D"java_plain">&nbsp;prefe=
rredCustomer</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">UserId</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;age</=
span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">UserId</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Se=
rializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In this ca=
se <code class=3D"classname">Customer</code> is its own
          identifier representation: it must implement
          <code class=3D"classname">Serializable</code> and must impleme=
nt
          <code class=3D"methodname">equals()</code> and
          <code class=3D"methodname">hashCode()</code>.</p><p>In hbm.xml=
, the same mapping is:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hig=
hlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHigh=
light v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;user&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;userfirstname_fk&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;userlastname_fk&quo=
t;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">ke=
y-many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;customerNumber&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;preferredCustomer&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;firstName&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;lastName&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;age&quot;</span><span class=3D"xml_tag_symbols">/&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h5 class=3D"title"><a id=3D"d0e5001"/>5.1.2.1.3.=C2=A0Mult=
iple id properties with with a dedicated identifier
          type</h5></div></div></div><p><code class=3D"classname">@IdCla=
ss</code> on an entity points to the
          class (component) representing the identifier of the class. Th=
e
          properties marked <code class=3D"classname">@Id</code> on the =
entity must have
          their corresponding property on the <code class=3D"classname">=
@IdClass</code>.
          The return type of search twin property must be either identic=
al for
          basic properties or must correspond to the identifier class of=
 the
          associated entity for an association.</p><div xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"warning"><h2>Warning=
</h2><p>This approach is inherited from the EJB 2 days and we
            recommend against its use. But, after all it's your applicat=
ion
            and Hibernate supports it.</p></div><pre xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <=
br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"=
java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">IdClass</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_type">CustomerId</span><span class=3D"java_separator">.</span><span =
class=3D"java_keyword">class</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Customer</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">OneToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userfirs=
tname_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><=
span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userlast=
name_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;lastName&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span><span class=3D"java_plain">&nbsp;</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">User</span><span class=3D"java_plain">&nbsp;user</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;cu=
stomerNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">boolean</span><span class=3D"java_plain">&nbsp;prefe=
rredCustomer</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">CustomerId</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implement=
s</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">UserId</span><span class=3D"java_plain">&nbsp;user</=
span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;custom=
erNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">UserId</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;age</=
span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">UserId</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Se=
rializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p><code clas=
s=3D"classname">Customer</code> and
          <code class=3D"classname">CustomerId</code> do have the same p=
roperties
          <code class=3D"literal">customerNumber</code> as well as
          <code class=3D"literal">user</code>. <code class=3D"classname"=
>CustomerId</code> must be
          <code class=3D"classname">Serializable</code> and implement
          <code class=3D"classname">equals()</code> and
          <code class=3D"classname">hashCode()</code>.</p><p>While not J=
PA standard, Hibernate let's you declare the
          vanilla associated property in the
          <code class=3D"classname">@IdClass</code>.</p><pre xmlns=3D"" =
xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA=
"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span c=
lass=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">IdClass</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_type">CustomerId</span><span class=3D"java_separator">.</span><span =
class=3D"java_keyword">class</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Customer</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">OneToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userfirs=
tname_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><=
span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;userlast=
name_fk&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;referencedColumnName</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;lastName&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span><span class=3D"java_plain">&nbsp;</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">User</span><span class=3D"java_plain">&nbsp;user</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;cu=
stomerNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">boolean</span><span class=3D"java_plain">&nbsp;prefe=
rredCustomer</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">CustomerId</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implement=
s</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">Serializable</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToOne</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">User</span><span class=3D"java_plain">&nbs=
p;user</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;custom=
erNumber</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">EmbeddedId</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">UserId</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;age</=
span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_keyword">implements=
</span><span class=3D"java_plain">&nbsp;equals&nbsp;and&nbsp;hashCode</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">UserId</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implements</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Se=
rializable</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_type">String</span><span class=3D"java_plain">&nbsp;firstName</spa=
n><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_type">String</span><span class=3D"java_plain">&nbsp;lastName</span=
><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>This featu=
re is of limited interest though as you are likely
          to have chosen the <code class=3D"classname">@IdClass</code> a=
pproach to stay
          JPA compliant or you have a quite twisted mind.</p><p>Here are=
 the equivalent on hbm.xml files:</p><pre xmlns=3D"" xmlns:rf=3D"java:or=
g.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generat=
ed by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;CustomerId&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">mapped</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;user&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;userfirstname_fk&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;userlastname_fk&quo=
t;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">ke=
y-many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;customerNumber&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;preferredCustomer&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">class</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;firstName&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
-property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;lastName&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">property</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;age&quot;</span><span class=3D"xml_tag_symbols">/&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h4 class=3D"title"><a id=3D"mapping-declaration-id-g=
enerator"/>5.1.2.2.=C2=A0Identifier generator</h4></div></div></div><p>H=
ibernate can generate and populate identifier values for you
        automatically. This is the recommended approach over "business" =
or
        "natural" id (especially composite ids).</p><p>Hibernate offers =
various generation strategies, let's explore
        the most common ones first that happens to be standardized by
        JPA:</p><div class=3D"itemizedlist"><ul><li><p>IDENTITY: support=
s identity columns in DB2, MySQL, MS SQL
            Server, Sybase and HypersonicSQL. The returned identifier is=
 of
            type <code class=3D"literal">long</code>, <code class=3D"lit=
eral">short</code> or
            <code class=3D"literal">int</code>.</p></li><li><p>SEQUENCE =
(called <code class=3D"literal">seqhilo</code> in Hibernate):
            uses a hi/lo algorithm to efficiently generate identifiers o=
f type
            <code class=3D"literal">long</code>, <code class=3D"literal"=
>short</code> or
            <code class=3D"literal">int</code>, given a named database s=
equence.</p></li><li><p>TABLE (called
            <code class=3D"classname">MultipleHiLoPerTableGenerator</cod=
e> in Hibernate)
            : uses a hi/lo algorithm to efficiently generate identifiers=
 of
            type <code class=3D"literal">long</code>, <code class=3D"lit=
eral">short</code> or
            <code class=3D"literal">int</code>, given a table and column=
 as a source of hi
            values. The hi/lo algorithm generates identifiers that are u=
nique
            only for a particular database.</p></li><li><p>AUTO: selects=
 <code class=3D"literal">IDENTITY</code>,
            <code class=3D"literal">SEQUENCE</code> or <code class=3D"li=
teral">TABLE</code> depending
            upon the capabilities of the underlying database.</p></li></=
ul></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory"=
 class=3D"important"><h2>Important</h2><p>We recommend all new projects =
to use the new enhanced
          identifier generators. They are deactivated by default for ent=
ities
          using annotations but can be activated using
          <code class=3D"code">hibernate.id.new_generator_mappings=3Dtru=
e</code>. These new
          generators are more efficient and closer to the JPA 2 specific=
ation
          semantic.</p><p>However they are not backward compatible with =
existing
          Hibernate based application (if a sequence or a table is used =
for id
          generation). See XXXXXXX <a class=3D"xref" href=3D"#">???</a> =
for
          more information on how to activate them.</p></div><p>To mark =
an id property as generated, use the
        <code class=3D"classname">@GeneratedValue</code> annotation. You=
 can specify the
        strategy used (default to <code class=3D"literal">AUTO</code>) b=
y setting
        <code class=3D"literal">strategy</code>.</p><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=
=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;getId=
</span><span class=3D"java_separator">()</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">...</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Invoice</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_plain">strategy</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_type">GenerationType</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">IDENTITY=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;getId=
</span><span class=3D"java_separator">()</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">...</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p><code clas=
s=3D"literal">SEQUENCE</code> and <code class=3D"literal">TABLE</code> r=
equire
        additional configurations that you can set using
        <code class=3D"classname">@SequenceGenerator</code> and
        <code class=3D"classname">@TableGenerator</code>:</p><div class=3D=
"itemizedlist"><ul><li><p><code class=3D"literal">name</code>: name of t=
he generator</p></li><li><p><code class=3D"literal">table</code> / <code=
 class=3D"literal">sequenceName</code>:
            name of the table or the sequence (defaulting respectively t=
o
            <code class=3D"literal">hibernate_sequences</code> and
            <code class=3D"literal">hibernate_sequence</code>)</p></li><=
li><p><code class=3D"literal">catalog</code> /
            <code class=3D"literal">schema</code>:</p></li><li><p><code =
class=3D"literal">initialValue</code>: the value from which the id
            is to start generating</p></li><li><p><code class=3D"literal=
">allocationSize</code>: the amount to increment
            by when allocating id numbers from the generator</p></li></u=
l></div><p>In addition, the <code class=3D"classname">TABLE</code> strat=
egy also let
        you customize:</p><div class=3D"itemizedlist"><ul><li><p><code c=
lass=3D"literal">pkColumnName</code>: the column name containing
            the entity identifier</p></li><li><p><code class=3D"literal"=
>valueColumnName</code>: the column name
            containing the identifier value</p></li><li><p><code class=3D=
"literal">pkColumnValue</code>: the entity
            identifier</p></li><li><p><code class=3D"literal">uniqueCons=
traints</code>: any potential column
            constraint on the table containing the ids</p></li></ul></di=
v><p>To link a table or sequence generator definition with an actual
        generated property, use the same name in both the definition
        <code class=3D"literal">name</code> and the generator value
        <code class=3D"literal">generator</code> as shown below.</p><pre=
 xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" c=
lass=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/=
> --><span class=3D"java_type">Id</span><!-- <br/> --><span class=3D"jav=
a_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">GeneratedValue</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;strateg=
y</span><span class=3D"java_operator">=3D</span><span class=3D"java_type=
">GenerationType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">SEQUENCE</span><span class=3D"java_separator">,</span><=
span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;generat=
or</span><span class=3D"java_operator">=3D</span><span class=3D"java_lit=
eral">&quot;SEQ_GEN&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@javax</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">persistence</span><span =
class=3D"java_separator">.</span><span class=3D"java_type">SequenceGener=
ator</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_literal"=
>&quot;SEQ_GEN&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sequenc=
eName</span><span class=3D"java_operator">=3D</span><span class=3D"java_=
literal">&quot;my_sequence&quot;</span><span class=3D"java_separator">,<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;allocat=
ionSize</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_literal">20</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">...</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre><p>The scope of a generator =
definition can be the application or
        the class. Class-defined generators are not visible outside the =
class
        and can override application level generators. Application level=

        generators are defined in JPA's XML deployment descriptors (see =
XXXXXX
        <a class=3D"xref" href=3D"#">???</a>):</p><pre xmlns=3D"" xmlns:=
rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!--=
 <br/> --><span class=3D"java_operator">&lt;</span><!-- <br/> --><span c=
lass=3D"java_plain">table</span><!-- <br/> --><span class=3D"java_operat=
or">-</span><!-- <br/> --><span class=3D"java_plain">generator&nbsp;name=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_literal">&quot;EMP_GEN&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">&quot;GENERATOR_TABLE&=
quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pk</span><span class=3D"java_op=
erator">-</span><span class=3D"java_plain">column</span><span class=3D"j=
ava_operator">-</span><span class=3D"java_plain">name</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_literal">&quot;key&quot;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=3D"java=
_operator">-</span><span class=3D"java_plain">column</span><span class=3D=
"java_operator">-</span><span class=3D"java_plain">name</span><span clas=
s=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;hi&quot=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pk</span><span class=3D"java_op=
erator">-</span><span class=3D"java_plain">column</span><span class=3D"j=
ava_operator">-</span><span class=3D"java_plain">value</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;EMP&quot=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allocation</span><span class=3D=
"java_operator">-</span><span class=3D"java_plain">size</span><span clas=
s=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;20&quot=
;</span><span class=3D"java_operator">/&gt;</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">and&nbsp;the&nbsp;annotation&nbsp;equivalent</span>
</span>
<!--  --><br/><span class=3D"java_plain">@javax</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">persistence</span><span =
class=3D"java_separator">.</span><span class=3D"java_type">TableGenerato=
r</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_literal"=
>&quot;EMP_GEN&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;table</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_literal=
">&quot;GENERATOR_TABLE&quot;</span><span class=3D"java_separator">,</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pkColum=
nName&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;key&quot;</=
span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;valueCo=
lumnName&nbsp;</span><span class=3D"java_operator">=3D</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;hi&quot;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pkColum=
nValue</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_literal">&quot;EMP&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;allocat=
ionSize</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_literal">20</span>
<!--  --><br/><span class=3D"java_separator">)</span>
</span>
<!--  --><br/><span class=3D"java_operator">&lt;</span><span class=3D"ja=
va_plain">sequence</span><span class=3D"java_operator">-</span><span cla=
ss=3D"java_plain">generator&nbsp;name</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_literal">&quot;SEQ_GEN&quot;</span><span=
 class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sequenc=
e</span><span class=3D"java_operator">-</span><span class=3D"java_plain"=
>name</span><span class=3D"java_operator">=3D</span><span class=3D"java_=
literal">&quot;my_sequence&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;allocat=
ion</span><span class=3D"java_operator">-</span><span class=3D"java_plai=
n">size</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_literal">&quot;20&quot;</span><span class=3D"java_operator">/&gt;</spa=
n>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">and&nbsp;the&nbsp;annotation&nbsp;equivalent</span>
</span>
<!--  --><br/><span class=3D"java_plain">@javax</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">persistence</span><span =
class=3D"java_separator">.</span><span class=3D"java_type">SequenceGener=
ator</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_literal"=
>&quot;SEQ_GEN&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sequenc=
eName</span><span class=3D"java_operator">=3D</span><span class=3D"java_=
literal">&quot;my_sequence&quot;</span><span class=3D"java_separator">,<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;allocat=
ionSize</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_literal">20</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span></pre><p>If a JPA XML descriptor (like
        <code class=3D"filename">META-INF/orm.xml</code>) is used to def=
ine the
        generators, <code class=3D"literal">EMP_GEN</code> and <code cla=
ss=3D"literal">SEQ_GEN</code>
        are application level generators.</p><div xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>Pack=
age level definition is not supported by the JPA
          specification. However, you can use the
          <code class=3D"literal">@GenericGenerator</code> at the packag=
e level (see <a class=3D"xref" href=3D"#">???</a>).</p></div><p>These ar=
e the four standard JPA generators. Hibernate goes
        beyond that and provide additional generators or additional opti=
ons as
        we will see below. You can also write your own custom identifier=

        generator by implementing
        <code class=3D"classname">org.hibernate.id.IdentifierGenerator</=
code>.</p><p>To define a custom generator, use the
        <code class=3D"classname">@GenericGenerator</code> annotation (a=
nd its plural
        counter part <code class=3D"classname">@GenericGenerators</code>=
) that describes
        the class of the identifier generator or its short cut name (as
        described below) and a list of key/value parameters. When using
        <code class=3D"classname">@GenericGenerator</code> and assigning=
 it via
        <code class=3D"classname">@GeneratedValue.generator</code>, the
        <code class=3D"classname">@GeneratedValue.strategy</code> is ign=
ored: leave it
        blank.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_pl=
ain">@</span><!-- <br/> --><span class=3D"java_type">Id</span><!-- <br/>=
 --><span class=3D"java_plain">&nbsp;@</span><!-- <br/> --><span class=3D=
"java_type">GeneratedValue</span><!-- <br/> --><span class=3D"java_separ=
ator">(</span><!-- <br/> --><span class=3D"java_plain">generator</span><=
!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span=
 class=3D"java_literal">&quot;system-uuid&quot;</span><!-- <br/> --><spa=
n class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">GenericGenerator</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">&quot;system-uuid&quot;</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;strategy&nbsp;=
</span><span class=3D"java_operator">=3D</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_literal">&quot;uuid&quot;</span><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Id</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"java=
_type">GeneratedValue</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">generator</span><span class=3D"java_operator">=3D<=
/span><span class=3D"java_literal">&quot;trigger-generated&quot;</span><=
span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">GenericGenerator</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_literal"=
>&quot;trigger-generated&quot;</span><span class=3D"java_separator">,</s=
pan><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;strateg=
y&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_literal">&quot;select&quot;</s=
pan><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;paramet=
ers&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;@</span><span class=3D"java_type">Parameter</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">name</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_literal">&qu=
ot;key&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;value&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal=
">&quot;socialSecurityNumber&quot;</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">{</span></pre><p>The hbm.xml approach uses the optional
        <code class=3D"literal">&lt;generator&gt;</code> child element i=
nside
        <code class=3D"literal">&lt;id&gt;</code>. If any parameters are=
 required to
        configure or initialize the generator instance, they are passed =
using
        the <code class=3D"literal">&lt;param&gt;</code> element.</p><pr=
e xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight=
.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;cat_id&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;org.hibernate.id.TableH=
iLoGenerator&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;table&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain">uid_table</span><span class=3D"xml_=
tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</span><span =
class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;column&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain">next_hi_value_column</span><span c=
lass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
</pre><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><di=
v><div><h5 class=3D"title"><a id=3D"d0e5294"/>5.1.2.2.1.=C2=A0Various ad=
ditional generators</h5></div></div></div><p>All generators implement th=
e interface
          <code class=3D"literal">org.hibernate.id.IdentifierGenerator</=
code>. This is a
          very simple interface. Some applications can choose to provide=
 their
          own specialized implementations, however, Hibernate provides a=
 range
          of built-in implementations. The shortcut names for the built-=
in
          generators are as follows: </p><div class=3D"variablelist"><dl=
><dt><span class=3D"term"><code class=3D"literal">increment</code></span=
></dt><dd><p>generates identifiers of type <code class=3D"literal">long<=
/code>,
                  <code class=3D"literal">short</code> or <code class=3D=
"literal">int</code> that are
                  unique only when no other process is inserting data in=
to the
                  same table. <span class=3D"emphasis"><em>Do not use in=
 a
                  cluster.</em></span></p></dd><dt><span class=3D"term">=
<code class=3D"literal">identity</code></span></dt><dd><p>supports ident=
ity columns in DB2, MySQL, MS SQL
                  Server, Sybase and HypersonicSQL. The returned identif=
ier is
                  of type <code class=3D"literal">long</code>, <code cla=
ss=3D"literal">short</code> or
                  <code class=3D"literal">int</code>.</p></dd><dt><span =
class=3D"term"><code class=3D"literal">sequence</code></span></dt><dd><p=
>uses a sequence in DB2, PostgreSQL, Oracle, SAP DB,
                  McKoi or a generator in Interbase. The returned identi=
fier
                  is of type <code class=3D"literal">long</code>, <code =
class=3D"literal">short</code>
                  or <code class=3D"literal">int</code></p></dd><dt><spa=
n class=3D"term"><code class=3D"literal">hilo</code></span></dt><dd><p><=
a id=3D"mapping-declaration-id-hilodescription"/>uses a hi/lo algorithm =
to efficiently generate
                  identifiers of type <code class=3D"literal">long</code=
>,
                  <code class=3D"literal">short</code> or <code class=3D=
"literal">int</code>, given a
                  table and column (by default
                  <code class=3D"literal">hibernate_unique_key</code> an=
d
                  <code class=3D"literal">next_hi</code> respectively) a=
s a source of hi
                  values. The hi/lo algorithm generates identifiers that=
 are
                  unique only for a particular database.</p></dd><dt><sp=
an class=3D"term"><code class=3D"literal">seqhilo</code></span></dt><dd>=
<p>uses a hi/lo algorithm to efficiently generate
                  identifiers of type <code class=3D"literal">long</code=
>,
                  <code class=3D"literal">short</code> or <code class=3D=
"literal">int</code>, given a
                  named database sequence.</p></dd><dt><span class=3D"te=
rm"><code class=3D"literal">uuid</code></span></dt><dd><p>Generates a 12=
8-bit UUID based on a custom algorithm.
                  The value generated is represented as a string of 32
                  hexidecimal digits. Users can also configure it to use=
 a
                  separator (config parameter "separator") which separat=
es the
                  hexidecimal digits into 8{sep}8{sep}4{sep}8{sep}4. Not=
e
                  specifically that this is different than the IETF RFC =
4122
                  representation of 8-4-4-4-12. If you need RFC 4122 com=
pliant
                  UUIDs, consider using "uuid2" generator discussed
                  below.</p></dd><dt><span class=3D"term"><code class=3D=
"literal">uuid2</code></span></dt><dd><p>Generates a IETF RFC 4122 compl=
iant (variant 2)
                  128-bit UUID. The exact "version" (the RFC term) gener=
ated
                  depends on the pluggable "generation strategy" used (s=
ee
                  below). Capable of generating values as
                  <code class=3D"classname">java.util.UUID</code>,
                  <code class=3D"classname">java.lang.String</code> or a=
s a byte array
                  of length 16 (<code class=3D"literal">byte[16]</code>)=
. The "generation
                  strategy" is defined by the interface
                  <code class=3D"interfacename">org.hibernate.id.UUIDGen=
erationStrategy</code>.
                  The generator defines 2 configuration parameters for
                  defining which generation strategy to use: </p><div cl=
ass=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"literal=
">uuid_gen_strategy_class</code></span></dt><dd><p>Names the UUIDGenerat=
ionStrategy class to
                          use</p></dd><dt><span class=3D"term"><code cla=
ss=3D"literal">uuid_gen_strategy</code></span></dt><dd><p>Names the UUID=
GenerationStrategy instance to
                          use</p></dd></dl></div><p>Out of the box, come=
s with the following strategies:
                  </p><div class=3D"itemizedlist"><ul><li><p><code class=
=3D"classname">org.hibernate.id.uuid.StandardRandomStrategy</code>
                        (the default) - generates "version 3" (aka, "ran=
dom")
                        UUID values via the
                        <code class=3D"methodname">randomUUID</code> met=
hod of
                        <code class=3D"classname">java.util.UUID</code><=
/p></li><li><p><code class=3D"classname">org.hibernate.id.uuid.CustomVer=
sionOneStrategy</code>
                        - generates "version 1" UUID values, using IP ad=
dress
                        since mac address not available. If you need mac=

                        address to be used, consider leveraging one of t=
he
                        existing third party UUID generators which sniff=
 out
                        mac address and integrating it via the
                        <code class=3D"interfacename">org.hibernate.id.U=
UIDGenerationStrategy</code>
                        contract. Two such libraries known at time of th=
is
                        writing include <a class=3D"ulink" href=3D"http:=
//johannburkard.de/software/uuid/">http://johannburkard.de/software/uuid=
/</a>
                        and <a class=3D"ulink" href=3D"http://commons.ap=
ache.org/sandbox/id/uuid.html">http://commons.apache.org/sandbox/id/uuid=
.html</a></p></li></ul></div></dd><dt><span class=3D"term"><code class=3D=
"literal">guid</code></span></dt><dd><p>uses a database-generated GUID s=
tring on MS SQL Server
                  and MySQL.</p></dd><dt><span class=3D"term"><code clas=
s=3D"literal">native</code></span></dt><dd><p>selects <code class=3D"lit=
eral">identity</code>,
                  <code class=3D"literal">sequence</code> or <code class=
=3D"literal">hilo</code>
                  depending upon the capabilities of the underlying
                  database.</p></dd><dt><span class=3D"term"><code class=
=3D"literal">assigned</code></span></dt><dd><p>lets the application assi=
gn an identifier to the
                  object before <code class=3D"literal">save()</code> is=
 called. This is
                  the default strategy if no
                  <code class=3D"literal">&lt;generator&gt;</code> eleme=
nt is
                  specified.</p></dd><dt><span class=3D"term"><code clas=
s=3D"literal">select</code></span></dt><dd><p>retrieves a primary key, a=
ssigned by a database
                  trigger, by selecting the row by some unique key and
                  retrieving the primary key value.</p></dd><dt><span cl=
ass=3D"term"><code class=3D"literal">foreign</code></span></dt><dd><p>us=
es the identifier of another associated object. It
                  is usually used in conjunction with a
                  <code class=3D"literal">&lt;one-to-one&gt;</code> prim=
ary key
                  association.</p></dd><dt><span class=3D"term"><code cl=
ass=3D"literal">sequence-identity</code></span></dt><dd><p>a specialized=
 sequence generation strategy that
                  utilizes a database sequence for the actual value
                  generation, but combines this with JDBC3 getGeneratedK=
eys to
                  return the generated identifier value as part of the i=
nsert
                  statement execution. This strategy is only supported o=
n
                  Oracle 10g drivers targeted for JDK 1.4. Comments on t=
hese
                  insert statements are disabled due to a bug in the Ora=
cle
                  drivers.</p></dd></dl></div></div><div class=3D"sectio=
n" lang=3D"en-US"><div class=3D"titlepage"><div><div><h5 class=3D"title"=
><a id=3D"mapping-declaration-id-hilo"/>5.1.2.2.2.=C2=A0Hi/lo algorithm<=
/h5></div></div></div><p>The <code class=3D"literal">hilo</code> and <co=
de class=3D"literal">seqhilo</code>
          generators provide two alternate implementations of the hi/lo
          algorithm. The first implementation requires a "special" datab=
ase
          table to hold the next available "hi" value. Where supported, =
the
          second uses an Oracle-style sequence.</p><pre xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!--=
 XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->=

<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;cat_id&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;hilo&quot;</span><span =
class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;table&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain">hi_value</span><span class=3D"xml_t=
ag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;column&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain">next_value</span><span class=3D"xm=
l_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;max_lo&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain">100</span><span class=3D"xml_tag_s=
ymbols">&lt;/</span><span class=3D"xml_tag_name">param</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;cat_id&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;seqhilo&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;sequence&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain">hi_value</span><span class=3D"xm=
l_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;max_lo&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain">100</span><span class=3D"xml_tag_s=
ymbols">&lt;/</span><span class=3D"xml_tag_name">param</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
</pre><p>Unfortunately, you cannot use <code class=3D"literal">hilo</cod=
e> when
          supplying your own <code class=3D"literal">Connection</code> t=
o Hibernate. When
          Hibernate uses an application server datasource to obtain
          connections enlisted with JTA, you must configure the
          <code class=3D"literal">hibernate.transaction.manager_lookup_c=
lass</code>.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h5 class=3D"title"><a id=3D"mapping-declaration-i=
d-uuid"/>5.1.2.2.3.=C2=A0UUID algorithm</h5></div></div></div><p>The UUI=
D contains: IP address, startup time of the JVM that is
          accurate to a quarter second, system time and a counter value =
that
          is unique within the JVM. It is not possible to obtain a MAC a=
ddress
          or memory address from Java code, so this is the best option w=
ithout
          using JNI.</p></div><div class=3D"section" lang=3D"en-US"><div=
 class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"mapping-decl=
aration-id-sequences"/>5.1.2.2.4.=C2=A0Identity columns and sequences</h=
5></div></div></div><p>For databases that support identity columns (DB2,=
 MySQL,
          Sybase, MS SQL), you can use <code class=3D"literal">identity<=
/code> key
          generation. For databases that support sequences (DB2, Oracle,=

          PostgreSQL, Interbase, McKoi, SAP DB) you can use
          <code class=3D"literal">sequence</code> style key generation. =
Both of these
          strategies require two SQL queries to insert a new object. For=

          example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighligh=
t v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;person_id&quot;</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;sequence&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;sequence&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain">person_id_sequence</span><span c=
lass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;person_id&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">un=
saved-value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;0&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;identity&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
</pre><p>For cross-platform development, the <code class=3D"literal">nat=
ive</code>
          strategy will, depending on the capabilities of the underlying=

          database, choose from the <code class=3D"literal">identity</co=
de>,
          <code class=3D"literal">sequence</code> and <code class=3D"lit=
eral">hilo</code>
          strategies.</p></div><div class=3D"section" lang=3D"en-US"><di=
v class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"mapping-dec=
laration-id-assigned"/>5.1.2.2.5.=C2=A0Assigned identifiers</h5></div></=
div></div><p>If you want the application to assign identifiers, as oppos=
ed
          to having Hibernate generate them, you can use the
          <code class=3D"literal">assigned</code> generator. This specia=
l generator uses
          the identifier value already assigned to the object's identifi=
er
          property. The generator is used when the primary key is a natu=
ral
          key instead of a surrogate key. This is the default behavior i=
f you
          do not specify <code class=3D"classname">@GeneratedValue</code=
> nor
          <code class=3D"literal">&lt;generator&gt;</code> elements.</p>=
<p>The <code class=3D"literal">assigned</code> generator makes Hibernate=
 use
          <code class=3D"literal">unsaved-value=3D"undefined"</code>. Th=
is forces Hibernate
          to go to the database to determine if an instance is transient=
 or
          detached, unless there is a version or timestamp property, or =
you
          define <code class=3D"literal">Interceptor.isUnsaved()</code>.=
</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"=
><div><div><h5 class=3D"title"><a id=3D"mapping-declaration-id-select"/>=
5.1.2.2.6.=C2=A0Primary keys assigned by triggers</h5></div></div></div>=
<p>Hibernate does not generate DDL with triggers. It is for
          legacy schemas only.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated =
by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;person_id&quot;</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;select&quot;</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;key&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain">socialSecurityNumber</span><span clas=
s=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
</pre><p>In the above example, there is a unique valued property named
          <code class=3D"literal">socialSecurityNumber</code>. It is def=
ined by the class,
          as a natural key and a surrogate key named
          <code class=3D"literal">person_id</code>, whose value is gener=
ated by a
          trigger.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"d0e5617"/>5.1.=
2.2.7.=C2=A0Identity copy (foreign generator)</h5></div></div></div><p>F=
inally, you can ask Hibernate to copy the identifier from
          another associated entity. In the Hibernate jargon, it is know=
n as a
          foreign generator but the JPA mapping reads better and is
          encouraged.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"=
java_plain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span=
>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">MedicalHistory</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imple=
ments</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><span c=
lass=3D"java_type">OneToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">JoinColumn</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">name&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_l=
iteral">&quot;person_id&quot;</span><span class=3D"java_separator">)</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_type">Person</span><span class=3D"java_plain">&nbsp;patient</span>=
<span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Person</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><span c=
lass=3D"java_type">GeneratedValue</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">Integer</span><span class=3D"java_plai=
n">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>Or alterna=
tively</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</=
span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">MedicalHistory</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imple=
ments</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;id</spa=
n><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">MapsId</span><span class=3D"java_plain">&nbsp;@</span><sp=
an class=3D"java_type">OneToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">JoinColumn</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">name&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_l=
iteral">&quot;patient_id&quot;</span><span class=3D"java_separator">)</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_type">Person</span><span class=3D"java_plain">&nbsp;patient</span>=
<span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Person</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><span c=
lass=3D"java_type">GeneratedValue</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">Integer</span><span class=3D"java_plai=
n">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In hbm.xml=
 use the following approach:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jbo=
ss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by=
 JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;MedicalHistory&quot;</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">gen=
erator</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_a=
ttribute_name">class</span><span class=3D"xml_tag_symbols">=3D</span><sp=
an class=3D"xml_attribute_value">&quot;foreign&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D=
"xml_tag_name">param</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;property&quot;</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">pa=
tient</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"x=
ml_tag_name">param</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">ge=
nerator</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">na=
me</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;patient&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">class</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Perso=
n&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">constrained</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;true&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h4 class=3D"title"><a id=3D"mapping-declaration-id-e=
nhanced"/>5.1.2.3.=C2=A0Enhanced identifier generators</h4></div></div><=
/div><p>Starting with release 3.2.3, there are 2 new generators which
        represent a re-thinking of 2 different aspects of identifier
        generation. The first aspect is database portability; the second=
 is
        optimization Optimization means that you do not have to query th=
e
        database for every request for a new identifier value. These two=
 new
        generators are intended to take the place of some of the named
        generators described above, starting in 3.3.x. However, they are=

        included in the current releases and can be referenced by FQN.</=
p><p>The first of these new generators is
        <code class=3D"literal">org.hibernate.id.enhanced.SequenceStyleG=
enerator</code>
        which is intended, firstly, as a replacement for the
        <code class=3D"literal">sequence</code> generator and, secondly,=
 as a better
        portability generator than <code class=3D"literal">native</code>=
. This is because
        <code class=3D"literal">native</code> generally chooses between
        <code class=3D"literal">identity</code> and <code class=3D"liter=
al">sequence</code> which have
        largely different semantics that can cause subtle issues in
        applications eyeing portability.
        <code class=3D"literal">org.hibernate.id.enhanced.SequenceStyleG=
enerator</code>,
        however, achieves portability in a different manner. It chooses
        between a table or a sequence in the database to store its
        incrementing values, depending on the capabilities of the dialec=
t
        being used. The difference between this and <code class=3D"liter=
al">native</code>
        is that table-based and sequence-based storage have the same exa=
ct
        semantic. In fact, sequences are exactly what Hibernate tries to=

        emulate with its table-based generators. This generator has a nu=
mber
        of configuration parameters: </p><div class=3D"itemizedlist"><ul=
 compact=3D"compact"><li><p><code class=3D"literal">sequence_name</code>=
 (optional, defaults to
              <code class=3D"literal">hibernate_sequence</code>): the na=
me of the sequence
              or table to be used.</p></li><li><p><code class=3D"literal=
">initial_value</code> (optional, defaults to
              <code class=3D"literal">1</code>): the initial value to be=
 retrieved from
              the sequence/table. In sequence creation terms, this is
              analogous to the clause typically named "STARTS WITH".</p>=
</li><li><p><code class=3D"literal">increment_size</code> (optional - de=
faults to
              <code class=3D"literal">1</code>): the value by which subs=
equent calls to
              the sequence/table should differ. In sequence creation ter=
ms,
              this is analogous to the clause typically named "INCREMENT=

              BY".</p></li><li><p><code class=3D"literal">force_table_us=
e</code> (optional - defaults to
              <code class=3D"literal">false</code>): should we force the=
 use of a table as
              the backing structure even though the dialect might suppor=
t
              sequence?</p></li><li><p><code class=3D"literal">value_col=
umn</code> (optional - defaults to
              <code class=3D"literal">next_val</code>): only relevant fo=
r table
              structures, it is the name of the column on the table whic=
h is
              used to hold the value.</p></li><li><p><code class=3D"lite=
ral">optimizer</code> (optional - defaults to
              <code class=3D"literal">none</code>): See <a class=3D"xref=
" href=3D"#mapping-declaration-id-enhanced-optimizers" title=3D"5.1.2.3.=
1.=C2=A0Identifier generator optimization">Section=C2=A05.1.2.3.1, =E2=80=
=9CIdentifier generator optimization=E2=80=9D</a></p></li></ul></div><p>=
The second of these new generators is
        <code class=3D"literal">org.hibernate.id.enhanced.TableGenerator=
</code>, which is
        intended, firstly, as a replacement for the <code class=3D"liter=
al">table</code>
        generator, even though it actually functions much more like
        <code class=3D"literal">org.hibernate.id.MultipleHiLoPerTableGen=
erator</code>, and
        secondly, as a re-implementation of
        <code class=3D"literal">org.hibernate.id.MultipleHiLoPerTableGen=
erator</code> that
        utilizes the notion of pluggable optimizers. Essentially this
        generator defines a table capable of holding a number of differe=
nt
        increment values simultaneously by using multiple distinctly key=
ed
        rows. This generator has a number of configuration parameters:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p><=
code class=3D"literal">table_name</code> (optional - defaults to
              <code class=3D"literal">hibernate_sequences</code>): the n=
ame of the table
              to be used.</p></li><li><p><code class=3D"literal">value_c=
olumn_name</code> (optional - defaults
              to <code class=3D"literal">next_val</code>): the name of t=
he column on the
              table that is used to hold the value.</p></li><li><p><code=
 class=3D"literal">segment_column_name</code> (optional -
              defaults to <code class=3D"literal">sequence_name</code>):=
 the name of the
              column on the table that is used to hold the "segment key"=
. This
              is the value which identifies which increment value to
              use.</p></li><li><p><code class=3D"literal">segment_value<=
/code> (optional - defaults to
              <code class=3D"literal">default</code>): The "segment key"=
 value for the
              segment from which we want to pull increment values for th=
is
              generator.</p></li><li><p><code class=3D"literal">segment_=
value_length</code> (optional -
              defaults to <code class=3D"literal">255</code>): Used for =
schema generation;
              the column size to create this segment key column.</p></li=
><li><p><code class=3D"literal">initial_value</code> (optional - default=
s to
              <code class=3D"literal">1</code>): The initial value to be=
 retrieved from
              the table.</p></li><li><p><code class=3D"literal">incremen=
t_size</code> (optional - defaults to
              <code class=3D"literal">1</code>): The value by which subs=
equent calls to
              the table should differ.</p></li><li><p><code class=3D"lit=
eral">optimizer</code> (optional - defaults to
              <code class=3D"literal">??</code>): See <a class=3D"xref" =
href=3D"#mapping-declaration-id-enhanced-optimizers" title=3D"5.1.2.3.1.=
=C2=A0Identifier generator optimization">Section=C2=A05.1.2.3.1, =E2=80=9C=
Identifier generator optimization=E2=80=9D</a>.</p></li></ul></div><div =
class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h5 =
class=3D"title"><a id=3D"mapping-declaration-id-enhanced-optimizers"/>5.=
1.2.3.1.=C2=A0Identifier generator optimization</h5></div></div></div><p=
>For identifier generators that store values in the database,
          it is inefficient for them to hit the database on each and eve=
ry
          call to generate a new identifier value. Instead, you can grou=
p a
          bunch of them in memory and only hit the database when you hav=
e
          exhausted your in-memory value group. This is the role of the
          pluggable optimizers. Currently only the two enhanced generato=
rs
          (<a class=3D"xref" href=3D"#mapping-declaration-id-enhanced" t=
itle=3D"5.1.2.3.=C2=A0Enhanced identifier generators">Section=C2=A05.1.2=
.3, =E2=80=9CEnhanced identifier generators=E2=80=9D</a> support this
          operation.</p><div class=3D"itemizedlist"><ul compact=3D"compa=
ct"><li><p><code class=3D"literal">none</code> (generally this is the de=
fault if
              no optimizer was specified): this will not perform any
              optimizations and hit the database for each and every
              request.</p></li><li><p><code class=3D"literal">hilo</code=
>: applies a hi/lo algorithm around
              the database retrieved values. The values from the databas=
e for
              this optimizer are expected to be sequential. The values
              retrieved from the database structure for this optimizer
              indicates the "group number". The
              <code class=3D"literal">increment_size</code> is multiplie=
d by that value in
              memory to define a group "hi value".</p></li><li><p><code =
class=3D"literal">pooled</code>: as with the case of
              <code class=3D"literal">hilo</code>, this optimizer attemp=
ts to minimize the
              number of hits to the database. Here, however, we simply s=
tore
              the starting value for the "next group" into the database
              structure rather than a sequential value in combination wi=
th an
              in-memory grouping algorithm. Here,
              <code class=3D"literal">increment_size</code> refers to th=
e values coming
              from the database.</p></li></ul></div></div></div><div cla=
ss=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 cla=
ss=3D"title"><a id=3D"d0e5826"/>5.1.2.4.=C2=A0Partial identifier generat=
ion</h4></div></div></div><p>Hibernate supports the automatic generation=
 of some of the
        identifier properties. Simply use the
        <code class=3D"classname">@GeneratedValue</code> annotation on o=
ne or several id
        properties.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"warning"><h2>Warning</h2><p>The Hibernate team h=
as always felt such a construct as
          fundamentally wrong. Try hard to fix your data model before us=
ing
          this feature.</p></div><pre xmlns=3D"" xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span c=
lass=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_type">Enti=
ty</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">CustomerInven=
tory</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_k=
eyword">implements</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">Serializable</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">TableGenerator</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">name&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_literal">&quot;inventory&quot;</span><span class=3D"java_separator">,=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;table&n=
bsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_literal">&quot;U_SEQUENCES&quot;<=
/span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pkColum=
nName&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;S_ID&quot;<=
/span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;valueCo=
lumnName&nbsp;</span><span class=3D"java_operator">=3D</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;S_NEXTNU=
M&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pkColum=
nValue&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;inventory&q=
uot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;allocat=
ionSize&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">1000</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">GeneratedValue</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">strategy&nbsp;</span><span class=3D"java_o=
perator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">GenerationType</span><span class=3D"java_separator">.</span>=
<span class=3D"java_plain">TABLE</span><span class=3D"java_separator">,<=
/span><span class=3D"java_plain">&nbsp;generator&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_literal">&quot;inventory&quot;</span><span class=3D"jav=
a_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><spa=
n class=3D"java_separator">;</span>
</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;@</span><span class=
=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><span c=
lass=3D"java_type">ManyToOne</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_plain">cascade&nbsp;</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_type">CascadeType</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">MERGE</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_type">Customer</span><span class=3D"java_plain">&nbsp;customer</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">i=
mplements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">int</span><span class=3D"java_plain">&nbs=
p;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>You can al=
so generate properties inside an
        <code class=3D"classname">@EmbeddedId</code> class.</p></div></d=
iv><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><=
div><h3 class=3D"title"><a id=3D"d0e5844"/>5.1.3.=C2=A0Optimistic lockin=
g properties (optional)</h3></div></div></div><p>When using long transac=
tions or conversations that span several
      database transactions, it is useful to store versioning data to en=
sure
      that if the same entity is updated by two conversations, the last =
to
      commit changes will be informed and not override the other
      conversation's work. It guarantees some isolation while still allo=
wing
      for good scalability and works particularly well in read-often
      write-sometimes situations.</p><p>You can use two approaches: a de=
dicated version number or a
      timestamp.</p><p>A version or timestamp property should never be n=
ull for a
      detached instance. Hibernate will detect any instance with a null
      version or timestamp as transient, irrespective of what other
      <code class=3D"literal">unsaved-value</code> strategies are specif=
ied.
      <span class=3D"emphasis"><em>Declaring a nullable version or times=
tamp property is an easy
      way to avoid problems with transitive reattachment in Hibernate. I=
t is
      especially useful for people using assigned identifiers or composi=
te
      keys</em></span>.</p><div class=3D"section" lang=3D"en-US"><div cl=
ass=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"entity-mapping-=
entity-version"/>5.1.3.1.=C2=A0Version number</h4></div></div></div><p>Y=
ou can add optimistic locking capability to an entity using the
        <code class=3D"literal">@Version</code> annotation:</p><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><s=
pan class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Version</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;OPTLOCK&quot;</span><spa=
n class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Integer</span><span class=3D"java_pl=
ain">&nbsp;getVersion</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span></pre><p>The version property will be mapped to the
        <code class=3D"literal">OPTLOCK</code> column, and the entity ma=
nager will use it
        to detect conflicting updates (preventing lost updates you might=

        otherwise see with the last-commit-wins strategy).</p><p>The ver=
sion column may be a numeric. Hibernate supports any kind
        of type provided that you define and implement the appropriate
        <code class=3D"classname">UserVersionType</code>.</p><p>The appl=
ication must not alter the version number set up by
        Hibernate in any way. To artificially increase the version numbe=
r,
        check in Hibernate Entity Manager's reference documentation
        <code class=3D"literal">LockModeType.OPTIMISTIC_FORCE_INCREMENT<=
/code> or
        <code class=3D"literal">LockModeType.PESSIMISTIC_FORCE_INCREMENT=
</code>.</p><p>If the version number is generated by the database (via a=

        trigger for example), make sure to use
        <code class=3D"code">@org.hibernate.annotations.Generated(Genera=
tionTime.ALWAYS).</code></p><p>To declare a version property in hbm.xml,=
 use:</p><div class=3D"programlistingco"><pre class=3D"programlisting">&=
lt;version
        column<span xmlns=3D"" class=3D"co" id=3D"version1"><img src=3D"=
images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D"ver=
sion_column"
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"version2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>proper=
tyName"
        type=3D"<span xmlns=3D"" class=3D"co" id=3D"version3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>typena=
me"
        access<span xmlns=3D"" class=3D"co" id=3D"version4"><img src=3D"=
images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>=3D"fie=
ld|property|ClassName"
        unsave<span xmlns=3D"" class=3D"co" id=3D"version5"><img src=3D"=
images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>d-value=
=3D"null|negative|undefined"
        genera<span xmlns=3D"" class=3D"co" id=3D"version6"><img src=3D"=
images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>ted=3D"=
never|always"
        insert<span xmlns=3D"" class=3D"co" id=3D"version7"><img src=3D"=
images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>=3D"tru=
e|false"
        node=3D"element-name|@attribute-name|element/@attribute|."
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">column</code> (optional - defaults to the
              property name): the name of the column holding the version=

              number.</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2.png" =
alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td vali=
gn=3D"top" align=3D"left"><p><code class=3D"literal">name</code>: the na=
me of a property of the
              persistent class.</p></td></tr><tr><td width=3D"5%" valign=
=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callou=
ts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></t=
d><td valign=3D"top" align=3D"left"><p><code class=3D"literal">type</cod=
e> (optional - defaults to
              <code class=3D"literal">integer</code>): the type of the v=
ersion
              number.</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/4.png" =
alt=3D"4" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td vali=
gn=3D"top" align=3D"left"><p><code class=3D"literal">access</code> (opti=
onal - defaults to
              <code class=3D"literal">property</code>): the strategy Hib=
ernate uses to
              access the property value.</p></td></tr><tr><td width=3D"5=
%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbo=
ok/callouts/5.png" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"=
/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">=
unsaved-value</code> (optional - defaults to
              <code class=3D"literal">undefined</code>): a version prope=
rty value that
              indicates that an instance is newly instantiated (unsaved)=
,
              distinguishing it from detached instances that were saved =
or
              loaded in a previous session. <code class=3D"literal">Unde=
fined</code>
              specifies that the identifier property value should be
              used.</p></td></tr><tr><td width=3D"5%" valign=3D"top" ali=
gn=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" src=3D"images/org/hibernate/docbook/callouts/6.png" al=
t=3D"6" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=
=3D"top" align=3D"left"><p><code class=3D"literal">generated</code> (opt=
ional - defaults to
              <code class=3D"literal">never</code>): specifies that this=
 version property
              value is generated by the database. See the discussion of =
<a class=3D"link" href=3D"#mapping-generated" title=3D"5.5.=C2=A0Generat=
ed properties">generated properties</a> for more
              information.</p></td></tr><tr><td width=3D"5%" valign=3D"t=
op" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/7.=
png" alt=3D"7" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td=
 valign=3D"top" align=3D"left"><p><code class=3D"literal">insert</code> =
(optional - defaults to
              <code class=3D"literal">true</code>): specifies whether th=
e version column
              should be included in SQL insert statements. It can be set=
 to
              <code class=3D"literal">false</code> if the database colum=
n is defined with
              a default value of <code class=3D"literal">0</code>.</p></=
td></tr></table></div></div></div><div class=3D"section" lang=3D"en-US">=
<div class=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"mapping-=
declaration-timestamp"/>5.1.3.2.=C2=A0Timestamp</h4></div></div></div><p=
>Alternatively, you can use a timestamp. Timestamps are a less
        safe implementation of optimistic locking. However, sometimes an=

        application might use the timestamps in other ways as well.</p><=
p>Simply mark a property of type <code class=3D"classname">Date</code> o=
r
        <code class=3D"classname">Calendar</code> as
        <code class=3D"classname">@Version</code>.</p><pre xmlns=3D"" xm=
lns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA">=
<!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span cla=
ss=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Version</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Date</span><span class=3D"java_plain=
">&nbsp;getLastUpdate</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span></pre><p>When using timestamp versioning you can tell Hibernate=
 where to
        retrieve the timestamp value from - database or JVM - by optiona=
lly
        adding the <code class=3D"classname">@org.hibernate.annotations.=
Source</code>
        annotation to the property. Possible values for the value attrib=
ute of
        the annotation are
        <code class=3D"classname">org.hibernate.annotations.SourceType.V=
M</code> and
        <code class=3D"classname">org.hibernate.annotations.SourceType.D=
B</code>. The
        default is <code class=3D"classname">SourceType.DB</code> which =
is also used in
        case there is no <code class=3D"classname">@Source</code> annota=
tion at
        all.</p><p>Like in the case of version numbers, the timestamp ca=
n also be
        generated by the database instead of Hibernate. To do that, use
        <code class=3D"code">@org.hibernate.annotations.Generated(Genera=
tionTime.ALWAYS).</code></p><p>In hbm.xml, use the <code class=3D"litera=
l">&lt;timestamp&gt;</code>
        element:</p><div class=3D"programlistingco"><pre class=3D"progra=
mlisting">&lt;timestamp
        column<span xmlns=3D"" class=3D"co" id=3D"timestamp1"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D"ti=
mestamp_column"
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"timestamp2"><img src=
=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>pro=
pertyName"
        access<span xmlns=3D"" class=3D"co" id=3D"timestamp3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>=3D"fi=
eld|property|ClassName"
        unsave<span xmlns=3D"" class=3D"co" id=3D"timestamp4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>d-valu=
e=3D"null|undefined"
        source<span xmlns=3D"" class=3D"co" id=3D"timestamp5"><img src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"vm=
|db"
        genera<span xmlns=3D"" class=3D"co" id=3D"timestamp6"><img src=3D=
"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>ted=3D=
"never|always"
        node=3D"element-name|@attribute-name|element/@attribute|."
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">column</code> (optional - defaults to the
              property name): the name of a column holding the
              timestamp.</p></td></tr><tr><td width=3D"5%" valign=3D"top=
" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2.pn=
g" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">name</code>: the=
 name of a JavaBeans style
              property of Java type <code class=3D"literal">Date</code> =
or
              <code class=3D"literal">Timestamp</code> of the persistent=
 class.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left">=
<p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" src=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"3" bord=
er=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" ali=
gn=3D"left"><p><code class=3D"literal">access</code> (optional - default=
s to
              <code class=3D"literal">property</code>): the strategy Hib=
ernate uses for
              accessing the property value.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">unsaved-value</code> (optional - defaults to
              <code class=3D"literal">null</code>): a version property v=
alue that
              indicates that an instance is newly instantiated (unsaved)=
,
              distinguishing it from detached instances that were saved =
or
              loaded in a previous session. <code class=3D"literal">Unde=
fined</code>
              specifies that the identifier property value should be
              used.</p></td></tr><tr><td width=3D"5%" valign=3D"top" ali=
gn=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" src=3D"images/org/hibernate/docbook/callouts/5.png" al=
t=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=
=3D"top" align=3D"left"><p><code class=3D"literal">source</code> (option=
al - defaults to
              <code class=3D"literal">vm</code>): Where should Hibernate=
 retrieve the
              timestamp value from? From the database, or from the curre=
nt
              JVM? Database-based timestamps incur an overhead because
              Hibernate must hit the database in order to determine the =
"next
              value". It is safer to use in clustered environments. Not =
all
              <code class=3D"literal">Dialects</code> are known to suppo=
rt the retrieval
              of the database's current timestamp. Others may also be un=
safe
              for usage in locking due to lack of precision (Oracle 8, f=
or
              example).</p></td></tr><tr><td width=3D"5%" valign=3D"top"=
 align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/6.png=
" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td va=
lign=3D"top" align=3D"left"><p><code class=3D"literal">generated</code> =
(optional - defaults to
              <code class=3D"literal">never</code>): specifies that this=
 timestamp
              property value is actually generated by the database. See =
the
              discussion of <a class=3D"link" href=3D"#mapping-generated=
" title=3D"5.5.=C2=A0Generated properties">generated
              properties</a> for more information.</p></td></tr></table>=
</div></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"note"><h2>Note</h2><p><code class=3D"literal">&lt;Timestamp=
&gt;</code> is equivalent to
          <code class=3D"literal">&lt;version type=3D"timestamp"&gt;</co=
de>. And
          <code class=3D"literal">&lt;timestamp source=3D"db"&gt;</code>=
 is equivalent to
          <code class=3D"literal">&lt;version type=3D"dbtimestamp"&gt;</=
code></p></div></div></div><div class=3D"section" lang=3D"en-US"><div cl=
ass=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"mapping-declara=
tion-property"/>5.1.4.=C2=A0Property</h3></div></div></div><p>You need t=
o decide which property needs to be made persistent in a
      given entity. This differs slightly between the annotation driven
      metadata and the hbm.xml files.</p><div class=3D"section" lang=3D"=
en-US"><div class=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"d=
0e6099"/>5.1.4.1.=C2=A0Property mapping with annotations</h4></div></div=
></div><p>In the annotations world, every non static non transient
        property (field or method depending on the access type) of an en=
tity
        is considered persistent, unless you annotate it as
        <code class=3D"literal">@Transient</code>. Not having an annotat=
ion for your
        property is equivalent to the appropriate <code class=3D"literal=
">@Basic</code>
        annotation.</p><p>The <code class=3D"literal">@Basic</code> anno=
tation allows you to declare
        the fetching strategy for a property. If set to
        <code class=3D"literal">LAZY</code>, specifies that this propert=
y should be
        fetched lazily when the instance variable is first accessed. It
        requires build-time bytecode instrumentation, if your classes ar=
e not
        instrumented, property level lazy loading is silently ignored. T=
he
        default is <code class=3D"literal">EAGER</code>. You can also ma=
rk a property as
        not optional thanks to the <code class=3D"classname">@Basic.opti=
onal</code>
        attribute. This will ensure that the underlying column are not
        nullable (if possible). Note that a better approach is to use th=
e
        <code class=3D"classname">@NotNull</code> annotation of the Bean=
 Validation
        specification.</p><p>Let's look at a few examples:</p><pre xmlns=
=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_keyword">public</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_keyword">transient</span><!-- <br/> --><span class=3D"java_plain">=
&nbsp;</span><!-- <br/> --><span class=3D"java_type">int</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;counter</span><!-- <br/> --><span =
class=3D"java_separator">;</span><!-- <br/> --><span class=3D"java_plain=
">&nbsp;</span><!-- <br/> --><span class=3D"java_operator">//</span><!--=
 <br/> --><span class=3D"java_keyword">transient</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;property</span>
</span>
<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">String</span><span cl=
ass=3D"java_plain">&nbsp;firstname</span><span class=3D"java_separator">=
;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">persistent&nbsp;property</span=
>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Transient</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;getLengthInMeter</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">...</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">//</span><span class=3D"java_keyword">transien=
t</span><span class=3D"java_plain">&nbsp;property</span>
</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;getName</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{...<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">}</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_operator">//</span><span class=3D"java_plain">&nbsp;persistent&nbsp;pro=
perty</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Basic</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;getLength</span><span class=3D"java_separator">()</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">}</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_operator">//</span><span class=3D"java_plain">&nbsp;persistent&nbs=
p;property</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Basic</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">fetch&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">FetchType</=
span><span class=3D"java_separator">.</span><span class=3D"java_plain">L=
AZY</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;getDetailedComment</span><span class=3D"java_separator">()=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">...</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;pe=
rsistent&nbsp;property</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Temporal</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">TemporalType</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">TIME</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_plain">java</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">util</span><span class=3D"=
java_separator">.</span><span class=3D"java_type">Date</span><span class=
=3D"java_plain">&nbsp;getDepartureTime</span><span class=3D"java_separat=
or">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">...</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_operator">//</span><span class=3D"java_plain">&nbs=
p;persistent&nbsp;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Enumerated</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">EnumType</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">STRING</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_type">Starred</span><span class=3D"jav=
a_plain">&nbsp;getNote</span><span class=3D"java_separator">()</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">}</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_operator">//</span><span class=3D"java_plain">enum&nbsp;persisted&=
nbsp;as&nbsp;</span><span class=3D"java_type">String</span><span class=3D=
"java_plain">&nbsp;in&nbsp;database</span></pre><p><code class=3D"litera=
l">counter</code>, a transient field, and
        <code class=3D"literal">lengthInMeter</code>, a method annotated=
 as
        <code class=3D"literal">@Transient</code>, and will be ignored b=
y the Hibernate.
        <code class=3D"literal">name</code>, <code class=3D"literal">len=
gth</code>, and
        <code class=3D"literal">firstname</code> properties are mapped p=
ersistent and
        eagerly fetched (the default for simple properties). The
        <code class=3D"literal">detailedComment</code> property value wi=
ll be lazily
        fetched from the database once a lazy property of the entity is
        accessed for the first time. Usually you don't need to lazy simp=
le
        properties (not to be confused with lazy association fetching). =
The
        recommended alternative is to use the projection capability of J=
P-QL
        (Java Persistence Query Language) or Criteria queries.</p><p>JPA=
 support property mapping of all basic types supported by
        Hibernate (all basic Java types , their respective wrappers and
        serializable classes). Hibernate Annotations supports out of the=
 box
        enum type mapping either into a ordinal column (saving the enum
        ordinal) or a string based column (saving the enum string
        representation): the persistence representation, defaulted to or=
dinal,
        can be overridden through the <code class=3D"literal">@Enumerate=
d</code>
        annotation as shown in the <code class=3D"literal">note</code> p=
roperty
        example.</p><p>In plain Java APIs, the temporal precision of tim=
e is not
        defined. When dealing with temporal data you might want to descr=
ibe
        the expected precision in database. Temporal data can have
        <code class=3D"literal">DATE</code>, <code class=3D"literal">TIM=
E</code>, or
        <code class=3D"literal">TIMESTAMP</code> precision (ie the actua=
l date, only the
        time, or both). Use the <code class=3D"literal">@Temporal</code>=
 annotation to
        fine tune that.</p><p><code class=3D"literal">@Lob</code> indica=
tes that the property should be
        persisted in a Blob or a Clob depending on the property type:
        <code class=3D"classname">java.sql.Clob</code>,
        <code class=3D"classname">Character[]</code>, <code class=3D"cla=
ssname">char[]</code> and
        java.lang.<code class=3D"classname">String</code> will be persis=
ted in a Clob.
        <code class=3D"classname">java.sql.Blob</code>, <code class=3D"c=
lassname">Byte[]</code>,
        <code class=3D"classname">byte[] </code>and <code class=3D"class=
name">Serializable</code>
        type will be persisted in a Blob.</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"jav=
a_type">Lob</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;getFullText</span><span class=3D"java_separator"=
>()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;fullText</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Lob</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">byte</span><span class=
=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;getFullCod=
e</span><span class=3D"java_separator">()</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;fullCode</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>If the pro=
perty type implements
        <code class=3D"classname">java.io.Serializable</code> and is not=
 a basic type,
        and if the property is not annotated with <code class=3D"literal=
">@Lob</code>,
        then the Hibernate <code class=3D"literal">serializable</code> t=
ype is
        used.</p><div class=3D"section" lang=3D"en-US"><div class=3D"tit=
lepage"><div><div><h5 class=3D"title"><a id=3D"d0e6216"/>5.1.4.1.1.=C2=A0=
Type</h5></div></div></div><p>You can also manually specify a type using=
 the
          <code class=3D"literal">@org.hibernate.annotations.Type</code>=
 and some
          parameters if needed. <code class=3D"classname">@Type.type</co=
de> could
          be:</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"orderedlist"><ol><li><p>The name of a Hibernate basic =
type: <code class=3D"literal">integer,
              string, character, date, timestamp, float, binary, seriali=
zable,
              object, blob</code> etc.</p></li><li><p>The name of a Java=
 class with a default basic type:
              <code class=3D"literal">int, float, char, java.lang.String=
, java.util.Date,
              java.lang.Integer, java.sql.Clob</code> etc.</p></li><li><=
p>The name of a serializable Java class.</p></li><li><p>The class name o=
f a custom type:
              <code class=3D"literal">com.illflow.type.MyCustomType</cod=
e> etc.</p></li></ol></div><p>If you do not specify a type, Hibernate wi=
ll use reflection
          upon the named property and guess the correct Hibernate type.
          Hibernate will attempt to interpret the name of the return cla=
ss of
          the property getter using, in order, rules 2, 3, and 4.</p><p>=
<code class=3D"literal">@org.hibernate.annotations.TypeDef</code> and
          <code class=3D"literal">@org.hibernate.annotations.TypeDefs</c=
ode> allows you to
          declare type definitions. These annotations can be placed at t=
he
          class or package level. Note that these definitions are global=
 for
          the session factory (even when defined at the class level). If=
 the
          type is used on a single entity, you can place the definition =
on the
          entity itself. Otherwise, it is recommended to place the defin=
ition
          at the package level. In the example below, when Hibernate
          encounters a property of class <code class=3D"literal">PhoneNu=
mer</code>, it
          delegates the persistence strategy to the custom mapping type
          <code class=3D"literal">PhoneNumberType</code>. However, prope=
rties belonging to
          other classes, too, can delegate their persistence strategy to=

          <code class=3D"literal">PhoneNumberType</code>, by explicitly =
using the
          <code class=3D"literal">@Type</code> annotation.</p><div xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2=
>Note</h2><p>Package level annotations are placed in a file named
            <code class=3D"filename">package-info.java</code> in the app=
ropriate package.
            Place your annotations before the package declaration.</p></=
div><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><=
!-- <br/> --><span class=3D"java_type">TypeDef</span><!-- <br/> --><span=
 class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;name&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_literal">&quot;phoneNumber&quot;</span><=
span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;defaultForTyp=
e&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_type">PhoneNumber</span><span =
class=3D"java_separator">.</span><span class=3D"java_keyword">class</spa=
n><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;typeClass&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_type">PhoneNumberType</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
>
<!--  --><br/><span class=3D"java_separator">)</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">ContactDetail=
s</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_sepa=
rator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">[...]</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">PhoneNumber</span><span class=3D"java_pla=
in">&nbsp;localPhoneNumber</span><span class=3D"java_separator">;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Type</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">type</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_literal">&quot;phoneNumber&quot;</span><span cl=
ass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">OverseasPhoneNumber</span><span class=3D"=
java_plain">&nbsp;overseasPhoneNumber</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">[...]</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>The follow=
ing example shows the usage of the
          <code class=3D"literal">parameters</code> attribute to customi=
ze the
          TypeDef.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_operator">//</span><!-- <br/> --><span class=3D"java_plain">in&nbsp;or=
g</span><!-- <br/> --><span class=3D"java_operator">/</span><!-- <br/> -=
-><span class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D=
"java_operator">/</span><!-- <br/> --><span class=3D"java_plain">test</s=
pan><!-- <br/> --><span class=3D"java_operator">/</span><!-- <br/> --><s=
pan class=3D"java_plain">annotations</span><!-- <br/> --><span class=3D"=
java_operator">/</span><!-- <br/> --><span class=3D"java_plain">entity</=
span><!-- <br/> --><span class=3D"java_operator">/</span><!-- <br/> --><=
span class=3D"java_keyword">package</span><!-- <br/> --><span class=3D"j=
ava_operator">-</span><!-- <br/> --><span class=3D"java_plain">info</spa=
n><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><sp=
an class=3D"java_plain">java</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">TypeDefs</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">TypeDef</span><span class=3D"java_separator">=
(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;name</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_literal">&quot;caster&quot;</span><span class=3D"java_se=
parator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;typeClass&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>CasterStringType</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_keyword">class</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;parameters&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">Parameter</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;cast&quot;</span><span class=3D"java_separato=
r">,</span><span class=3D"java_plain">&nbsp;value</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_literal">&quot;lower&quot;</=
span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">package</span><span class=3D"=
java_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">test</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">annotations</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">entity</span><span clas=
s=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">in&nbsp;org</span><span class=3D"java_operator">/</span><span cl=
ass=3D"java_plain">hibernate</span><span class=3D"java_operator">/</span=
><span class=3D"java_plain">test</span><span class=3D"java_operator">/</=
span><span class=3D"java_plain">annotations</span><span class=3D"java_op=
erator">/</span><span class=3D"java_plain">entity</span><span class=3D"j=
ava_operator">/</span><span class=3D"java_type">Forest</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">java</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Forest</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Type</span><span class=3D"java_separator">(</=
span><span class=3D"java_plain">type</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_literal">&quot;caster&quot;</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getSmallText</span><span class=3D"java_separator">()</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre><p>When using c=
omposite user type, you will have to express
          column definitions. The <code class=3D"literal">@Columns</code=
> has been
          introduced for that purpose.</p><pre xmlns=3D"" xmlns:rf=3D"ja=
va:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> -=
-><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_t=
ype">Type</span><!-- <br/> --><span class=3D"java_separator">(</span><!-=
- <br/> --><span class=3D"java_plain">type</span><!-- <br/> --><span cla=
ss=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_literal=
">&quot;org.hibernate.test.annotations.entity.MonetaryAmountUserType&quo=
t;</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Columns</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_plain">columns&nbsp;</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;r_amount&quot;</span><sp=
an class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;r_currency&quot;</span><=
span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">MonetaryAmount</span><=
span class=3D"java_plain">&nbsp;getAmount</span><span class=3D"java_sepa=
rator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;amount</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">MonetaryAmoun=
t</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyw=
ord">implements</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_type">Serializable</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">BigDecimal</span><span class=3D"jav=
a_plain">&nbsp;amount</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Currency</span><span class=3D"java_=
plain">&nbsp;currency</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h5 cl=
ass=3D"title"><a id=3D"d0e6292"/>5.1.4.1.2.=C2=A0Access type</h5></div><=
/div></div><p>By default the access type of a class hierarchy is defined=
 by
          the position of the <code class=3D"classname">@Id</code> or
          <code class=3D"classname">@EmbeddedId</code> annotations. If t=
hese annotations
          are on a field, then only fields are considered for persistenc=
e and
          the state is accessed via the field. If there annotations are =
on a
          getter, then only the getters are considered for persistence a=
nd the
          state is accessed via the getter/setter. That works well in pr=
actice
          and is the recommended approach.</p><div xmlns:rf=3D"java:org.=
jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>The=
 placement of annotations within a class hierarchy has
              to be consistent (either field or on property) to be able =
to
              determine the default access type. It is recommended to st=
ick to
              one single annotation placement strategy throughout your w=
hole
              application.</p></div><p>However in some situations, you n=
eed to:</p><div class=3D"itemizedlist"><ul><li><p>force the access type =
of the entity hierarchy</p></li><li><p>override the access type of a spe=
cific entity in the class
              hierarchy</p></li><li><p>override the access type of an em=
beddable type</p></li></ul></div><p>The best use case is an embeddable c=
lass used by several
          entities that might not use the same access type. In this case=
 it is
          better to force the access type at the embeddable class
          level.</p><p>To force the access type on a given class, use th=
e
          <code class=3D"classname">@Access</code> annotation as showed =
below:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</=
span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_keyword">private</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_type">Long</span><span class=3D"java_plain"=
>&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Long</span><span class=3D"java_plain">&nbs=
p;getId</span><span class=3D"java_separator">()</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">{</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</span><=
span class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">=
;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_keyword">this</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span class=3D=
"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Embedded</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_keyword">private</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_type">Address</span><span class=3D"ja=
va_plain">&nbsp;address</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Address</span><span class=3D"java_plain">&=
nbsp;getAddress</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return=
</span><span class=3D"java_plain">&nbsp;address</span><span class=3D"jav=
a_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setAddress</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">this</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">addre=
ss&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"ja=
va_plain">&nbsp;address</span><span class=3D"java_separator">;</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">User</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Long</span><span class=3D"java_plain">&nb=
sp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">Long</span><span class=3D"java_plain">=
&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;id</span><span class=3D"java_separat=
or">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_keyword">this</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span class=3D=
"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Address</span><span class=3D"java_plain">=
&nbsp;address</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Embedded</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_keyword">public</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">Address</span><span class=3D"jav=
a_plain">&nbsp;getAddress</span><span class=3D"java_separator">()</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywo=
rd">return</span><span class=3D"java_plain">&nbsp;address</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setAddress</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">this</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">addre=
ss&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"ja=
va_plain">&nbsp;address</span><span class=3D"java_separator">;</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</s=
pan>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Access</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_type">AcessType</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_plain">PROPERTY</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Address</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;street1</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getStreet1</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return<=
/span><span class=3D"java_plain">&nbsp;street1</span><span class=3D"java=
_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setStreet1</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">this</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">stree=
t1&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"ja=
va_plain">&nbsp;street1</span><span class=3D"java_separator">;</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</s=
pan>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;ha=
shCode</span><span class=3D"java_separator">;</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">not&nbsp;persistent</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>You can al=
so override the access type of a single property
          while keeping the other properties standard.</p><pre xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JA=
VA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span=
 class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_keyword">private</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_type">Long</span><span class=3D"java_plain"=
>&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Long</span><span class=3D"java_plain">&nbs=
p;getId</span><span class=3D"java_separator">()</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">{</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</span><=
span class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">=
;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Long</span><span class=3D"java_plain">&nbsp;id</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_keyword">this</span><span class=3D"java_separator">.=
</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span class=3D=
"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Transient</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">private</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">String</span><span class=3D"ja=
va_plain">&nbsp;userId</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Transient</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">private</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">String</span><span class=3D"ja=
va_plain">&nbsp;orderId</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Access</span><span class=3D"java_separator">(</span=
><span class=3D"java_type">AccessType</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">PROPERTY</span><span class=3D"java=
_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getOrderNumber</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">ret=
urn</span><span class=3D"java_plain">&nbsp;userId&nbsp;</span><span clas=
s=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_literal">&quot;:&quot;</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_operator">+</span><span class=3D"java_p=
lain">&nbsp;orderId</span><span class=3D"java_separator">;</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setOrderNumber</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">this<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
userId&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">...;</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">this</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">or=
derId&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">...;</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</sp=
an>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In this ex=
ample, the default access type is
          <code class=3D"classname">FIELD</code> except for the
          <code class=3D"literal">orderNumber</code> property. Note that=
 the corresponding
          field, if any must be marked as <code class=3D"classname">@Tra=
nsient</code> or
          <code class=3D"code">transient</code>.</p><div xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>@org.hibe=
rnate.annotations.AccessType</h2><p>The annotation
            <code class=3D"classname">@org.hibernate.annotations.AccessT=
ype</code>
            should be considered deprecated for FIELD and PROPERTY acces=
s. It
            is still useful however if you need to use a custom access
            type.</p></div></div><div class=3D"section" lang=3D"en-US"><=
div class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"d0e6353"/=
>5.1.4.1.3.=C2=A0Optimistic lock</h5></div></div></div><p>It is sometime=
s useful to avoid increasing the version number
          even if a given property is dirty (particularly collections). =
You
          can do that by annotating the property (or collection) with
          <code class=3D"literal">@OptimisticLock(excluded=3Dtrue)</code=
>.</p><p>More formally, specifies that updates to this property do not
          require acquisition of the optimistic lock.</p></div><div clas=
s=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h5 clas=
s=3D"title"><a id=3D"entity-mapping-property-column"/>5.1.4.1.4.=C2=A0De=
claring column attributes</h5></div></div></div><p>The column(s) used fo=
r a property mapping can be defined using
          the <code class=3D"literal">@Column</code> annotation. Use it =
to override
          default values (see the JPA specification for more information=
 on
          the defaults). You can use this annotation at the property lev=
el for
          properties that are:</p><div class=3D"itemizedlist"><ul><li><p=
>not annotated at all</p></li><li><p>annotated with <code class=3D"liter=
al">@Basic</code></p></li><li><p>annotated with <code class=3D"literal">=
@Version</code></p></li><li><p>annotated with <code class=3D"literal">@L=
ob</code></p></li><li><p>annotated with <code class=3D"literal">@Tempora=
l</code></p></li></ul></div><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.h=
ighlight.XhtmlRendererFactory" class=3D"JAVA"></span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Column</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_plain">updatable&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">fal=
se</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;name&nbsp;</span><span class=3D"java_operator">=3D</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;fli=
ght_name&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;nullable&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">false</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;length</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">50</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;getName</span><span class=3D"java_separator">()<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">...</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre><p>The <code class=
=3D"literal">name</code> property is mapped to the
          <code class=3D"literal">flight_name</code> column, which is no=
t nullable, has a
          length of 50 and is not updatable (making the property
          immutable).</p><p>This annotation can be applied to regular pr=
operties as well
          as <code class=3D"literal">@Id</code> or <code class=3D"litera=
l">@Version</code>
          properties.</p><div class=3D"programlistingco"><pre class=3D"p=
rogramlisting">@Column(
    name=3D"colu<span xmlns=3D"" class=3D"co" id=3D"hm1"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>mnName";
    boolean un<span xmlns=3D"" class=3D"co" id=3D"hm2"><img src=3D"image=
s/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>ique() defau=
lt false;
    boolean nu<span xmlns=3D"" class=3D"co" id=3D"hm3"><img src=3D"image=
s/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>llable() def=
ault true;
    boolean in<span xmlns=3D"" class=3D"co" id=3D"hm4"><img src=3D"image=
s/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>sertable() d=
efault true;
    boolean up<span xmlns=3D"" class=3D"co" id=3D"hm5"><img src=3D"image=
s/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>datable() de=
fault true;
    String col<span xmlns=3D"" class=3D"co" id=3D"hm6"><img src=3D"image=
s/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>umnDefinitio=
n() default "";
    String tab<span xmlns=3D"" class=3D"co" id=3D"hm7"><img src=3D"image=
s/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>le() default=
 "";
    int length<span xmlns=3D"" class=3D"co" id=3D"hm8"><img src=3D"image=
s/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></span>() default 2=
55;
    int precis<span xmlns=3D"" class=3D"co" id=3D"hm9"><img src=3D"image=
s/org/hibernate/docbook/callouts/9.png" alt=3D"(9)"/></span>ion() defaul=
t 0; // decimal precision
    int scale(<span xmlns=3D"" class=3D"co" id=3D"hm10"><img src=3D"imag=
es/org/hibernate/docbook/callouts/10.png" alt=3D"(10)"/></span>) default=
 0; // decimal scale</pre><div class=3D"calloutlist"><table border=3D"0"=
 summary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"l=
eft"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1"=
 border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top=
" align=3D"left"><p><code class=3D"literal">name</code> (optional): the =
column name
                (default to the property name)</p></td></tr><tr><td widt=
h=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"ja=
va:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate=
/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D=
"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"lit=
eral">unique</code> (optional): set a unique
                constraint on this column or not (default false)</p></td=
></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">nullable</code> (optional): set the column
                as nullable (default true).</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">insertable</code> (optional): whether or not
                the column will be part of the insert statement (default=

                true)</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/5.png" =
alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td vali=
gn=3D"top" align=3D"left"><p><code class=3D"literal">updatable</code> (o=
ptional): whether or not
                the column will be part of the update statement (default=

                true)</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/6.png" =
alt=3D"6" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td vali=
gn=3D"top" align=3D"left"><p><code class=3D"literal">columnDefinition</c=
ode> (optional): override
                the sql DDL fragment for this particular column (non
                portable)</p></td></tr><tr><td width=3D"5%" valign=3D"to=
p" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highligh=
t.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/7.p=
ng" alt=3D"7" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td =
valign=3D"top" align=3D"left"><p><code class=3D"literal">table</code> (o=
ptional): define the targeted
                table (default primary table)</p></td></tr><tr><td width=
=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/=
docbook/callouts/8.png" alt=3D"8" border=3D"0" height=3D"17px" width=3D"=
17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"lite=
ral"><code class=3D"literal">length</code></code> (optional):
                column length (default 255)</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/8.png" alt=3D"8" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
"><code class=3D"literal">precision</code></code>
                (optional): column decimal precision (default 0)</p></td=
></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/10.png" alt=3D"10" border=3D"0" heigh=
t=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p=
><code class=3D"literal"><code class=3D"literal">scale</code></code> (op=
tional):
                column decimal scale if useful (default 0)</p></td></tr>=
</table></div></div></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"d0e6481"/>5.1.4.=
1.5.=C2=A0Formula</h5></div></div></div><p>Sometimes, you want the Datab=
ase to do some computation for
          you rather than in the JVM, you might also create some kind of=

          virtual column. You can use a SQL fragment (aka formula) inste=
ad of
          mapping a property into a column. This kind of property is rea=
d only
          (its value is calculated by your formula fragment).</p><pre xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" clas=
s=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> -=
-><span class=3D"java_type">Formula</span><!-- <br/> --><span class=3D"j=
ava_separator">(</span><!-- <br/> --><span class=3D"java_literal">&quot;=
obj_length&nbsp;*&nbsp;obj_height&nbsp;*&nbsp;obj_width&quot;</span><!--=
 <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">long</span><span class=
=3D"java_plain">&nbsp;getObjectVolume</span><span class=3D"java_separato=
r">()</span></pre><p>The SQL fragment can be as complex as you want and =
even
          include subselects.</p></div><div class=3D"section" lang=3D"en=
-US"><div class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"d0e=
6490"/>5.1.4.1.6.=C2=A0Non-annotated property defaults</h5></div></div><=
/div><p>If a property is not annotated, the following rules
          apply:</p><div class=3D"itemizedlist"><ul><li><p>If the proper=
ty is of a single type, it is mapped as
                @Basic</p></li><li><p>Otherwise, if the type of the prop=
erty is annotated as
                @Embeddable, it is mapped as @Embedded</p></li><li><p>Ot=
herwise, if the type of the property is
                <code class=3D"classname">Serializable</code>, it is map=
ped as
                <code class=3D"classname">@Basic</code> in a column hold=
ing the object
                in its serialized version</p></li><li><p>Otherwise, if t=
he type of the property is
                <code class=3D"classname">java.sql.Clob</code> or
                <code class=3D"classname">java.sql.Blob</code>, it is ma=
pped as
                <code class=3D"classname">@Lob</code> with the appropria=
te
                <code class=3D"classname">LobType</code></p></li></ul></=
div></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"titl=
epage"><div><div><h4 class=3D"title"><a id=3D"d0e6525"/>5.1.4.2.=C2=A0Pr=
operty mapping with hbm.xml</h4></div></div></div><p>The <code class=3D"=
literal">&lt;property&gt;</code> element declares a
        persistent JavaBean style property of the class.</p><div class=3D=
"programlistingco"><pre class=3D"programlisting">&lt;property
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"property1"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>proper=
tyName"
        column<span xmlns=3D"" class=3D"co" id=3D"property2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>=3D"co=
lumn_name"
        type=3D"<span xmlns=3D"" class=3D"co" id=3D"property3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>typena=
me"
        update<span xmlns=3D"" class=3D"co" id=3D"property4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>=3D"tr=
ue|false"
        insert<span xmlns=3D"" class=3D"co" id=3D"property5"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>=3D"tr=
ue|false"
        formul<span xmlns=3D"" class=3D"co" id=3D"property6"><img src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>a=3D"a=
rbitrary SQL expression"
        access<span xmlns=3D"" class=3D"co" id=3D"property7"><img src=3D=
"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>=3D"fi=
eld|property|ClassName"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"property8"><img src=3D=
"images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>true|f=
alse"
        unique<span xmlns=3D"" class=3D"co" id=3D"property9"><img src=3D=
"images/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></span>=3D"tr=
ue|false"
        not-nu<span xmlns=3D"" class=3D"co" id=3D"property10"><img src=3D=
"images/org/hibernate/docbook/callouts/9.png" alt=3D"(9)"/></span>ll=3D"=
true|false"
        optimi<span xmlns=3D"" class=3D"co" id=3D"property11"><img src=3D=
"images/org/hibernate/docbook/callouts/10.png" alt=3D"(10)"/></span>stic=
-lock=3D"true|false"
        genera<span xmlns=3D"" class=3D"co" id=3D"property12"><img src=3D=
"images/org/hibernate/docbook/callouts/11.png" alt=3D"(11)"/></span>ted=3D=
"never|insert|always"
        node=3D"element-name|@attribute-name|element/@attribute|."
        index=3D"index_name"
        unique_key=3D"unique_key_id"
        length=3D"L"
        precision=3D"P"
        scale=3D"S"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">name</code>: the name of the property, with a=
n
              initial lowercase letter.</p></td></tr><tr><td width=3D"5%=
" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.=
jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docboo=
k/callouts/2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/=
></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">c=
olumn</code> (optional - defaults to the
              property name): the name of the mapped database table colu=
mn.
              This can also be specified by nested
              <code class=3D"literal">&lt;column&gt;</code> element(s).<=
/p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img =
xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" sr=
c=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0"=
 height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"le=
ft"><p><code class=3D"literal">type</code> (optional): a name that indic=
ates
              the Hibernate type.</p></td></tr><tr><td width=3D"5%" vali=
gn=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.=
highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/call=
outs/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17px"/></p><=
/td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">update,=
 insert</code> (optional - defaults to
              <code class=3D"literal">true</code>): specifies that the m=
apped columns
              should be included in SQL <code class=3D"literal">UPDATE</=
code> and/or
              <code class=3D"literal">INSERT</code> statements. Setting =
both to
              <code class=3D"literal">false</code> allows a pure "derive=
d" property whose
              value is initialized from some other property that maps to=
 the
              same column(s), or by a trigger or other application.</p><=
/td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"5" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">formula</code> (optional): an SQL expression
              that defines the value for a <span class=3D"emphasis"><em>=
computed</em></span>
              property. Computed properties do not have a column mapping=
 of
              their own.</p></td></tr><tr><td width=3D"5%" valign=3D"top=
" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/6.pn=
g" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">access</code> (o=
ptional - defaults to
              <code class=3D"literal">property</code>): the strategy Hib=
ernate uses for
              accessing the property value.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/7.png" alt=3D"7" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">lazy</code> (optional - defaults to
              <code class=3D"literal">false</code>): specifies that this=
 property should
              be fetched lazily when the instance variable is first acce=
ssed.
              It requires build-time bytecode instrumentation.</p></td><=
/tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"imag=
es/org/hibernate/docbook/callouts/8.png" alt=3D"8" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">unique</code> (optional): enables the DDL
              generation of a unique constraint for the columns. Also, a=
llow
              this to be the target of a
              <code class=3D"literal">property-ref</code>.</p></td></tr>=
<tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xm=
lns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/o=
rg/hibernate/docbook/callouts/9.png" alt=3D"9" border=3D"0" height=3D"17=
px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code =
class=3D"literal">not-null</code> (optional): enables the DDL
              generation of a nullability constraint for the columns.</p=
></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/10.png" alt=3D"10" border=3D"0" h=
eight=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left=
"><p><code class=3D"literal">optimistic-lock</code> (optional - defaults=
 to
              <code class=3D"literal">true</code>): specifies that updat=
es to this
              property do or do not require acquisition of the optimisti=
c
              lock. In other words, it determines if a version increment=

              should occur when this property is dirty.</p></td></tr><tr=
><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/=
hibernate/docbook/callouts/11.png" alt=3D"11" border=3D"0" height=3D"17p=
x" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code c=
lass=3D"literal">generated</code> (optional - defaults to
              <code class=3D"literal">never</code>): specifies that this=
 property value is
              actually generated by the database. See the discussion of =
<a class=3D"link" href=3D"#mapping-generated" title=3D"5.5.=C2=A0Generat=
ed properties">generated properties</a> for more
              information.</p></td></tr></table></div></div><p><span cla=
ss=3D"emphasis"><em>typename</em></span> could be:</p><div xmlns:rf=3D"j=
ava:org.jboss.highlight.XhtmlRendererFactory" class=3D"orderedlist"><ol>=
<li><p>The name of a Hibernate basic type: <code class=3D"literal">integ=
er,
            string, character, date, timestamp, float, binary, serializa=
ble,
            object, blob</code> etc.</p></li><li><p>The name of a Java c=
lass with a default basic type:
            <code class=3D"literal">int, float, char, java.lang.String, =
java.util.Date,
            java.lang.Integer, java.sql.Clob</code> etc.</p></li><li><p>=
The name of a serializable Java class.</p></li><li><p>The class name of =
a custom type:
            <code class=3D"literal">com.illflow.type.MyCustomType</code>=
 etc.</p></li></ol></div><p>If you do not specify a type, Hibernate will=
 use reflection upon
        the named property and guess the correct Hibernate type. Hiberna=
te
        will attempt to interpret the name of the return class of the pr=
operty
        getter using, in order, rules 2, 3, and 4. In certain cases you =
will
        need the <code class=3D"literal">type</code> attribute. For exam=
ple, to
        distinguish between <code class=3D"literal">Hibernate.DATE</code=
> and
        <code class=3D"literal">Hibernate.TIMESTAMP</code>, or to specif=
y a custom
        type.</p><p>The <code class=3D"literal">access</code> attribute =
allows you to control
        how Hibernate accesses the property at runtime. By default, Hibe=
rnate
        will call the property get/set pair. If you specify
        <code class=3D"literal">access=3D"field"</code>, Hibernate will =
bypass the get/set
        pair and access the field directly using reflection. You can spe=
cify
        your own strategy for property access by naming a class that
        implements the interface
        <code class=3D"literal">org.hibernate.property.PropertyAccessor<=
/code>.</p><p>A powerful feature is derived properties. These properties=
 are
        by definition read-only. The property value is computed at load =
time.
        You declare the computation as an SQL expression. This then tran=
slates
        to a <code class=3D"literal">SELECT</code> clause subquery in th=
e SQL query that
        loads an instance:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss=
.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by J=
Highlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;totalPrice&quot;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">formula</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;(&nbsp;SELECT&nbsp;SUM&nbs=
p;(li.quantity*p.price)&nbsp;FROM&nbsp;LineItem&nbsp;li,&nbsp;Product&nb=
sp;p</span><br />
<span class=3D"xml_attribute_value">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;l=
i.productId&nbsp;=3D&nbsp;p.productId</span><br />
<span class=3D"xml_attribute_value">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;li.=
customerId&nbsp;=3D&nbsp;customerId</span><br />
<span class=3D"xml_attribute_value">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;li.=
orderNumber&nbsp;=3D&nbsp;orderNumber&nbsp;)&quot;</span><span class=3D"=
xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>You can reference the entity table by not declaring an alias on=

        a particular column. This would be <code class=3D"literal">custo=
merId</code> in
        the given example. You can also use the nested
        <code class=3D"literal">&lt;formula&gt;</code> mapping element i=
f you do not want
        to use the attribute.</p></div></div><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D=
"mapping-declaration-component"/>5.1.5.=C2=A0Embedded objects (aka compo=
nents)</h3></div></div></div><p>Embeddable objects (or components) are o=
bjects whose properties
      are mapped to the same table as the owning entity's table. Compone=
nts
      can, in turn, declare their own properties, components or
      collections</p><p>It is possible to declare an embedded component =
inside an entity
      and even override its column mapping. Component classes have to be=

      annotated at the class level with the <code class=3D"literal">@Emb=
eddable</code>
      annotation. It is possible to override the column mapping of an em=
bedded
      object for a particular entity using the <code class=3D"literal">@=
Embedded</code>
      and <code class=3D"literal">@AttributeOverride</code> annotation i=
n the associated
      property:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_p=
lain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Person</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_type">Persistent</span><span class=3D"java_pl=
ain">&nbsp;component&nbsp;using&nbsp;defaults</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Address</span><span class=3D"java_plain">&nbsp=
;homeAddress</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Embedded</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">AttributeOverrides</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">AttributeOverride</span><span class=3D"java_separator">(</span><span =
class=3D"java_plain">name</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;iso2&quot;</span><span class=3D"java_=
separator">,</span><span class=3D"java_plain">&nbsp;column&nbsp;</span><=
span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;=
@</span><span class=3D"java_type">Column</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_plain">name</span><span class=3D"java_=
operator">=3D</span><span class=3D"java_literal">&quot;bornIso2&quot;</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">AttributeOverride</span><span class=3D"java_separator">(</span><span =
class=3D"java_plain">name</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;name&quot;</span><span class=3D"java_=
separator">,</span><span class=3D"java_plain">&nbsp;column&nbsp;</span><=
span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;=
@</span><span class=3D"java_type">Column</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_plain">name</span><span class=3D"java_=
operator">=3D</span><span class=3D"java_literal">&quot;bornCountryName&q=
uot;</span><span class=3D"java_separator">)</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Country</span><span class=3D"java_plain">&nbsp=
;bornIn</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</sp=
an></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRende=
rerFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</s=
pan><!-- <br/> --><span class=3D"java_type">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Address</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">im=
plements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;=
city</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Country</span><span class=3D"java_plain">&nbsp=
;nationality</span><span class=3D"java_separator">;</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_operator">//</span><span c=
lass=3D"java_plain">no&nbsp;overriding&nbsp;here</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highligh=
t.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java=
_plain">@</span><!-- <br/> --><span class=3D"java_type">Embeddable</span=
>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Country</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">im=
plements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;iso2</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;countryName&quot;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">private</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_type">String</span><span class=3D"=
java_plain">&nbsp;name</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getIso2</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;iso2</span><span class=3D"java=
_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setIso2</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;iso2</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">iso2&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;iso2</=
span><span class=3D"java_separator">;</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;name</span><span class=3D"java=
_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setName</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;name</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">name&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;name</=
span><span class=3D"java_separator">;</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span></pre><p>An embeddable object inherits the access type of=
 its owning entity
      (note that you can override that using the <code class=3D"literal"=
>@Access</code>
      annotation).</p><p>The <code class=3D"literal">Person</code> entit=
y has two component properties,
      <code class=3D"literal">homeAddress</code> and <code class=3D"lite=
ral">bornIn</code>.
      <code class=3D"literal">homeAddress</code> property has not been a=
nnotated, but
      Hibernate will guess that it is a persistent component by looking =
for
      the <code class=3D"literal">@Embeddable</code> annotation in the A=
ddress class. We
      also override the mapping of a column name (to
      <code class=3D"literal">bornCountryName</code>) with the
      <code class=3D"literal">@Embedded</code> and <code class=3D"litera=
l">@AttributeOverride
      </code>annotations for each mapped attribute of
      <code class=3D"literal">Country</code>. As you can see, <code clas=
s=3D"literal">Country
      </code>is also a nested component of <code class=3D"literal">Addre=
ss</code>,
      again using auto-detection by Hibernate and JPA defaults. Overridi=
ng
      columns of embedded objects of embedded objects is through dotted
      expressions.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class=3D"ja=
va_type">Embedded</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">AttributeOverrides</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">AttributeOverride</span><span class=3D"java_separator">(</span><span =
class=3D"java_plain">name</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;city&quot;</span><span class=3D"java_=
separator">,</span><span class=3D"java_plain">&nbsp;column&nbsp;</span><=
span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;=
@</span><span class=3D"java_type">Column</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_plain">name</span><span class=3D"java_=
operator">=3D</span><span class=3D"java_literal">&quot;fld_city&quot;</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">AttributeOverride</span><span class=3D"java_separator">(</span><span =
class=3D"java_plain">name</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;nationality.iso2&quot;</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;column&n=
bsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_p=
lain">&nbsp;@</span><span class=3D"java_type">Column</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">name</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;nat_Is=
o2&quot;</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">AttributeOverride</span><span class=3D"java_separator">(</span><span =
class=3D"java_plain">name</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;nationality.name&quot;</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;column&n=
bsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_p=
lain">&nbsp;@</span><span class=3D"java_type">Column</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">name</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;nat_Co=
untryName&quot;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_oper=
ator">//</span><span class=3D"java_plain">nationality&nbsp;columns&nbsp;=
in&nbsp;homeAddress&nbsp;are&nbsp;overridden</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Address</span><span class=3D"java_plain">&nbsp=
;homeAddress</span><span class=3D"java_separator">;</span></pre><p>Hiber=
nate Annotations supports something that is not explicitly
      supported by the JPA specification. You can annotate a embedded ob=
ject
      with the <code class=3D"literal">@MappedSuperclass</code> annotati=
on to make the
      superclass properties persistent (see
      <code class=3D"literal">@MappedSuperclass</code> for more informat=
ions).</p><p>You can also use association annotations in an embeddable o=
bject
      (ie <code class=3D"literal">@OneToOne</code>, <code class=3D"class=
name">@ManyToOne</code>,
      <code class=3D"classname">@OneToMany</code> or <code class=3D"lite=
ral">@ManyToMany</code>). To
      override the association columns you can use
      <code class=3D"literal">@AssociationOverride</code>.</p><p>If you =
want to have the same embeddable object type twice in the
      same entity, the column name defaulting will not work as several
      embedded objects would share the same set of columns. In plain JPA=
, you
      need to override at least one set of columns. Hibernate, however, =
allows
      you to enhance the default naming mechanism through the
      <code class=3D"classname">NamingStrategy</code> interface. You can=
 write a
      strategy that prevent name clashing in such a situation.
      <code class=3D"classname">DefaultComponentSafeNamingStrategy</code=
> is an example
      of this.</p><p>If a property of the embedded object points back to=
 the owning
      entity, annotate it with the <code class=3D"classname">@Parent</co=
de> annotation.
      Hibernate will make sure this property is properly loaded with the=

      entity reference.</p><p>In XML, use the <code class=3D"literal">&l=
t;component&gt;</code>
      element.</p><div class=3D"programlistingco"><pre class=3D"programl=
isting">&lt;component
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"component1"><img src=
=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>pro=
pertyName"
        class=3D<span xmlns=3D"" class=3D"co" id=3D"component2"><img src=
=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>"cl=
assName"
        insert<span xmlns=3D"" class=3D"co" id=3D"component3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>=3D"tr=
ue|false"
        update<span xmlns=3D"" class=3D"co" id=3D"component4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>=3D"tr=
ue|false"
        access<span xmlns=3D"" class=3D"co" id=3D"component5"><img src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"fi=
eld|property|ClassName"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"component6"><img src=
=3D"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>tru=
e|false"
        optimi<span xmlns=3D"" class=3D"co" id=3D"component7"><img src=3D=
"images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>stic-l=
ock=3D"true|false"
        unique<span xmlns=3D"" class=3D"co" id=3D"component8"><img src=3D=
"images/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></span>=3D"tr=
ue|false"
        node=3D"element-name|."
&gt;

        &lt;property ...../&gt;
        &lt;many-to-one .... /&gt;
        ........
&lt;/component&gt;</pre><div class=3D"calloutlist"><table border=3D"0" s=
ummary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"lef=
t"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" b=
order=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" =
align=3D"left"><p><code class=3D"literal">name</code>: the name of the p=
roperty.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"=
><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"2" bor=
der=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" al=
ign=3D"left"><p><code class=3D"literal">class</code> (optional - default=
s to the
            property type determined by reflection): the name of the com=
ponent
            (child) class.</p></td></tr><tr><td width=3D"5%" valign=3D"t=
op" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/3.=
png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td=
 valign=3D"top" align=3D"left"><p><code class=3D"literal">insert</code>:=
 do the mapped columns appear in
            SQL <code class=3D"literal">INSERTs</code>?</p></td></tr><tr=
><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/=
hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" height=3D"17px"=
 width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code cla=
ss=3D"literal">update</code>: do the mapped columns appear in
            SQL <code class=3D"literal">UPDATEs</code>?</p></td></tr><tr=
><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/=
hibernate/docbook/callouts/5.png" alt=3D"5" border=3D"0" height=3D"17px"=
 width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code cla=
ss=3D"literal">access</code> (optional - defaults to
            <code class=3D"literal">property</code>): the strategy Hiber=
nate uses for
            accessing the property value.</p></td></tr><tr><td width=3D"=
5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:or=
g.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docb=
ook/callouts/6.png" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17px=
"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal"=
>lazy</code> (optional - defaults to
            <code class=3D"literal">false</code>): specifies that this c=
omponent should be
            fetched lazily when the instance variable is first accessed.=
 It
            requires build-time bytecode instrumentation.</p></td></tr><=
tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/or=
g/hibernate/docbook/callouts/7.png" alt=3D"7" border=3D"0" height=3D"17p=
x" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code c=
lass=3D"literal">optimistic-lock</code> (optional - defaults to
            <code class=3D"literal">true</code>): specifies that updates=
 to this component
            either do or do not require acquisition of the optimistic lo=
ck. It
            determines if a version increment should occur when this pro=
perty
            is dirty.</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/8.png" =
alt=3D"8" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td vali=
gn=3D"top" align=3D"left"><p><code class=3D"literal">unique</code> (opti=
onal - defaults to
            <code class=3D"literal">false</code>): specifies that a uniq=
ue constraint
            exists upon all mapped columns of the component.</p></td></t=
r></table></div></div><p>The child <code class=3D"literal">&lt;property&=
gt;</code> tags map properties
      of the child class to table columns.</p><p>The <code class=3D"lite=
ral">&lt;component&gt;</code> element allows a
      <code class=3D"literal">&lt;parent&gt;</code> subelement that maps=
 a property of the
      component class as a reference back to the containing entity.</p><=
p>The <code class=3D"literal">&lt;dynamic-component&gt;</code> element a=
llows a
      <code class=3D"literal">Map</code> to be mapped as a component, wh=
ere the property
      names refer to keys of the map. See <a class=3D"xref" href=3D"#com=
ponents-dynamic" title=3D"9.5.=C2=A0Dynamic components">Section=C2=A09.5=
, =E2=80=9CDynamic components=E2=80=9D</a> for more information. This fe=
ature is
      not supported in annotations.</p></div><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D=
"d0e6906"/>5.1.6.=C2=A0Inheritance strategy</h3></div></div></div><p>Jav=
a is a language supporting polymorphism: a class can inherit
      from another. Several strategies are possible to persist a class
      hierarchy:</p><div class=3D"itemizedlist"><ul><li><p>Single table =
per class hierarchy strategy: a single table
          hosts all the instances of a class hierarchy</p></li><li><p>Jo=
ined subclass strategy: one table per class and subclass is
          present and each table persist the properties specific to a gi=
ven
          subclass. The state of the entity is then stored in its
          corresponding class table and all its superclasses</p></li><li=
><p>Table per class strategy: one table per concrete class and
          subclass is present and each table persist the properties of t=
he
          class and its superclasses. The state of the entity is then st=
ored
          entirely in the dedicated table for its class.</p></li></ul></=
div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div>=
<div><h4 class=3D"title"><a id=3D"mapping-declaration-subclass"/>5.1.6.1=
.=C2=A0Single table per class hierarchy strategy</h4></div></div></div><=
p>With this approach the properties of all the subclasses in a
        given mapped class hierarchy are stored in a single table.</p><p=
>Each subclass declares its own persistent properties and
        subclasses. Version and id properties are assumed to be inherite=
d from
        the root class. Each subclass in a hierarchy must define a uniqu=
e
        discriminator value. If this is not specified, the fully qualifi=
ed
        Java class name is used.</p><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><spa=
n class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_type">E=
ntity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Inheritance</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">strategy</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_type">InheritanceType</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">SINGLE_TABLE</span><span class=3D"=
java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorColumn</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_literal"=
>&quot;planetype&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;discrim=
inatorType</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_type">DiscriminatorType</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_plain">STRING</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorValue</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;Plane&quot;</span><span class=3D"java_sepa=
rator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Plane</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorValue</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;A320&quot;</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;A320&nbsp;</span><span class=3D"java_keyword">=
extends</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Plane</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">...</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">}</span><span class=3D"java_plain">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre><p>=
In hbm.xml, for the table-per-class-hierarchy mapping strategy,
        the <code class=3D"literal">&lt;subclass&gt;</code> declaration =
is used. For
        example:</p><div class=3D"programlistingco"><pre class=3D"progra=
mlisting">&lt;subclass
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"subclass1"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>ClassN=
ame"
        discri<span xmlns=3D"" class=3D"co" id=3D"subclass2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>minato=
r-value=3D"discriminator_value"
        proxy=3D<span xmlns=3D"" class=3D"co" id=3D"subclass3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>"Proxy=
Interface"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"subclass4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>true|f=
alse"
        dynamic-update=3D"true|false"
        dynamic-insert=3D"true|false"
        entity-name=3D"EntityName"
        node=3D"element-name"
        extends=3D"SuperclassName"&gt;

        &lt;property .... /&gt;
        .....
&lt;/subclass&gt;</pre><div class=3D"calloutlist"><table border=3D"0" su=
mmary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left=
"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" bo=
rder=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" a=
lign=3D"left"><p><code class=3D"literal">name</code>: the fully qualifie=
d class name of
              the subclass.</p></td></tr><tr><td width=3D"5%" valign=3D"=
top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2=
.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><t=
d valign=3D"top" align=3D"left"><p><code class=3D"literal">discriminator=
-value</code> (optional -
              defaults to the class name): a value that distinguishes
              individual subclasses.</p></td></tr><tr><td width=3D"5%" v=
align=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jbo=
ss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/c=
allouts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></=
p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">prox=
y</code> (optional): specifies a class or
              interface used for lazy initializing proxies.</p></td></tr=
><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/=
org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" height=3D"1=
7px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code=
 class=3D"literal">lazy</code> (optional - defaults to
              <code class=3D"literal">true</code>): setting
              <code class=3D"literal">lazy=3D"false"</code> disables the=
 use of lazy
              fetching.</p></td></tr></table></div></div><p>For informat=
ion about inheritance mappings see <a class=3D"xref" href=3D"#inheritanc=
e" title=3D"Chapter=C2=A010.=C2=A0Inheritance mapping">Chapter=C2=A010, =
<i>Inheritance mapping</i></a>.</p><div class=3D"section" lang=3D"en-US"=
><div class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"mapping=
-declaration-discriminator"/>5.1.6.1.1.=C2=A0Discriminator</h5></div></d=
iv></div><p>Discriminators are required for polymorphic persistence usin=
g
          the table-per-class-hierarchy mapping strategy. It declares a
          discriminator column of the table. The discriminator column co=
ntains
          marker values that tell the persistence layer what subclass to=

          instantiate for a particular row. Hibernate Core supports the
          follwoing restricted set of types as discriminator column:
          <code class=3D"literal">string</code>, <code class=3D"literal"=
>character</code>,
          <code class=3D"literal">integer</code>, <code class=3D"literal=
">byte</code>,
          <code class=3D"literal">short</code>, <code class=3D"literal">=
boolean</code>,
          <code class=3D"literal">yes_no</code>, <code class=3D"literal"=
>true_false</code>.</p><p>Use the <code class=3D"classname">@Discriminat=
orColumn</code> to define
          the discriminator column as well as the discriminator type. </=
p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"note"><h2>Note</h2><p><code class=3D"classname">The enum DiscriminatorT=
ype</code> used in
              <code class=3D"classname">javax.persitence.DiscriminatorCo=
lumn</code> only
              contains the values <code class=3D"constant">STRING</code>=
,
              <code class=3D"constant">CHAR</code> and <code class=3D"co=
nstant">INTEGER</code> which
              means that not all Hibernate supported types are available=
 via
              the <code class=3D"classname">@DiscriminatorColumn</code>
              annotation.</p></div><p>You can also use
          <code class=3D"classname">@DiscriminatorFormula</code> to expr=
ess in SQL a
          virtual discriminator column. This is particularly useful when=
 the
          discriminator value can be extracted from one or more columns =
of the
          table. Both <code class=3D"classname">@DiscriminatorColumn</co=
de> and
          <code class=3D"classname">@DiscriminatorFormula</code> are to =
be set on the
          root entity (once per persisted hierarchy).</p><p><code class=3D=
"classname">@org.hibernate.annotations.DiscriminatorOptions</code>
          allows to optionally specify Hibernate specific discriminator
          options which are not standardized in JPA. The available optio=
ns are
          <code class=3D"literal">force</code> and <code class=3D"litera=
l">insert</code>. The
          <code class=3D"literal">force</code> attribute is useful if th=
e table contains
          rows with "extra" discriminator values that are not mapped to =
a
          persistent class. This could for example occur when working wi=
th a
          legacy database. If <code class=3D"literal">force</code> is se=
t to
          <code class=3D"constant">true</code> Hibernate will specify th=
e allowed
          discriminator values in the <code class=3D"literal">SELECT</co=
de> query, even
          when retrieving all instances of the root class. The second op=
tion -
          <code class=3D"literal">insert</code> - tells Hibernate whethe=
r or not to
          include the discriminator column in SQL <code class=3D"literal=
">INSERTs</code>.
          Usually the column should be part of the <code class=3D"litera=
l">INSERT</code>
          statement, but if your discriminator column is also part of a =
mapped
          composite identifier you have to set this option to
          <code class=3D"constant">false</code>.</p><div xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" class=3D"tip"><h2>Tip</h2><p=
>There is also a
              <code class=3D"classname">@org.hibernate.annotations.Force=
Discriminator</code>
              annotation which is deprecated since version 3.6. Use
              <code class=3D"classname">@DiscriminatorOptions</code> ins=
tead.</p></div><p>Finally, use <code class=3D"classname">@DiscriminatorV=
alue</code> on
          each class of the hierarchy to specify the value stored in the=

          discriminator column for a given entity. If you do not set
          <code class=3D"classname">@DiscriminatorValue</code> on a clas=
s, the fully
          qualified class name is used.</p><pre xmlns=3D"" xmlns:rf=3D"j=
ava:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> =
--><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_=
type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Inheritance</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">strategy</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_type">InheritanceType</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">SINGLE_TABLE</span><span class=3D"=
java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorColumn</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_literal"=
>&quot;planetype&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;discrim=
inatorType</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_type">DiscriminatorType</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_plain">STRING</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorValue</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;Plane&quot;</span><span class=3D"java_sepa=
rator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Plane</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">DiscriminatorValue</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;A320&quot;</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;A320&nbsp;</span><span class=3D"java_keyword">=
extends</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Plane</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">...</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">}</span><span class=3D"java_plain">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre><p>=
In hbm.xml, the <code class=3D"literal">&lt;discriminator&gt;</code>
          element is used to define the discriminator column or
          formula:</p><div class=3D"programlistingco"><pre class=3D"prog=
ramlisting">&lt;discriminator
        column<span xmlns=3D"" class=3D"co" id=3D"discriminator1"><img s=
rc=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D=
"discriminator_column"
        type=3D"<span xmlns=3D"" class=3D"co" id=3D"discriminator2"><img=
 src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span=
>discriminator_type"
        force=3D<span xmlns=3D"" class=3D"co" id=3D"discriminator3"><img=
 src=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span=
>"true|false"
        insert<span xmlns=3D"" class=3D"co" id=3D"discriminator4"><img s=
rc=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>=3D=
"true|false"
        formul<span xmlns=3D"" class=3D"co" id=3D"discriminator5"><img s=
rc=3D"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>a=
=3D"arbitrary sql expression"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">column</code> (optional - defaults to
                <code class=3D"literal">class</code>): the name of the d=
iscriminator
                column.</p></td></tr><tr><td width=3D"5%" valign=3D"top"=
 align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2.png=
" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td va=
lign=3D"top" align=3D"left"><p><code class=3D"literal">type</code> (opti=
onal - defaults to
                <code class=3D"literal">string</code>): a name that indi=
cates the
                Hibernate type</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">force</code>=
 (optional - defaults to
                <code class=3D"literal">false</code>): "forces" Hibernat=
e to specify the
                allowed discriminator values, even when retrieving all
                instances of the root class.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">insert</code> (optional - defaults to
                <code class=3D"literal">true</code>): set this to <code =
class=3D"literal">false</code>
                if your discriminator column is also part of a mapped
                composite identifier. It tells Hibernate not to include =
the
                column in SQL <code class=3D"literal">INSERTs</code>.</p=
></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"5" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">formula</code> (optional): an arbitrary SQL
                expression that is executed when a type has to be evalua=
ted.
                It allows content-based discrimination.</p></td></tr></t=
able></div></div><p>Actual values of the discriminator column are specif=
ied by the
          <code class=3D"literal">discriminator-value</code> attribute o=
f the
          <code class=3D"literal">&lt;class&gt;</code> and
          <code class=3D"literal">&lt;subclass&gt;</code> elements.</p><=
p>The <code class=3D"literal">formula</code> attribute allows you to dec=
lare
          an arbitrary SQL expression that will be used to evaluate the =
type
          of a row. For example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generate=
d by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
discriminator</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">formula</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;case&nbsp;when&nbsp;CLASS_=
TYPE&nbsp;in&nbsp;('a',&nbsp;'b',&nbsp;'c')&nbsp;then&nbsp;0&nbsp;else&n=
bsp;1&nbsp;end&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;integer&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
</pre></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h4 class=3D"title"><a id=3D"mapping-declaration-join=
edsubclass"/>5.1.6.2.=C2=A0Joined subclass strategy</h4></div></div></di=
v><p>Each subclass can also be mapped to its own table. This is
        called the table-per-subclass mapping strategy. An inherited sta=
te is
        retrieved by joining with the table of the superclass. A discrim=
inator
        column is not required for this mapping strategy. Each subclass =
must,
        however, declare a table column holding the object identifier. T=
he
        primary key of this table is also a foreign key to the superclas=
s
        table and described by the
        <code class=3D"classname">@PrimaryKeyJoinColumn</code>s or the
        <code class=3D"literal">&lt;key&gt;</code> element.</p><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><s=
pan class=3D"java_type">Entity</span><!-- <br/> --><span class=3D"java_p=
lain">&nbsp;@</span><!-- <br/> --><span class=3D"java_type">Table</span>=
<!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span=
 class=3D"java_plain">name</span><!-- <br/> --><span class=3D"java_opera=
tor">=3D</span><!-- <br/> --><span class=3D"java_literal">&quot;CATS&quo=
t;</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Inheritance</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">strategy</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_type">InheritanceType</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">JOINED</span><span class=3D"java_s=
eparator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implem=
ents</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_t=
ype">Serializable</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</=
span><span class=3D"java_type">GeneratedValue</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">generator</span><span clas=
s=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;cat-uui=
d&quot;</span><span class=3D"java_separator">)</span><span class=3D"java=
_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">GenericGenerator</span><span class=3D"java_se=
parator">(</span><span class=3D"java_plain">name</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_literal">&quot;cat-uuid&quot;=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;strategy</span><span class=3D"java_operator">=3D</span><span clas=
s=3D"java_literal">&quot;uuid&quot;</span><span class=3D"java_separator"=
>)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;=
getId</span><span class=3D"java_separator">()</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_keyword">return</span><spa=
n class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">;</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"=
java_type">Table</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_literal">&quot;DOMESTIC_CATS&quot;</span><span class=3D"=
java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">PrimaryKeyJoinColumn</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">name</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_literal">&quot;CAT&quot;</span><span class=3D"jav=
a_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">DomesticCat</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword=
">extends</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Cat</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;name</span><span class=3D"java=
_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span></pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" class=3D"note"><h2>Note</h2><p>The table name still default=
s to the non qualified class name.
          Also if <code class=3D"classname">@PrimaryKeyJoinColumn</code>=
 is not set, the
          primary key / foreign key columns are assumed to have the same=
 names
          as the primary key columns of the primary table of the
          superclass.</p></div><p>In hbm.xml, use the <code class=3D"lit=
eral">&lt;joined-subclass&gt;</code>
        element. For example:</p><div class=3D"programlistingco"><pre cl=
ass=3D"programlisting">&lt;joined-subclass
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"joinedsubclass1"><im=
g src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></spa=
n>ClassName"
        table=3D<span xmlns=3D"" class=3D"co" id=3D"joinedsubclass2"><im=
g src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></spa=
n>"tablename"
        proxy=3D<span xmlns=3D"" class=3D"co" id=3D"joinedsubclass3"><im=
g src=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></spa=
n>"ProxyInterface"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"joinedsubclass4"><im=
g src=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></spa=
n>true|false"
        dynamic-update=3D"true|false"
        dynamic-insert=3D"true|false"
        schema=3D"schema"
        catalog=3D"catalog"
        extends=3D"SuperclassName"
        persister=3D"ClassName"
        subselect=3D"SQL expression"
        entity-name=3D"EntityName"
        node=3D"element-name"&gt;

        &lt;key .... &gt;

        &lt;property .... /&gt;
        .....
&lt;/joined-subclass&gt;</pre><div class=3D"calloutlist"><table border=3D=
"0" summary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D=
"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"=
1" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"t=
op" align=3D"left"><p><code class=3D"literal">name</code>: the fully qua=
lified class name of
              the subclass.</p></td></tr><tr><td width=3D"5%" valign=3D"=
top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2=
.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><t=
d valign=3D"top" align=3D"left"><p><code class=3D"literal">table</code>:=
 the name of the subclass
              table.</p></td></tr><tr><td width=3D"5%" valign=3D"top" al=
ign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/3.png" a=
lt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valig=
n=3D"top" align=3D"left"><p><code class=3D"literal">proxy</code> (option=
al): specifies a class or
              interface to use for lazy initializing proxies.</p></td></=
tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"image=
s/org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">lazy</code> (optional, defaults to
              <code class=3D"literal">true</code>): setting
              <code class=3D"literal">lazy=3D"false"</code> disables the=
 use of lazy
              fetching.</p></td></tr></table></div></div><p>Use the <cod=
e class=3D"literal">&lt;key&gt;</code> element to declare the
        primary key / foreign key column. The mapping at the start of th=
e
        chapter would then be re-written as:</p><pre xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XM=
L : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-mappin=
g</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;-//Hibernate/Hibernat=
e&nbsp;Mapping&nbsp;DTD//EN&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;http://www.hibernate.=
org/dtd/hibernate-mapping-3.0.dtd&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;eg&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;Cat&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;CATS&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;uid&quot;</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;long&quot;</span><span class=3D"xml_tag_symb=
ols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;hilo&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;birthdate&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;da=
te&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;color&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;sex&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;weight&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;mate&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;kittens&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;MO=
THER&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Cat&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">joined-subclass=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;DomesticCat&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;DOMESTIC_CATS&quot;</span><span class=3D"xml_tag_symbols">&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;CAT&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">joined-subclas=
s</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">class</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;eg.Dog&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;mapping&nbsp;for&nbsp;Dog&nbsp;could&nbsp;go&n=
bsp;here&nbsp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">class</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>For information about inheritance mappings see <a class=3D"xref=
" href=3D"#inheritance" title=3D"Chapter=C2=A010.=C2=A0Inheritance mappi=
ng">Chapter=C2=A010, <i>Inheritance mapping</i></a>.</p></div><div class=
=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=
=3D"title"><a id=3D"mapping-declaration-unionsubclass"/>5.1.6.3.=C2=A0Ta=
ble per class strategy</h4></div></div></div><p>A third option is to map=
 only the concrete classes of an
        inheritance hierarchy to tables. This is called the
        table-per-concrete-class strategy. Each table defines all persis=
tent
        states of the class, including the inherited state. In Hibernate=
, it
        is not necessary to explicitly map such inheritance hierarchies.=
 You
        can map each class as a separate entity root. However, if you wi=
sh use
        polymorphic associations (e.g. an association to the superclass =
of
        your hierarchy), you need to use the union subclass mapping.</p>=
<pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactor=
y" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- =
<br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Inheritance</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">strategy&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Inhe=
ritanceType</span><span class=3D"java_separator">.</span><span class=3D"=
java_plain">TABLE_PER_CLASS</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">...</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">}</span><span class=3D"java_pl=
ain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</span></pre><p>Or in hbm.xml:</p><div class=3D"programlistingco"><=
pre class=3D"programlisting">&lt;union-subclass
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"unionsubclass1"><img=
 src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span=
>ClassName"
        table=3D<span xmlns=3D"" class=3D"co" id=3D"unionsubclass2"><img=
 src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span=
>"tablename"
        proxy=3D<span xmlns=3D"" class=3D"co" id=3D"unionsubclass3"><img=
 src=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span=
>"ProxyInterface"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"unionsubclass4"><img=
 src=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span=
>true|false"
        dynamic-update=3D"true|false"
        dynamic-insert=3D"true|false"
        schema=3D"schema"
        catalog=3D"catalog"
        extends=3D"SuperclassName"
        abstract=3D"true|false"
        persister=3D"ClassName"
        subselect=3D"SQL expression"
        entity-name=3D"EntityName"
        node=3D"element-name"&gt;

        &lt;property .... /&gt;
        .....
&lt;/union-subclass&gt;</pre><div class=3D"calloutlist"><table border=3D=
"0" summary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D=
"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"=
1" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"t=
op" align=3D"left"><p><code class=3D"literal">name</code>: the fully qua=
lified class name of
              the subclass.</p></td></tr><tr><td width=3D"5%" valign=3D"=
top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2=
.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><t=
d valign=3D"top" align=3D"left"><p><code class=3D"literal">table</code>:=
 the name of the subclass
              table.</p></td></tr><tr><td width=3D"5%" valign=3D"top" al=
ign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/3.png" a=
lt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valig=
n=3D"top" align=3D"left"><p><code class=3D"literal">proxy</code> (option=
al): specifies a class or
              interface to use for lazy initializing proxies.</p></td></=
tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"image=
s/org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">lazy</code> (optional, defaults to
              <code class=3D"literal">true</code>): setting
              <code class=3D"literal">lazy=3D"false"</code> disables the=
 use of lazy
              fetching.</p></td></tr></table></div></div><p>No discrimin=
ator column or key column is required for this
        mapping strategy.</p><p>For information about inheritance mappin=
gs see <a class=3D"xref" href=3D"#inheritance" title=3D"Chapter=C2=A010.=
=C2=A0Inheritance mapping">Chapter=C2=A010, <i>Inheritance mapping</i></=
a>.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepa=
ge"><div><div><h4 class=3D"title"><a id=3D"d0e7287"/>5.1.6.4.=C2=A0Inher=
it properties from superclasses</h4></div></div></div><p>This is sometim=
es useful to share common properties through a
        technical or a business superclass without including it as a reg=
ular
        mapped entity (ie no specific table for this entity). For that p=
urpose
        you can map them as <code class=3D"literal">@MappedSuperclass</c=
ode>.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRende=
rerFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</s=
pan><!-- <br/> --><span class=3D"java_type">MappedSuperclass</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">BaseEntity</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Basic</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Temporal</span><span class=3D"java_separator"=
>(</span><span class=3D"java_type">TemporalType</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">TIMESTAMP</span><span cl=
ass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Date</span><span class=3D"java_plain=
">&nbsp;getLastUpdate</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getLastUpdater</span><span class=3D"java_separator">()</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_keyword">class</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">Order</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_keyword">extends</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">BaseEntity</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_keyword">public</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">Integer</span><span class=3D"jav=
a_plain">&nbsp;getId</span><span class=3D"java_separator">()</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In databas=
e, this hierarchy will be represented as an
        <code class=3D"literal">Order</code> table having the <code clas=
s=3D"literal">id</code>,
        <code class=3D"literal">lastUpdate</code> and <code class=3D"lit=
eral">lastUpdater</code>
        columns. The embedded superclass property mappings are copied in=
to
        their entity subclasses. Remember that the embeddable superclass=
 is
        not the root of the hierarchy though.</p><div xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>=
Properties from superclasses not mapped as
          <code class=3D"literal">@MappedSuperclass</code> are ignored.<=
/p></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory"=
 class=3D"note"><h2>Note</h2><p>The default access type (field or method=
s) is used, unless you
          use the <code class=3D"literal">@Access</code> annotation.</p>=
</div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"note"><h2>Note</h2><p>The same notion can be applied to
          <code class=3D"literal">@Embeddable</code> objects to persist =
properties from
          their superclasses. You also need to use
          <code class=3D"literal">@MappedSuperclass</code> to do that (t=
his should not be
          considered as a standard EJB3 feature though)</p></div><div xm=
lns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note">=
<h2>Note</h2><p>It is allowed to mark a class as
          <code class=3D"literal">@MappedSuperclass</code> in the middle=
 of the mapped
          inheritance hierarchy.</p></div><div xmlns:rf=3D"java:org.jbos=
s.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>Any cla=
ss in the hierarchy non annotated with
          <code class=3D"literal">@MappedSuperclass</code> nor <code cla=
ss=3D"literal">@Entity</code>
          will be ignored.</p></div><p>You can override columns defined =
in entity superclasses at the
        root entity level using the <code class=3D"literal">@AttributeOv=
erride</code>
        annotation.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"ja=
va_plain">@</span><!-- <br/> --><span class=3D"java_type">MappedSupercla=
ss</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">FlyingObject<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywor=
d">implements</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_plain"=
>&nbsp;getAltitude</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;altitude</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Transient</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_plain"=
>&nbsp;getMetricAltitude</span><span class=3D"java_separator">()</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;metricAltitude</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">PropulsionType</span><span class=3D"=
java_plain">&nbsp;getPropulsion</span><span class=3D"java_separator">()<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;metricAltitude</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">AttributeOverride</span><span class=3D"java_separator">(</span><span =
class=3D"java_plain">&nbsp;name</span><span class=3D"java_operator">=3D<=
/span><span class=3D"java_literal">&quot;altitude&quot;</span><span clas=
s=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;column&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;@</span><span class=3D"java_type">Column</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">name</span><span clas=
s=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;fld_alt=
itude&quot;</span><span class=3D"java_separator">)</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">AssociationOverride</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;name</span><s=
pan class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot=
;propulsion&quot;</span><span class=3D"java_separator">,</span><span cla=
ss=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;joinColumns&n=
bsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_p=
lain">&nbsp;@</span><span class=3D"java_type">JoinColumn</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">name</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;f=
ld_propulsion_fk&quot;</span><span class=3D"java_separator">)</span><spa=
n class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Plane</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">exte=
nds</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ty=
pe">FlyingObject</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>The <code =
class=3D"literal">altitude</code> property will be persisted in an
        <code class=3D"literal">fld_altitude</code> column of table
        <code class=3D"literal">Plane</code> and the propulsion associat=
ion will be
        materialized in a <code class=3D"literal">fld_propulsion_fk</cod=
e> foreign key
        column.</p><p>You can define <code class=3D"literal">@AttributeO=
verride</code>(s) and
        <code class=3D"literal">@AssociationOverride</code>(s) on
        <code class=3D"literal">@Entity</code> classes,
        <code class=3D"literal">@MappedSuperclass</code> classes and pro=
perties pointing
        to an <code class=3D"literal">@Embeddable</code> object.</p><p>I=
n hbm.xml, simply map the properties of the superclass in the
        <code class=3D"literal">&lt;class&gt;</code> element of the enti=
ty that needs to
        inherit them.</p></div><div class=3D"section" lang=3D"en-US"><di=
v class=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"mapping-dec=
laration-join"/>5.1.6.5.=C2=A0Mapping one entity to several tables</h4><=
/div></div></div><p>While not recommended for a fresh schema, some legac=
y databases
        force your to map a single entity on several tables.</p><p>Using=
 the <code class=3D"literal">@SecondaryTable</code> or
        <code class=3D"literal">@SecondaryTables</code> class level anno=
tations. To
        express that a column is in a particular table, use the
        <code class=3D"literal">table</code> parameter of <code class=3D=
"literal">@Column</code> or
        <code class=3D"literal">@JoinColumn</code>.</p><pre xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"=
><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span cl=
ass=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Table</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">name</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;MainCat&quot;</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SecondaryTables</span><span class=3D"java_separator">({</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">SecondaryTable</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">name</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">&quot;Cat1&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;pkJoinColumns</span><span class=3D"java_operator">=3D</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">PrimaryKeyJoinColumn<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
name</span><span class=3D"java_operator">=3D</span><span class=3D"java_l=
iteral">&quot;cat_id&quot;</span><span class=3D"java_separator">,</span>=
<span class=3D"java_plain">&nbsp;referencedColumnName</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_literal">&quot;id&quot;</s=
pan><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">SecondaryTable</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">name</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">&quot;Cat2&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;uniqueConstraints</span><span class=3D"java_operator">=3D</span><span c=
lass=3D"java_separator">{</span><span class=3D"java_plain">@</span><span=
 class=3D"java_type">UniqueConstraint</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">columnNames</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_separator">{</span><span cla=
ss=3D"java_literal">&quot;storyPart2&quot;</span><span class=3D"java_sep=
arator">})})</span>
<!--  --><br/><span class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implem=
ents</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_t=
ype">Serializable</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Integer</span><span class=3D"java_p=
lain">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;storyPart1</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;storyPart2</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</=
span><span class=3D"java_type">GeneratedValue</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Integer</span><span class=3D"java_pl=
ain">&nbsp;getId</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;name</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">table</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;Cat1&quot;</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getStoryPart1</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;storyPart1</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">table</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;Cat2&quot;</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getStoryPart2</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;storyPart2</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In this ex=
ample, <code class=3D"literal">name</code> will be in
        <code class=3D"literal">MainCat</code>. <code class=3D"literal">=
storyPart1</code> will be in
        <code class=3D"literal">Cat1</code> and <code class=3D"literal">=
storyPart2</code> will be in
        <code class=3D"literal">Cat2</code>. <code class=3D"literal">Cat=
1</code> will be joined to
        <code class=3D"literal">MainCat</code> using the <code class=3D"=
literal">cat_id</code> as a
        foreign key, and <code class=3D"literal">Cat2</code> using <code=
 class=3D"literal">id</code>
        (ie the same column name, the <code class=3D"literal">MainCat</c=
ode> id column
        has). Plus a unique constraint on <code class=3D"literal">storyP=
art2</code> has
        been set.</p><p>There is also additional tuning accessible via t=
he
        <code class=3D"classname">@org.hibernate.annotations.Table</code=
>
        annotation:</p><div class=3D"itemizedlist"><ul><li><p><code clas=
s=3D"literal">fetch</code>: If set to JOIN, the default,
            Hibernate will use an inner join to retrieve a secondary tab=
le
            defined by a class or its superclasses and an outer join for=
 a
            secondary table defined by a subclass. If set to
            <code class=3D"classname">SELECT</code> then Hibernate will =
use a sequential
            select for a secondary table defined on a subclass, which wi=
ll be
            issued only if a row turns out to represent an instance of t=
he
            subclass. Inner joins will still be used to retrieve a secon=
dary
            defined by the class and its superclasses.</p></li><li><p><c=
ode class=3D"literal">inverse</code>: If true, Hibernate will not try
            to insert or update the properties defined by this join. Def=
ault
            to false.</p></li><li><p><code class=3D"literal">optional</c=
ode>: If enabled (the default),
            Hibernate will insert a row only if the properties defined b=
y this
            join are non-null and will always use an outer join to retri=
eve
            the properties.</p></li><li><p><code class=3D"literal">forei=
gnKey</code>: defines the Foreign Key name
            of a secondary table pointing back to the primary table.</p>=
</li></ul></div><p>Make sure to use the secondary table name in the
        <code class=3D"methodname">appliesto</code> property</p><pre xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=
=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --=
><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Table</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">name</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;MainCat&quot;</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SecondaryTable</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">&quot;Cat1&quot;</span><span class=3D"java_sep=
arator">)</span>
<!--  --><br/><span class=3D"java_plain">@org</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">hibernate</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">annotations</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_type">Table=
</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;appliesTo</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_literal">=
&quot;Cat1&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;fetch</span><=
span class=3D"java_operator">=3D</span><span class=3D"java_type">FetchMo=
de</span><span class=3D"java_separator">.</span><span class=3D"java_plai=
n">SELECT</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;optional</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">t=
rue</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implem=
ents</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_t=
ype">Serializable</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Integer</span><span class=3D"java_p=
lain">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;storyPart1</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;storyPart2</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</=
span><span class=3D"java_type">GeneratedValue</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Integer</span><span class=3D"java_pl=
ain">&nbsp;getId</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;name</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">table</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;Cat1&quot;</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getStoryPart1</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;storyPart1</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">table</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;Cat2&quot;</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getStoryPart2</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;storyPart2</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>In hbm.xml=
, use the <code class=3D"literal">&lt;join&gt;</code>
        element.</p><div class=3D"programlistingco"><pre class=3D"progra=
mlisting">&lt;join
        table=3D<span xmlns=3D"" class=3D"co" id=3D"join1"><img src=3D"i=
mages/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>"tablena=
me"
        schema<span xmlns=3D"" class=3D"co" id=3D"join2"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>=3D"owner"=

        catalo<span xmlns=3D"" class=3D"co" id=3D"join3"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>g=3D"catal=
og"
        fetch=3D<span xmlns=3D"" class=3D"co" id=3D"join4"><img src=3D"i=
mages/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>"join|se=
lect"
        invers<span xmlns=3D"" class=3D"co" id=3D"join5"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>e=3D"true|=
false"
        option<span xmlns=3D"" class=3D"co" id=3D"join6"><img src=3D"ima=
ges/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>al=3D"true=
|false"&gt;

        &lt;key ... /&gt;

        &lt;property ... /&gt;
        ...
&lt;/join&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summar=
y=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p=
><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=
=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=
=3D"left"><p><code class=3D"literal">table</code>: the name of the joine=
d
              table.</p></td></tr><tr><td width=3D"5%" valign=3D"top" al=
ign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/2.png" a=
lt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valig=
n=3D"top" align=3D"left"><p><code class=3D"literal">schema</code> (optio=
nal): overrides the schema
              name specified by the root
              <code class=3D"literal">&lt;hibernate-mapping&gt;</code> e=
lement.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left">=
<p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" src=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"3" bord=
er=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" ali=
gn=3D"left"><p><code class=3D"literal">catalog</code> (optional): overri=
des the
              catalog name specified by the root
              <code class=3D"literal">&lt;hibernate-mapping&gt;</code> e=
lement.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left">=
<p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" src=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"4" bord=
er=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" ali=
gn=3D"left"><p><code class=3D"literal">fetch</code> (optional - defaults=
 to
              <code class=3D"literal">join</code>): if set to <code clas=
s=3D"literal">join</code>, the
              default, Hibernate will use an inner join to retrieve a
              <code class=3D"literal">&lt;join&gt;</code> defined by a c=
lass or its
              superclasses. It will use an outer join for a
              <code class=3D"literal">&lt;join&gt;</code> defined by a s=
ubclass. If set to
              <code class=3D"literal">select</code> then Hibernate will =
use a sequential
              select for a <code class=3D"literal">&lt;join&gt;</code> d=
efined on a
              subclass. This will be issued only if a row represents an
              instance of the subclass. Inner joins will still be used t=
o
              retrieve a <code class=3D"literal">&lt;join&gt;</code> def=
ined by the class
              and its superclasses.</p></td></tr><tr><td width=3D"5%" va=
lign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jbos=
s.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/ca=
llouts/5.png" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p=
></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">inver=
se</code> (optional - defaults to
              <code class=3D"literal">false</code>): if enabled, Hiberna=
te will not insert
              or update the properties defined by this join.</p></td></t=
r><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" =
xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images=
/org/hibernate/docbook/callouts/6.png" alt=3D"6" border=3D"0" height=3D"=
17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><cod=
e class=3D"literal">optional</code> (optional - defaults to
              <code class=3D"literal">false</code>): if enabled, Hiberna=
te will insert a
              row only if the properties defined by this join are non-nu=
ll. It
              will always use an outer join to retrieve the properties.<=
/p></td></tr></table></div></div><p>For example, address information for=
 a person can be mapped to a
        separate table while preserving value type semantics for all
        properties:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlig=
ht v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">table</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;PERSON&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PERSON_ID&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain">...</span><span class=3D"xml_tag_symbols">&lt;/</span><span clas=
s=3D"xml_tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">join</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ta=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;ADDRESS&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;ADDRESS_ID&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;address&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;zip&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;country&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">join</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
</pre><p>This feature is often only useful for legacy data models. We
        recommend fewer tables than classes and a fine-grained domain mo=
del.
        However, it is useful for switching between inheritance mapping
        strategies in a single hierarchy, as explained later.</p></div><=
/div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div=
><div><h3 class=3D"title"><a id=3D"d0e7576"/>5.1.7.=C2=A0Mapping one to =
one and one to many associations</h3></div></div></div><p>To link one en=
tity to an other, you need to map the association
      property as a to one association. In the relational model, you can=

      either use a foreign key or an association table, or (a bit less c=
ommon)
      share the same primary key value between the two entities.</p><p>T=
o mark an association, use either
      <code class=3D"classname">@ManyToOne</code> or
      <code class=3D"classname">@OnetoOne</code>.</p><p><code class=3D"l=
iteral">@ManyToOne</code> and <code class=3D"classname">@OneToOne</code>=

      have a parameter named <code class=3D"literal">targetEntity</code>=
 which describes
      the target entity name. You usually don't need this parameter sinc=
e the
      default value (the type of the property that stores the associatio=
n) is
      good in almost all cases. However this is useful when you want to =
use
      interfaces as the return type instead of the regular entity.</p><p=
>Setting a value of the <code class=3D"literal">cascade</code> attribute=
 to any
      meaningful value other than nothing will propagate certain operati=
ons to
      the associated object. The meaningful values are divided into thre=
e
      categories.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" class=3D"orderedlist"><ol><li><p>basic operations, which in=
clude: <code class=3D"literal">persist, merge,
          delete, save-update, evict, replicate, lock and
          refresh</code>;</p></li><li><p>special values: <code class=3D"=
literal">delete-orphan</code> or
          <code class=3D"literal">all</code> ;</p></li><li><p>comma-sepa=
rated combinations of operation names:
          <code class=3D"literal">cascade=3D"persist,merge,evict"</code>=
 or
          <code class=3D"literal">cascade=3D"all,delete-orphan"</code>. =
See <a class=3D"xref" href=3D"#objectstate-transitive" title=3D"11.11.=C2=
=A0Transitive persistence">Section=C2=A011.11, =E2=80=9CTransitive persi=
stence=E2=80=9D</a> for a full explanation. Note
          that single valued many-to-one associations do not support orp=
han
          delete.</p></li></ol></div><p>By default, single point associa=
tions are eagerly fetched in JPA
      2. You can mark it as lazily fetched by using
      <code class=3D"classname">@ManyToOne(fetch=3DFetchType.LAZY) </cod=
e>in which case
      Hibernate will proxy the association and load it when the state of=
 the
      associated entity is reached. You can force Hibernate not to use a=
 proxy
      by using <code class=3D"classname">@LazyToOne(NO_PROXY)</code>. In=
 this case, the
      property is fetched lazily when the instance variable is first acc=
essed.
      This requires build-time bytecode instrumentation. lazy=3D"false"
      specifies that the association will always be eagerly fetched.</p>=
<p>With the default JPA options, single-ended associations are loaded
      with a subsequent select if set to <code class=3D"literal">LAZY</c=
ode>, or a SQL
      JOIN is used for <code class=3D"literal">EAGER</code> associations=
. You can however
      adjust the fetching strategy, ie how data is fetched by using
      <code class=3D"literal">@Fetch</code>. <code class=3D"literal">Fet=
chMode</code> can be
      <code class=3D"literal">SELECT</code> (a select is triggered when =
the association
      needs to be loaded) or <code class=3D"literal">JOIN</code> (use a =
SQL JOIN to load
      the association while loading the owner entity). <code class=3D"li=
teral">JOIN</code>
      overrides any lazy attribute (an association loaded through a
      <code class=3D"literal">JOIN</code> strategy cannot be lazy).</p><=
div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div>=
<h4 class=3D"title"><a id=3D"mapping-declaration-manytoone"/>5.1.7.1.=C2=
=A0Using a foreign key or an association table</h4></div></div></div><p>=
An ordinary association to another persistent class is declared
        using a</p><div class=3D"itemizedlist"><ul><li><p><code class=3D=
"classname">@ManyToOne</code> if several entities can
            point to the the target entity</p></li><li><p><code class=3D=
"classname">@OneToOne</code> if only a single entity can
            point to the the target entity</p></li></ul></div><p>and a f=
oreign key in one table is referencing the primary key
        column(s) of the target table.</p><pre xmlns=3D"" xmlns:rf=3D"ja=
va:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> -=
-><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_t=
ype">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">&nbsp;cascade&nbsp;</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span><span class=3D"java_type">CascadeT=
ype</span><span class=3D"java_separator">.</span><span class=3D"java_pla=
in">PERSIST</span><span class=3D"java_separator">,</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">CascadeType</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">MERGE</sp=
an><span class=3D"java_separator">}</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;COMP_ID&quot;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Company</span><span class=3D"java_pl=
ain">&nbsp;getCompany</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;company</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span></pre><p>The <code class=3D"literal">@JoinColumn</code> a=
ttribute is optional, the
        default value(s) is the concatenation of the name of the relatio=
nship
        in the owner side, <span class=3D"keycap"><strong>_</strong></sp=
an> (underscore), and the name of
        the primary key column in the owned side. In this example
        <code class=3D"literal">company_id</code> because the property n=
ame is
        <code class=3D"literal">company</code> and the column id of Comp=
any is
        <code class=3D"literal">id</code>.</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"jav=
a_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">&nbsp;cascade&nbsp;</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span><span class=3D"java_type">CascadeT=
ype</span><span class=3D"java_separator">.</span><span class=3D"java_pla=
in">PERSIST</span><span class=3D"java_separator">,</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">CascadeType</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">MERGE</sp=
an><span class=3D"java_separator">},</span><span class=3D"java_plain">&n=
bsp;targetEntity</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_type">CompanyImpl</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_keyword">class</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;COMP_ID&quot;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Company</span><span class=3D"java_pl=
ain">&nbsp;getCompany</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;company</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">interface</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Company</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>You can al=
so map a to one association through an association
        table. This association table described by the
        <code class=3D"literal">@JoinTable</code> annotation will contai=
ns a foreign key
        referencing back the entity table (through
        <code class=3D"literal">@JoinTable.joinColumns</code>) and a a f=
oreign key
        referencing the target entity table (through
        <code class=3D"literal">@JoinTable.inverseJoinColumns</code>).</=
p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFact=
ory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-=
- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Flight</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">&nbsp;cascade&nbsp;</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span><span class=3D"java_type">CascadeT=
ype</span><span class=3D"java_separator">.</span><span class=3D"java_pla=
in">PERSIST</span><span class=3D"java_separator">,</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">CascadeType</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">MERGE</sp=
an><span class=3D"java_separator">}</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinTable</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">name</span><span class=3D"java_oper=
ator">=3D</span><span class=3D"java_literal">&quot;Flight_Company&quot;<=
/span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;joinColumns&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"java_type=
">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;FLIGHT_ID&quot;</span><span class=3D"java_sep=
arator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;inverseJoinColumns&nbsp;</span><span class=3D"java_oper=
ator">=3D</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"=
java_type">JoinColumn</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">name</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_literal">&quot;COMP_ID&quot;</span><span class=3D"j=
ava_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Company</span><span class=3D"java_pl=
ain">&nbsp;getCompany</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;company</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre><div xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h=
2>Note</h2><p>You can use a SQL fragment to simulate a physical join col=
umn
          using the <code class=3D"classname">@JoinColumnOrFormula</code=
> /
          <code class=3D"classname">@JoinColumnOrformulas</code> annotat=
ions (just like
          you can use a SQL fragment to simulate a property column via t=
he
          <code class=3D"classname">@Formula</code> annotation).</p><pre=
 xmlns=3D"" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</s=
pan><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Ticket</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">imp=
lements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumnOrFormula</span><span class=3D"java=
_separator">(</span><span class=3D"java_plain">formula</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;(firstna=
me&nbsp;+&nbsp;'&nbsp;'&nbsp;+&nbsp;lastname)&quot;</span><span class=3D=
"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Person</span><span class=3D"java_pla=
in">&nbsp;getOwner</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;person</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre></div><p>=
You can mark an association as mandatory by using the
        <code class=3D"literal">optional=3Dfalse</code> attribute. We re=
commend to use Bean
        Validation's <code class=3D"classname">@NotNull</code> annotatio=
n as a better
        alternative however. As a consequence, the foreign key column(s)=
 will
        be marked as not nullable (if possible).</p><p>When Hibernate ca=
nnot resolve the association because the
        expected associated element is not in database (wrong id on the
        association column), an exception is raised. This might be
        inconvenient for legacy and badly maintained schemas. You can as=
k
        Hibernate to ignore such elements instead of raising an exceptio=
n
        using the <code class=3D"literal">@NotFound</code> annotation.</=
p><div class=3D"example"><a id=3D"d0e7744"/><p class=3D"title"><b>Exampl=
e=C2=A05.1.=C2=A0@NotFound annotation</b></p><div class=3D"example-conte=
nts"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span>=
<!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Child</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">NotFound</span><span class=3D"java_separator"=
>(</span><span class=3D"java_plain">action</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_type">NotFoundAction</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">IGNORE</span><=
span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Parent</span><span class=3D"java_pla=
in">&nbsp;getParent</span><span class=3D"java_separator">()</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>Sometimes you want to delegate to your da=
tabase the deletion of
        cascade when a given entity is deleted. In this case Hibernate
        generates a cascade delete constraint at the database level.</p>=
<div class=3D"example"><a id=3D"d0e7751"/><p class=3D"title"><b>Example=C2=
=A05.2.=C2=A0@OnDelete annotation</b></p><div class=3D"example-contents"=
><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!--=
 <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Child</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">OnDelete</span><span class=3D"java_separator"=
>(</span><span class=3D"java_plain">action</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_type">OnDeleteAction</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">CASCADE</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Parent</span><span class=3D"java_pla=
in">&nbsp;getParent</span><span class=3D"java_separator">()</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>Foreign key constraints, while generated =
by Hibernate, have a
        fairly unreadable name. You can override the constraint name usi=
ng
        <code class=3D"literal">@ForeignKey</code>.</p><div class=3D"exa=
mple"><a id=3D"d0e7761"/><p class=3D"title"><b>Example=C2=A05.3.=C2=A0@F=
oreignKey annotation</b></p><div class=3D"example-contents"><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><spa=
n class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Child</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ForeignKey</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;FK_PARENT&quot;</spa=
n><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Parent</span><span class=3D"java_pla=
in">&nbsp;getParent</span><span class=3D"java_separator">()</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">alter&nbsp;table&nbsp;</span><s=
pan class=3D"java_type">Child</span><span class=3D"java_plain">&nbsp;add=
&nbsp;constraint&nbsp;FK_PARENT&nbsp;foreign&nbsp;key&nbsp;</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">parent_id</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;references&nbsp;</span><span class=3D"java_type">Parent</span></pre>=
</div></div><br class=3D"example-break"/><p>Sometimes, you want to link =
one entity to an other not by the
        target entity primary key but by a different unique key. You can=

        achieve that by referencing the unique key column(s) in
        <code class=3D"methodname">@JoinColumn.referenceColumnName</code=
>.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span=
><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Person</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;p=
ersonNumber</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Column</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">name</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;I&quot;</span><span class=3D"j=
ava_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;initia=
l</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Home</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;first_na=
me&quot;</span><span class=3D"java_separator">,</span><span class=3D"jav=
a_plain">&nbsp;referencedColumnName</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><span=
 class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;init&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;referencedColumnName</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_literal">&quot;I&quot;</span><span class=3D"java=
_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;last_nam=
e&quot;</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;referencedColumnName</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;lastName&quot;</span><span cla=
ss=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Person</span><span class=3D"java_plain">&nbsp;owner<=
/span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>This is no=
t encouraged however and should be reserved to legacy
        mappings.</p><p>In hbm.xml, mapping an association is similar. T=
he main
        difference is that a <code class=3D"classname">@OneToOne</code> =
is mapped as
        <code class=3D"literal">&lt;many-to-one unique=3D"true"/&gt;</co=
de>, let's dive into
        the subject.</p><div class=3D"programlistingco"><pre class=3D"pr=
ogramlisting">&lt;many-to-one
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"manytoone1"><img src=
=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>pro=
pertyName"
        column<span xmlns=3D"" class=3D"co" id=3D"manytoone2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>=3D"co=
lumn_name"
        class=3D<span xmlns=3D"" class=3D"co" id=3D"manytoone3"><img src=
=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>"Cl=
assName"
        cascad<span xmlns=3D"" class=3D"co" id=3D"manytoone4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>e=3D"c=
ascade_style"
        fetch=3D<span xmlns=3D"" class=3D"co" id=3D"manytoone5"><img src=
=3D"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>"jo=
in|select"
        update<span xmlns=3D"" class=3D"co" id=3D"manytoone6"><img src=3D=
"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>=3D"tr=
ue|false"
        insert<span xmlns=3D"" class=3D"co" id=3D"manytoone7"><img src=3D=
"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>=3D"tr=
ue|false"
        proper<span xmlns=3D"" class=3D"co" id=3D"manytoone8"><img src=3D=
"images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>ty-ref=
=3D"propertyNameFromAssociatedClass"
        access<span xmlns=3D"" class=3D"co" id=3D"manytoone9"><img src=3D=
"images/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></span>=3D"fi=
eld|property|ClassName"
        unique<span xmlns=3D"" class=3D"co" id=3D"manytoone10"><img src=3D=
"images/org/hibernate/docbook/callouts/9.png" alt=3D"(9)"/></span>=3D"tr=
ue|false"
        not-nu<span xmlns=3D"" class=3D"co" id=3D"manytoone11"><img src=3D=
"images/org/hibernate/docbook/callouts/10.png" alt=3D"(10)"/></span>ll=3D=
"true|false"
        optimi<span xmlns=3D"" class=3D"co" id=3D"manytoone12"><img src=3D=
"images/org/hibernate/docbook/callouts/11.png" alt=3D"(11)"/></span>stic=
-lock=3D"true|false"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"manytoone13"><img sr=
c=3D"images/org/hibernate/docbook/callouts/12.png" alt=3D"(12)"/></span>=
proxy|no-proxy|false"
        not-fo<span xmlns=3D"" class=3D"co" id=3D"manytoone14"><img src=3D=
"images/org/hibernate/docbook/callouts/13.png" alt=3D"(13)"/></span>und=3D=
"ignore|exception"
        entity<span xmlns=3D"" class=3D"co" id=3D"manytoone15"><img src=3D=
"images/org/hibernate/docbook/callouts/14.png" alt=3D"(14)"/></span>-nam=
e=3D"EntityName"
        formul<span xmlns=3D"" class=3D"co" id=3D"manytoone16"><img src=3D=
"images/org/hibernate/docbook/callouts/15.png" alt=3D"(15)"/></span>a=3D=
"arbitrary SQL expression"
        node=3D"element-name|@attribute-name|element/@attribute|."
        embed-xml=3D"true|false"
        index=3D"index_name"
        unique_key=3D"unique_key_id"
        foreign-key=3D"foreign_key_name"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">name</code>: the name of the property.</p></t=
d></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">column</code> (optional): the name of the
              foreign key column. This can also be specified by nested
              <code class=3D"literal">&lt;column&gt;</code> element(s).<=
/p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img =
xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" sr=
c=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0"=
 height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"le=
ft"><p><code class=3D"literal">class</code> (optional - defaults to the
              property type determined by reflection): the name of the
              associated class.</p></td></tr><tr><td width=3D"5%" valign=
=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callou=
ts/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17px"/></p></t=
d><td valign=3D"top" align=3D"left"><p><code class=3D"literal">cascade</=
code> (optional): specifies which
              operations should be cascaded from the parent object to th=
e
              associated object.</p></td></tr><tr><td width=3D"5%" valig=
n=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.h=
ighlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callo=
uts/5.png" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></=
td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">fetch</c=
ode> (optional - defaults to
              <code class=3D"literal">select</code>): chooses between ou=
ter-join fetching
              or sequential select fetching.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/6.png" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">update, insert</code> (optional - defaults to
              <code class=3D"literal">true</code>): specifies that the m=
apped columns
              should be included in SQL <code class=3D"literal">UPDATE</=
code> and/or
              <code class=3D"literal">INSERT</code> statements. Setting =
both to
              <code class=3D"literal">false</code> allows a pure "derive=
d" association
              whose value is initialized from another property that maps=
 to
              the same column(s), or by a trigger or other application.<=
/p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img =
xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" sr=
c=3D"images/org/hibernate/docbook/callouts/7.png" alt=3D"7" border=3D"0"=
 height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"le=
ft"><p><code class=3D"literal">property-ref</code> (optional): the name =
of a
              property of the associated class that is joined to this fo=
reign
              key. If not specified, the primary key of the associated c=
lass
              is used.</p></td></tr><tr><td width=3D"5%" valign=3D"top" =
align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/8.png"=
 alt=3D"8" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td val=
ign=3D"top" align=3D"left"><p><code class=3D"literal">access</code> (opt=
ional - defaults to
              <code class=3D"literal">property</code>): the strategy Hib=
ernate uses for
              accessing the property value.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/9.png" alt=3D"9" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">unique</code> (optional): enables the DDL
              generation of a unique constraint for the foreign-key colu=
mn. By
              allowing this to be the target of a
              <code class=3D"literal">property-ref</code>, you can make =
the association
              multiplicity one-to-one.</p></td></tr><tr><td width=3D"5%"=
 valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook=
/callouts/10.png" alt=3D"10" border=3D"0" height=3D"17px" width=3D"17px"=
/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">=
not-null</code> (optional): enables the DDL
              generation of a nullability constraint for the foreign key=

              columns.</p></td></tr><tr><td width=3D"5%" valign=3D"top" =
align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/11.png=
" alt=3D"11" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">optimistic-lock<=
/code> (optional - defaults to
              <code class=3D"literal">true</code>): specifies that updat=
es to this
              property do or do not require acquisition of the optimisti=
c
              lock. In other words, it determines if a version increment=

              should occur when this property is dirty.</p></td></tr><tr=
><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/=
hibernate/docbook/callouts/12.png" alt=3D"12" border=3D"0" height=3D"17p=
x" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code c=
lass=3D"literal">lazy</code> (optional - defaults to
              <code class=3D"literal">proxy</code>): by default, single =
point associations
              are proxied. <code class=3D"literal">lazy=3D"no-proxy"</co=
de> specifies that
              the property should be fetched lazily when the instance va=
riable
              is first accessed. This requires build-time bytecode
              instrumentation. <code class=3D"literal">lazy=3D"false"</c=
ode> specifies that
              the association will always be eagerly fetched.</p></td></=
tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"image=
s/org/hibernate/docbook/callouts/13.png" alt=3D"13" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">not-found</code> (optional - defaults to
              <code class=3D"literal">exception</code>): specifies how f=
oreign keys that
              reference missing rows will be handled.
              <code class=3D"literal">ignore</code> will treat a missing=
 row as a null
              association.</p></td></tr><tr><td width=3D"5%" valign=3D"t=
op" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/14=
.png" alt=3D"14" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">entity-name<=
/code> (optional): the entity name
              of the associated class.</p></td></tr><tr><td width=3D"5%"=
 valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook=
/callouts/15.png" alt=3D"15" border=3D"0" height=3D"17px" width=3D"17px"=
/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">=
formula</code> (optional): an SQL expression
              that defines the value for a <span class=3D"emphasis"><em>=
computed</em></span>
              foreign key.</p></td></tr></table></div></div><p>Setting a=
 value of the <code class=3D"literal">cascade</code> attribute to
        any meaningful value other than <code class=3D"literal">none</co=
de> will propagate
        certain operations to the associated object. The meaningful valu=
es are
        divided into three categories. First, basic operations, which in=
clude:
        <code class=3D"literal">persist, merge, delete, save-update, evi=
ct, replicate, lock
        and refresh</code>; second, special values:
        <code class=3D"literal">delete-orphan</code>; and third,<code cl=
ass=3D"literal">all</code>
        comma-separated combinations of operation names:
        <code class=3D"literal">cascade=3D"persist,merge,evict"</code> o=
r
        <code class=3D"literal">cascade=3D"all,delete-orphan"</code>. Se=
e <a class=3D"xref" href=3D"#objectstate-transitive" title=3D"11.11.=C2=A0=
Transitive persistence">Section=C2=A011.11, =E2=80=9CTransitive persiste=
nce=E2=80=9D</a> for a full explanation. Note that
        single valued, many-to-one and one-to-one, associations do not s=
upport
        orphan delete.</p><p>Here is an example of a typical <code class=
=3D"literal">many-to-one</code>
        declaration:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighli=
ght v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;product&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;Product&quot;</span><span class=3D"xml_plain">&nbsp;</s=
pan><span class=3D"xml_attribute_name">column</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PRODUCT_=
ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>The <code class=3D"literal">property-ref</code> attribute shoul=
d only be
        used for mapping legacy data where a foreign key refers to a uni=
que
        key of the associated table other than the primary key. This is =
a
        complicated and confusing relational model. For example, if the
        <code class=3D"literal">Product</code> class had a unique serial=
 number that is
        not the primary key. The <code class=3D"literal">unique</code> a=
ttribute controls
        Hibernate's DDL generation with the SchemaExport tool.</p><pre x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cla=
ss=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.de=
v.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;serialNumber&quot;</span><span c=
lass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">uniqu=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;true&quot;</span><span class=3D"xml_plain">&nbsp;</s=
pan><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag=
_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;string&quo=
t;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span =
class=3D"xml_attribute_value">&quot;SERIAL_NUMBER&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
</pre><p>Then the mapping for <code class=3D"literal">OrderItem</code> m=
ight
        use:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;product&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">propert=
y-ref</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;serialNumber&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;PRODUCT_SERIAL_NUMBER&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>This is not encouraged, however.</p><p>If the referenced unique=
 key comprises multiple properties of
        the associated entity, you should map the referenced properties =
inside
        a named <code class=3D"literal">&lt;properties&gt;</code> elemen=
t.</p><p>If the referenced unique key is the property of a component, yo=
u
        can specify a property path:</p><pre xmlns=3D"" xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : gene=
rated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;owner&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">property-=
ref</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;identity.ssn&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">column</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;OWNER_SSN&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h4 class=3D"title"><a id=3D"mapping-declaration-onetoone"/=
>5.1.7.2.=C2=A0Sharing the primary key with the associated entity</h4></=
div></div></div><p>The second approach is to ensure an entity and its as=
sociated
        entity share the same primary key. In this case the primary key =
column
        is also a foreign key and there is no extra column. These associ=
ations
        are always one to one.</p><div class=3D"example"><a id=3D"d0e799=
3"/><p class=3D"title"><b>Example=C2=A05.4.=C2=A0One to One association<=
/b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:=
org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><=
span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_type=
">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Body</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;id</span><span class=3D"java_separat=
or">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">OneToOne</span><span class=3D"java_separator"=
>(</span><span class=3D"java_plain">cascade&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_type">CascadeType</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_plain">ALL</span><span class=3D"java_separator">)=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">MapsId</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Heart</span><span class=3D"java_plai=
n">&nbsp;getHeart</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;heart</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Heart</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">...}</sp=
an>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span></pre></div></div><br class=3D"example-break"/><div xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note<=
/h2><p>Many people got confused by these primary key based one to one
          associations. They can only be lazily loaded if Hibernate know=
s that
          the other side of the association is always present. To indica=
te to
          Hibernate that it is the case, use
          <code class=3D"classname">@OneToOne(optional=3Dfalse)</code>.<=
/p></div><p>In hbm.xml, use the following mapping.</p><div class=3D"prog=
ramlistingco"><pre class=3D"programlisting">&lt;one-to-one
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"onetoone1"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>proper=
tyName"
        class=3D<span xmlns=3D"" class=3D"co" id=3D"onetoone2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>"Class=
Name"
        cascad<span xmlns=3D"" class=3D"co" id=3D"onetoone3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>e=3D"c=
ascade_style"
        constr<span xmlns=3D"" class=3D"co" id=3D"onetoone4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>ained=3D=
"true|false"
        fetch=3D<span xmlns=3D"" class=3D"co" id=3D"onetoone5"><img src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>"join|=
select"
        proper<span xmlns=3D"" class=3D"co" id=3D"onetoone6"><img src=3D=
"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>ty-ref=
=3D"propertyNameFromAssociatedClass"
        access<span xmlns=3D"" class=3D"co" id=3D"onetoone7"><img src=3D=
"images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>=3D"fi=
eld|property|ClassName"
        formul<span xmlns=3D"" class=3D"co" id=3D"onetoone8"><img src=3D=
"images/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></span>a=3D"a=
ny SQL expression"
        lazy=3D"<span xmlns=3D"" class=3D"co" id=3D"onetoone9"><img src=3D=
"images/org/hibernate/docbook/callouts/9.png" alt=3D"(9)"/></span>proxy|=
no-proxy|false"
        entity<span xmlns=3D"" class=3D"co" id=3D"onetoone10"><img src=3D=
"images/org/hibernate/docbook/callouts/10.png" alt=3D"(10)"/></span>-nam=
e=3D"EntityName"
        node=3D"element-name|@attribute-name|element/@attribute|."
        embed-xml=3D"true|false"
        foreign-key=3D"foreign_key_name"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">name</code>: the name of the property.</p></t=
d></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">class</code> (optional - defaults to the
              property type determined by reflection): the name of the
              associated class.</p></td></tr><tr><td width=3D"5%" valign=
=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callou=
ts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></t=
d><td valign=3D"top" align=3D"left"><p><code class=3D"literal">cascade</=
code> (optional): specifies which
              operations should be cascaded from the parent object to th=
e
              associated object.</p></td></tr><tr><td width=3D"5%" valig=
n=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.h=
ighlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callo=
uts/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17px"/></p></=
td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">constrai=
ned</code> (optional): specifies that
              a foreign key constraint on the primary key of the mapped =
table
              and references the table of the associated class. This opt=
ion
              affects the order in which <code class=3D"literal">save()<=
/code> and
              <code class=3D"literal">delete()</code> are cascaded, and =
determines whether
              the association can be proxied. It is also used by the sch=
ema
              export tool.</p></td></tr><tr><td width=3D"5%" valign=3D"t=
op" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/5.=
png" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td=
 valign=3D"top" align=3D"left"><p><code class=3D"literal">fetch</code> (=
optional - defaults to
              <code class=3D"literal">select</code>): chooses between ou=
ter-join fetching
              or sequential select fetching.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/6.png" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">property-ref</code> (optional): the name of a
              property of the associated class that is joined to the pri=
mary
              key of this class. If not specified, the primary key of th=
e
              associated class is used.</p></td></tr><tr><td width=3D"5%=
" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.=
jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docboo=
k/callouts/7.png" alt=3D"7" border=3D"0" height=3D"17px" width=3D"17px"/=
></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">a=
ccess</code> (optional - defaults to
              <code class=3D"literal">property</code>): the strategy Hib=
ernate uses for
              accessing the property value.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/8.png" alt=3D"8" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">formula</code> (optional): almost all
              one-to-one associations map to the primary key of the owni=
ng
              entity. If this is not the case, you can specify another c=
olumn,
              columns or expression to join on using an SQL formula. See=

              <code class=3D"literal">org.hibernate.test.onetooneformula=
</code> for an
              example.</p></td></tr><tr><td width=3D"5%" valign=3D"top" =
align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/9.png"=
 alt=3D"9" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td val=
ign=3D"top" align=3D"left"><p><code class=3D"literal">lazy</code> (optio=
nal - defaults to
              <code class=3D"literal">proxy</code>): by default, single =
point associations
              are proxied. <code class=3D"literal">lazy=3D"no-proxy"</co=
de> specifies that
              the property should be fetched lazily when the instance va=
riable
              is first accessed. It requires build-time bytecode
              instrumentation. <code class=3D"literal">lazy=3D"false"</c=
ode> specifies that
              the association will always be eagerly fetched. <span clas=
s=3D"emphasis"><em>Note
              that if <code class=3D"literal">constrained=3D"false"</cod=
e>, proxying is
              impossible and Hibernate will eagerly fetch the
              association</em></span>.</p></td></tr><tr><td width=3D"5%"=
 valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook=
/callouts/10.png" alt=3D"10" border=3D"0" height=3D"17px" width=3D"17px"=
/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">=
entity-name</code> (optional): the entity name
              of the associated class.</p></td></tr></table></div></div>=
<p>Primary key associations do not need an extra table column. If
        two rows are related by the association, then the two table rows=
 share
        the same primary key value. To relate two objects by a primary k=
ey
        association, ensure that they are assigned the same identifier
        value.</p><p>For a primary key association, add the following ma=
ppings to
        <code class=3D"literal">Employee</code> and <code class=3D"liter=
al">Person</code>
        respectively:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighl=
ight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
one-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;person&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;Person&quot;</span><span class=3D"xml_tag_symbols">/&gt;<=
/span><span class=3D"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
one-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;employee&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;Employee&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">constrained</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>Ensure that the primary keys of the related rows in the PERSON
        and EMPLOYEE tables are equal. You use a special Hibernate ident=
ifier
        generation strategy called <code class=3D"literal">foreign</code=
>:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;person&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;PERSON&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PERSON_ID&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;foreign&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">param</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pr=
operty&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain">employee</span><span class=3D"xml_tag_symbols">&lt;/</sp=
an><span class=3D"xml_tag_name">param</span><span class=3D"xml_tag_symbo=
ls">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;employee&quot;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">class</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Empl=
oyee&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">constrained</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>A newly saved instance of <code class=3D"literal">Person</code>=
 is assigned
        the same primary key value as the <code class=3D"literal">Employ=
ee</code> instance
        referred with the <code class=3D"literal">employee</code> proper=
ty of that
        <code class=3D"literal">Person</code>.</p></div></div><div class=
=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=
=3D"title"><a id=3D"mapping-declaration-naturalid"/>5.1.8.=C2=A0Natural-=
id</h3></div></div></div><p>Although we recommend the use of surrogate k=
eys as primary keys,
      you should try to identify natural keys for all entities. A natura=
l key
      is a property or combination of properties that is unique and non-=
null.
      It is also immutable. Map the properties of the natural key as
      <code class=3D"classname">@NaturalId</code> or map them inside the=

      <code class=3D"literal">&lt;natural-id&gt;</code> element. Hiberna=
te will generate
      the necessary unique key and nullability constraints and, as a res=
ult,
      your mapping will be more self-documenting.</p><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span clas=
s=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Citizen</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">GeneratedValue</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Integer</span><span class=3D"java_p=
lain">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;firstname</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;lastname</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">NaturalId</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">State</span><span class=3D"java_pla=
in">&nbsp;state</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">NaturalId</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;ssn</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">and&nbsp;later&nbsp;on&nbsp;query</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;s</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">createCriteria</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">Citizen</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_keyword">class</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">naturalId</span><span =
class=3D"java_separator">().</span><span class=3D"java_plain">set</span>=
<span class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_literal">&quot;ssn&quot;</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">&quot;1234&quot;</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">).</span><span class=3D"java=
_plain">set</span><span class=3D"java_separator">(</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_literal">&quot;state&quot;<=
/span><span class=3D"java_separator">,</span><span class=3D"java_plain">=
&nbsp;ste&nbsp;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>Or in XML,</p><pr=
e xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight=
.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
natural-id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">mutable</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;true|false&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;...&nbsp;</span>=
<span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;...&nbsp;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;......</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>natural-id</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
</pre><p>It is recommended that you implement <code class=3D"literal">eq=
uals()</code>
      and <code class=3D"literal">hashCode()</code> to compare the natur=
al key properties
      of the entity.</p><p>This mapping is not intended for use with ent=
ities that have
      natural primary keys.</p><div class=3D"itemizedlist"><ul compact=3D=
"compact"><li><p><code class=3D"literal">mutable</code> (optional - defa=
ults to
          <code class=3D"literal">false</code>): by default, natural ide=
ntifier properties
          are assumed to be immutable (constant).</p></li></ul></div></d=
iv><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><=
div><h3 class=3D"title"><a id=3D"mapping-types-anymapping"/>5.1.9.=C2=A0=
Any</h3></div></div></div><p>There is one more type of property mapping.=
 The
      <code class=3D"classname">@Any</code> mapping defines a polymorphi=
c association to
      classes from multiple tables. This type of mapping requires more t=
han
      one column. The first column contains the type of the associated e=
ntity.
      The remaining columns contain the identifier. It is impossible to
      specify a foreign key constraint for this kind of association. Thi=
s is
      not the usual way of mapping polymorphic associations and you shou=
ld use
      this only in special cases. For example, for audit logs, user sess=
ion
      data, etc.</p><p>The <code class=3D"classname">@Any</code> annotat=
ion describes the column
      holding the metadata information. To link the value of the metadat=
a
      information and an actual entity type, The
      <code class=3D"classname">@AnyDef</code> and <code class=3D"classn=
ame">@AnyDefs</code>
      annotations are used. The <code class=3D"literal">metaType</code> =
attribute allows
      the application to specify a custom type that maps database column=

      values to persistent classes that have identifier properties of th=
e type
      specified by <code class=3D"literal">idType</code>. You must speci=
fy the mapping
      from values of the <code class=3D"literal">metaType</code> to clas=
s names.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@=
</span><!-- <br/> --><span class=3D"java_type">Any</span><!-- <br/> --><=
span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;metaColumn&nbsp;</span><!-- <br/> --><span class=3D"java_op=
erator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;@</span=
><!-- <br/> --><span class=3D"java_type">Column</span><!-- <br/> --><spa=
n class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;name&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> =
--><span class=3D"java_literal">&quot;property_type&quot;</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_separator">),</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;fetch</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- =
<br/> --><span class=3D"java_type">FetchType</span><!-- <br/> --><span c=
lass=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain"=
>EAGER&nbsp;</span><!-- <br/> --><span class=3D"java_separator">)</span>=

<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">AnyMetaDef</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;idType&=
nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_literal">&quot;integer&quot;</sp=
an><span class=3D"java_separator">,</span><span class=3D"java_plain">&nb=
sp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;metaTyp=
e&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_literal">&quot;string&quot;</s=
pan><span class=3D"java_separator">,</span><span class=3D"java_plain">&n=
bsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;metaVal=
ues&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">MetaValue</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;value=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_literal">&quot;S&quot;</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;ta=
rgetEntity&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">StringProperty<=
/span><span class=3D"java_separator">.</span><span class=3D"java_keyword=
">class</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">MetaValue</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;value=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_literal">&quot;I&quot;</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;ta=
rgetEntity&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">IntegerProperty=
</span><span class=3D"java_separator">.</span><span class=3D"java_keywor=
d">class</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;name&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal"=
>&quot;property_id&quot;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Property</span><span c=
lass=3D"java_plain">&nbsp;getMainProperty</span><span class=3D"java_sepa=
rator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;mainProperty</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>Note that =
<code class=3D"classname">@AnyDef</code> can be mutualized and
      reused. It is recommended to place it as a package metadata in thi=
s
      case.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_opera=
tor">//</span><!-- <br/> --><span class=3D"java_plain">on&nbsp;a&nbsp;</=
span><!-- <br/> --><span class=3D"java_keyword">package</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">AnyMetaDef</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;name</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_literal">&quot;property&quot;</span><span class=3D"jav=
a_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;idType&=
nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_literal">&quot;integer&quot;</sp=
an><span class=3D"java_separator">,</span><span class=3D"java_plain">&nb=
sp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;metaTyp=
e&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_literal">&quot;string&quot;</s=
pan><span class=3D"java_separator">,</span><span class=3D"java_plain">&n=
bsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;metaVal=
ues&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">MetaValue</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;value=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_literal">&quot;S&quot;</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;ta=
rgetEntity&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">StringProperty<=
/span><span class=3D"java_separator">.</span><span class=3D"java_keyword=
">class</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">MetaValue</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;value=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_literal">&quot;I&quot;</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;ta=
rgetEntity&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">IntegerProperty=
</span><span class=3D"java_separator">.</span><span class=3D"java_keywor=
d">class</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">package</span><span class=3D"=
java_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">test</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">annotations</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">any</span><span class=3D=
"java_separator">;</span>
</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">in&nbsp;a&nbsp;</span><span class=3D"java_keyword">class</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Any</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">&nbsp;metaDef</span><span class=3D"java_o=
perator">=3D</span><span class=3D"java_literal">&quot;property&quot;</sp=
an><span class=3D"java_separator">,</span><span class=3D"java_plain">&nb=
sp;metaColumn&nbsp;</span><span class=3D"java_operator">=3D</span><span =
class=3D"java_plain">&nbsp;@</span><span class=3D"java_type">Column</spa=
n><span class=3D"java_separator">(</span><span class=3D"java_plain">&nbs=
p;name&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;property_ty=
pe&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">),</span><span class=3D"java_plain">&nbsp;fetch</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_type">FetchType<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
EAGER&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">&nbsp;name&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_literal">&quot;property_id&quot;</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Property</span><span class=3D"java_p=
lain">&nbsp;getMainProperty</span><span class=3D"java_separator">()</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;mainProperty</span><span class=3D"java_separa=
tor">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span></pre><p>The hbm.xml equivalent i=
s:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
any</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;being&quot;</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">id-type</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;long&quot;</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">meta-type</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;string&quot;</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">meta-value</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;TBL_ANIMAL&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Animal&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">meta-value</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;TBL_HUMAN&quot;</span><span class=3D"xml_pla=
in">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;Human&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">meta-value</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;TBL_ALIEN&quot;</span><span class=3D"xml_pla=
in">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;Alien&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;table_name&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>any</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"note"><h2>Note</h2><p>You cannot mutualize the metadata in hbm.xm=
l as you can in
        annotations.</p></div><div class=3D"programlistingco"><pre class=
=3D"programlisting">&lt;any
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"any1"><img src=3D"im=
ages/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>propertyN=
ame"
        id-typ<span xmlns=3D"" class=3D"co" id=3D"any2"><img src=3D"imag=
es/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>e=3D"idtype=
name"
        meta-t<span xmlns=3D"" class=3D"co" id=3D"any3"><img src=3D"imag=
es/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>ype=3D"meta=
typename"
        cascad<span xmlns=3D"" class=3D"co" id=3D"any4"><img src=3D"imag=
es/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>e=3D"cascad=
e_style"
        access<span xmlns=3D"" class=3D"co" id=3D"any5"><img src=3D"imag=
es/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"field|p=
roperty|ClassName"
        optimi<span xmlns=3D"" class=3D"co" id=3D"any6"><img src=3D"imag=
es/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>stic-lock=3D=
"true|false"
&gt;
        &lt;meta-value ... /&gt;
        &lt;meta-value ... /&gt;
        .....
        &lt;column .... /&gt;
        &lt;column .... /&gt;
        .....
&lt;/any&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=
=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p>=
<img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactor=
y" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D=
"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D=
"left"><p><code class=3D"literal">name</code>: the property name.</p></t=
d></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">id-type</code>: the identifier type.</p></td></tr><=
tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/or=
g/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" height=3D"17p=
x" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code c=
lass=3D"literal">meta-type</code> (optional - defaults to
            <code class=3D"literal">string</code>): any type that is all=
owed for a
            discriminator mapping.</p></td></tr><tr><td width=3D"5%" val=
ign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss=
.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/cal=
louts/4.png" alt=3D"4" border=3D"0" height=3D"17px" width=3D"17px"/></p>=
</td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">cascad=
e</code> (optional- defaults to
            <code class=3D"literal">none</code>): the cascade style.</p>=
</td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"5" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">access</code> (optional - defaults to
            <code class=3D"literal">property</code>): the strategy Hiber=
nate uses for
            accessing the property value.</p></td></tr><tr><td width=3D"=
5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:or=
g.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docb=
ook/callouts/6.png" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17px=
"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal"=
>optimistic-lock</code> (optional - defaults to
            <code class=3D"literal">true</code>): specifies that updates=
 to this property
            either do or do not require acquisition of the optimistic lo=
ck. It
            defines whether a version increment should occur if this pro=
perty
            is dirty.</p></td></tr></table></div></div></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"mapping-declaration-properties"/>5.1.10.=C2=A0Propertie=
s</h3></div></div></div><p>The <code class=3D"literal">&lt;properties&gt=
;</code> element allows the
      definition of a named, logical grouping of the properties of a cla=
ss.
      The most important use of the construct is that it allows a combin=
ation
      of properties to be the target of a <code class=3D"literal">proper=
ty-ref</code>. It
      is also a convenient way to define a multi-column unique constrain=
t. For
      example:</p><div class=3D"programlistingco"><pre class=3D"programl=
isting">&lt;properties
        name=3D"<span xmlns=3D"" class=3D"co" id=3D"properties1"><img sr=
c=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>lo=
gicalName"
        insert<span xmlns=3D"" class=3D"co" id=3D"properties2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>=3D"tr=
ue|false"
        update<span xmlns=3D"" class=3D"co" id=3D"properties3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>=3D"tr=
ue|false"
        optimi<span xmlns=3D"" class=3D"co" id=3D"properties4"><img src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>stic-l=
ock=3D"true|false"
        unique<span xmlns=3D"" class=3D"co" id=3D"properties5"><img src=3D=
"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"tr=
ue|false"
&gt;

        &lt;property ...../&gt;
        &lt;many-to-one .... /&gt;
        ........
&lt;/properties&gt;</pre><div class=3D"calloutlist"><table border=3D"0" =
summary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"le=
ft"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendere=
rFactory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" =
border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top"=
 align=3D"left"><p><code class=3D"literal">name</code>: the logical name=
 of the grouping.
            It is <span class=3D"emphasis"><em>not</em></span> an actual=
 property name.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D=
"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"=
2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"t=
op" align=3D"left"><p><code class=3D"literal">insert</code>: do the mapp=
ed columns appear in
            SQL <code class=3D"literal">INSERTs</code>?</p></td></tr><tr=
><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/=
hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" height=3D"17px"=
 width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code cla=
ss=3D"literal">update</code>: do the mapped columns appear in
            SQL <code class=3D"literal">UPDATEs</code>?</p></td></tr><tr=
><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/=
hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" height=3D"17px"=
 width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code cla=
ss=3D"literal">optimistic-lock</code> (optional - defaults to
            <code class=3D"literal">true</code>): specifies that updates=
 to these
            properties either do or do not require acquisition of the
            optimistic lock. It determines if a version increment should=
 occur
            when these properties are dirty.</p></td></tr><tr><td width=3D=
"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/doc=
book/callouts/5.png" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17p=
x"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal=
">unique</code> (optional - defaults to
            <code class=3D"literal">false</code>): specifies that a uniq=
ue constraint
            exists upon all mapped columns of the component.</p></td></t=
r></table></div></div><p>For example, if we have the following
      <code class=3D"literal">&lt;properties&gt;</code> mapping:</p><pre=
 xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" c=
lass=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.=
dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;personNumber&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">properties</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">update</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;false&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;firstName&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;initial&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;lastName&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">properties</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>You might have some legacy data association that refers to this=

      unique key of the <code class=3D"literal">Person</code> table, ins=
tead of to the
      primary key:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighligh=
t v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;owner&quot;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span class=3D"xml_attribute_name">class</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;Person&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">property-ref</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;firstName&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;initial&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;lastName&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"note"><h2>Note</h2><p>When using annotations as a mapping strateg=
y, such construct is
        not necessary as the binding between a column and its related co=
lumn
        on the associated table is done directly</p><pre xmlns=3D"" clas=
s=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> -=
-><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Person</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp;p=
ersonNumber</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstN=
ame</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Column</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">name</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;I&quot;</span><span class=3D"j=
ava_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;initia=
l</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastNa=
me</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Home</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">JoinColumns</span><span class=3D"java_separator">({=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;first_na=
me&quot;</span><span class=3D"java_separator">,</span><span class=3D"jav=
a_plain">&nbsp;referencedColumnName</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_literal">&quot;firstName&quot;</span><span=
 class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;init&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;referencedColumnName</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_literal">&quot;I&quot;</span><span class=3D"java=
_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">name</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;last_nam=
e&quot;</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;referencedColumnName</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;lastName&quot;</span><span cla=
ss=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_type">Person</span><span class=3D"java_plain">&nbsp;owner<=
/span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><p>The =
use of this outside the context of mapping legacy data is not
      recommended.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"d0e8351"/>5.1.=
11.=C2=A0Some hbm.xml specificities</h3></div></div></div><p>The hbm.xml=
 structure has some specificities naturally not present
      when using annotations, let's describe them briefly.</p><div class=
=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=
=3D"title"><a id=3D"mapping-declaration-doctype"/>5.1.11.1.=C2=A0Doctype=
</h4></div></div></div><p>All XML mappings should declare the doctype sh=
own. The actual
        DTD can be found at the URL above, in the directory
        <code class=3D"literal">hibernate-x.x.x/src/org/hibernate </code=
>, or in
        <code class=3D"literal">hibernate3.jar</code>. Hibernate will al=
ways look for the
        DTD in its classpath first. If you experience lookups of the DTD=
 using
        an Internet connection, check the DTD declaration against the co=
ntents
        of your classpath.</p><div class=3D"section" lang=3D"en-US"><div=
 class=3D"titlepage"><div><div><h5 class=3D"title"><a id=3D"mapping-decl=
aration-entity-resolution"/>5.1.11.1.1.=C2=A0EntityResolver</h5></div></=
div></div><p>Hibernate will first attempt to resolve DTDs in its classpa=
th.
          It does this is by registering a custom
          <code class=3D"literal">org.xml.sax.EntityResolver</code> impl=
ementation with
          the SAXReader it uses to read in the xml files. This custom
          <code class=3D"literal">EntityResolver</code> recognizes two d=
ifferent systemId
          namespaces:</p><div class=3D"itemizedlist"><ul><li><p>a <code =
class=3D"literal">hibernate namespace</code> is recognized
              whenever the resolver encounters a systemId starting with
              <code class=3D"literal">http://www.hibernate.org/dtd/</cod=
e>. The resolver
              attempts to resolve these entities via the classloader whi=
ch
              loaded the Hibernate classes.</p></li><li><p>a <code class=
=3D"literal">user namespace</code> is recognized whenever
              the resolver encounters a systemId using a
              <code class=3D"literal">classpath://</code> URL protocol. =
The resolver will
              attempt to resolve these entities via (1) the current thre=
ad
              context classloader and (2) the classloader which loaded t=
he
              Hibernate classes.</p></li></ul></div><p>The following is =
an example of utilizing user
          namespacing:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hig=
hlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHigh=
light v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-mappin=
g</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;-//Hibernate/Hibernat=
e&nbsp;Mapping&nbsp;DTD&nbsp;3.0//EN&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_value">&quot;http://hibernate.sour=
ceforge.net/hibernate-mapping-3.0.dtd&quot;</span><span class=3D"xml_pla=
in">&nbsp;[</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&lt;!</span><span clas=
s=3D"xml_attribute_name">ENTITY</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">types</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">SYSTEM</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_value">&q=
uot;classpath://your/domain/types.xml&quot;</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">]&gt;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;your.domain&quot;</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;MyEntity&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;my-custom-id-type&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&amp;types;</span><br =
/>
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
</pre><p>Where <code class=3D"literal">types.xml</code> is a resource in=
 the
          <code class=3D"literal">your.domain</code> package and contain=
s a custom <a class=3D"link" href=3D"#mapping-types-custom" title=3D"5.2=
.3.=C2=A0Custom value types">typedef</a>.</p></div></div><div class=3D"s=
ection" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"t=
itle"><a id=3D"mapping-declaration-mapping"/>5.1.11.2.=C2=A0Hibernate-ma=
pping</h4></div></div></div><p>This element has several optional attribu=
tes. The
        <code class=3D"literal">schema</code> and <code class=3D"literal=
">catalog</code> attributes
        specify that tables referred to in this mapping belong to the na=
med
        schema and/or catalog. If they are specified, tablenames will be=

        qualified by the given schema and catalog names. If they are mis=
sing,
        tablenames will be unqualified. The <code class=3D"literal">defa=
ult-cascade</code>
        attribute specifies what cascade style should be assumed for
        properties and collections that do not specify a
        <code class=3D"literal">cascade</code> attribute. By default, th=
e
        <code class=3D"literal">auto-import</code> attribute allows you =
to use unqualified
        class names in the query language.</p><div class=3D"programlisti=
ngco"><pre class=3D"programlisting">&lt;hibernate-mapping
         schem<span xmlns=3D"" class=3D"co" id=3D"hm1"><img src=3D"image=
s/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>a=3D"schemaN=
ame"
         catal<span xmlns=3D"" class=3D"co" id=3D"hm2"><img src=3D"image=
s/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>og=3D"catalo=
gName"
         defau<span xmlns=3D"" class=3D"co" id=3D"hm3"><img src=3D"image=
s/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>lt-cascade=3D=
"cascade_style"
         defau<span xmlns=3D"" class=3D"co" id=3D"hm4"><img src=3D"image=
s/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>lt-access=3D=
"field|property|ClassName"
         defau<span xmlns=3D"" class=3D"co" id=3D"hm5"><img src=3D"image=
s/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>lt-lazy=3D"t=
rue|false"
         auto-<span xmlns=3D"" class=3D"co" id=3D"hm6"><img src=3D"image=
s/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>import=3D"tr=
ue|false"
         packa<span xmlns=3D"" class=3D"co" id=3D"hm7"><img src=3D"image=
s/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></span>ge=3D"packag=
e.name"
 /&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Ca=
llout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=
=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" =
height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"lef=
t"><p><code class=3D"literal">schema</code> (optional): the name of a
              database schema.</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">catalog</cod=
e> (optional): the name of a
              database catalog.</p></td></tr><tr><td width=3D"5%" valign=
=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callou=
ts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></t=
d><td valign=3D"top" align=3D"left"><p><code class=3D"literal">default-c=
ascade</code> (optional - defaults to
              <code class=3D"literal">none</code>): a default cascade st=
yle.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p>=
<img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactor=
y" src=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D=
"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D=
"left"><p><code class=3D"literal">default-access</code> (optional - defa=
ults to
              <code class=3D"literal">property</code>): the strategy Hib=
ernate should use
              for accessing all properties. It can be a custom implement=
ation
              of <code class=3D"literal">PropertyAccessor</code>.</p></t=
d></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/5.png" alt=3D"5" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">default-lazy</code> (optional - defaults to
              <code class=3D"literal">true</code>): the default value fo=
r unspecified
              <code class=3D"literal">lazy</code> attributes of class an=
d collection
              mappings.</p></td></tr><tr><td width=3D"5%" valign=3D"top"=
 align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/6.png=
" alt=3D"6" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td va=
lign=3D"top" align=3D"left"><p><code class=3D"literal">auto-import</code=
> (optional - defaults to
              <code class=3D"literal">true</code>): specifies whether we=
 can use
              unqualified class names of classes in this mapping in the =
query
              language.</p></td></tr><tr><td width=3D"5%" valign=3D"top"=
 align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/7.png=
" alt=3D"7" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td va=
lign=3D"top" align=3D"left"><p><code class=3D"literal">package</code> (o=
ptional): specifies a package
              prefix to use for unqualified class names in the mapping
              document.</p></td></tr></table></div></div><p>If you have =
two persistent classes with the same unqualified
        name, you should set <code class=3D"literal">auto-import=3D"fals=
e"</code>. An
        exception will result if you attempt to assign two classes to th=
e same
        "imported" name.</p><p>The <code class=3D"literal">hibernate-map=
ping</code> element allows you to
        nest several persistent <code class=3D"literal">&lt;class&gt;</c=
ode> mappings, as
        shown above. It is, however, good practice (and expected by some=

        tools) to map only a single persistent class, or a single class
        hierarchy, in one mapping file and name it after the persistent
        superclass. For example, <code class=3D"literal">Cat.hbm.xml</co=
de>,
        <code class=3D"literal">Dog.hbm.xml</code>, or if using inherita=
nce,
        <code class=3D"literal">Animal.hbm.xml</code>.</p></div><div cla=
ss=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 cla=
ss=3D"title"><a id=3D"mapping-declaration-key"/>5.1.11.3.=C2=A0Key</h4><=
/div></div></div><p>The <code class=3D"literal">&lt;key&gt;</code> eleme=
nt is featured a few
        times within this guide. It appears anywhere the parent mapping
        element defines a join to a new table that references the primar=
y key
        of the original table. It also defines the foreign key in the jo=
ined
        table:</p><div class=3D"programlistingco"><pre class=3D"programl=
isting">&lt;key
        column<span xmlns=3D"" class=3D"co" id=3D"key1"><img src=3D"imag=
es/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D"columnn=
ame"
        on-del<span xmlns=3D"" class=3D"co" id=3D"key2"><img src=3D"imag=
es/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>ete=3D"noac=
tion|cascade"
        proper<span xmlns=3D"" class=3D"co" id=3D"key3"><img src=3D"imag=
es/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>ty-ref=3D"p=
ropertyName"
        not-nu<span xmlns=3D"" class=3D"co" id=3D"key4"><img src=3D"imag=
es/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></span>ll=3D"true|=
false"
        update<span xmlns=3D"" class=3D"co" id=3D"key5"><img src=3D"imag=
es/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></span>=3D"true|fa=
lse"
        unique<span xmlns=3D"" class=3D"co" id=3D"key6"><img src=3D"imag=
es/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></span>=3D"true|fa=
lse"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">column</code> (optional): the name of the
              foreign key column. This can also be specified by nested
              <code class=3D"literal">&lt;column&gt;</code> element(s).<=
/p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img =
xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" sr=
c=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0"=
 height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"le=
ft"><p><code class=3D"literal">on-delete</code> (optional - defaults to
              <code class=3D"literal">noaction</code>): specifies whethe=
r the foreign key
              constraint has database-level cascade delete enabled.</p><=
/td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">property-ref</code> (optional): specifies tha=
t
              the foreign key refers to columns that are not the primary=
 key
              of the original table. It is provided for legacy data.</p>=
</td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">not-null</code> (optional): specifies that th=
e
              foreign key columns are not nullable. This is implied when=
ever
              the foreign key is also part of the primary key.</p></td><=
/tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"imag=
es/org/hibernate/docbook/callouts/5.png" alt=3D"5" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">update</code> (optional): specifies that the
              foreign key should never be updated. This is implied whene=
ver
              the foreign key is also part of the primary key.</p></td><=
/tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"imag=
es/org/hibernate/docbook/callouts/6.png" alt=3D"6" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">unique</code> (optional): specifies that the
              foreign key should have a unique constraint. This is impli=
ed
              whenever the foreign key is also the primary key.</p></td>=
</tr></table></div></div><p>For systems where delete performance is impo=
rtant, we recommend
        that all keys should be defined
        <code class=3D"literal">on-delete=3D"cascade"</code>. Hibernate =
uses a
        database-level <code class=3D"literal">ON CASCADE DELETE</code> =
constraint,
        instead of many individual <code class=3D"literal">DELETE</code>=
 statements. Be
        aware that this feature bypasses Hibernate's usual optimistic lo=
cking
        strategy for versioned data.</p><p>The <code class=3D"literal">n=
ot-null</code> and <code class=3D"literal">update</code>
        attributes are useful when mapping a unidirectional one-to-many
        association. If you map a unidirectional one-to-many association=
 to a
        non-nullable foreign key, you <span class=3D"emphasis"><em>must<=
/em></span> declare the
        key column using <code class=3D"literal">&lt;key
        not-null=3D"true"&gt;</code>.</p></div><div class=3D"section" la=
ng=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"title"><a i=
d=3D"mapping-declaration-import"/>5.1.11.4.=C2=A0Import</h4></div></div>=
</div><p>If your application has two persistent classes with the same
        name, and you do not want to specify the fully qualified package=
 name
        in Hibernate queries, classes can be "imported" explicitly, rath=
er
        than relying upon <code class=3D"literal">auto-import=3D"true"</=
code>. You can also
        import classes and interfaces that are not explicitly mapped:</p=
><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighl=
ight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
import</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_a=
ttribute_name">class</span><span class=3D"xml_tag_symbols">=3D</span><sp=
an class=3D"xml_attribute_value">&quot;java.lang.Object&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">re=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;Universe&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><div class=3D"programlistingco"><pre class=3D"programlisting">&lt;=
import
        class=3D<span xmlns=3D"" class=3D"co" id=3D"import1"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>"Class=
Name"
        rename<span xmlns=3D"" class=3D"co" id=3D"import2"><img src=3D"i=
mages/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>=3D"Shor=
tName"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">class</code>: the fully qualified class name
              of any Java class.</p></td></tr><tr><td width=3D"5%" valig=
n=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.h=
ighlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callo=
uts/2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></=
td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">rename</=
code> (optional - defaults to the
              unqualified class name): a name that can be used in the qu=
ery
              language.</p></td></tr></table></div></div><div xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note<=
/h2><p>This feature is unique to hbm.xml and is not supported in
          annotations.</p></div></div><div class=3D"section" lang=3D"en-=
US"><div class=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"mapp=
ing-column"/>5.1.11.5.=C2=A0Column and formula elements</h4></div></div>=
</div><p>Mapping elements which accept a <code class=3D"literal">column<=
/code>
        attribute will alternatively accept a
        <code class=3D"literal">&lt;column&gt;</code> subelement. Likewi=
se,
        <code class=3D"literal">&lt;formula&gt;</code> is an alternative=
 to the
        <code class=3D"literal">formula</code> attribute. For example:</=
p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFact=
ory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhigh=
light.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
column</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">name</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;colum=
n_name&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">length</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;N&q=
uot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">precision</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;N&=
quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">scale</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;N&qu=
ot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue|false&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">unique</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e|false&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">unique-key</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;multicolumn_unique_key_name&quot;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">index</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;inde=
x_name&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">sql-type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;sq=
l_type_name&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">check</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;SQL&=
nbsp;expression&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">default</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;SQ=
L&nbsp;expression&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">read</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;SQL&n=
bsp;expression&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">write</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;SQL&=
nbsp;expression&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span>=
<span class=3D"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
formula</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain">SQL&nbsp;expression</span><span class=3D"xml_tag_symbols">&lt=
;/</span><span class=3D"xml_tag_name">formula</span><span class=3D"xml_t=
ag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>Most of the attributes on <code class=3D"literal">column</code>=
 provide a
        means of tailoring the DDL during automatic schema generation. T=
he
        <code class=3D"literal">read</code> and <code class=3D"literal">=
write</code> attributes allow
        you to specify custom SQL that Hibernate will use to access the
        column's value. For more on this, see the discussion of <a class=
=3D"link" href=3D"#mapping-column-read-and-write" title=3D"5.6.=C2=A0Col=
umn transformers: read and write expressions">column read and write
        expressions</a>.</p><p>The <code class=3D"literal">column</code>=
 and <code class=3D"literal">formula</code>
        elements can even be combined within the same property or associ=
ation
        mapping to express, for example, exotic join conditions.</p><pre=
 xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" c=
lass=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.=
dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;homeAddress&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">cla=
ss</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;Address&quot;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">insert</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">update</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;false&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;person_id&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">not-null</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;10&quot;</span><span class=
=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">formula</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">'MAI=
LING'</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"x=
ml_tag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
</pre></div></div></div><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"mapping-types"/>5.=
2.=C2=A0Hibernate types</h2></div></div></div><div class=3D"section" lan=
g=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=
=3D"mapping-types-entitiesvalues"/>5.2.1.=C2=A0Entities and values</h3><=
/div></div></div><p>In relation to the persistence service, Java languag=
e-level
      objects are classified into two groups:</p><p>An <span class=3D"em=
phasis"><em>entity</em></span> exists independently of any other
      objects holding references to the entity. Contrast this with the u=
sual
      Java model, where an unreferenced object is garbage collected. Ent=
ities
      must be explicitly saved and deleted. Saves and deletions, however=
, can
      be <span class=3D"emphasis"><em>cascaded</em></span> from a parent=
 entity to its children.
      This is different from the ODMG model of object persistence by
      reachability and corresponds more closely to how application objec=
ts are
      usually used in large systems. Entities support circular and share=
d
      references. They can also be versioned.</p><p>An entity's persiste=
nt state consists of references to other
      entities and instances of <span class=3D"emphasis"><em>value</em><=
/span> types. Values are
      primitives: collections (not what is inside a collection), compone=
nts
      and certain immutable objects. Unlike entities, values in particul=
ar
      collections and components, <span class=3D"emphasis"><em>are</em><=
/span> persisted and
      deleted by reachability. Since value objects and primitives are
      persisted and deleted along with their containing entity, they can=
not be
      independently versioned. Values have no independent identity, so t=
hey
      cannot be shared by two entities or collections.</p><p>Until now, =
we have been using the term "persistent class" to refer
      to entities. We will continue to do that. Not all user-defined cla=
sses
      with a persistent state, however, are entities. A
      <span class=3D"emphasis"><em>component</em></span> is a user-defin=
ed class with value
      semantics. A Java property of type <code class=3D"literal">java.la=
ng.String</code>
      also has value semantics. Given this definition, all types (classe=
s)
      provided by the JDK have value type semantics in Java, while
      user-defined types can be mapped with entity or value type semanti=
cs.
      This decision is up to the application developer. An entity class =
in a
      domain model will normally have shared references to a single inst=
ance
      of that class, while composition or aggregation usually translates=
 to a
      value type.</p><p>We will revisit both concepts throughout this re=
ference
      guide.</p><p>The challenge is to map the Java type system, and the=
 developers'
      definition of entities and value types, to the SQL/database type s=
ystem.
      The bridge between both systems is provided by Hibernate. For enti=
ties,
      <code class=3D"literal">&lt;class&gt;</code>, <code class=3D"liter=
al">&lt;subclass&gt;</code>
      and so on are used. For value types we use
      <code class=3D"literal">&lt;property&gt;</code>,
      <code class=3D"literal">&lt;component&gt;</code>etc., that usually=
 have a
      <code class=3D"literal">type</code> attribute. The value of this a=
ttribute is the
      name of a Hibernate <span class=3D"emphasis"><em>mapping type</em>=
</span>. Hibernate
      provides a range of mappings for standard JDK value types out of t=
he
      box. You can write your own mapping types and implement your own c=
ustom
      conversion strategies.</p><p>With the exception of collections, al=
l built-in Hibernate types
      support null semantics.</p></div><div class=3D"section" lang=3D"en=
-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"map=
ping-types-basictypes"/>5.2.2.=C2=A0Basic value types</h3></div></div></=
div><p>The built-in <span class=3D"emphasis"><em>basic mapping types</em=
></span> can be
      roughly categorized into the following: </p><div class=3D"variable=
list"><dl><dt><span class=3D"term"><code class=3D"literal">integer, long=
, short, float, double, character,
            byte, boolean, yes_no, true_false</code></span></dt><dd><p>T=
ype mappings from Java primitives or wrapper classes to
              appropriate (vendor-specific) SQL column types.
              <code class=3D"literal">boolean, yes_no</code> and
              <code class=3D"literal">true_false</code> are all alternat=
ive encodings for
              a Java <code class=3D"literal">boolean</code> or
              <code class=3D"literal">java.lang.Boolean</code>.</p></dd>=
<dt><span class=3D"term"><code class=3D"literal">string</code></span></d=
t><dd><p>A type mapping from <code class=3D"literal">java.lang.String</c=
ode> to
              <code class=3D"literal">VARCHAR</code> (or Oracle
              <code class=3D"literal">VARCHAR2</code>).</p></dd><dt><spa=
n class=3D"term"><code class=3D"literal">date, time, timestamp</code></s=
pan></dt><dd><p>Type mappings from <code class=3D"literal">java.util.Dat=
e</code> and
              its subclasses to SQL types <code class=3D"literal">DATE</=
code>,
              <code class=3D"literal">TIME</code> and <code class=3D"lit=
eral">TIMESTAMP</code> (or
              equivalent).</p></dd><dt><span class=3D"term"><code class=3D=
"literal">calendar, calendar_date</code></span></dt><dd><p>Type mappings=
 from <code class=3D"literal">java.util.Calendar</code>
              to SQL types <code class=3D"literal">TIMESTAMP</code> and
              <code class=3D"literal">DATE</code> (or equivalent).</p></=
dd><dt><span class=3D"term"><code class=3D"literal">big_decimal, big_int=
eger</code></span></dt><dd><p>Type mappings from <code class=3D"literal"=
>java.math.BigDecimal</code>
              and <code class=3D"literal">java.math.BigInteger</code> to=

              <code class=3D"literal">NUMERIC</code> (or Oracle
              <code class=3D"literal">NUMBER</code>).</p></dd><dt><span =
class=3D"term"><code class=3D"literal">locale, timezone, currency</code>=
</span></dt><dd><p>Type mappings from <code class=3D"literal">java.util.=
Locale</code>,
              <code class=3D"literal">java.util.TimeZone</code> and
              <code class=3D"literal">java.util.Currency</code> to
              <code class=3D"literal">VARCHAR</code> (or Oracle
              <code class=3D"literal">VARCHAR2</code>). Instances of
              <code class=3D"literal">Locale</code> and <code class=3D"l=
iteral">Currency</code> are
              mapped to their ISO codes. Instances of
              <code class=3D"literal">TimeZone</code> are mapped to thei=
r
              <code class=3D"literal">ID</code>.</p></dd><dt><span class=
=3D"term"><code class=3D"literal">class</code></span></dt><dd><p>A type =
mapping from <code class=3D"literal">java.lang.Class</code> to
              <code class=3D"literal">VARCHAR</code> (or Oracle
              <code class=3D"literal">VARCHAR2</code>). A <code class=3D=
"literal">Class</code> is
              mapped to its fully qualified name.</p></dd><dt><span clas=
s=3D"term"><code class=3D"literal">binary</code></span></dt><dd><p>Maps =
byte arrays to an appropriate SQL binary type.</p></dd><dt><span class=3D=
"term"><code class=3D"literal">text</code></span></dt><dd><p>Maps long J=
ava strings to a SQL <code class=3D"literal">LONGVARCHAR</code> or
              <code class=3D"literal">TEXT</code> type.</p></dd><dt><spa=
n class=3D"term"><code class=3D"literal">image</code></span></dt><dd><p>=
Maps long byte arrays to a SQL <code class=3D"literal">LONGVARBINARY</co=
de>.</p></dd><dt><span class=3D"term"><code class=3D"literal">serializab=
le</code></span></dt><dd><p>Maps serializable Java types to an appropria=
te SQL binary
              type. You can also indicate the Hibernate type
              <code class=3D"literal">serializable</code> with the name =
of a serializable
              Java class or interface that does not default to a basic
              type.</p></dd><dt><span class=3D"term"><code class=3D"lite=
ral">clob, blob</code></span></dt><dd><p>Type mappings for the JDBC clas=
ses
              <code class=3D"literal">java.sql.Clob</code> and
              <code class=3D"literal">java.sql.Blob</code>. These types =
can be
              inconvenient for some applications, since the blob or clob=

              object cannot be reused outside of a transaction. Driver s=
upport
              is patchy and inconsistent.</p></dd><dt><span class=3D"ter=
m"><code class=3D"literal">materialized_clob</code></span></dt><dd><p>Ma=
ps long Java strings to a SQL <code class=3D"literal">CLOB</code> =

              type. When read, the <code class=3D"literal">CLOB</code> v=
alue is
              immediately materialized into a Java string. Some drivers =

              require the <code class=3D"literal">CLOB</code> value to b=
e read within
              a transaction. Once materialized, the Java string is =

              available outside of the transaction.</p></dd><dt><span cl=
ass=3D"term"><code class=3D"literal">materialized_blob</code></span></dt=
><dd><p>Maps long Java byte arrays to a SQL <code class=3D"literal">BLOB=
</code> =

              type. When read, the <code class=3D"literal">BLOB</code> v=
alue is
              immediately materialized into a byte array. Some drivers =

              require the <code class=3D"literal">BLOB</code> value to b=
e read within
              a transaction. Once materialized, the byte array is =

              available outside of the transaction.</p></dd><dt><span cl=
ass=3D"term"><code class=3D"literal">imm_date, imm_time, imm_timestamp, =
imm_calendar,
            imm_calendar_date, imm_serializable, imm_binary</code></span=
></dt><dd><p>Type mappings for what are considered mutable Java types.
              This is where Hibernate makes certain optimizations approp=
riate
              only for immutable Java types, and the application treats =
the
              object as immutable. For example, you should not call
              <code class=3D"literal">Date.setTime()</code> for an insta=
nce mapped as
              <code class=3D"literal">imm_timestamp</code>. To change th=
e value of the
              property, and have that change made persistent, the applic=
ation
              must assign a new, nonidentical, object to the property.</=
p></dd></dl></div><p>Unique identifiers of entities and collections can =
be of any basic
      type except <code class=3D"literal">binary</code>, <code class=3D"=
literal">blob</code> and
      <code class=3D"literal">clob</code>. Composite identifiers are als=
o allowed. See
      below for more information.</p><p>The basic value types have corre=
sponding <code class=3D"literal">Type</code>
      constants defined on <code class=3D"literal">org.hibernate.Hiberna=
te</code>. For
      example, <code class=3D"literal">Hibernate.STRING</code> represent=
s the
      <code class=3D"literal">string</code> type.</p></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"mapping-types-custom"/>5.2.3.=C2=A0Custom value types</=
h3></div></div></div><p>It is relatively easy for developers to create t=
heir own value
      types. For example, you might want to persist properties of type
      <code class=3D"literal">java.lang.BigInteger</code> to <code class=
=3D"literal">VARCHAR</code>
      columns. Hibernate does not provide a built-in type for this. Cust=
om
      types are not limited to mapping a property, or collection element=
, to a
      single table column. So, for example, you might have a Java proper=
ty
      <code class=3D"literal">getName()</code>/<code class=3D"literal">s=
etName()</code> of type
      <code class=3D"literal">java.lang.String</code> that is persisted =
to the columns
      <code class=3D"literal">FIRST_NAME</code>, <code class=3D"literal"=
>INITIAL</code>,
      <code class=3D"literal">SURNAME</code>.</p><p>To implement a custo=
m type, implement either
      <code class=3D"literal">org.hibernate.UserType</code> or
      <code class=3D"literal">org.hibernate.CompositeUserType</code> and=
 declare
      properties using the fully qualified classname of the type. View
      <code class=3D"literal">org.hibernate.test.DoubleStringType</code>=
 to see the kind
      of things that are possible.</p><pre xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : genera=
ted by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;twoStrings&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;org.hibernate.test.DoubleStringType&quot;</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;first_string&quot;</span><span class=3D"xml_tag_s=
ymbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;second_string&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>Notice the use of <code class=3D"literal">&lt;column&gt;</code>=
 tags to map a
      property to multiple columns.</p><p>The <code class=3D"literal">Co=
mpositeUserType</code>,
      <code class=3D"literal">EnhancedUserType</code>,
      <code class=3D"literal">UserCollectionType</code>, and
      <code class=3D"literal">UserVersionType</code> interfaces provide =
support for more
      specialized uses.</p><p>You can even supply parameters to a <code =
class=3D"literal">UserType</code> in
      the mapping file. To do this, your <code class=3D"literal">UserTyp=
e</code> must
      implement the
      <code class=3D"literal">org.hibernate.usertype.ParameterizedType</=
code> interface.
      To supply parameters to your custom type, you can use the
      <code class=3D"literal">&lt;type&gt;</code> element in your mappin=
g files.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;priority&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">type</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">na=
me</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;com.mycompany.usertypes.DefaultValueIntegerType&quo=
t;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">param</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;default&quot;</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">0</span><sp=
an class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">pa=
ram</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">type</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>The <code class=3D"literal">UserType</code> can now retrieve th=
e value for the
      parameter named <code class=3D"literal">default</code> from the
      <code class=3D"literal">Properties</code> object passed to it.</p>=
<p>If you regularly use a certain <code class=3D"literal">UserType</code=
>, it is
      useful to define a shorter name for it. You can do this using the
      <code class=3D"literal">&lt;typedef&gt;</code> element. Typedefs a=
ssign a name to a
      custom type, and can also contain a list of default parameter valu=
es if
      the type is parameterized.</p><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generate=
d by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
typedef</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">class</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;com.mycompany.usertypes.DefaultV=
alueIntegerType&quot;</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;default_zero&quot;<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;default&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain">0</span><span class=3D"xml_tag_sy=
mbols">&lt;/</span><span class=3D"xml_tag_name">param</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>typedef</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;priority&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</spa=
n><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute=
_value">&quot;default_zero&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>It is also possible to override the parameters supplied in a
      typedef on a case-by-case basis by using type parameters on the pr=
operty
      mapping.</p><p>Even though Hibernate's rich range of built-in type=
s and support
      for components means you will rarely need to use a custom type, it=
 is
      considered good practice to use custom types for non-entity classe=
s that
      occur frequently in your application. For example, a
      <code class=3D"literal">MonetaryAmount</code> class is a good cand=
idate for a
      <code class=3D"literal">CompositeUserType</code>, even though it c=
ould be mapped as
      a component. One reason for this is abstraction. With a custom typ=
e,
      your mapping documents would be protected against changes to the w=
ay
      monetary values are represented.</p></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a id=3D"mapping-entityname"/>5.3.=C2=A0Mapping a class more than onc=
e</h2></div></div></div><p>It is possible to provide more than one mappi=
ng for a particular
    persistent class. In this case, you must specify an <span class=3D"e=
mphasis"><em>entity
    name</em></span> to disambiguate between instances of the two mapped=

    entities. By default, the entity name is the same as the class name.=

    Hibernate lets you specify the entity name when working with persist=
ent
    objects, when writing queries, or when mapping associations to the n=
amed
    entity.</p><pre class=3D"programlisting">&lt;class name=3D"Contract"=
 table=3D"Contracts"
        entity-name=3D"CurrentContract"&gt;
    ...
    &lt;set name=3D"history" inverse=3D"true"
            order-by=3D"effectiveEndDate desc"&gt;
        &lt;key column=3D"currentContractId"/&gt;
        &lt;one-to-many entity-name=3D"HistoricalContract"/&gt;
    &lt;/set&gt;
&lt;/class&gt;

&lt;class name=3D"Contract" table=3D"ContractHistory"
        entity-name=3D"HistoricalContract"&gt;
    ...
    &lt;many-to-one name=3D"currentContract"
            column=3D"currentContractId"
            entity-name=3D"CurrentContract"/&gt;
&lt;/class&gt;</pre><p>Associations are now specified using <code class=3D=
"literal">entity-name</code>
    instead of <code class=3D"literal">class</code>.</p><div xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note<=
/h2><p>This feature is not supported in Annotations</p></div></div><div =
class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 =
class=3D"title"><a id=3D"mapping-quotedidentifiers"/>5.4.=C2=A0SQL quote=
d identifiers</h2></div></div></div><p>You can force Hibernate to quote =
an identifier in the generated SQL
    by enclosing the table or column name in backticks in the mapping
    document. Hibernate will use the correct quotation style for the SQL=

    <code class=3D"literal">Dialect</code>. This is usually double quote=
s, but the SQL
    Server uses brackets and MySQL uses backticks.</p><pre xmlns=3D"" xm=
lns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><=
!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) =
-->
<span class=3D"xml_plain">@Entity&nbsp;@Table(name=3D&quot;`Line&nbsp;It=
em`&quot;)</span><br />
<span class=3D"xml_plain">class&nbsp;LineItem&nbsp;{</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@id&nbsp;@Column(name=3D&quo=
t;`Item&nbsp;Id`&quot;)&nbsp;Integer&nbsp;id;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Column(name=3D&quot;`Item&n=
bsp;#`&quot;)&nbsp;int&nbsp;itemNumber</span><br />
<span class=3D"xml_plain">}</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;LineItem&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;`Line&nbsp;Item`&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;`Item&nbsp;=
Id`&quot;</span><span class=3D"xml_tag_symbols">/&gt;&lt;</span><span cl=
ass=3D"xml_tag_name">generator</span><span class=3D"xml_plain">&nbsp;</s=
pan><span class=3D"xml_attribute_name">class</span><span class=3D"xml_ta=
g_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;assigned&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;&lt;/</span><span class=
=3D"xml_tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;itemNumber&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;`Item&nbsp;#`&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"mapping-generated"/>5.5.=C2=A0=
Generated properties</h2></div></div></div><p>Generated properties are p=
roperties that have their values generated
    by the database. Typically, Hibernate applications needed to
    <code class=3D"literal">refresh</code> objects that contain any prop=
erties for which
    the database was generating values. Marking properties as generated,=

    however, lets the application delegate this responsibility to Hibern=
ate.
    When Hibernate issues an SQL INSERT or UPDATE for an entity that has=

    defined generated properties, it immediately issues a select afterwa=
rds to
    retrieve the generated values.</p><p>Properties marked as generated =
must additionally be non-insertable
    and non-updateable. Only <a class=3D"link" href=3D"#">versions</a>, =
<a class=3D"link" href=3D"#mapping-declaration-timestamp" title=3D"5.1.3=
.2.=C2=A0Timestamp">timestamps</a>, and <a class=3D"link" href=3D"#mappi=
ng-declaration-property" title=3D"5.1.4.=C2=A0Property">simple propertie=
s</a>, can be
    marked as generated.</p><p><code class=3D"literal">never</code> (the=
 default): the given property value is
    not generated within the database.</p><p><code class=3D"literal">ins=
ert</code>: the given property value is generated on
    insert, but is not regenerated on subsequent updates. Properties lik=
e
    created-date fall into this category. Even though <a class=3D"link" =
href=3D"#">version</a> and <a class=3D"link" href=3D"#mapping-declaratio=
n-timestamp" title=3D"5.1.3.2.=C2=A0Timestamp">timestamp</a> properties =
can be
    marked as generated, this option is not available.</p><p><code class=
=3D"literal">always</code>: the property value is generated both on
    insert and on update.</p><p>To mark a property as generated, use
    <code class=3D"classname">@Generated</code>.</p></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"=
title"><a id=3D"mapping-column-read-and-write"/>5.6.=C2=A0Column transfo=
rmers: read and write expressions</h2></div></div></div><p>Hibernate all=
ows you to customize the SQL it uses to read and write
    the values of columns mapped to <a class=3D"link" href=3D"#mapping-d=
eclaration-property" title=3D"5.1.4.=C2=A0Property">simple properties</a=
>. For
    example, if your database provides a set of data encryption function=
s, you
    can invoke them for individual columns like this:</p><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAV=
A"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span =
class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">CreditCard</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Column</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">name</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;credit_card_num&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ColumnTransformer</span><span class=3D"java_separat=
or">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;read</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_literal">&quot;decrypt(credit_card_num)&quot;</span><span class=3D"j=
ava_separator">,</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;write</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_literal">&quot;encrypt(?)&quot;</span><span class=3D"java_separator=
">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getCreditCardNumber</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword=
">return</span><span class=3D"java_plain">&nbsp;creditCardNumber</span><=
span class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setCreditCardNumber</span><span class=3D"java_separator">(</span><span=
 class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;numbe=
r</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_keyword">this</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">creditCardNumber=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;number</span><span class=3D"java_separator">;</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;creditCardNumber</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>or in XML<=
/p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhig=
hlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;creditCardNumber&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;credit_card_num&quot;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">read</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;decrypt(credit_card_num)&quot;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">write</span><spa=
n class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value=
">&quot;encrypt(?)&quot;</span><span class=3D"xml_tag_symbols">/&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"note"><h2>Note</h2><p>You can use the plural form
      <code class=3D"classname">@ColumnTransformers</code> if more than =
one columns need
      to define either of these rules.</p></div><p>If a property uses mo=
re that one column, you must use the
    <code class=3D"literal">forColumn</code> attribute to specify which =
column, the
    expressions are targeting.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span =
class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_type">Ent=
ity</span>
<!--  --><br/><span class=3D"java_keyword">class</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">User</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Type</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">type</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_literal">&quot;com.acme.type.CreditCardType&quo=
t;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Columns</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">Column</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">name</span><span class=3D"=
java_operator">=3D</span><span class=3D"java_literal">&quot;credit_card_=
num&quot;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">Column</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">name</span><span class=3D"=
java_operator">=3D</span><span class=3D"java_literal">&quot;exp_date&quo=
t;</span><span class=3D"java_separator">)</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_separator">}</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ColumnTransformer</span><span class=3D"java_separat=
or">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;forColumn</span><span class=3D"java_operator">=3D</span><span class=
=3D"java_literal">&quot;credit_card_num&quot;</span><span class=3D"java_=
separator">,</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;read</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_literal">&quot;decrypt(credit_card_num)&quot;</span><span class=3D"j=
ava_separator">,</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;write</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_literal">&quot;encrypt(?)&quot;</span><span class=3D"java_separator=
">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">CreditCard</span><span class=3D"java_plain=
">&nbsp;getCreditCard</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">=
return</span><span class=3D"java_plain">&nbsp;creditCard</span><span cla=
ss=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setCreditCard</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">CreditCard</span><span class=3D"java_plain">&nbsp;card</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">{</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">creditCard&nbsp;</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&n=
bsp;card</span><span class=3D"java_separator">;</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">CreditCard</span><span class=3D"java_plai=
n">&nbsp;creditCard</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>Hibernate =
applies the custom expressions automatically whenever the
    property is referenced in a query. This functionality is similar to =
a
    derived-property <code class=3D"literal">formula</code> with two dif=
ferences:
    </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>The p=
roperty is backed by one or more columns that are
          exported as part of automatic schema generation.</p></li><li><=
p>The property is read-write, not read-only.</p></li></ul></div><p>The <=
code class=3D"literal">write</code> expression, if specified, must conta=
in
    exactly one '?' placeholder for the value.</p></div><div class=3D"se=
ction" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"ti=
tle"><a id=3D"mapping-database-object"/>5.7.=C2=A0Auxiliary database obj=
ects</h2></div></div></div><p>Auxiliary database objects allow for the C=
REATE and DROP of
    arbitrary database objects. In conjunction with Hibernate's schema
    evolution tools, they have the ability to fully define a user schema=

    within the Hibernate mapping files. Although designed specifically f=
or
    creating and dropping things like triggers or stored procedures, any=
 SQL
    command that can be run via a
    <code class=3D"literal">java.sql.Statement.execute()</code> method i=
s valid (for
    example, ALTERs, INSERTS, etc.). There are essentially two modes for=

    defining auxiliary database objects:</p><p>The first mode is to expl=
icitly list the CREATE and DROP commands in
    the mapping file:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighl=
ight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">database-object=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">create</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain">CREATE&nbsp;TRIGGER&nbsp;my_trigger&nbsp;...</span><s=
pan class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">c=
reate</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">drop</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain">DROP&nbsp;TRIGGER&nbsp;my_trigger</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">drop</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">database-objec=
t</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>The second mode is to supply a custom class that constructs the=

    CREATE and DROP commands. This custom class must implement the
    <code class=3D"literal">org.hibernate.mapping.AuxiliaryDatabaseObjec=
t</code>
    interface.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1=
.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">database-object=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">definition</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;MyTriggerDefinition&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">database-objec=
t</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>Additionally, these database objects can be optionally scoped s=
o
    that they only apply when certain dialects are used.</p><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"X=
ML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.=
net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">database-object=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">definition</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;MyTriggerDefinition&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">dialect-scope</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.dial=
ect.Oracle9iDialect&quot;</span><span class=3D"xml_tag_symbols">/&gt;</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">dialect-scope</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;org.hibernate.dial=
ect.Oracle10gDialect&quot;</span><span class=3D"xml_tag_symbols">/&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">database-objec=
t</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"note"><h2>Note</h2><p>This feature is not supported in Annotation=
s</p></div></div></div><div class=3D"chapter" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"types"/>Chapter=C2=A0=
6.=C2=A0Types</h2></div></div></div><div class=3D"toc"><dl><dt><span cla=
ss=3D"section"><a href=3D"#types-value">6.1. Value types</a></span></dt>=
<dd><dl><dt><span class=3D"section"><a href=3D"#types-value-basic">6.1.1=
. Basic value types</a></span></dt><dt><span class=3D"section"><a href=3D=
"#types-value-composite">6.1.2. Composite types</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#types-value-collection">6.1.3. Collection=
 types</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#=
types-entity">6.2. Entity types</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#types-category-significance">6.3. Significance of type ca=
tegories</a></span></dt><dt><span class=3D"section"><a href=3D"#types-cu=
stom">6.4. Custom types</a></span></dt><dd><dl><dt><span class=3D"sectio=
n"><a href=3D"#types-custom-type">6.4.1. Custom types using org.hibernat=
e.type.Type</a></span></dt><dt><span class=3D"section"><a href=3D"#types=
-custom-ut">6.4.2. Custom types using org.hibernate.usertype.UserType</a=
></span></dt><dt><span class=3D"section"><a href=3D"#types-custom-cut">6=
.4.3. Custom types using org.hibernate.usertype.CompositeUserType</a></s=
pan></dt></dl></dd><dt><span class=3D"section"><a href=3D"#types-registr=
y">6.5. Type registry</a></span></dt></dl></div><p>
        As an Object/Relational Mapping solution, Hibernate deals with b=
oth the Java and JDBC representations of
        application data.  An online catalog application, for example, m=
ost likely has <code class=3D"classname">Product</code>
        object with a number of attributes such as a <code class=3D"lite=
ral">sku</code>, <code class=3D"literal">name</code>, etc.  For these
        individual attributes, Hibernate must be able to read the values=
 out of the database and write them back.  This
        'marshalling' is the function of a <span class=3D"emphasis"><em>=
Hibernate type</em></span>, which is an implementation of the
        <code class=3D"interfacename">org.hibernate.type.Type</code> int=
erface.  In addition, a
        <span class=3D"emphasis"><em>Hibernate type</em></span> describe=
s various aspects of behavior of the Java type such as "how is
        equality checked?" or "how are values cloned?".
    </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"important"><h2>Important</h2><p>
            A Hibernate type is neither a Java type nor a SQL datatype; =
it provides a information about both.
        </p><p>
            When you encounter the term <span class=3D"emphasis"><em>typ=
e</em></span> in regards to Hibernate be aware that usage might
            refer to the Java type, the SQL/JDBC type or the Hibernate t=
ype.
        </p></div><p>
        Hibernate categorizes types into two high-level groups: value ty=
pes (see <a class=3D"xref" href=3D"#types-value" title=3D"6.1.=C2=A0Valu=
e types">Section=C2=A06.1, =E2=80=9CValue types=E2=80=9D</a>) and
        entity types (see <a class=3D"xref" href=3D"#types-entity" title=
=3D"6.2.=C2=A0Entity types">Section=C2=A06.2, =E2=80=9CEntity types=E2=80=
=9D</a>).
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"types-value"/>6.1.=C2=A0Value type=
s</h2></div></div></div><p>
            The main distinguishing characteristic of a value type is th=
e fact that they do not define their own
            lifecycle.  We say that they are "owned" by something else (=
specifically an entity, as we will see later)
            which defines their lifecycle.  Value types are further clas=
sified into 3 sub-categories: basic types (see
            <a class=3D"xref" href=3D"#types-value-basic" title=3D"6.1.1=
.=C2=A0Basic value types">Section=C2=A06.1.1, =E2=80=9CBasic value types=
=E2=80=9D</a>), composite types (see <a class=3D"xref" href=3D"#types-va=
lue-composite" title=3D"6.1.2.=C2=A0Composite types">Section=C2=A06.1.2,=
 =E2=80=9CComposite types=E2=80=9D</a>)
            amd collection types (see <a class=3D"xref" href=3D"#types-v=
alue-collection" title=3D"6.1.3.=C2=A0Collection types">Section=C2=A06.1=
.3, =E2=80=9CCollection types=E2=80=9D</a>).
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"types-value-basic"/>6.1.1.=C2=A0=
Basic value types</h3></div></div></div><p>
                The norm for basic value types is that they map a single=
 database value (column) to a single, =

                non-aggregated Java type.  Hibernate provides a number o=
f built-in basic types, which we will present
                in the following sections by the Java type.  Mainly thes=
e follow the natural mappings recommended in the
                JDBC specification.  We will later cover how to override=
 these mapping and how to provide and use
                alternative type mappings.
            </p><div class=3D"section" lang=3D"en-US"><div class=3D"titl=
epage"><div><div><h4 class=3D"title"><a id=3D"types-value-basic-string"/=
>6.1.1.1.=C2=A0java.lang.String</h4></div></div></div><div class=3D"vari=
ablelist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hib=
ernate.type.StringType</code></span></dt><dd><p>
                                Maps a string to the JDBC VARCHAR type. =
 This is the standard mapping for a string if =

                                no Hibernate type is specified.
                            </p><p>
                                Registered under <code class=3D"literal"=
>string</code> and <code class=3D"literal">java.lang.String</code>
                                in the type registry (see <a class=3D"xr=
ef" href=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=
=A06.5, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.MaterializedClob</code></span></dt><d=
d><p>
                                Maps a string to a JDBC CLOB type
                            </p><p>
                                Registered under <code class=3D"literal"=
>materialized_clob</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.TextType</code></span></dt><dd><p>
                                Maps a string to a JDBC LONGVARCHAR type=

                            </p><p>
                                Registered under <code class=3D"literal"=
>text</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-character"/>6.1.1.2.=C2=A0<code class=3D"c=
lassname">java.lang.Character</code> (or char primitive)</h4></div></div=
></div><div class=3D"variablelist"><dl><dt><span class=3D"term"><code cl=
ass=3D"classname">org.hibernate.type.CharacterType</code></span></dt><dd=
><p>
                                Maps a char or <code class=3D"classname"=
>java.lang.Character</code> to a JDBC CHAR
                            </p><p>
                                Registered under <code class=3D"literal"=
>char</code> and <code class=3D"literal">java.lang.Character</code> in t=
he
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-value-basic-boolean"/>6.1.1.3.=C2=A0<code class=3D"cla=
ssname">java.lang.Boolean</code> (or boolean primitive)</h4></div></div>=
</div><div class=3D"variablelist"><dl><dt><span class=3D"term"><code cla=
ss=3D"classname">org.hibernate.type.BooleanType</code></span></dt><dd><p=
>
                                Maps a boolean to a JDBC BIT type
                            </p><p>
                                Registered under <code class=3D"literal"=
>boolean</code> and <code class=3D"literal">java.lang.Boolean</code> in
                                the type registry (see <a class=3D"xref"=
 href=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A0=
6.5, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.NumericBooleanType</code></span></dt>=
<dd><p>
                                Maps a boolean to a JDBC INTEGER type as=
 0 =3D false, 1 =3D true
                            </p><p>
                                Registered under <code class=3D"literal"=
>numeric_boolean</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.YesNoType</code></span></dt><dd><p>
                                Maps a boolean to a JDBC CHAR type as ('=
N' | 'n') =3D false, ( 'Y' | 'y' ) =3D true
                            </p><p>
                                Registered under <code class=3D"literal"=
>yes_no</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.TrueFalseType</code></span></dt><dd><=
p>
                                Maps a boolean to a JDBC CHAR type as ('=
F' | 'f') =3D false, ( 'T' | 't' ) =3D true
                            </p><p>
                                Registered under <code class=3D"literal"=
>true_false</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-byte"/>6.1.1.4.=C2=A0<code class=3D"classn=
ame">java.lang.Byte</code> (or byte primitive)</h4></div></div></div><di=
v class=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"cla=
ssname">org.hibernate.type.ByteType</code></span></dt><dd><p>
                                Maps a byte or <code class=3D"classname"=
>java.lang.Byte</code> to a JDBC TINYINT
                            </p><p>
                                Registered under <code class=3D"literal"=
>byte</code> and <code class=3D"literal">java.lang.Byte</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-short"/>6.1.1.5.=C2=A0<code class=3D"class=
name">java.lang.Short</code> (or short primitive)</h4></div></div></div>=
<div class=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"=
classname">org.hibernate.type.ShortType</code></span></dt><dd><p>
                                Maps a short or <code class=3D"classname=
">java.lang.Short</code> to a JDBC SMALLINT
                            </p><p>
                                Registered under <code class=3D"literal"=
>short</code> and <code class=3D"literal">java.lang.Short</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-int"/>6.1.1.6.=C2=A0<code class=3D"classna=
me">java.lang.Integer</code> (or int primitive)</h4></div></div></div><d=
iv class=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"cl=
assname">org.hibernate.type.IntegerTypes</code></span></dt><dd><p>
                                Maps an int or <code class=3D"classname"=
>java.lang.Integer</code> to a JDBC INTEGER
                            </p><p>
                                Registered under <code class=3D"literal"=
>int</code> and <code class=3D"literal">java.lang.Integer</code>in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-long"/>6.1.1.7.=C2=A0<code class=3D"classn=
ame">java.lang.Long</code> (or long primitive)</h4></div></div></div><di=
v class=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"cla=
ssname">org.hibernate.type.LongType</code></span></dt><dd><p>
                                Maps a long or <code class=3D"classname"=
>java.lang.Long</code> to a JDBC BIGINT
                            </p><p>
                                Registered under <code class=3D"literal"=
>long</code> and <code class=3D"literal">java.lang.Long</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-float"/>6.1.1.8.=C2=A0<code class=3D"class=
name">java.lang.Float</code> (or float primitive)</h4></div></div></div>=
<div class=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"=
classname">org.hibernate.type.FloatType</code></span></dt><dd><p>
                                Maps a float or <code class=3D"classname=
">java.lang.Float</code> to a JDBC FLOAT
                            </p><p>
                                Registered under <code class=3D"literal"=
>float</code> and <code class=3D"literal">java.lang.Float</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-double"/>6.1.1.9.=C2=A0<code class=3D"clas=
sname">java.lang.Double</code> (or double primitive)</h4></div></div></d=
iv><div class=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D=
"classname">org.hibernate.type.DoubleType</code></span></dt><dd><p>
                                Maps a double or <code class=3D"classnam=
e">java.lang.Double</code> to a JDBC DOUBLE
                            </p><p>
                                Registered under <code class=3D"literal"=
>double</code> and <code class=3D"literal">java.lang.Double</code> in th=
e
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-biginteger"/>6.1.1.10.=C2=A0<code class=3D=
"classname">java.math.BigInteger</code></h4></div></div></div><div class=
=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"classname"=
>org.hibernate.type.BigIntegerType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ma=
th.BigInteger</code> to a JDBC NUMERIC
                            </p><p>
                                Registered under <code class=3D"literal"=
>big_integer</code> and <code class=3D"literal">java.math.BigInteger</co=
de> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-bigdecimal"/>6.1.1.11.=C2=A0<code class=3D=
"classname">java.math.BigDecimal</code></h4></div></div></div><div class=
=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"classname"=
>org.hibernate.type.BigDecimalType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ma=
th.BigDecimal</code> to a JDBC NUMERIC
                            </p><p>
                                Registered under <code class=3D"literal"=
>big_decimal</code> and <code class=3D"literal">java.math.BigDecimal</co=
de> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-timestamp"/>6.1.1.12.=C2=A0<code class=3D"=
classname">java.util.Date</code> or <code class=3D"classname">java.sql.T=
imestamp</code></h4></div></div></div><div class=3D"variablelist"><dl><d=
t><span class=3D"term"><code class=3D"classname">org.hibernate.type.Time=
stampType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.sq=
l.Timestamp</code> to a JDBC TIMESTAMP
                            </p><p>
                                Registered under <code class=3D"literal"=
>timestamp</code>, <code class=3D"literal">java.sql.Timestamp</code> and=

                                <code class=3D"literal">java.util.Date</=
code> in the type registry (see <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-time"/>6.1.1.13.=C2=A0<code class=3D"class=
name">java.sql.Time</code></h4></div></div></div><div class=3D"variablel=
ist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hibernat=
e.type.TimeType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.sq=
l.Time</code> to a JDBC TIME
                            </p><p>
                                Registered under <code class=3D"literal"=
>time</code> and <code class=3D"literal">java.sql.Time</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-date"/>6.1.1.14.=C2=A0<code class=3D"class=
name">java.sql.Date</code></h4></div></div></div><div class=3D"variablel=
ist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hibernat=
e.type.DateType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.sq=
l.Date</code> to a JDBC DATE
                            </p><p>
                                Registered under <code class=3D"literal"=
>date</code> and <code class=3D"literal">java.sql.Date</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-calendar"/>6.1.1.15.=C2=A0<code class=3D"c=
lassname">java.util.Calendar</code></h4></div></div></div><div class=3D"=
variablelist"><dl><dt><span class=3D"term"><code class=3D"classname">org=
.hibernate.type.CalendarType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ut=
il.Calendar</code> to a JDBC TIMESTAMP
                            </p><p>
                                Registered under <code class=3D"literal"=
>calendar</code>, <code class=3D"literal">java.util.Calendar</code> and
                                <code class=3D"literal">java.util.Gregor=
ianCalendar</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.CalendarDateType</code></span></dt><d=
d><p>
                                Maps a <code class=3D"classname">java.ut=
il.Calendar</code> to a JDBC DATE
                            </p><p>
                                Registered under <code class=3D"literal"=
>calendar_date</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-currency"/>6.1.1.16.=C2=A0<code class=3D"c=
lassname">java.util.Currency</code></h4></div></div></div><div class=3D"=
variablelist"><dl><dt><span class=3D"term"><code class=3D"classname">org=
.hibernate.type.CurrencyType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ut=
il.Currency</code> to a JDBC VARCHAR (using the Currency code)
                            </p><p>
                                Registered under <code class=3D"literal"=
>currency</code> and <code class=3D"literal">java.util.Currency</code> i=
n the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-locale"/>6.1.1.17.=C2=A0<code class=3D"cla=
ssname">java.util.Locale</code></h4></div></div></div><div class=3D"vari=
ablelist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hib=
ernate.type.LocaleType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ut=
il.Locale</code> to a JDBC VARCHAR (using the Locale code)
                            </p><p>
                                Registered under <code class=3D"literal"=
>locale</code> and <code class=3D"literal">java.util.Locale</code> in th=
e
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-timezone"/>6.1.1.18.=C2=A0<code class=3D"c=
lassname">java.util.TimeZone</code></h4></div></div></div><div class=3D"=
variablelist"><dl><dt><span class=3D"term"><code class=3D"classname">org=
.hibernate.type.TimeZoneType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ut=
il.TimeZone</code> to a JDBC VARCHAR (using the TimeZone ID)
                            </p><p>
                                Registered under <code class=3D"literal"=
>timezone</code> and <code class=3D"literal">java.util.TimeZone</code> i=
n the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-url"/>6.1.1.19.=C2=A0<code class=3D"classn=
ame">java.net.URL</code></h4></div></div></div><div class=3D"variablelis=
t"><dl><dt><span class=3D"term"><code class=3D"classname">org.hibernate.=
type.UrlType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.ne=
t.URL</code> to a JDBC VARCHAR (using the external form)
                            </p><p>
                                Registered under <code class=3D"literal"=
>url</code> and <code class=3D"literal">java.net.URL</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-class"/>6.1.1.20.=C2=A0<code class=3D"clas=
sname">java.lang.Class</code></h4></div></div></div><div class=3D"variab=
lelist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hiber=
nate.type.ClassType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.la=
ng.Class</code> to a JDBC VARCHAR (using the Class name)
                            </p><p>
                                Registered under <code class=3D"literal"=
>class</code> and <code class=3D"literal">java.lang.Class</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-blob"/>6.1.1.21.=C2=A0<code class=3D"class=
name">java.sql.Blob</code></h4></div></div></div><div class=3D"variablel=
ist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hibernat=
e.type.BlobType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.sq=
l.Blob</code> to a JDBC BLOB
                            </p><p>
                                Registered under <code class=3D"literal"=
>blob</code> and <code class=3D"literal">java.sql.Blob</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-clob"/>6.1.1.22.=C2=A0<code class=3D"class=
name">java.sql.Clob</code></h4></div></div></div><div class=3D"variablel=
ist"><dl><dt><span class=3D"term"><code class=3D"classname">org.hibernat=
e.type.ClobType</code></span></dt><dd><p>
                                Maps a <code class=3D"classname">java.sq=
l.Clob</code> to a JDBC CLOB
                            </p><p>
                                Registered under <code class=3D"literal"=
>clob</code> and <code class=3D"literal">java.sql.Clob</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-binary"/>6.1.1.23.=C2=A0byte[]</h4></div><=
/div></div><div class=3D"variablelist"><dl><dt><span class=3D"term"><cod=
e class=3D"classname">org.hibernate.type.BinaryType</code></span></dt><d=
d><p>
                                Maps a primitive byte[] to a JDBC VARBIN=
ARY
                            </p><p>
                                Registered under <code class=3D"literal"=
>binary</code> and <code class=3D"literal">byte[]</code> in the
                                type registry (see <a class=3D"xref" hre=
f=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5=
, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.MaterializedBlobType</code></span></d=
t><dd><p>
                                Maps a primitive byte[] to a JDBC BLOB
                            </p><p>
                                Registered under <code class=3D"literal"=
>materialized_blob</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.ImageType</code></span></dt><dd><p>
                                Maps a primitive byte[] to a JDBC LONGVA=
RBINARY
                            </p><p>
                                Registered under <code class=3D"literal"=
>image</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-wrapperbinary"/>6.1.1.24.=C2=A0Byte[]</h4>=
</div></div></div><div class=3D"variablelist"><dl><dt><span class=3D"ter=
m"><code class=3D"classname">org.hibernate.type.BinaryType</code></span>=
</dt><dd><p>
                                Maps a java.lang.Byte[] to a JDBC VARBIN=
ARY
                            </p><p>
                                Registered under <code class=3D"literal"=
>wrapper-binary</code>, <code class=3D"literal">Byte[]</code> and
                                <code class=3D"literal">java.lang.Byte[]=
</code> in the type registry (see <a class=3D"xref" href=3D"#types-regis=
try" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType r=
egistry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-chararray"/>6.1.1.25.=C2=A0char[]</h4></di=
v></div></div><div class=3D"variablelist"><dl><dt><span class=3D"term"><=
code class=3D"classname">org.hibernate.type.CharArrayType</code></span><=
/dt><dd><p>
                                Maps a char[] to a JDBC VARCHAR
                            </p><p>
                                Registered under <code class=3D"literal"=
>characters</code> and <code class=3D"literal">char[]</code>
                                in the type registry (see <a class=3D"xr=
ef" href=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=
=A06.5, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-characterarray"/>6.1.1.26.=C2=A0Character[=
]</h4></div></div></div><div class=3D"variablelist"><dl><dt><span class=3D=
"term"><code class=3D"classname">org.hibernate.type.CharacterArrayType</=
code></span></dt><dd><p>
                                Maps a java.lang.Character[] to a JDBC V=
ARCHAR
                            </p><p>
                                Registered under <code class=3D"literal"=
>wrapper-characters</code>, <code class=3D"literal">Character[]</code>
                                and <code class=3D"literal">java.lang.Ch=
aracter[]</code> in the type registry (see <a class=3D"xref" href=3D"#ty=
pes-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=
=9CType registry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-uuid"/>6.1.1.27.=C2=A0<code class=3D"class=
name">java.util.UUID</code></h4></div></div></div><div class=3D"variable=
list"><dl><dt><span class=3D"term"><code class=3D"classname">org.hiberna=
te.type.UUIDBinaryType</code></span></dt><dd><p>
                                Maps a java.util.UUID to a JDBC BINARY
                            </p><p>
                                Registered under <code class=3D"literal"=
>uuid-binary</code> and <code class=3D"literal">java.util.UUID</code>
                                in the type registry (see <a class=3D"xr=
ef" href=3D"#types-registry" title=3D"6.5.=C2=A0Type registry">Section=C2=
=A06.5, =E2=80=9CType registry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.UUIDCharType</code></span></dt><dd><p=
>
                                Maps a java.util.UUID to a JDBC CHAR (th=
ough VARCHAR is fine too for existing schemas)
                            </p><p>
                                Registered under <code class=3D"literal"=
>uuid-char</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd><dt><span class=3D"term"><code clas=
s=3D"classname">org.hibernate.type.PostgresUUIDType</code></span></dt><d=
d><p>
                                Maps a java.util.UUID to the PostgreSQL =
UUID data type (through
                                <code class=3D"literal">Types#OTHER</cod=
e> which is how the PostgreSQL JDBC driver defines it).
                            </p><p>
                                Registered under <code class=3D"literal"=
>pg-uuid</code> in the type registry (see
                                <a class=3D"xref" href=3D"#types-registr=
y" title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType reg=
istry=E2=80=9D</a>).
                            </p></dd></dl></div></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"types-basic-value-serializable"/>6.1.1.28.=C2=A0<code class=3D=
"interfacename">java.io.Serializable</code></h4></div></div></div><div c=
lass=3D"variablelist"><dl><dt><span class=3D"term"><code class=3D"classn=
ame">org.hibernate.type.SerializableType</code></span></dt><dd><p>
                                Maps implementors of java.lang.Serializa=
ble to a JDBC VARBINARY
                            </p><p>
                                Unlike the other value types, there are =
multiple instances of this type.  It
                                gets registered once under <code class=3D=
"interfacename">java.io.Serializable</code>.
                                Additionally it gets registered under th=
e specific
                                <code class=3D"interfacename">java.io.Se=
rializable</code> implementation class names.
                            </p></dd></dl></div></div></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"types-value-composite"/>6.1.2.=C2=A0Composite types</h3=
></div></div></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"note"><h2>Note</h2><p>
                    The Java Persistence API calls these embedded types,=
 while Hibernate traditionally called them
                    components.  Just be aware that both terms are used =
and mean the same thing in the scope of
                    discussing Hibernate.
                </p></div><p>
                Components represent aggregations of values into a singl=
e Java type.  For example, you might have
                an Address class that aggregates street, city, state, et=
c information or a Name class that
                aggregates the parts of a person's Name.  In many ways a=
 component looks exactly like an entity.  They
                are both (generally speaking) classes written specifical=
ly for the application.  They both might have
                references to other application-specific classes, as wel=
l as to collections and simple JDK types.  As
                discussed before, the only distinguishing factory is the=
 fact that a component does not own its own
                lifecycle nor does it define an identifier.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"types-value-collectio=
n"/>6.1.3.=C2=A0Collection types</h3></div></div></div><div xmlns:rf=3D"=
java:org.jboss.highlight.XhtmlRendererFactory" class=3D"important"><h2>I=
mportant</h2><p>
                    It is critical understand that we mean the collectio=
n itself, not its contents.
                    The contents of the collection can in turn be basic,=
 component or entity types (though not
                    collections), but the collection itself is owned.
                </p></div><p>
                Collections are covered in <a class=3D"xref" href=3D"#co=
llections" title=3D"Chapter=C2=A07.=C2=A0Collection mapping">Chapter=C2=A0=
7, <i>Collection mapping</i></a>.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"types-entity"/=
>6.2.=C2=A0Entity types</h2></div></div></div><p>
            The definition of entities is covered in detail in <a class=3D=
"xref" href=3D"#persistent-classes" title=3D"Chapter=C2=A04.=C2=A0Persis=
tent Classes">Chapter=C2=A04, <i>Persistent Classes</i></a>.  For the pu=
rpose of
            this discussion, it is enough to say that entities are (gene=
rally application-specific) classes which
            correlate to rows in a table.  Specifically they correlate t=
o the row by means of a unique identifier.
            Because of this unique identifier, entities exist independen=
tly and define their own lifecycle.  As an example,
            when we delete a <code class=3D"classname">Membership</code>=
, both the <code class=3D"classname">User</code> and
            <code class=3D"classname">Group</code> entities remain.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    This notion of entity independence can be modified b=
y the application developer using the concept of
                    cascades.  Cascades allow certain operations to cont=
inue (or "cascade") across an association from
                    one entity to another.  Cascades are covered in deta=
il in <a class=3D"xref" href=3D"#associations" title=3D"Chapter=C2=A08.=C2=
=A0Association Mappings">Chapter=C2=A08, <i>Association Mappings</i></a>=
.
                </p></div><p>
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"types-category-significa=
nce"/>6.3.=C2=A0Significance of type categories</h2></div></div></div><p=
>
            Why do we spend so much time categorizing the various types =
of types?  What is the significance of the
            distinction?
        </p><p>
            The main categorization was between entity types and value t=
ypes.  To review we said that entities, by
            nature of their unique identifier, exist independently of ot=
her objects whereas values do not.  An
            application cannot "delete" a Product sku; instead, the sku =
is removed when the Product itself is
            deleted (obviously you can <span class=3D"emphasis"><em>upda=
te</em></span> the sku of that Product to null to make it
            "go away", but even there the access is done through the Pro=
duct).
        </p><p>
            Nor can you define an association <span class=3D"emphasis"><=
em>to</em></span> that Product sku.  You <span class=3D"emphasis"><em>ca=
n</em></span>
            define an association to Product <span class=3D"emphasis"><e=
m>based on</em></span> its sku, assuming sku is unique, but that
            is totally different.
        </p><p>
            TBC...
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"types-custom"/>6.4.=C2=A0=
Custom types</h2></div></div></div><p>
            Hibernate makes it relatively easy for developers to create =
their own <span class=3D"emphasis"><em>value</em></span> types.  For
            example, you might want to persist properties of type <code =
class=3D"classname">java.lang.BigInteger</code> to
            <code class=3D"literal">VARCHAR</code> columns.  Custom type=
s are not limited to mapping values to a single table
            column.  So, for example, you might want to concatenate toge=
ther <code class=3D"literal">FIRST_NAME</code>,
            <code class=3D"literal">INITIAL</code> and <code class=3D"li=
teral">SURNAME</code> columns into a <code class=3D"classname">java.lang=
.String</code>.
        </p><p>
            There are 3 approaches to developing a custom Hibernate type=
.  As a means of illustrating the different
            approaches, lets consider a use case where we need to compos=
e a <code class=3D"classname">java.math.BigDecimal</code>
            and <code class=3D"classname">java.util.Currency</code> toge=
ther into a custom <code class=3D"classname">Money</code> class.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"types-custom-type"/>6.4.1.=C2=A0=
Custom types using <code class=3D"interfacename">org.hibernate.type.Type=
</code></h3></div></div></div><p>
                The first approach is to directly implement the <code cl=
ass=3D"interfacename">org.hibernate.type.Type</code>
                interface (or one of its derivatives).  Probably, you wi=
ll be more interested in the more specific
                <code class=3D"interfacename">org.hibernate.type.BasicTy=
pe</code> contract which would allow registration of
                the type (see <a class=3D"xref" href=3D"#types-registry"=
 title=3D"6.5.=C2=A0Type registry">Section=C2=A06.5, =E2=80=9CType regis=
try=E2=80=9D</a>).  The benefit of this registration is that whenever
                the metadata for a particular property does not specify =
the Hibernate type to use, Hibernate will
                consult the registry for the exposed property type.  In =
our example, the property type would be
                <code class=3D"classname">Money</code>, which is the key=
 we would use to register our type in the registry:
            </p><div class=3D"example"><a id=3D"types-custom-type-ex-def=
inition"/><p class=3D"title"><b>Example=C2=A06.1.=C2=A0Defining and regi=
stering the custom Type</b></p><div class=3D"example-contents"><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_keyword">public</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_keyword">class</span><!-- <br/> --><span class=3D"java_plain">&nbs=
p;</span><!-- <br/> --><span class=3D"java_type">MoneyType</span><!-- <b=
r/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=
=3D"java_keyword">implements</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;</span><!-- <br/> --><span class=3D"java_type">BasicType</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_sep=
arator">[]</span><span class=3D"java_plain">&nbsp;getRegistrationKeys</s=
pan><span class=3D"java_separator">()</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Strin=
g</span><span class=3D"java_separator">[]</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Money</span><span class=
=3D"java_separator">.</span><span class=3D"java_keyword">class</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">getName</=
span><span class=3D"java_separator">()</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_separa=
tor">[]</span><span class=3D"java_plain">&nbsp;sqlTypes</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_type">Mapping</span><sp=
an class=3D"java_plain">&nbsp;mapping</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">We</span><span =
class=3D"java_plain">&nbsp;will&nbsp;simply&nbsp;use&nbsp;delegation&nbs=
p;to&nbsp;the&nbsp;standard&nbsp;basic&nbsp;types&nbsp;</span><span clas=
s=3D"java_keyword">for</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_type">BigDecimal</span><span class=3D"java_plain">&nbsp=
;and&nbsp;</span><span class=3D"java_type">Currency</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_keyword">for</span><span c=
lass=3D"java_plain">&nbsp;many&nbsp;of&nbsp;the</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">Type</span><spa=
n class=3D"java_plain">&nbsp;methods</span><span class=3D"java_separator=
">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">int</=
span><span class=3D"java_separator">[]</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/span><span class=3D"java_type">BigDecimalType</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">INSTANCE</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">sqlType</span><s=
pan class=3D"java_separator">(),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/span><span class=3D"java_type">CurrencyType</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">INSTANCE</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">sqlType</span><span =
class=3D"java_separator">(),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;we&nbsp;could&nbsp;also&nbsp;have&nbsp;honored&n=
bsp;any&nbsp;registry&nbsp;overrides&nbsp;via</span><span class=3D"java_=
separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_keyword">return</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">int</span><span class=3D"java_separato=
r">[]</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
mappings</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">getTypeResolver</span><span class=3D"java_separator">().</span>=
<span class=3D"java_plain">basic</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
BigDecimal</span><span class=3D"java_separator">.</span><span class=3D"j=
ava_keyword">class</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_plain">getName</span><span class=3D"java_separator">()</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
).</span><span class=3D"java_plain">sqlTypes</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_plain">&nbsp;mappings&nbsp;</span>=
<span class=3D"java_separator">)[</span><span class=3D"java_literal">0</=
span><span class=3D"java_separator">],</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
mappings</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">getTypeResolver</span><span class=3D"java_separator">().</span>=
<span class=3D"java_plain">basic</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
Currency</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_keyword">class</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">getName</span><span class=3D"java_separator">()</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">).=
</span><span class=3D"java_plain">sqlTypes</span><span class=3D"java_sep=
arator">(</span><span class=3D"java_plain">&nbsp;mappings&nbsp;</span><s=
pan class=3D"java_separator">)[</span><span class=3D"java_literal">0</sp=
an><span class=3D"java_separator">]</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Class</span><span class=3D"java_plai=
n">&nbsp;getReturnedClass</span><span class=3D"java_separator">()</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Money</span>=
<span class=3D"java_separator">.</span><span class=3D"java_keyword">clas=
s</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Object</span><span class=3D"java_pla=
in">&nbsp;nullSafeGet</span><span class=3D"java_separator">(</span><span=
 class=3D"java_type">ResultSet</span><span class=3D"java_plain">&nbsp;rs=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">String</span><span class=3D"java=
_separator">[]</span><span class=3D"java_plain">&nbsp;names</span><span =
class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_type">SessionImplementor</span><span class=3D"java_=
plain">&nbsp;session</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Object</span=
><span class=3D"java_plain">&nbsp;owner</span><span class=3D"java_separa=
tor">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_keyword">throws</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">SQLException</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">assert</span><span =
class=3D"java_plain">&nbsp;names</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">length&nbsp;</span><span class=3D"java_=
operator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">2</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">BigDecimal</span><span=
 class=3D"java_plain">&nbsp;amount&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">BigDecimalType</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">get</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">&nbsp;names</span><span class=3D"ja=
va_separator">[</span><span class=3D"java_literal">0</span><span class=3D=
"java_separator">]</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp=
;already&nbsp;handles&nbsp;</span><span class=3D"java_literal">null</spa=
n><span class=3D"java_plain">&nbsp;check</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Currency</span><span c=
lass=3D"java_plain">&nbsp;currency&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">CurrencyType</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">get</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;names</span><span class=3D"java=
_separator">[</span><span class=3D"java_literal">1</span><span class=3D"=
java_separator">]</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
already&nbsp;handles&nbsp;</span><span class=3D"java_literal">null</span=
><span class=3D"java_plain">&nbsp;check</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;amount&nbsp;</span><span class=3D"java_operat=
or">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_literal">null</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_operator">&amp;&amp;</span><span class=3D"java_plain">&nbsp=
;currency&nbsp;</span><span class=3D"java_operator">=3D=3D</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_literal">null</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">?</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_literal">null</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">:</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_keyword">new</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_type">Money</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_plain">&nbsp;amount</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;currency=
&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;nullSafeSet</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">PreparedStatement</span><span class=3D"java_plain">&n=
bsp;st</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Object</span><span class=3D=
"java_plain">&nbsp;value</span><span class=3D"java_separator">,</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">int</spa=
n><span class=3D"java_plain">&nbsp;index</span><span class=3D"java_separ=
ator">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">boolean</span><span class=3D"java_separator">[]</span><span clas=
s=3D"java_plain">&nbsp;settable</span><span class=3D"java_separator">,</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">S=
essionImplementor</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throws</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">SQLException</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;value&nbsp;</span><span class=3D"java_oper=
ator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">null</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BigDecimalType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">set</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;index&nbsp;</span><span class=3D"java_separator">);</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">CurrencyType</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">set</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separator">=
,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_lite=
ral">null</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;index</span><span class=3D"java_operator">+</span><span =
class=3D"java_literal">1</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">final</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_type">Money</span><span class=3D"java_plain">&nbsp;money&nbsp;</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">(</span><span class=3D"java_typ=
e">Money</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;value</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BigDecimalType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">set</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;money</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">getAmount</span><span=
 class=3D"java_separator">(),</span><span class=3D"java_plain">&nbsp;ind=
ex&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">CurrencyType</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">set</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separator">=
,</span><span class=3D"java_plain">&nbsp;money</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">getCurrency</span><span c=
lass=3D"java_separator">(),</span><span class=3D"java_plain">&nbsp;index=
</span><span class=3D"java_operator">+</span><span class=3D"java_literal=
">1</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_type">Configuration</span><span class=3D=
"java_plain">&nbsp;cfg&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">=
new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ty=
pe">Configuration</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">cfg</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">registerTypeOverride</span>=
<span class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">new</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">MoneyType</span><span class=3D"j=
ava_separator">()</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">cfg</span><span class=3D"java_s=
eparator">...;</span>
</pre></div></div><br class=3D"example-break"/><div xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"important"><h2>Important=
</h2><p>
                    It is important that we registered the type <span cl=
ass=3D"emphasis"><em>before</em></span> adding mappings.
                </p></div></div><div class=3D"section" lang=3D"en-US"><d=
iv class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"types-cust=
om-ut"/>6.4.2.=C2=A0Custom types using <code class=3D"interfacename">org=
.hibernate.usertype.UserType</code></h3></div></div></div><div xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note<=
/h2><p>
                    Both <code class=3D"interfacename">org.hibernate.use=
rtype.UserType</code> and
                    <code class=3D"interfacename">org.hibernate.usertype=
.CompositeUserType</code> were originally
                    added to isolate user code from internal changes to =
the <code class=3D"interfacename">org.hibernate.type.Type</code>
                    interfaces.
                </p></div><p>
                The second approach is the use the <code class=3D"interf=
acename">org.hibernate.usertype.UserType</code>
                interface, which presents a somewhat simplified view of =
the <code class=3D"interfacename">org.hibernate.type.Type</code>
                interface.  Using a <code class=3D"interfacename">org.hi=
bernate.usertype.UserType</code>, our
                <code class=3D"classname">Money</code> custom type would=
 look as follows:
            </p><div class=3D"example"><a id=3D"types-custom-ut-ex-defin=
ition"/><p class=3D"title"><b>Example=C2=A06.2.=C2=A0Defining the custom=
 UserType</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:r=
f=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- =
<br/> --><span class=3D"java_keyword">public</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keywo=
rd">class</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!=
-- <br/> --><span class=3D"java_type">MoneyType</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_ke=
yword">implements</span><!-- <br/> --><span class=3D"java_plain">&nbsp;<=
/span><!-- <br/> --><span class=3D"java_type">UserType</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">int</span><span class=3D"java_separa=
tor">[]</span><span class=3D"java_plain">&nbsp;sqlTypes</span><span clas=
s=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">int</=
span><span class=3D"java_separator">[]</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">BigDecimalType</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">INSTANCE</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">sqlType</span><span cl=
ass=3D"java_separator">(),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">CurrencyType</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">INSTANCE</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">sqlType</span><span clas=
s=3D"java_separator">(),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Class</span><span class=3D"java_plai=
n">&nbsp;getReturnedClass</span><span class=3D"java_separator">()</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Money</span>=
<span class=3D"java_separator">.</span><span class=3D"java_keyword">clas=
s</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Object</span><span class=3D"java_pla=
in">&nbsp;nullSafeGet</span><span class=3D"java_separator">(</span><span=
 class=3D"java_type">ResultSet</span><span class=3D"java_plain">&nbsp;rs=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">String</span><span class=3D"java=
_separator">[]</span><span class=3D"java_plain">&nbsp;names</span><span =
class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_type">Object</span><span class=3D"java_plain">&nbsp=
;owner</span><span class=3D"java_separator">)</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_keyword">throws</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_type">SQLException</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">assert</span><span =
class=3D"java_plain">&nbsp;names</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">length&nbsp;</span><span class=3D"java_=
operator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">2</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">BigDecimal</span><span=
 class=3D"java_plain">&nbsp;amount&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">BigDecimalType</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">get</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">&nbsp;names</span><span class=3D"ja=
va_separator">[</span><span class=3D"java_literal">0</span><span class=3D=
"java_separator">]</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp=
;already&nbsp;handles&nbsp;</span><span class=3D"java_literal">null</spa=
n><span class=3D"java_plain">&nbsp;check</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Currency</span><span c=
lass=3D"java_plain">&nbsp;currency&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">CurrencyType</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">get</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;names</span><span class=3D"java=
_separator">[</span><span class=3D"java_literal">1</span><span class=3D"=
java_separator">]</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
already&nbsp;handles&nbsp;</span><span class=3D"java_literal">null</span=
><span class=3D"java_plain">&nbsp;check</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;amount&nbsp;</span><span class=3D"java_operat=
or">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_literal">null</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_operator">&amp;&amp;</span><span class=3D"java_plain">&nbsp=
;currency&nbsp;</span><span class=3D"java_operator">=3D=3D</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_literal">null</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">?</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_literal">null</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">:</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_keyword">new</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_type">Money</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_plain">&nbsp;amount</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;currency=
&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;nullSafeSet</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">PreparedStatement</span><span class=3D"java_plain">&n=
bsp;st</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Object</span><span class=3D=
"java_plain">&nbsp;value</span><span class=3D"java_separator">,</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">int</spa=
n><span class=3D"java_plain">&nbsp;index</span><span class=3D"java_separ=
ator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_keyword">throws</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_type">SQLException</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;value&nbsp;</span><span class=3D"java_oper=
ator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">null</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BigDecimalType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">set</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;index&nbsp;</span><span class=3D"java_separator">);</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">CurrencyType</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">set</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separator">=
,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_lite=
ral">null</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;index</span><span class=3D"java_operator">+</span><span =
class=3D"java_literal">1</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">final</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_type">Money</span><span class=3D"java_plain">&nbsp;money&nbsp;</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">(</span><span class=3D"java_typ=
e">Money</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;value</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BigDecimalType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">set</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;money</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">getAmount</span><span=
 class=3D"java_separator">(),</span><span class=3D"java_plain">&nbsp;ind=
ex&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">CurrencyType</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">set</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separator">=
,</span><span class=3D"java_plain">&nbsp;money</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">getCurrency</span><span c=
lass=3D"java_separator">(),</span><span class=3D"java_plain">&nbsp;index=
</span><span class=3D"java_operator">+</span><span class=3D"java_literal=
">1</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>
                There is not much difference between the <code class=3D"=
interfacename">org.hibernate.type.Type</code> example
                and the <code class=3D"interfacename">org.hibernate.user=
type.UserType</code> example, but that is only because
                of the snippets shown.  If you choose the <code class=3D=
"interfacename">org.hibernate.type.Type</code> approach
                there are quite a few more methods you would need to imp=
lement as compared to the
                <code class=3D"interfacename">org.hibernate.usertype.Use=
rType</code>.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"types-custom-cut"/>6.=
4.3.=C2=A0Custom types using <code class=3D"interfacename">org.hibernate=
.usertype.CompositeUserType</code></h3></div></div></div><p>
                The third and final approach is the use the <code class=3D=
"interfacename">org.hibernate.usertype.CompositeUserType</code>
                interface, which differs from <code class=3D"interfacena=
me">org.hibernate.usertype.UserType</code> in that it
                gives us the ability to provide Hibernate the informatio=
n to handle the composition within the
                <code class=3D"classname">Money</code> class (specifical=
ly the 2 attributes).  This would give us the capability,
                for example, to reference the <code class=3D"literal">am=
ount</code> attribute in an HQL query.  Using a
                <code class=3D"interfacename">org.hibernate.usertype.Com=
positeUserType</code>, our
                <code class=3D"classname">Money</code> custom type would=
 look as follows:
            </p><div class=3D"example"><a id=3D"types-custom-cut-ex-defi=
nition"/><p class=3D"title"><b>Example=C2=A06.3.=C2=A0Defining the custo=
m CompositeUserType</b></p><div class=3D"example-contents"><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_keyword">public</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"=
java_keyword">class</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;</span><!-- <br/> --><span class=3D"java_type">MoneyType</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_keyword">implements</span><!-- <br/> --><span class=3D"java_plain"=
>&nbsp;</span><!-- <br/> --><span class=3D"java_type">CompositeUserType<=
/span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> -=
-><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_sep=
arator">[]</span><span class=3D"java_plain">&nbsp;getPropertyNames</span=
><span class=3D"java_separator">()</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;ORDER&nbsp;IS&nbsp;IMPORTANT</span><span class=3D=
"java_operator">!</span><span class=3D"java_plain">&nbsp;&nbsp;it&nbsp;m=
ust&nbsp;match&nbsp;the&nbsp;order&nbsp;the&nbsp;columns&nbsp;are&nbsp;d=
efined&nbsp;in&nbsp;the&nbsp;property&nbsp;mapping</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Strin=
g</span><span class=3D"java_separator">[]</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_literal">&quot;amount&quot;</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_literal">&quot;currency&quot;</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">};</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Type</span><span class=3D"java_separ=
ator">[]</span><span class=3D"java_plain">&nbsp;getPropertyTypes</span><=
span class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Type<=
/span><span class=3D"java_separator">[]</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">{</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">BigDecimalType</span><spa=
n class=3D"java_separator">.</span><span class=3D"java_plain">INSTANCE</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_type">CurrencyType</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">INSTANCE&nbsp;</span>=
<span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Class</span><span class=3D"java_plai=
n">&nbsp;getReturnedClass</span><span class=3D"java_separator">()</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Money</span>=
<span class=3D"java_separator">.</span><span class=3D"java_keyword">clas=
s</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Object</span><span class=3D"java_pla=
in">&nbsp;getPropertyValue</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;=
component</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">int</span><span class=3D=
"java_plain">&nbsp;propertyIndex</span><span class=3D"java_separator">)<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;component&nbsp;</span><span class=3D"java_=
operator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">null</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">return</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">final</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Money</span><=
span class=3D"java_plain">&nbsp;money&nbsp;</span><span class=3D"java_op=
erator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">(</span><span class=3D"java_type">Money</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;component=
</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">switch</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;propertyIndex&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">case</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_literal">0</span><span class=3D"java_operator">:</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;money</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">getAmount</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">case</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_literal">1</span><span class=3D"java_operator">:</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;money</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">getCurrency</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">default</span><span class=3D"java_operator">:</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">new</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">HibernateException</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_literal">&quot;Invalid&nbsp;property&nbsp;index&nb=
sp;[&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_operator">+</span><span class=3D"java_plain">&nbsp;propertyIndex&nb=
sp;</span><span class=3D"java_operator">+</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_literal">&quot;]&quot;</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setPropertyValue</span><span class=3D"java_separator">(</span><s=
pan class=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;co=
mponent</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">int</span><span class=3D"=
java_plain">&nbsp;propertyIndex</span><span class=3D"java_separator">,</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">O=
bject</span><span class=3D"java_plain">&nbsp;value</span><span class=3D"=
java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_keyword">throws</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_type">HibernateException</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;component&nbsp;</span><span class=3D"java_=
operator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">null</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">return</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">final</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Money</span><=
span class=3D"java_plain">&nbsp;money&nbsp;</span><span class=3D"java_op=
erator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">(</span><span class=3D"java_type">Money</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;component=
</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">switch</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;propertyIndex&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">case</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_literal">0</span><span class=3D"java_operator">:</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;money</=
span><span class=3D"java_separator">.</span><span class=3D"java_plain">s=
etAmount</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">BigDecimal</span><span class=3D"java_separator">)</span><=
span class=3D"java_plain">&nbsp;value&nbsp;</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">break</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">case</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_literal">1</span><span class=3D"java_operator">:</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;money</=
span><span class=3D"java_separator">.</span><span class=3D"java_plain">s=
etCurrency</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Currency</span><span class=3D"java_separator">)</span><=
span class=3D"java_plain">&nbsp;value&nbsp;</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">break</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">default</span><span class=3D"java_operator">:</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">new</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">HibernateException</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_literal">&quot;Invalid&nbsp;property&nbsp;index&nb=
sp;[&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_operator">+</span><span class=3D"java_plain">&nbsp;propertyIndex&nb=
sp;</span><span class=3D"java_operator">+</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_literal">&quot;]&quot;</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Object</span><span class=3D"java_pla=
in">&nbsp;nullSafeGet</span><span class=3D"java_separator">(</span><span=
 class=3D"java_type">ResultSet</span><span class=3D"java_plain">&nbsp;rs=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">String</span><span class=3D"java=
_separator">[]</span><span class=3D"java_plain">&nbsp;names</span><span =
class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_type">SessionImplementor</span><span class=3D"java_=
plain">&nbsp;session</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Object</span=
><span class=3D"java_plain">&nbsp;owner</span><span class=3D"java_separa=
tor">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_keyword">throws</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">SQLException</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">assert</span><span =
class=3D"java_plain">&nbsp;names</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">length&nbsp;</span><span class=3D"java_=
operator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">2</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">BigDecimal</span><span=
 class=3D"java_plain">&nbsp;amount&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">BigDecimalType</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">get</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">&nbsp;names</span><span class=3D"ja=
va_separator">[</span><span class=3D"java_literal">0</span><span class=3D=
"java_separator">]</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp=
;already&nbsp;handles&nbsp;</span><span class=3D"java_literal">null</spa=
n><span class=3D"java_plain">&nbsp;check</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Currency</span><span c=
lass=3D"java_plain">&nbsp;currency&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">CurrencyType</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">get</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;names</span><span class=3D"java=
_separator">[</span><span class=3D"java_literal">1</span><span class=3D"=
java_separator">]</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
already&nbsp;handles&nbsp;</span><span class=3D"java_literal">null</span=
><span class=3D"java_plain">&nbsp;check</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;amount&nbsp;</span><span class=3D"java_operat=
or">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_literal">null</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_operator">&amp;&amp;</span><span class=3D"java_plain">&nbsp=
;currency&nbsp;</span><span class=3D"java_operator">=3D=3D</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_literal">null</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">?</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_literal">null</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">:</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_keyword">new</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_type">Money</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_plain">&nbsp;amount</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;currency=
&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;nullSafeSet</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">PreparedStatement</span><span class=3D"java_plain">&n=
bsp;st</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Object</span><span class=3D=
"java_plain">&nbsp;value</span><span class=3D"java_separator">,</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">int</spa=
n><span class=3D"java_plain">&nbsp;index</span><span class=3D"java_separ=
ator">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">SessionImplementor</span><span class=3D"java_plain">&nbsp;sessio=
n</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_keyword">throws</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">SQLException</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;value&nbsp;</span><span class=3D"java_oper=
ator">=3D=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">null</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BigDecimalType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">set</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;index&nbsp;</span><span class=3D"java_separator">);</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">CurrencyType</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">set</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separator">=
,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_lite=
ral">null</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;index</span><span class=3D"java_operator">+</span><span =
class=3D"java_literal">1</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">else</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">final</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_type">Money</span><span class=3D"java_plain">&nbsp;money&nbsp;</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">(</span><span class=3D"java_typ=
e">Money</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;value</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BigDecimalType</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">set</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;money</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">getAmount</span><span=
 class=3D"java_separator">(),</span><span class=3D"java_plain">&nbsp;ind=
ex&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">CurrencyType</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">INSTANCE</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">set</span><span class=3D"java_separator">(</span><=
span class=3D"java_plain">&nbsp;st</span><span class=3D"java_separator">=
,</span><span class=3D"java_plain">&nbsp;money</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">getCurrency</span><span c=
lass=3D"java_separator">(),</span><span class=3D"java_plain">&nbsp;index=
</span><span class=3D"java_operator">+</span><span class=3D"java_literal=
">1</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/></div></div><div class=3D"section" lang=3D"e=
n-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"ty=
pes-registry"/>6.5.=C2=A0Type registry</h2></div></div></div><p>
            Internally Hibernate uses a registry of basic types (see <a =
class=3D"xref" href=3D"#types-value-basic" title=3D"6.1.1.=C2=A0Basic va=
lue types">Section=C2=A06.1.1, =E2=80=9CBasic value types=E2=80=9D</a>) =
when
            it needs to resolve the specific <code class=3D"interfacenam=
e">org.hibernate.type.Type</code> to use in certain
            situations.  It also provides a way for applications to add =
extra basic type registrations as well as
            override the standard basic type registrations.
        </p><p>
            To register a new type or to override an existing type regis=
tration, applications would make use of the
            <code class=3D"methodname">registerTypeOverride</code> metho=
d of the <code class=3D"classname">org.hibernate.cfg.Configuration</code=
>
            class when bootstrapping Hibernate.  For example, lets say y=
ou want Hibernate to use your custom
            <code class=3D"classname">SuperDuperStringType</code>; durin=
g bootstrap you would call:
        </p><div class=3D"example"><a id=3D"type-registry-override-ex"/>=
<p class=3D"title"><b>Example=C2=A06.4.=C2=A0Overriding the standard <co=
de class=3D"classname">StringType</code></b></p><div class=3D"example-co=
ntents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Config=
uration</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cfg&nbsp;</=
span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --=
><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_separator">...;</span>
<!--  --><br/><span class=3D"java_plain">cfg</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">registerTypeOverride</span>=
<span class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">new</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">SuperDuperStringType</span><span=
 class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">);</span></pre></div></div><br class=3D=
"example-break"/><p>
            The argument to <code class=3D"methodname">registerTypeOverr=
ide</code> is a <code class=3D"interfacename">org.hibernate.type.BasicTy=
pe</code>
            which is a specialization of the <code class=3D"interfacenam=
e">org.hibernate.type.Type</code> we saw before.  It
            adds a single method:
        </p><div class=3D"example"><a id=3D"d0e10397"/><p class=3D"title=
"><b>Example=C2=A06.5.=C2=A0Snippet from BasicType.java</b></p><div clas=
s=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" class=3D"JAVA"></span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_javadoc_comment">/**</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;*&nbsp;Get&nbsp;the&nbsp;names&nbsp;under&nbsp;which&nbsp;this&=
nbsp;type&nbsp;should&nbsp;be&nbsp;registered&nbsp;in&nbsp;the&nbsp;type=
&nbsp;registry.</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;*</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;*&nbsp;</span><span class=3D"java_javadoc_tag">@return</span><s=
pan class=3D"java_javadoc_comment">&nbsp;The&nbsp;keys&nbsp;under&nbsp;w=
hich&nbsp;to&nbsp;register&nbsp;this&nbsp;type.</span>
<!--  --><br/><span class=3D"java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;*/</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_sep=
arator">[]</span><span class=3D"java_plain">&nbsp;getRegistrationKeys</s=
pan><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre></div></div><br cl=
ass=3D"example-break"/><p>
            One approach is to use inheritance (<code class=3D"classname=
">SuperDuperStringType</code> extends =

            <code class=3D"classname">org.hibernate.type.StringType</cod=
e>); another is to use delegation.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"collections"/>Chap=
ter=C2=A07.=C2=A0Collection mapping</h2></div></div></div><div class=3D"=
toc"><dl><dt><span class=3D"section"><a href=3D"#collections-persistent"=
>7.1. Persistent collections</a></span></dt><dt><span class=3D"section">=
<a href=3D"#collections-mapping">7.2. How to map collections</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"#collections-foreignk=
eys">7.2.1. Collection foreign keys</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"#collections-indexed">7.2.2. Indexed collections</a></=
span></dt><dt><span class=3D"section"><a href=3D"#collections-ofvalues">=
7.2.3. Collections of basic types and embeddable objects</a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"#collections-advancedma=
ppings">7.3. Advanced collection mappings</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"#collections-sorted">7.3.1. Sorted colle=
ctions</a></span></dt><dt><span class=3D"section"><a href=3D"#collection=
s-bidirectional">7.3.2. Bidirectional associations</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#collections-indexedbidirectional">7.3.=
3. Bidirectional associations with indexed collections</a></span></dt><d=
t><span class=3D"section"><a href=3D"#collections-ternary">7.3.4. Ternar=
y associations</a></span></dt><dt><span class=3D"section"><a href=3D"#co=
llections-idbag">7.3.5. Using an &lt;idbag&gt;</a></span></dt></dl></dd>=
<dt><span class=3D"section"><a href=3D"#collections-example">7.4. Collec=
tion examples</a></span></dt></dl></div><div class=3D"section" lang=3D"e=
n-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"co=
llections-persistent"/>7.1.=C2=A0Persistent collections</h2></div></div>=
</div><p>Naturally Hibernate also allows to persist collections. These
    persistent collections can contain almost any other Hibernate type,
    including: basic types, custom types, components and references to o=
ther
    entities. The distinction between value and reference semantics is i=
n this
    context very important. An object in a collection might be handled w=
ith
    "value" semantics (its life cycle fully depends on the collection ow=
ner),
    or it might be a reference to another entity with its own life cycle=
. In
    the latter case, only the "link" between the two objects is consider=
ed to
    be a state held by the collection.</p><p>As a requirement persistent=
 collection-valued fields must be
    declared as an interface type (see <a class=3D"xref" href=3D"#exampl=
e.collection.mapping.annotations" title=3D"Example=C2=A07.2.=C2=A0Collec=
tion mapping using @OneToMany and @JoinColumn">Example=C2=A07.2, =E2=80=9C=
Collection mapping using @OneToMany and @JoinColumn=E2=80=9D</a>). The a=
ctual interface
    might be <code class=3D"literal">java.util.Set</code>,
    <code class=3D"literal">java.util.Collection</code>,
    <code class=3D"literal">java.util.List</code>, <code class=3D"litera=
l">java.util.Map</code>,
    <code class=3D"literal">java.util.SortedSet</code>,
    <code class=3D"literal">java.util.SortedMap</code> or anything you l=
ike ("anything you
    like" means you will have to write an implementation of
    <code class=3D"literal">org.hibernate.usertype.UserCollectionType</c=
ode>).</p><p>Notice how in <a class=3D"xref" href=3D"#example.collection=
.mapping.annotations" title=3D"Example=C2=A07.2.=C2=A0Collection mapping=
 using @OneToMany and @JoinColumn">Example=C2=A07.2, =E2=80=9CCollection=
 mapping using @OneToMany and @JoinColumn=E2=80=9D</a> the instance vari=
able
    <code class=3D"literal">parts</code> was initialized with an instanc=
e of
    <code class=3D"literal">HashSet</code>. This is the best way to init=
ialize collection
    valued properties of newly instantiated (non-persistent) instances. =
When
    you make the instance persistent, by calling <code class=3D"literal"=
>persist()</code>,
    Hibernate will actually replace the <code class=3D"literal">HashSet<=
/code> with an
    instance of Hibernate's own implementation of <code class=3D"literal=
">Set</code>. Be
    aware of the following error:</p><div class=3D"example"><a id=3D"d0e=
10463"/><p class=3D"title"><b>Example=C2=A07.1.=C2=A0Hibernate uses its =
own collection implementations</b></p><div class=3D"example-contents"><p=
re xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory"=
 class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <=
br/> --><span class=3D"java_plain">&nbsp;cat&nbsp;</span><!-- <br/> --><=
span class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</spa=
n><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><s=
pan class=3D"java_type">DomesticCat</span><!-- <br/> --><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;kitten&nbsp;</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">D=
omesticCat</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">....</span>
<!--  --><br/><span class=3D"java_type">Set</span><span class=3D"java_pl=
ain">&nbsp;kittens&nbsp;</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
HashSet</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">kittens</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">add</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">kitten</span><span c=
lass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">cat</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setKittens</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">kittens</span><s=
pan class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">persist</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">cat</span><span=
 class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">kittens&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;cat</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">getKit=
tens</span><span class=3D"java_separator">();</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">Okay</span><span cla=
ss=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;kittens&n=
bsp;collection&nbsp;is&nbsp;a&nbsp;</span><span class=3D"java_type">Set<=
/span>
<!--  --><br/><span class=3D"java_separator">(</span><span class=3D"java=
_type">HashSet</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;cat</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">getKittens</span><span class=3D"java_separator">(=
);</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ope=
rator">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Error</span><span class=3D"java_operator">!</span></pre></div>=
</div><br class=3D"example-break"/><p>The persistent collections injecte=
d by Hibernate behave like
    <code class=3D"literal">HashMap</code>, <code class=3D"literal">Hash=
Set</code>,
    <code class=3D"literal">TreeMap</code>, <code class=3D"literal">Tree=
Set</code> or
    <code class=3D"literal">ArrayList</code>, depending on the interface=
 type.</p><p>Collections instances have the usual behavior of value type=
s. They
    are automatically persisted when referenced by a persistent object a=
nd are
    automatically deleted when unreferenced. If a collection is passed f=
rom
    one persistent object to another, its elements might be moved from o=
ne
    table to another. Two entities cannot share a reference to the same
    collection instance. Due to the underlying relational model,
    collection-valued properties do not support null value semantics.
    Hibernate does not distinguish between a null collection reference a=
nd an
    empty collection.</p><div xmlns:rf=3D"java:org.jboss.highlight.Xhtml=
RendererFactory" class=3D"note"><h2>Note</h2><p>Use persistent collectio=
ns the same way you use ordinary Java
      collections. However, ensure you understand the semantics of
      bidirectional associations (see <a class=3D"xref" href=3D"#collect=
ions-bidirectional" title=3D"7.3.2.=C2=A0Bidirectional associations">Sec=
tion=C2=A07.3.2, =E2=80=9CBidirectional associations=E2=80=9D</a>).</p><=
/div></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage=
"><div><div><h2 class=3D"title"><a id=3D"collections-mapping"/>7.2.=C2=A0=
How to map collections</h2></div></div></div><p>Using annotations you ca=
n map <code class=3D"classname">Collection</code>s,
    <code class=3D"classname">List</code>s, <code class=3D"classname">Ma=
p</code>s and
    <code class=3D"classname">Set</code>s of associated entities using @=
OneToMany and
    @ManyToMany. For collections of a basic or embeddable type use
    @ElementCollection. In the simplest case a collection mapping looks =
like
    this:</p><div class=3D"example"><a id=3D"example.collection.mapping.=
annotations"/><p class=3D"title"><b>Example=C2=A07.2.=C2=A0Collection ma=
pping using @OneToMany and @JoinColumn</b></p><div class=3D"example-cont=
ents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span=
><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Product</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;serialNumber</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Set</span><span class=3D"java_opera=
tor">&lt;</span><span class=3D"java_type">Part</span><span class=3D"java=
_operator">&gt;</span><span class=3D"java_plain">&nbsp;parts&nbsp;</span=
><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">new</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">HashSet</span><span class=3D"j=
ava_operator">&lt;</span><span class=3D"java_type">Part</span><span clas=
s=3D"java_operator">&gt;</span><span class=3D"java_separator">();</span>=

</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getSerialNumber</span><span class=3D"java_separator">()</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywo=
rd">return</span><span class=3D"java_plain">&nbsp;serialNumber</span><sp=
an class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tSerialNumber</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">String</span><span class=3D"java_plain">&nbsp;sn</span><span=
 class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbs=
p;serialNumber&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;sn</span><span class=3D"java_separator">;</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">OneToMany</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;PART_ID&quot;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Part</span><span class=3D"java_=
operator">&gt;</span><span class=3D"java_plain">&nbsp;getParts</span><sp=
an class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_keyword">return</span><span class=3D"jav=
a_plain">&nbsp;parts</span><span class=3D"java_separator">;</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tParts</span><span class=3D"java_separator">(</span><span class=3D"java_=
type">Set</span><span class=3D"java_plain">&nbsp;parts</span><span class=
=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_keyword">this</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">parts&nbsp;</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_plain">&nbsp;parts</span><spa=
n class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Part</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>Product describes a unidirectional relati=
onship with Part using the
    join column PART_ID. In this unidirectional one to many scenario you=
 can
    also use a join table as seen in <a class=3D"xref" href=3D"#example-=
one-to-many-with-join-table" title=3D"Example=C2=A07.3.=C2=A0Collection =
mapping using @OneToMany and @JoinTable">Example=C2=A07.3, =E2=80=9CColl=
ection mapping using
      @OneToMany and @JoinTable=E2=80=9D</a>.</p><div class=3D"example">=
<a id=3D"example-one-to-many-with-join-table"/><p class=3D"title"><b>Exa=
mple=C2=A07.3.=C2=A0Collection mapping using
      @OneToMany and @JoinTable</b></p><div class=3D"example-contents"><=
pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory=
" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <=
br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Product</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;serialNumber</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Set</span><span class=3D"java_opera=
tor">&lt;</span><span class=3D"java_type">Part</span><span class=3D"java=
_operator">&gt;</span><span class=3D"java_plain">&nbsp;parts&nbsp;</span=
><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">new</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">HashSet</span><span class=3D"j=
ava_operator">&lt;</span><span class=3D"java_type">Part</span><span clas=
s=3D"java_operator">&gt;</span><span class=3D"java_separator">();</span>=

</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getSerialNumber</span><span class=3D"java_separator">()</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywo=
rd">return</span><span class=3D"java_plain">&nbsp;serialNumber</span><sp=
an class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tSerialNumber</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">String</span><span class=3D"java_plain">&nbsp;sn</span><span=
 class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbs=
p;serialNumber&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;sn</span><span class=3D"java_separator">;</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">OneToMany</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinTable</span><span class=3D"java_separator=
">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=3D"java_=
operator">=3D</span><span class=3D"java_literal">&quot;PRODUCT_PARTS&quo=
t;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;joinColumns&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;@</spa=
n><span class=3D"java_type">JoinColumn</span><span class=3D"java_separat=
or">(</span><span class=3D"java_plain">&nbsp;name</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_literal">&quot;PRODUCT_ID&qu=
ot;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inverseJoinColumns&nbsp;</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp=
;@</span><span class=3D"java_type">JoinColumn</span><span class=3D"java_=
separator">(</span><span class=3D"java_plain">&nbsp;name</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;PART_I=
D&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Part</span><span class=3D"java_=
operator">&gt;</span><span class=3D"java_plain">&nbsp;getParts</span><sp=
an class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_keyword">return</span><span class=3D"jav=
a_plain">&nbsp;parts</span><span class=3D"java_separator">;</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tParts</span><span class=3D"java_separator">(</span><span class=3D"java_=
type">Set</span><span class=3D"java_plain">&nbsp;parts</span><span class=
=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_keyword">this</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">parts&nbsp;</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_plain">&nbsp;parts</span><spa=
n class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Part</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>Without describing any physical mapping (=
no
    <code class=3D"classname">@JoinColumn</code> or <code class=3D"class=
name">@JoinTable</code>),
    a unidirectional one to many with join table is used. The table name=
 is
    the concatenation of the owner table name, _, and the other side tab=
le
    name. The foreign key name(s) referencing the owner table is the
    concatenation of the owner table, _, and the owner primary key colum=
n(s)
    name. The foreign key name(s) referencing the other side is the
    concatenation of the owner property name, _, and the other side prim=
ary
    key column(s) name. A unique constraint is added to the foreign key
    referencing the other side table to reflect the one to many.</p><p>L=
ets have a look now how collections are mapped using Hibernate
    mapping files. In this case the first step is to chose the right map=
ping
    element. It depends on the type of interface. For example, a
    <code class=3D"literal">&lt;set&gt;</code> element is used for mappi=
ng properties of
    type <code class=3D"literal">Set</code>.</p><div class=3D"example"><=
a id=3D"example.collections.set"/><p class=3D"title"><b>Example=C2=A07.4=
.=C2=A0Mapping a Set using &lt;set&gt;</b></p><div class=3D"example-cont=
ents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_operator">&lt;=
</span><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/>=
 --><span class=3D"java_plain">&nbsp;name</span><!-- <br/> --><span clas=
s=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_literal"=
>&quot;Product&quot;</span><!-- <br/> --><span class=3D"java_operator">&=
gt;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">&lt;</span><span class=3D"java_plain">id&n=
bsp;name</span><span class=3D"java_operator">=3D</span><span class=3D"ja=
va_literal">&quot;serialNumber&quot;</span><span class=3D"java_plain">&n=
bsp;column</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_literal">&quot;productSerialNumber&quot;</span><span class=3D"java_=
operator">/&gt;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">&lt;</span><span class=3D"java_plain">set&=
nbsp;name</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_literal">&quot;parts&quot;</span><span class=3D"java_operator">&gt;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">&lt;</span><span c=
lass=3D"java_plain">key&nbsp;column</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_literal">&quot;productSerialNumber&quot;</=
span><span class=3D"java_plain">&nbsp;not</span><span class=3D"java_oper=
ator">-</span><span class=3D"java_literal">null</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_literal">&quot;true&quot;</spa=
n><span class=3D"java_operator">/&gt;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">&lt;</span><span c=
lass=3D"java_plain">one</span><span class=3D"java_operator">-</span><spa=
n class=3D"java_plain">to</span><span class=3D"java_operator">-</span><s=
pan class=3D"java_plain">many&nbsp;</span><span class=3D"java_keyword">c=
lass</span><span class=3D"java_operator">=3D</span><span class=3D"java_l=
iteral">&quot;Part&quot;</span><span class=3D"java_operator">/&gt;</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">&lt;/</span><span class=3D"java_plain">set=
</span><span class=3D"java_operator">&gt;</span>
<!--  --><br/><span class=3D"java_operator">&lt;/</span><span class=3D"j=
ava_keyword">class</span><span class=3D"java_operator">&gt;</span></pre>=
</div></div><br class=3D"example-break"/><p>In <a class=3D"xref" href=3D=
"#example.collections.set" title=3D"Example=C2=A07.4.=C2=A0Mapping a Set=
 using &lt;set&gt;">Example=C2=A07.4, =E2=80=9CMapping a Set using &lt;s=
et&gt;=E2=80=9D</a> a
    <span class=3D"emphasis"><em>one-to-many association</em></span> lin=
ks the
    <code class=3D"literal">Product</code> and <code class=3D"literal">P=
art</code> entities. This
    association requires the existence of a foreign key column and possi=
bly an
    index column to the <code class=3D"literal">Part</code> table. This =
mapping loses
    certain semantics of normal Java collections:</p><div class=3D"itemi=
zedlist"><ul compact=3D"compact"><li><p>An instance of the contained ent=
ity class cannot belong to more
        than one instance of the collection.</p></li><li><p>An instance =
of the contained entity class cannot appear at more
        than one value of the collection index.</p></li></ul></div><p>Lo=
oking closer at the used <code class=3D"literal">&lt;one-to-many&gt;</co=
de>
    tag we see that it has the following options.</p><div class=3D"examp=
le"><a id=3D"d0e10572"/><p class=3D"title"><b>Example=C2=A07.5.=C2=A0opt=
ions of &lt;one-to-many&gt; element</b></p><div class=3D"example-content=
s"><div class=3D"programlistingco"><pre class=3D"programlisting">&lt;one=
-to-many
        class=3D<span xmlns=3D"" class=3D"co" id=3D"onetomany1"><img src=
=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>"Cl=
assName"
        not-fo<span xmlns=3D"" class=3D"co" id=3D"onetomany2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>und=3D=
"ignore|exception"
        entity<span xmlns=3D"" class=3D"co" id=3D"onetomany3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>-name=3D=
"EntityName"
        node=3D"element-name"
        embed-xml=3D"true|false"
    /&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D=
"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><im=
g xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"=
0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"=
left"><p><code class=3D"literal">class</code> (required): the name of th=
e
            associated class.</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">not-found</c=
ode> (optional - defaults to
            <code class=3D"literal">exception</code>): specifies how cac=
hed identifiers
            that reference missing rows will be handled.
            <code class=3D"literal">ignore</code> will treat a missing r=
ow as a null
            association.</p></td></tr><tr><td width=3D"5%" valign=3D"top=
" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/3.pn=
g" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">entity-name</cod=
e> (optional): the entity name
            of the associated class, as an alternative to
            <code class=3D"literal">class</code>.</p></td></tr></table><=
/div></div></div></div><br class=3D"example-break"/><p>The <code class=3D=
"literal">&lt;one-to-many&gt;</code> element does not need to
    declare any columns. Nor is it necessary to specify the
    <code class=3D"literal">table</code> name anywhere.</p><div xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"warning"><h2=
>Warning</h2><p>If the foreign key column of a
      <code class=3D"literal">&lt;one-to-many&gt;</code> association is =
declared
      <code class=3D"literal">NOT NULL</code>, you must declare the
      <code class=3D"literal">&lt;key&gt;</code> mapping
      <code class=3D"literal">not-null=3D"true"</code> or <span class=3D=
"emphasis"><em>use a bidirectional
      association</em></span> with the collection mapping marked
      <code class=3D"literal">inverse=3D"true"</code>. See <a class=3D"x=
ref" href=3D"#collections-bidirectional" title=3D"7.3.2.=C2=A0Bidirectio=
nal associations">Section=C2=A07.3.2, =E2=80=9CBidirectional association=
s=E2=80=9D</a>.</p></div><p>Apart from the <code class=3D"literal">&lt;s=
et&gt; </code>tag as shown in <a class=3D"xref" href=3D"#example.collect=
ions.set" title=3D"Example=C2=A07.4.=C2=A0Mapping a Set using &lt;set&gt=
;">Example=C2=A07.4, =E2=80=9CMapping a Set using &lt;set&gt;=E2=80=9D</=
a>, there is also
    <code class=3D"literal">&lt;list&gt;</code>, <code class=3D"literal"=
>&lt;map&gt;</code>,
    <code class=3D"literal">&lt;bag&gt;</code>, <code class=3D"literal">=
&lt;array&gt;</code> and
    <code class=3D"literal">&lt;primitive-array&gt;</code> mapping eleme=
nts. The
    <code class=3D"literal">&lt;map&gt;</code> element is representative=
:</p><div class=3D"example"><a id=3D"d0e10663"/><p class=3D"title"><b>Ex=
ample=C2=A07.6.=C2=A0Elements of the &lt;map&gt; mapping</b></p><div cla=
ss=3D"example-contents"><div class=3D"programlistingco"><pre class=3D"pr=
ogramlisting">&lt;map
    name=3D"prop<span xmlns=3D"" class=3D"co" id=3D"mappingcollection1">=
<img src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></=
span>ertyName"
    table=3D"tab<span xmlns=3D"" class=3D"co" id=3D"mappingcollection2">=
<img src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></=
span>le_name"
    schema=3D"sc<span xmlns=3D"" class=3D"co" id=3D"mappingcollection3">=
<img src=3D"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></=
span>hema_name"
    lazy=3D"true<span xmlns=3D"" class=3D"co" id=3D"mappingcollection4">=
<img src=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"(4)"/></=
span>|extra|false"
    inverse=3D"t<span xmlns=3D"" class=3D"co" id=3D"mappingcollection5">=
<img src=3D"images/org/hibernate/docbook/callouts/5.png" alt=3D"(5)"/></=
span>rue|false"
    cascade=3D"a<span xmlns=3D"" class=3D"co" id=3D"mappingcollection6">=
<img src=3D"images/org/hibernate/docbook/callouts/6.png" alt=3D"(6)"/></=
span>ll|none|save-update|delete|all-delete-orphan|delete-orphan"
    sort=3D"unso<span xmlns=3D"" class=3D"co" id=3D"mappingcollection7">=
<img src=3D"images/org/hibernate/docbook/callouts/7.png" alt=3D"(7)"/></=
span>rted|natural|comparatorClass"
    order-by=3D"<span xmlns=3D"" class=3D"co" id=3D"mappingcollection8">=
<img src=3D"images/org/hibernate/docbook/callouts/8.png" alt=3D"(8)"/></=
span>column_name asc|desc"
    where=3D"arb<span xmlns=3D"" class=3D"co" id=3D"mappingcollection9">=
<img src=3D"images/org/hibernate/docbook/callouts/9.png" alt=3D"(9)"/></=
span>itrary sql where condition"
    fetch=3D"joi<span xmlns=3D"" class=3D"co" id=3D"mappingcollection10"=
><img src=3D"images/org/hibernate/docbook/callouts/10.png" alt=3D"(10)"/=
></span>n|select|subselect"
    batch-size<span xmlns=3D"" class=3D"co" id=3D"mappingcollection11"><=
img src=3D"images/org/hibernate/docbook/callouts/11.png" alt=3D"(11)"/><=
/span>=3D"N"
    access=3D"fi<span xmlns=3D"" class=3D"co" id=3D"mappingcollection12"=
><img src=3D"images/org/hibernate/docbook/callouts/12.png" alt=3D"(12)"/=
></span>eld|property|ClassName"
    optimistic<span xmlns=3D"" class=3D"co" id=3D"mappingcollection13"><=
img src=3D"images/org/hibernate/docbook/callouts/13.png" alt=3D"(13)"/><=
/span>-lock=3D"true|false"
    mutable=3D"t<span xmlns=3D"" class=3D"co" id=3D"mappingcollection14"=
><img src=3D"images/org/hibernate/docbook/callouts/14.png" alt=3D"(14)"/=
></span>rue|false"
    node=3D"element-name|."
    embed-xml=3D"true|false"
&gt;

    &lt;key .... /&gt;
    &lt;map-key .... /&gt;
    &lt;element .... /&gt;
&lt;/map&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=
=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p>=
<img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactor=
y" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D=
"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D=
"left"><p><code class=3D"literal">name</code>: the collection property n=
ame</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><=
img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory=
" src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D=
"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D=
"left"><p><code class=3D"literal">table</code> (optional - defaults to p=
roperty
            name): the name of the collection table. It is not used for
            one-to-many associations.</p></td></tr><tr><td width=3D"5%" =
valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/=
callouts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/><=
/p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">sch=
ema</code> (optional): the name of a table
            schema to override the schema declared on the root element</=
p></td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=
=3D"images/org/hibernate/docbook/callouts/4.png" alt=3D"4" border=3D"0" =
height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"lef=
t"><p><code class=3D"literal">lazy</code> (optional - defaults to
            <code class=3D"literal">true</code>): disables lazy fetching=
 and specifies
            that the association is always eagerly fetched. It can also =
be
            used to enable "extra-lazy" fetching where most operations d=
o not
            initialize the collection. This is suitable for large
            collections.</p></td></tr><tr><td width=3D"5%" valign=3D"top=
" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/5.pn=
g" alt=3D"5" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">inverse</code> (=
optional - defaults to
            <code class=3D"literal">false</code>): marks this collection=
 as the "inverse"
            end of a bidirectional association.</p></td></tr><tr><td wid=
th=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"j=
ava:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernat=
e/docbook/callouts/6.png" alt=3D"6" border=3D"0" height=3D"17px" width=3D=
"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"lit=
eral">cascade</code> (optional - defaults to
            <code class=3D"literal">none</code>): enables operations to =
cascade to child
            entities.</p></td></tr><tr><td width=3D"5%" valign=3D"top" a=
lign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/7.png" =
alt=3D"7" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td vali=
gn=3D"top" align=3D"left"><p><code class=3D"literal">sort</code> (option=
al): specifies a sorted
            collection with <code class=3D"literal">natural</code> sort =
order or a given
            comparator class.</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
8.png" alt=3D"8" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p><code class=3D"literal">order-by</co=
de> (optional): specifies a table
            column or columns that define the iteration order of the
            <code class=3D"literal">Map</code>, <code class=3D"literal">=
Set</code> or bag, together
            with an optional <code class=3D"literal">asc</code> or
            <code class=3D"literal">desc</code>.</p></td></tr><tr><td wi=
dth=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"=
java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hiberna=
te/docbook/callouts/9.png" alt=3D"9" border=3D"0" height=3D"17px" width=3D=
"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D"lit=
eral">where</code> (optional): specifies an arbitrary
            SQL <code class=3D"literal">WHERE</code> condition that is u=
sed when
            retrieving or removing the collection. This is useful if the=

            collection needs to contain only a subset of the available
            data.</p></td></tr><tr><td width=3D"5%" valign=3D"top" align=
=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" src=3D"images/org/hibernate/docbook/callouts/10.png" alt=
=3D"10" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=
=3D"top" align=3D"left"><p><code class=3D"literal">fetch</code> (optiona=
l, defaults to
            <code class=3D"literal">select</code>): chooses between oute=
r-join fetching,
            fetching by sequential select, and fetching by sequential
            subselect.</p></td></tr><tr><td width=3D"5%" valign=3D"top" =
align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/11.png=
" alt=3D"11" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td v=
align=3D"top" align=3D"left"><p><code class=3D"literal">batch-size</code=
> (optional, defaults to
            <code class=3D"literal">1</code>): specifies a "batch size" =
for lazily
            fetching instances of this collection.</p></td></tr><tr><td =
width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hibern=
ate/docbook/callouts/12.png" alt=3D"12" border=3D"0" height=3D"17px" wid=
th=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D=
"literal">access</code> (optional - defaults to
            <code class=3D"literal">property</code>): the strategy Hiber=
nate uses for
            accessing the collection property value.</p></td></tr><tr><t=
d width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hib=
ernate/docbook/callouts/13.png" alt=3D"13" border=3D"0" height=3D"17px" =
width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code clas=
s=3D"literal">optimistic-lock</code> (optional - defaults to
            <code class=3D"literal">true</code>): specifies that changes=
 to the state of
            the collection results in increments of the owning entity's
            version. For one-to-many associations you may want to disabl=
e this
            setting.</p></td></tr><tr><td width=3D"5%" valign=3D"top" al=
ign=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/14.png" =
alt=3D"14" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td val=
ign=3D"top" align=3D"left"><p><code class=3D"literal">mutable</code> (op=
tional - defaults to
            <code class=3D"literal">true</code>): a value of <code class=
=3D"literal">false</code>
            specifies that the elements of the collection never change. =
This
            allows for minor performance optimization in some cases.</p>=
</td></tr></table></div></div></div></div><br class=3D"example-break"/><=
p>After exploring the basic mapping of collections in the preceding
    paragraphs we will now focus details like physical mapping considera=
tions,
    indexed collections and collections of value types.</p><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"collections-foreignkeys"/>7.2.1.=C2=A0Collection foreig=
n keys</h3></div></div></div><p>On the database level collection instanc=
es are distinguished by
      the foreign key of the entity that owns the collection. This forei=
gn key
      is referred to as the <span class=3D"emphasis"><em>collection key =
column</em></span>, or
      columns, of the collection table. The collection key column is map=
ped by
      the <code class=3D"literal">@JoinColumn</code> annotation respecti=
vely the
      <code class=3D"literal">&lt;key&gt;</code> XML element.</p><p>Ther=
e can be a nullability constraint on the foreign key column.
      For most collections, this is implied. For unidirectional one-to-m=
any
      associations, the foreign key column is nullable by default, so yo=
u may
      need to specify</p><pre class=3D"programlisting">@JoinColumn(nulla=
ble=3Dfalse)</pre><p>or</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHig=
hlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;productSerialNumber&quot;</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ot-null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>The foreign key constraint can use <code class=3D"literal">ON D=
ELETE
      CASCADE</code>. In XML this can be expressed via:</p><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"X=
ML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.=
net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;productSerialNumber&quot;</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">o=
n-delete</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;cascade&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>In annotations the Hibernate specific annotation @OnDelete has =
to
      be used.</p><pre class=3D"programlisting">@OnDelete(action=3DOnDel=
eteAction.CASCADE)</pre><p>See <a class=3D"xref" href=3D"#section.key">S=
ection=C2=A05.1.11.3, =E2=80=9CKey=E2=80=9D</a> for more information
      about the <code class=3D"literal">&lt;key&gt;</code> element.</p><=
/div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div=
><div><h3 class=3D"title"><a id=3D"collections-indexed"/>7.2.2.=C2=A0Ind=
exed collections</h3></div></div></div><p>In the following paragraphs we=
 have a closer at the indexed
      collections <code class=3D"classname">List</code> and <code class=3D=
"classname">Map</code>
      how the their index can be mapped in Hibernate.</p><div class=3D"s=
ection" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"t=
itle"><a id=3D"d0e10853"/>7.2.2.1.=C2=A0Lists</h4></div></div></div><p>L=
ists can be mapped in two different ways:</p><div class=3D"itemizedlist"=
><ul><li><p>as ordered lists, where the order is not materialized in the=

            database</p></li><li><p>as indexed lists, where the order is=
 materialized in the
            database</p></li></ul></div><p>To order lists in memory, add=

        <code class=3D"literal">@javax.persistence.OrderBy</code> to you=
r property. This
        annotation takes as parameter a list of comma separated properti=
es (of
        the target entity) and orders the collection accordingly (eg
        <code class=3D"code">firstname asc, age desc</code>), if the str=
ing is empty, the
        collection will be ordered by the primary key of the target
        entity.</p><div class=3D"example"><a id=3D"d0e10873"/><p class=3D=
"title"><b>Example=C2=A07.7.=C2=A0Ordered lists using <code class=3D"cla=
ssname">@OrderBy</code></b></p><div class=3D"example-contents"><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><s=
pan class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToMany</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">mappedBy</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;customer&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OrderBy</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_literal">&quot;number&quot;</span><span class=3D"j=
ava_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">List</span><span class=3D"java_operator">&=
lt;</span><span class=3D"java_type">Order</span><span class=3D"java_oper=
ator">&gt;</span><span class=3D"java_plain">&nbsp;getOrders</span><span =
class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">return</span><span class=3D"java_p=
lain">&nbsp;orders</span><span class=3D"java_separator">;</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setOrders</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">List</span><span class=3D"java_operator">&lt;</span><span cla=
ss=3D"java_type">Order</span><span class=3D"java_operator">&gt;</span><s=
pan class=3D"java_plain">&nbsp;orders</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_keyword">this</span><span class=3D"java_separator">.</span><span c=
lass=3D"java_plain">orders&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;orders</span><span class=3D"java=
_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">List</span><span class=3D"java_operator">=
&lt;</span><span class=3D"java_type">Order</span><span class=3D"java_ope=
rator">&gt;</span><span class=3D"java_plain">&nbsp;orders</span><span cl=
ass=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getNumber</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;number</span><span class=3D"java_sep=
arator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setNumber</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">String</span><span class=3D"java_plain">&nbsp;number</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">number&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;number=
</span><span class=3D"java_separator">;</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;number</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Customer</span><span class=3D"java_plain">=
&nbsp;getCustomer</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;customer</span><span class=3D"=
java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setCustomer</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Customer</span><span class=3D"java_plain">&nbsp;customer</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">customer&nbsp;</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp=
;customer</span><span class=3D"java_separator">;</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Customer</span><span class=3D"java_plain"=
>&nbsp;number</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_operator">--</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Table</span><span class=3D=
"java_plain">&nbsp;schema</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|-------=
---|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D=
"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span clas=
s=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_type">Customer</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|-------=
---|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span class=3D"java_operator">|</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_operator">|</span><span class=3D"jav=
a_plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span clas=
s=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">|----------|</span><span class=3D"java_plain">=
&nbsp;</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;customer_id&nbsp;</span><span class=3D"java_operator">|</sp=
an>
<!--  --><br/><span class=3D"java_operator">|-------------|</span></pre>=
</div></div><br class=3D"example-break"/><p>To store the index value in =
a dedicated column, use the
        <code class=3D"classname">@javax.persistence.OrderColumn</code> =
annotation on
        your property. This annotations describes the column name and
        attributes of the column keeping the index value. This column is=

        hosted on the table containing the association foreign key. If t=
he
        column name is not specified, the default is the name of the
        referencing property, followed by underscore, followed by
        <code class=3D"literal">ORDER</code> (in the following example, =
it would be
        <code class=3D"literal">orders_ORDER</code>).</p><div class=3D"e=
xample"><a id=3D"d0e10891"/><p class=3D"title"><b>Example=C2=A07.8.=C2=A0=
Explicit index column using
          <code class=3D"classname">@OrderColumn</code></b></p><div clas=
s=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"ja=
va_plain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToMany</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">mappedBy</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;customer&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OrderColumn</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">name</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_literal">&quot;orders_index&quot;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">List</span><span class=3D"java_operator">&=
lt;</span><span class=3D"java_type">Order</span><span class=3D"java_oper=
ator">&gt;</span><span class=3D"java_plain">&nbsp;getOrders</span><span =
class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_keyword">return</span><span class=3D"java_p=
lain">&nbsp;orders</span><span class=3D"java_separator">;</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setOrders</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">List</span><span class=3D"java_operator">&lt;</span><span cla=
ss=3D"java_type">Order</span><span class=3D"java_operator">&gt;</span><s=
pan class=3D"java_plain">&nbsp;orders</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_keyword">this</span><span class=3D"java_separator">.</span><span c=
lass=3D"java_plain">orders&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;orders</span><span class=3D"java=
_separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">List</span><span class=3D"java_operator">=
&lt;</span><span class=3D"java_type">Order</span><span class=3D"java_ope=
rator">&gt;</span><span class=3D"java_plain">&nbsp;orders</span><span cl=
ass=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getNumber</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;number</span><span class=3D"java_sep=
arator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setNumber</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">String</span><span class=3D"java_plain">&nbsp;number</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">number&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;number=
</span><span class=3D"java_separator">;</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;number</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Customer</span><span class=3D"java_plain">=
&nbsp;getCustomer</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;customer</span><span class=3D"=
java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setCustomer</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Customer</span><span class=3D"java_plain">&nbsp;customer</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">customer&nbsp;</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp=
;customer</span><span class=3D"java_separator">;</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Customer</span><span class=3D"java_plain"=
>&nbsp;number</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_operator">--</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Table</span><span class=3D=
"java_plain">&nbsp;schema</span>
<!--  --><br/><span class=3D"java_operator">|--------------|</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|------=
----|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D=
"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">Customer</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|--------------|</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|------=
----|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</span><span class=3D"java_operator">|</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_operator">|</span><span class=3D=
"java_plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><s=
pan class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_operator">|----------|</span><span class=3D"java_p=
lain">&nbsp;</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;customer_id&nbsp;&nbsp;</span><span class=3D"java_operator"=
>|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;orders_order&nbsp;</span><span class=3D"java_operator">|</s=
pan>
<!--  --><br/><span class=3D"java_operator">|--------------|</span></pre=
></div></div><br class=3D"example-break"/><div xmlns:rf=3D"java:org.jbos=
s.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>We reco=
mmend you to convert <code class=3D"classname">the legacy
          @org.hibernate.annotations.IndexColumn</code> usages to
          <code class=3D"classname">@OrderColumn</code> unless you are m=
aking use of the
          base property. The <code class=3D"literal">base</code> propert=
y lets you define
          the index value of the first element (aka as base index). The =
usual
          value is <code class=3D"literal">0</code> or <code class=3D"li=
teral">1</code>. The default
          is 0 like in Java.</p></div><p>Looking again at the Hibernate =
mapping file equivalent, the
        index of an array or list is always of type <code class=3D"liter=
al">integer</code>
        and is mapped using the <code class=3D"literal">&lt;list-index&g=
t;</code> element.
        The mapped column contains sequential integers that are numbered=
 from
        zero by default.</p><div class=3D"example"><a id=3D"d0e10924"/><=
p class=3D"title"><b>Example=C2=A07.9.=C2=A0index-list element for index=
ed collections in xml
          mapping</b></p><div class=3D"example-contents"><div class=3D"p=
rogramlistingco"><pre class=3D"programlisting">&lt;list-index
        column<span xmlns=3D"" class=3D"co" id=3D"index1"><img src=3D"im=
ages/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D"colum=
n_name"
        base=3D"<span xmlns=3D"" class=3D"co" id=3D"index2"><img src=3D"=
images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>0|1|...=
"/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Ca=
llout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=
=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" =
height=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"lef=
t"><p><code class=3D"literal">column_name</code> (required): the name of=

                the column holding the collection index values.</p></td>=
</tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">base</code> (optional - defaults to
                <code class=3D"literal">0</code>): the value of the inde=
x column that
                corresponds to the first element of the list or array.</=
p></td></tr></table></div></div></div></div><br class=3D"example-break"/=
><p>If your table does not have an index column, and you still wish
        to use <code class=3D"literal">List</code> as the property type,=
 you can map the
        property as a Hibernate <span class=3D"emphasis"><em>&lt;bag&gt;=
</em></span>. A bag does
        not retain its order when it is retrieved from the database, but=
 it
        can be optionally sorted or ordered.</p></div><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a id=3D"d0e10955"/>7.2.2.2.=C2=A0Maps</h4></div></div></div><p>The q=
uestion with <code class=3D"classname">Map</code>s is where the key
        value is stored. There are everal options. Maps can borrow their=
 keys
        from one of the associated entity properties or have dedicated c=
olumns
        to store an explicit key.</p><p>To use one of the target entity =
property as a key of the map,
        use <code class=3D"literal">@MapKey(name=3D"myProperty")</code>,=
 where
        <code class=3D"literal">myProperty</code> is a property name in =
the target entity.
        When using <code class=3D"literal">@MapKey</code> without the na=
me attribuate, the
        target entity primary key is used. The map key uses the same col=
umn as
        the property pointed out. There is no additional column defined =
to
        hold the map key, because the map key represent a target propert=
y. Be
        aware that once loaded, the key is no longer kept in sync with t=
he
        property. In other words, if you change the property value, the =
key
        will not change automatically in your Java model.</p><div class=3D=
"example"><a id=3D"d0e10974"/><p class=3D"title"><b>Example=C2=A07.10.=C2=
=A0Use of target entity property as map key via
          <code class=3D"classname">@MapKey</code></b></p><div class=3D"=
example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_pl=
ain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToMany</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">mappedBy</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_literal">&quot;customer&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">MapKey</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">name</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;number&quot;</span><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Map</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">String</span><span class=3D"java_sepa=
rator">,</span><span class=3D"java_type">Order</span><span class=3D"java=
_operator">&gt;</span><span class=3D"java_plain">&nbsp;getOrders</span><=
span class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">return</span><span class=3D"j=
ava_plain">&nbsp;orders</span><span class=3D"java_separator">;</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setOrders</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">Map</span><span class=3D"java_operator">&lt;</span><span clas=
s=3D"java_type">String</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_type">Order</span><span class=3D"java_operator">&gt;</sp=
an><span class=3D"java_plain">&nbsp;order</span><span class=3D"java_sepa=
rator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">{</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_keyword">this</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">orders&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;orders</span><span class=3D"=
java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Map</span><span class=3D"java_operator">&=
lt;</span><span class=3D"java_type">String</span><span class=3D"java_sep=
arator">,</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_operator">&gt;</span><span class=3D"java_plain">&nbsp;orders</span><sp=
an class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getNumber</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;number</span><span class=3D"java_sep=
arator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setNumber</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">String</span><span class=3D"java_plain">&nbsp;number</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">number&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;number=
</span><span class=3D"java_separator">;</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;number</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Customer</span><span class=3D"java_plain">=
&nbsp;getCustomer</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;customer</span><span class=3D"=
java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setCustomer</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Customer</span><span class=3D"java_plain">&nbsp;customer</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">customer&nbsp;</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp=
;customer</span><span class=3D"java_separator">;</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Customer</span><span class=3D"java_plain"=
>&nbsp;number</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_operator">--</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Table</span><span class=3D=
"java_plain">&nbsp;schema</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|-------=
---|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D=
"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span clas=
s=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_type">Customer</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|-------=
---|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span class=3D"java_operator">|</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_operator">|</span><span class=3D"jav=
a_plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span clas=
s=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">|----------|</span><span class=3D"java_plain">=
&nbsp;</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;customer_id&nbsp;</span><span class=3D"java_operator">|</sp=
an>
<!--  --><br/><span class=3D"java_operator">|-------------|</span></pre>=
</div></div><br class=3D"example-break"/><p>Alternatively the map key is=
 mapped to a dedicated column or
        columns. In order to customize the mapping use one of the follow=
ing
        annotations:</p><div class=3D"itemizedlist"><ul><li><p>@<code cl=
ass=3D"classname">MapKeyColumn</code> if the map key is a
            basic type. If you don't specify the column name, the name o=
f the
            property followed by underscore followed by <code class=3D"l=
iteral">KEY</code>
            is used (for example <code class=3D"literal">orders_KEY</cod=
e>).</p></li><li><p><code class=3D"classname">@MapKeyEnumerated</code> /=

            <code class=3D"classname">@MapKeyTemporal</code> if the map =
key type is
            respectively an enum or a <code class=3D"classname">Date</co=
de>.</p></li><li><p><code class=3D"classname">@MapKeyJoinColumn</code>/<=
code class=3D"classname">@MapKeyJoinColumns</code>
            if the map key type is another entity.</p></li><li><p><code =
class=3D"classname">@AttributeOverride</code>/<code class=3D"classname">=
@AttributeOverrides</code>
            when the map key is a embeddable object. Use
            <code class=3D"literal">key.</code> as a prefix for your emb=
eddable object
            property names.</p></li></ul></div><p>You can also use <code=
 class=3D"classname">@MapKeyClass</code> to define
        the type of the key if you don't use generics.</p><div class=3D"=
example"><a id=3D"d0e11031"/><p class=3D"title"><b>Example=C2=A07.11.=C2=
=A0Map key as basic type using
          <code class=3D"classname">@MapKeyColumn</code></b></p><div cla=
ss=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"j=
ava_plain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span>=

<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToMany</span><span class=3D"java_plain">&nbsp;@<=
/span><span class=3D"java_type">JoinTable</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">name</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">&quot;Cust_Order&quot;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">MapKeyColumn</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;orders_number&quot;</spa=
n><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Map</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">String</span><span class=3D"java_sepa=
rator">,</span><span class=3D"java_type">Order</span><span class=3D"java=
_operator">&gt;</span><span class=3D"java_plain">&nbsp;getOrders</span><=
span class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">return</span><span class=3D"j=
ava_plain">&nbsp;orders</span><span class=3D"java_separator">;</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setOrders</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">Map</span><span class=3D"java_operator">&lt;</span><span clas=
s=3D"java_type">String</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_type">Order</span><span class=3D"java_operator">&gt;</sp=
an><span class=3D"java_plain">&nbsp;orders</span><span class=3D"java_sep=
arator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">{</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_keyword">this</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">orders&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;orders</span><span class=3D=
"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Map</span><span class=3D"java_operator">&=
lt;</span><span class=3D"java_type">String</span><span class=3D"java_sep=
arator">,</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_operator">&gt;</span><span class=3D"java_plain">&nbsp;orders</span><sp=
an class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Id</span><span class=3D"java_plain">&nbsp;@</span><=
span class=3D"java_type">GeneratedValue</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Integer</span><span cl=
ass=3D"java_plain">&nbsp;getId</span><span class=3D"java_separator">()</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">return</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setId</span><span class=3D"java_separator">(</span><span class=3D"java=
_type">Integer</span><span class=3D"java_plain">&nbsp;id</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_keyword">this</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">id&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;id</span><span cl=
ass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Integer</span><span class=3D"java_plain">=
&nbsp;id</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getNumber</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">return</sp=
an><span class=3D"java_plain">&nbsp;number</span><span class=3D"java_sep=
arator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setNumber</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">String</span><span class=3D"java_plain">&nbsp;number</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">number&nbsp;</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;number=
</span><span class=3D"java_separator">;</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;number</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Customer</span><span class=3D"java_plain">=
&nbsp;getCustomer</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">retu=
rn</span><span class=3D"java_plain">&nbsp;customer</span><span class=3D"=
java_separator">;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setCustomer</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Customer</span><span class=3D"java_plain">&nbsp;customer</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">this</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">customer&nbsp;</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp=
;customer</span><span class=3D"java_separator">;</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Customer</span><span class=3D"java_plain"=
>&nbsp;number</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_operator">--</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Table</span><span class=3D=
"java_plain">&nbsp;schema</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|-------=
---|</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_o=
perator">|---------------|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D=
"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span clas=
s=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_type">Customer</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_operator">|</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">|</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Cust_Order</span><span =
class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_=
operator">|</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">|-------=
---|</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_o=
perator">|---------------|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span class=3D"java_operator">|</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_operator">|</span><span class=3D"jav=
a_plain">&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;c=
ustomer_id&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">|</span=
>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span clas=
s=3D"java_operator">|</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_operator">|----------|</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_operator">|</span><span class=3D"java_p=
lain">&nbsp;order_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span cla=
ss=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|</span><span class=3D"java_=
plain">&nbsp;customer_id&nbsp;</span><span class=3D"java_operator">|</sp=
an><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_ope=
rator">|</span><span class=3D"java_plain">&nbsp;orders_number&nbsp;</spa=
n><span class=3D"java_operator">|</span>
<!--  --><br/><span class=3D"java_operator">|-------------|</span><span =
class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">|-=
--------------|</span></pre></div></div><br class=3D"example-break"/><di=
v xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"no=
te"><h2>Note</h2><p>We recommend you to migrate from
          <code class=3D"classname">@org.hibernate.annotations.MapKey</c=
ode> /
          <code class=3D"classname">@org.hibernate.annotation.MapKeyMany=
ToMany</code> to
          the new standard approach described above</p></div><p>Using Hi=
bernate mapping files there exists equivalent concepts
        to the descibed annotations. You have to use
        <code class=3D"literal">&lt;map-key&gt;</code>,
        <code class=3D"literal">&lt;map-key-many-to-many&gt;</code> and
        <code class=3D"literal">&lt;composite-map-key&gt;</code>.
        <code class=3D"literal">&lt;map-key&gt;</code> is used for any b=
asic type,
        <code class=3D"literal">&lt;map-key-many-to-many&gt;</code> for =
an entity
        reference and <code class=3D"literal">&lt;composite-map-key&gt;<=
/code> for a
        composite type.</p><div class=3D"example"><a id=3D"d0e11067"/><p=
 class=3D"title"><b>Example=C2=A07.12.=C2=A0map-key xml mapping element<=
/b></p><div class=3D"example-contents"><div class=3D"programlistingco"><=
pre class=3D"programlisting">&lt;map-key
        column<span xmlns=3D"" class=3D"co" id=3D"mapkey1"><img src=3D"i=
mages/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D"colu=
mn_name"
        formul<span xmlns=3D"" class=3D"co" id=3D"mapkey2"><img src=3D"i=
mages/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>a=3D"any=
 SQL expression"
        type=3D"<span xmlns=3D"" class=3D"co" id=3D"mapkey3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>type_n=
ame"
        node=3D"@attribute-name"
        length=3D"N"/&gt;</pre><div class=3D"calloutlist"><table border=3D=
"0" summary=3D"Callout list"><tr><td width=3D"5%" valign=3D"top" align=3D=
"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"=
1" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td valign=3D"t=
op" align=3D"left"><p><code class=3D"literal">column</code> (optional): =
the name of the
                column holding the collection index values.</p></td></tr=
><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/=
org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D"1=
7px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code=
 class=3D"literal">formula</code> (optional): a SQL formula
                used to evaluate the key of the map.</p></td></tr><tr><t=
d width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/hib=
ernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" height=3D"17px" wi=
dth=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code class=3D=
"literal">type</code> (required): the type of the map
                keys.</p></td></tr></table></div></div></div></div><br c=
lass=3D"example-break"/><div class=3D"example"><a id=3D"d0e11093"/><p cl=
ass=3D"title"><b>Example=C2=A07.13.=C2=A0map-key-many-to-many</b></p><di=
v class=3D"example-contents"><div class=3D"programlistingco"><pre class=3D=
"programlisting">&lt;map-key-many-to-many
        column<span xmlns=3D"" class=3D"co" id=3D"indexmanytomany1"><img=
 src=3D"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span=
>=3D"column_name"
        formul<span xmlns=3D"" class=3D"co" id=3D"indexmanytomany2"><img=
 src=3D"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span=
><span xmlns=3D"" class=3D"co" id=3D"indexmanytomany3"><img src=3D"image=
s/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>a=3D"any SQL=
 expression"
        class=3D"ClassName"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">column</code> (optional): the name of the
                foreign key column for the collection index values.</p><=
/td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">formula</code> (optional): a SQ formula used
                to evaluate the foreign key of the map key.</p></td></tr=
><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/=
org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" height=3D"1=
7px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code=
 class=3D"literal">class</code> (required): the entity class
                used as the map key.</p></td></tr></table></div></div></=
div></div><br class=3D"example-break"/></div></div><div class=3D"section=
" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title">=
<a id=3D"collections-ofvalues"/>7.2.3.=C2=A0Collections of basic types a=
nd embeddable objects</h3></div></div></div><p>In some situations you do=
n't need to associate two entities but
      simply create a collection of basic types or embeddable objects. U=
se the
      <code class=3D"classname">@ElementCollection</code> for this case.=
</p><div class=3D"example"><a id=3D"d0e11127"/><p class=3D"title"><b>Exa=
mple=C2=A07.14.=C2=A0Collection of basic types mapped via
        <code class=3D"classname">@ElementCollection</code></b></p><div =
class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D=
"java_plain">@</span><!-- <br/> --><span class=3D"java_type">Entity</spa=
n>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">User</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">[...]</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getLastname</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">...}=
</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ElementCollection</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">CollectionTable</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">name</span><span class=3D"java_oper=
ator">=3D</span><span class=3D"java_literal">&quot;Nicknames&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;joinColumns</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">@</span><span class=3D"java_type">JoinColumn</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_plain">name</span><sp=
an class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;=
user_id&quot;</span><span class=3D"java_separator">))</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">Column</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">name</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;nickname&quot;</span><span cla=
ss=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Set</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">String</span><span class=3D"java_oper=
ator">&gt;</span><span class=3D"java_plain">&nbsp;getNicknames</span><sp=
an class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">...</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">}</span><span class=3D=
"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>The collection table holding the collecti=
on data is set using the
      <code class=3D"classname">@CollectionTable</code> annotation. If o=
mitted the
      collection table name defaults to the concatenation of the name of=
 the
      containing entity and the name of the collection attribute, separa=
ted by
      an underscore. In our example, it would be
      <code class=3D"literal">User_nicknames</code>.</p><p>The column ho=
lding the basic type is set using the
      <code class=3D"classname">@Column</code> annotation. If omitted, t=
he column name
      defaults to the property name: in our example, it would be
      <code class=3D"literal">nicknames</code>.</p><p>But you are not li=
mited to basic types, the collection type can be
      any embeddable object. To override the columns of the embeddable o=
bject
      in the collection table, use the
      <code class=3D"classname">@AttributeOverride</code> annotation.</p=
><div class=3D"example"><a id=3D"d0e11155"/><p class=3D"title"><b>Exampl=
e=C2=A07.15.=C2=A0@ElementCollection for embeddable objects</b></p><div =
class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D=
"java_plain">@</span><!-- <br/> --><span class=3D"java_type">Entity</spa=
n>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">User</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">[...]</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getLastname</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">...}=
</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ElementCollection</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">CollectionTable</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">name</span><span class=3D"java_oper=
ator">=3D</span><span class=3D"java_literal">&quot;Addresses&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;joinColumns</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">@</span><span class=3D"java_type">JoinColumn</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_plain">name</span><sp=
an class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;=
user_id&quot;</span><span class=3D"java_separator">))</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">AttributeOverrides</span><span class=3D"java_separa=
tor">({</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">AttributeOverride</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">name</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;s=
treet1&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">@</span><span class=3D"java_type">Column</spa=
n><span class=3D"java_separator">(</span><span class=3D"java_plain">name=
</span><span class=3D"java_operator">=3D</span><span class=3D"java_liter=
al">&quot;fld_street&quot;</span><span class=3D"java_separator">))</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Set</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">Address</span><span class=3D"java_ope=
rator">&gt;</span><span class=3D"java_plain">&nbsp;getAddresses</span><s=
pan class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">...</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">}</span><span class=
=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Embeddable</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Address</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">String</span><span class=3D"java_plain">&n=
bsp;getStreet1</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{...}</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">[...]</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>Such an embeddable object cannot contains=
 a collection
      itself.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"note"><h2>Note</h2><p>in <code class=3D"classname">@At=
tributeOverride</code>, you must use the
        <code class=3D"literal">value.</code> prefix to override propert=
ies of the
        embeddable object used in the map value and the
        <code class=3D"literal">key.</code> prefix to override propertie=
s of the
        embeddable object used in the map key.</p><pre xmlns=3D"" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><s=
pan class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">User</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">ElementCollection</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">AttributeOverrides</span><span class=3D"java_separa=
tor">({</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">AttributeOverride</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">name</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;k=
ey.street1&quot;</span><span class=3D"java_separator">,</span><span clas=
s=3D"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">@</span><span class=3D"java_type">Column<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
name</span><span class=3D"java_operator">=3D</span><span class=3D"java_l=
iteral">&quot;fld_street&quot;</span><span class=3D"java_separator">)),<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;@</span><span class=3D"java_type">AttributeOverride</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">name</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;v=
alue.stars&quot;</span><span class=3D"java_separator">,</span><span clas=
s=3D"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">@</span><span class=3D"java_type">Column<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
name</span><span class=3D"java_operator">=3D</span><span class=3D"java_l=
iteral">&quot;fld_note&quot;</span><span class=3D"java_separator">))</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Map</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">Address</span><span class=3D"java_sep=
arator">,</span><span class=3D"java_type">Rating</span><span class=3D"ja=
va_operator">&gt;</span><span class=3D"java_plain">&nbsp;getFavHomes</sp=
an><span class=3D"java_separator">()</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">{</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_separator">...</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">}</span></pre><=
/div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cla=
ss=3D"note"><h2>Note</h2><p>We recommend you to migrate from
        <code class=3D"classname">@org.hibernate.annotations.CollectionO=
fElements</code>
        to the new <code class=3D"classname">@ElementCollection</code>
        annotation.</p></div><p>Using the mapping file approach a collec=
tion of values is mapped
      using the <code class=3D"literal">&lt;element&gt;</code> tag. For =
example:</p><div class=3D"example"><a id=3D"d0e11190"/><p class=3D"title=
"><b>Example=C2=A07.16.=C2=A0&lt;element&gt; tag for collection values u=
sing mapping
        files</b></p><div class=3D"example-contents"><div class=3D"progr=
amlistingco"><pre class=3D"programlisting">&lt;element
        column<span xmlns=3D"" class=3D"co" id=3D"element1b"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>=3D"co=
lumn_name"
        formul<span xmlns=3D"" class=3D"co" id=3D"element2b"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>a=3D"a=
ny SQL expression"
        type=3D"<span xmlns=3D"" class=3D"co" id=3D"element3b"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>typena=
me"
        length=3D"L"
        precision=3D"P"
        scale=3D"S"
        not-null=3D"true|false"
        unique=3D"true|false"
        node=3D"element-name"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">column</code> (optional): the name of the
              column holding the collection element values.</p></td></tr=
><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/=
org/hibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D"1=
7px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code=
 class=3D"literal">formula</code> (optional): an SQL formula used
              to evaluate the element.</p></td></tr><tr><td width=3D"5%"=
 valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook=
/callouts/3.png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/>=
</p></td><td valign=3D"top" align=3D"left"><p><code class=3D"literal">ty=
pe</code> (required): the type of the
              collection element.</p></td></tr></table></div></div></div=
></div><br class=3D"example-break"/></div></div><div class=3D"section" l=
ang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a =
id=3D"collections-advancedmappings"/>7.3.=C2=A0Advanced collection mappi=
ngs</h2></div></div></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"collections-sort=
ed"/>7.3.1.=C2=A0Sorted collections</h3></div></div></div><p>Hibernate s=
upports collections implementing
      <code class=3D"literal">java.util.SortedMap</code> and
      <code class=3D"literal">java.util.SortedSet</code>. With annotatio=
ns you declare a
      sort comparator using <code class=3D"literal">@Sort</code>. You ch=
ose between the
      comparator types unsorted, natural or custom. If you want to use y=
our
      own comparator implementation, you'll also have to specify the
      implementation class using the <code class=3D"literal">comparator<=
/code> attribute.
      Note that you need to use either a <code class=3D"classname">Sorte=
dSet</code> or a
      <code class=3D"classname">SortedMap</code> interface.</p><div clas=
s=3D"example"><a id=3D"d0e11242"/><p class=3D"title"><b>Example=C2=A07.1=
7.=C2=A0Sorted collection with @Sort</b></p><div class=3D"example-conten=
ts"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><=
!-- <br/> --><span class=3D"java_type">OneToMany</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_pl=
ain">cascade</span><!-- <br/> --><span class=3D"java_operator">=3D</span=
><!-- <br/> --><span class=3D"java_type">CascadeType</span><!-- <br/> --=
><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"jav=
a_plain">ALL</span><!-- <br/> --><span class=3D"java_separator">,</span>=
<!-- <br/> --><span class=3D"java_plain">&nbsp;fetch</span><!-- <br/> --=
><span class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"ja=
va_type">FetchType</span><!-- <br/> --><span class=3D"java_separator">.<=
/span><!-- <br/> --><span class=3D"java_plain">EAGER</span><!-- <br/> --=
><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;CUST_ID&quot;</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Sort</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">type&nbsp;</span><span class=3D"java_operator">=3D</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">SortType</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">COMP=
ARATOR</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;comparator&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Ti=
cketComparator</span><span class=3D"java_separator">.</span><span class=3D=
"java_keyword">class</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">SortedSet</span><span =
class=3D"java_operator">&lt;</span><span class=3D"java_type">Ticket</spa=
n><span class=3D"java_operator">&gt;</span><span class=3D"java_plain">&n=
bsp;getTickets</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;tickets</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>Using Hibernate mapping files you specify=
 a comparator in the
      mapping file with <code class=3D"literal">&lt;sort&gt;</code>:</p>=
<div class=3D"example"><a id=3D"d0e11252"/><p class=3D"title"><b>Example=
=C2=A07.18.=C2=A0Sorted collection using xml mapping</b></p><div class=3D=
"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v=
1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;aliases&quot;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">tabl=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;person_aliases&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">sort=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;natural&quot;</span><span class=3D"xml_tag_symbols">&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;person&quot;</span><span class=3D"xml_tag_symbols"=
>/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">element</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">type</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;stri=
ng&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
map</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;holidays&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">sort</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;my.custom.HolidayComparator&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;year_id&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">map-key</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;hol_name&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;st=
ring&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">element</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;hol_date&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;da=
te&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>map</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Allowed values of the =
<code class=3D"literal">sort</code> attribute are
      <code class=3D"literal">unsorted</code>, <code class=3D"literal">n=
atural</code> and the name of
      a class implementing <code class=3D"literal">java.util.Comparator<=
/code>.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactor=
y" class=3D"tip"><h2>Tip</h2><p>Sorted collections actually behave like
        <code class=3D"literal">java.util.TreeSet</code> or
        <code class=3D"literal">java.util.TreeMap</code>.</p></div><p>If=
 you want the database itself to order the collection elements,
      use the <code class=3D"literal">order-by</code> attribute of <code=
 class=3D"literal">set</code>,
      <code class=3D"literal">bag</code> or <code class=3D"literal">map<=
/code> mappings. This solution
      is implemented using <code class=3D"literal">LinkedHashSet</code> =
or
      <code class=3D"literal">LinkedHashMap</code> and performs the orde=
ring in the SQL
      query and not in the memory.</p><div class=3D"example"><a id=3D"d0=
e11300"/><p class=3D"title"><b>Example=C2=A07.19.=C2=A0Sorting in databa=
se using order-by</b></p><div class=3D"example-contents"><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML=
"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.ne=
t) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;aliases&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;person_aliases&quot;</span><span class=3D"xml_plain">&nbsp;</sp=
an><span class=3D"xml_attribute_name">order-by</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;lower(n=
ame)&nbsp;asc&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;person&quot;</span><span class=3D"xml_tag_symbols"=
>/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">element</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">type</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;stri=
ng&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
map</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;holidays&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">order-by</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;hol_date,&nbsp;hol_name&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;year_id&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">map-key</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;hol_name&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;st=
ring&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">element</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;hol_date&nbsp;type=3D&quot;</span><span class=3D=
"xml_attribute_name">date</span><span class=3D"xml_attribute_value">&quo=
t;/</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&lt;/</span><span class=3D"xml_attribute_name"=
>map</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><div xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>Th=
e value of the <code class=3D"literal">order-by</code> attribute is an S=
QL
        ordering, not an HQL ordering.</p></div><p>Associations can even=
 be sorted by arbitrary criteria at runtime
      using a collection <code class=3D"literal">filter()</code>:</p><di=
v class=3D"example"><a id=3D"d0e11318"/><p class=3D"title"><b>Example=C2=
=A07.20.=C2=A0Sorting via a query filter</b></p><div class=3D"example-co=
ntents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">sorte=
dUsers&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;s</span><!-- <br/> --><s=
pan class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_p=
lain">createFilter</span><!-- <br/> --><span class=3D"java_separator">(<=
/span><!-- <br/> --><span class=3D"java_plain">&nbsp;group</span><!-- <b=
r/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_plain">getUsers</span><!-- <br/> --><span class=3D"java_separator"=
>(),</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <b=
r/> --><span class=3D"java_literal">&quot;order&nbsp;by&nbsp;this.name&q=
uot;</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <b=
r/> --><span class=3D"java_separator">).</span><!-- <br/> --><span class=
=3D"java_plain">list</span><!-- <br/> --><span class=3D"java_separator">=
();</span></pre></div></div><br class=3D"example-break"/></div><div clas=
s=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 clas=
s=3D"title"><a id=3D"collections-bidirectional"/>7.3.2.=C2=A0Bidirection=
al associations</h3></div></div></div><p>A <span class=3D"emphasis"><em>=
bidirectional association</em></span> allows navigation
      from both "ends" of the association. Two kinds of bidirectional
      association are supported: </p><div class=3D"variablelist"><dl><dt=
><span class=3D"term">one-to-many</span></dt><dd><p>set or bag valued at=
 one end and single-valued at the
              other</p></dd><dt><span class=3D"term">many-to-many</span>=
</dt><dd><p>set or bag valued at both ends</p></dd></dl></div><p>Often t=
here exists a many to one association which is the owner
      side of a bidirectional relationship. The corresponding one to man=
y
      association is in this case annotated by
      <code class=3D"literal">@OneToMany(mappedBy=3D...)</code></p><div =
class=3D"example"><a id=3D"d0e11348"/><p class=3D"title"><b>Example=C2=A0=
7.21.=C2=A0Bidirectional one to many with many to one side as associatio=
n
        owner</b></p><div class=3D"example-contents"><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span clas=
s=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Troop</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">OneToMany</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">mappedBy</span><span class=3D"java_=
operator">=3D</span><span class=3D"java_literal">&quot;troop&quot;</span=
><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Soldier</span><span class=3D"ja=
va_operator">&gt;</span><span class=3D"java_plain">&nbsp;getSoldiers</sp=
an><span class=3D"java_separator">()</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Soldier</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;troop_fk&quot;</span=
><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Troop</span><span class=3D"java_plai=
n">&nbsp;getTroop</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span></pre></div></div><br class=3D"example-break"/><p><code class=3D=
"classname">Troop</code> has a bidirectional one to many
      relationship with <code class=3D"literal">Soldier</code> through t=
he
      <code class=3D"literal">troop</code> property. You don't have to (=
must not) define
      any physical mapping in the <code class=3D"literal">mappedBy</code=
> side.</p><p>To map a bidirectional one to many, with the one-to-many s=
ide as
      the owning side, you have to remove the <code class=3D"literal">ma=
ppedBy</code>
      element and set the many to one <code class=3D"literal">@JoinColum=
n</code> as
      insertable and updatable to false. This solution is not optimized =
and
      will produce additional UPDATE statements.</p><div class=3D"exampl=
e"><a id=3D"d0e11374"/><p class=3D"title"><b>Example=C2=A07.22.=C2=A0Bid=
irectional associtaion with one to many side as
        owner</b></p><div class=3D"example-contents"><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span clas=
s=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Troop</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">OneToMany</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;troop_fk&quot;</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_operator">//</span><span class=3D"java_plain=
">we&nbsp;need&nbsp;to&nbsp;duplicate&nbsp;the&nbsp;physical&nbsp;inform=
ation</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Soldier</span><span class=3D"ja=
va_operator">&gt;</span><span class=3D"java_plain">&nbsp;getSoldiers</sp=
an><span class=3D"java_separator">()</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Soldier</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumn</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;troop_fk&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;insertable</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">false</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;updatable</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_literal">false</span><span class=3D"java_=
separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Troop</span><span class=3D"java_plai=
n">&nbsp;getTroop</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>How does the mappping of a bidirectional =
mapping look like in
      Hibernate mapping xml? There you define a bidirectional one-to-man=
y
      association by mapping a one-to-many association to the same table=

      column(s) as a many-to-one association and declaring the many-valu=
ed end
      <code class=3D"literal">inverse=3D"true"</code>.</p><div class=3D"=
example"><a id=3D"d0e11384"/><p class=3D"title"><b>Example=C2=A07.23.=C2=
=A0Bidirectional one to many via Hibernate mapping files</b></p><div cla=
ss=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighli=
ght v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Parent&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;parent_id&q=
uot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;children&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">inverse</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;parent_id&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Child&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xm=
l_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;child_id&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;parent&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">class</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pare=
nt&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;par=
ent_id&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Mapping one end of an =
association with
      <code class=3D"literal">inverse=3D"true"</code> does not affect th=
e operation of
      cascades as these are orthogonal concepts.</p><p>A many-to-many as=
sociation is defined logically using the
      <code class=3D"literal">@ManyToMany</code> annotation. You also ha=
ve to describe the
      association table and the join conditions using the
      <code class=3D"literal">@JoinTable</code> annotation. If the assoc=
iation is
      bidirectional, one side has to be the owner and one side has to be=
 the
      inverse end (ie. it will be ignored when updating the relationship=

      values in the association table):</p><div class=3D"example"><a id=3D=
"d0e11402"/><p class=3D"title"><b>Example=C2=A07.24.=C2=A0Many to many a=
ssociation via @ManyToMany</b></p><div class=3D"example-contents"><pre x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cla=
ss=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> =
--><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Employer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">i=
mplements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToMany</span><span class=3D"java_separato=
r">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;targetEntity</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">org</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">hibernate</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">test</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">metadata</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">manytomany</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_type">Emp=
loyee</span><span class=3D"java_separator">.</span><span class=3D"java_k=
eyword">class</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;cascade</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_separator">{</span><span class=3D"java_type">CascadeT=
ype</span><span class=3D"java_separator">.</span><span class=3D"java_pla=
in">PERSIST</span><span class=3D"java_separator">,</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">CascadeType</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">MERGE</sp=
an><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinTable</span><span class=3D"java_separator=
">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;name</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_literal">&quot;EMPLOYER_EMPLOYEE&quot;</span><span class=
=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;joinColumns</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">@</span><span class=3D"java_type">JoinColu=
mn</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">name</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_literal">&quot;EMPER_ID&quot;</span><span class=3D"java_separator">),<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;inverseJoinColumns</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_plain">@</span><span class=3D"java_type">J=
oinColumn</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_plain">name</span><span class=3D"java_operator">=3D</span><span class=
=3D"java_literal">&quot;EMPEE_ID&quot;</span><span class=3D"java_separat=
or">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Collection</span><span class=3D"java=
_plain">&nbsp;getEmployees</span><span class=3D"java_separator">()</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;employees</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</span></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span c=
lass=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_type">Enti=
ty</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Employee</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">i=
mplements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToMany</span><span class=3D"java_separato=
r">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;cascade&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_type">CascadeType</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">PERSIST</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_type">CascadeType</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">MERGE</span><span class=3D"java_sep=
arator">},</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;mappedBy&nbsp;</span><span class=3D"java_operator">=3D<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_litera=
l">&quot;employees&quot;</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;targetEntity&nbsp;</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ty=
pe">Employer</span><span class=3D"java_separator">.</span><span class=3D=
"java_keyword">class</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Collection</span><span class=3D"java=
_plain">&nbsp;getEmployers</span><span class=3D"java_separator">()</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;employers</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre></div></div><br class=3D"ex=
ample-break"/><p>In this example <code class=3D"classname">@JoinTable</c=
ode> defines a
      <code class=3D"literal">name</code>, an array of join columns, and=
 an array of
      inverse join columns. The latter ones are the columns of the assoc=
iation
      table which refer to the <code class=3D"classname">Employee</code>=
 primary key
      (the "other side"). As seen previously, the other side don't have =
to
      (must not) describe the physical mapping: a simple
      <code class=3D"literal">mappedBy</code> argument containing the ow=
ner side property
      name bind the two.</p><p>As any other annotations, most values are=
 guessed in a many to
      many relationship. Without describing any physical mapping in a
      unidirectional many to many the following rules applied. The table=
 name
      is the concatenation of the owner table name, <span class=3D"keyca=
p"><strong>_</strong></span> and the
      other side table name. The foreign key name(s) referencing the own=
er
      table is the concatenation of the owner table name, <span class=3D=
"keycap"><strong>_</strong></span>
      and the owner primary key column(s). The foreign key name(s) refer=
encing
      the other side is the concatenation of the owner property name,
      <span class=3D"keycap"><strong>_</strong></span>, and the other si=
de primary key column(s). These are
      the same rules used for a unidirectional one to many
      relationship.</p><div class=3D"example"><a id=3D"d0e11434"/><p cla=
ss=3D"title"><b>Example=C2=A07.25.=C2=A0Default values for <code class=3D=
"classname">@ManyToMany</code>
        (uni-directional)</b></p><div class=3D"example-contents"><pre xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" clas=
s=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> -=
-><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Store</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToMany</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">cascade&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_type">CascadeType</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">PERSIST</span><span class=3D"java_separa=
tor">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">City</span><span class=3D"java_=
operator">&gt;</span><span class=3D"java_plain">&nbsp;getImplantedIn</sp=
an><span class=3D"java_separator">()</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">City</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_operator">//</span><span class=3D"java_plai=
n">no&nbsp;bidirectional&nbsp;relationship</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span></pre></div></div><br class=3D"example-break"/><p>A=
 <code class=3D"literal">Store_City</code> is used as the join table. Th=
e
      <code class=3D"literal">Store_id</code> column is a foreign key to=
 the
      <code class=3D"literal">Store</code> table. The <code class=3D"lit=
eral">implantedIn_id</code>
      column is a foreign key to the <code class=3D"literal">City</code>=
 table.</p><p>Without describing any physical mapping in a bidirectional=
 many to
      many the following rules applied. The table name is the concatenat=
ion of
      the owner table name, <span class=3D"keycap"><strong>_</strong></s=
pan> and the other side table name.
      The foreign key name(s) referencing the owner table is the concate=
nation
      of the other side property name, <span class=3D"keycap"><strong>_<=
/strong></span>, and the owner
      primary key column(s). The foreign key name(s) referencing the oth=
er
      side is the concatenation of the owner property name,
      <span class=3D"keycap"><strong>_</strong></span>, and the other si=
de primary key column(s). These are
      the same rules used for a unidirectional one to many
      relationship.</p><div class=3D"example"><a id=3D"d0e11470"/><p cla=
ss=3D"title"><b>Example=C2=A07.26.=C2=A0Default values for <code class=3D=
"classname">@ManyToMany</code>
        (bi-directional)</b></p><div class=3D"example-contents"><pre xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=
=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --=
><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Store</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToMany</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">cascade&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_separator">{</span><span class=3D"java_type">CascadeType</=
span><span class=3D"java_separator">.</span><span class=3D"java_plain">P=
ERSIST</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">CascadeType</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">MERGE</span><s=
pan class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Customer</span><span class=3D"j=
ava_operator">&gt;</span><span class=3D"java_plain">&nbsp;getCustomers</=
span><span class=3D"java_separator">()</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToMany</span><span class=3D"java_separato=
r">(</span><span class=3D"java_plain">mappedBy</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_literal">&quot;customers&quot;<=
/span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Store</span><span class=3D"java=
_operator">&gt;</span><span class=3D"java_plain">&nbsp;getStores</span><=
span class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span></pre></div></div><br class=3D"example-break"/><p>A=
 <code class=3D"literal">Store_Customer</code> is used as the join table=
. The
      <code class=3D"literal">stores_id</code> column is a foreign key t=
o the
      <code class=3D"literal">Store</code> table. The <code class=3D"lit=
eral">customers_id</code>
      column is a foreign key to the <code class=3D"literal">Customer</c=
ode> table.</p><p>Using Hibernate mapping files you can map a bidirectio=
nal
      many-to-many association by mapping two many-to-many associations =
to the
      same database table and declaring one end as
      <span class=3D"emphasis"><em>inverse</em></span>. </p><div xmlns:r=
f=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>N=
ote</h2><p>You cannot select an indexed collection.</p></div><p><a class=
=3D"xref" href=3D"#example-many-to-many-mapping-file" title=3D"Example=C2=
=A07.27.=C2=A0Many to many association using Hibernate mapping files">Ex=
ample=C2=A07.27, =E2=80=9CMany to many association using Hibernate mappi=
ng files=E2=80=9D</a> shows a
      bidirectional many-to-many association that illustrates how each
      category can have many items and each item can be in many
      categories:</p><div class=3D"example"><a id=3D"example-many-to-man=
y-mapping-file"/><p class=3D"title"><b>Example=C2=A07.27.=C2=A0Many to m=
any association using Hibernate mapping files</b></p><div class=3D"examp=
le-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (h=
ttp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Category&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CATEGORY_ID=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">bag</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;items&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">table</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CATEGORY=
_ITEM&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;CATEGORY_ID&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;Item&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;ITEM_ID&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">bag</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Item&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;ITEM_ID&quo=
t;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--&nbsp;inverse&nbsp;end&nbsp;--&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">bag</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;categories&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">table</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CAT=
EGORY_ITEM&quot;</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">inverse</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;true&quot;</span><span =
class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;ITEM_ID&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;Category&quot;</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;CATEGORY_ID&quot;</span><span class=3D"xml_t=
ag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">bag</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Changes made only to t=
he inverse end of the association are
      <span class=3D"emphasis"><em>not</em></span> persisted. This means=
 that Hibernate has two
      representations in memory for every bidirectional association: one=
 link
      from A to B and another link from B to A. This is easier to unders=
tand
      if you think about the Java object model and how a many-to-many
      relationship in Javais created:</p><div class=3D"example"><a id=3D=
"d0e11516"/><p class=3D"title"><b>Example=C2=A07.28.=C2=A0Effect of inve=
rse vs. non-inverse side of many to many
        associations</b></p><div class=3D"example-contents"><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_plain">category</span><!-- <br/> =
--><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"j=
ava_plain">getItems</span><!-- <br/> --><span class=3D"java_separator">(=
).</span><!-- <br/> --><span class=3D"java_plain">add</span><!-- <br/> -=
-><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"ja=
va_plain">item</span><!-- <br/> --><span class=3D"java_separator">);</sp=
an><!-- <br/> --><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;=
</span><!-- <br/> --><span class=3D"java_type">The</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;category&nbsp;now&nbsp;</span><!-- <br/>=
 --><span class=3D"java_literal">&quot;knows&quot;</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;about&nbsp;the&nbsp;relationship</span>
<!--  --><br/><span class=3D"java_plain">item</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">getCategories</span><span =
class=3D"java_separator">().</span><span class=3D"java_plain">add</span>=
<span class=3D"java_separator">(</span><span class=3D"java_plain">catego=
ry</span><span class=3D"java_separator">);</span><span class=3D"java_pla=
in">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_opera=
tor">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">The</span><span class=3D"java_plain">&nbsp;item&nbsp;now&nbsp;</=
span><span class=3D"java_literal">&quot;knows&quot;</span><span class=3D=
"java_plain">&nbsp;about&nbsp;the&nbsp;relationship</span>
</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">persist</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">item</span><spa=
n class=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>The</span><span class=3D"java_plain">&nbsp;relationship&nbsp;won't&nbsp=
;be&nbsp;saved</span><span class=3D"java_operator">!</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">persist</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">category</span>=
<span class=3D"java_separator">);</span><span class=3D"java_plain">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">The</span><span clas=
s=3D"java_plain">&nbsp;relationship&nbsp;will&nbsp;be&nbsp;saved</span><=
/pre></div></div><br class=3D"example-break"/><p>The non-inverse side is=
 used to save the in-memory representation
      to the database.</p></div><div class=3D"section" lang=3D"en-US"><d=
iv class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"collection=
s-indexedbidirectional"/>7.3.3.=C2=A0Bidirectional associations with ind=
exed collections</h3></div></div></div><p>There are some additional cons=
iderations for bidirectional
      mappings with indexed collections (where one end is represented as=
 a
      <code class=3D"literal">&lt;list&gt;</code> or <code class=3D"lite=
ral">&lt;map&gt;</code>) when
      using Hibernate mapping files. If there is a property of the child=
 class
      that maps to the index column you can use
      <code class=3D"literal">inverse=3D"true"</code> on the collection =
mapping:</p><div class=3D"example"><a id=3D"d0e11537"/><p class=3D"title=
"><b>Example=C2=A07.29.=C2=A0Bidirectional association with indexed coll=
ection</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML :=
 generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Parent&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;parent_id&q=
uot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">map</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;children&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">inverse</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;parent_id&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">map-key</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Child&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">map</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xm=
l_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;child_id&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;parent&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">class</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pare=
nt&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;par=
ent_id&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>If there is no such pr=
operty on the child class, the association
      cannot be considered truly bidirectional. That is, there is inform=
ation
      available at one end of the association that is not available at t=
he
      other end. In this case, you cannot map the collection
      <code class=3D"literal">inverse=3D"true"</code>. Instead, you coul=
d use the following
      mapping:</p><div class=3D"example"><a id=3D"d0e11547"/><p class=3D=
"title"><b>Example=C2=A07.30.=C2=A0Bidirectional association with indexe=
d collection, but no index
        column</b></p><div class=3D"example-contents"><pre xmlns=3D"" xm=
lns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><=
!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) =
-->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Parent&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;parent_id&q=
uot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">map</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;children&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;parent_id&quot;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">map-key</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Child&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">map</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xm=
l_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;child_id&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;parent&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">class</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pare=
nt&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;par=
ent_id&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">insert</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Note that in this mapp=
ing, the collection-valued end of the
      association is responsible for updates to the foreign key.</p></di=
v><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><d=
iv><h3 class=3D"title"><a id=3D"collections-ternary"/>7.3.4.=C2=A0Ternar=
y associations</h3></div></div></div><p>There are three possible approac=
hes to mapping a ternary
      association. One approach is to use a <code class=3D"literal">Map<=
/code> with an
      association as its index:</p><div class=3D"example"><a id=3D"d0e11=
563"/><p class=3D"title"><b>Example=C2=A07.31.=C2=A0Ternary association =
mapping</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML :=
 generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain">@Entity</span><br />
<span class=3D"xml_plain">public&nbsp;class&nbsp;Company&nbsp;{</span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Id&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;int&nbsp;id;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@OneToMany&nbsp;//&nbsp;unid=
irectional</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@MapKeyJoinColumn(name=3D&qu=
ot;employee_id&quot;)</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;Map</span><span class=3D"xml=
_tag_symbols">&lt;</span><span class=3D"xml_tag_name">Employee</span><sp=
an class=3D"xml_plain">,&nbsp;</span><span class=3D"xml_attribute_name">=
Contract</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain">&nbsp;contracts;</span><br />
<span class=3D"xml_plain">}</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">//&nbsp;or</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
map</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;contracts&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;employer_id&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">not-null</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">map-key-many-to=
-many</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><sp=
an class=3D"xml_attribute_value">&quot;employee_id&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;Employee&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Contract&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>map</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>A second approach is t=
o remodel the association as an entity
      class. This is the most common approach. A final alternative is to=
 use
      composite elements, which will be discussed later.</p></div><div c=
lass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 c=
lass=3D"title"><a id=3D"collections-idbag"/>7.3.5.=C2=A0<code class=3D"l=
iteral">Using an &lt;idbag&gt;</code></h3></div></div></div><p>The major=
ity of the many-to-many associations and collections of
      values shown previously all map to tables with composite keys, eve=
n
      though it has been suggested that entities should have synthetic
      identifiers (surrogate keys). A pure association table does not se=
em to
      benefit much from a surrogate key, although a collection of compos=
ite
      values <span class=3D"emphasis"><em>might</em></span>. For this re=
ason Hibernate provides a
      feature that allows you to map many-to-many associations and colle=
ctions
      of values to a table with a surrogate key.</p><p>The <code class=3D=
"literal">&lt;idbag&gt;</code> element lets you map a
      <code class=3D"literal">List</code> (or <code class=3D"literal">Co=
llection</code>) with bag
      semantics. For example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated b=
y JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
idbag</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;lovers&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;LOVERS&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">collection-id</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;ID&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;lo=
ng&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;sequence&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">collection-id<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;PERSON1&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-many</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;PERSON2&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Person&quot;</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">fetch</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;join&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>idbag</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>An <code class=3D"literal">&lt;idbag&gt;</code> has a synthetic=
 id generator,
      just like an entity class. A different surrogate key is assigned t=
o each
      collection row. Hibernate does not, however, provide any mechanism=
 for
      discovering the surrogate key value of a particular row.</p><p>The=
 update performance of an <code class=3D"literal">&lt;idbag&gt;</code>
      supersedes a regular <code class=3D"literal">&lt;bag&gt;</code>. H=
ibernate can
      locate individual rows efficiently and update or delete them
      individually, similar to a list, map or set.</p><p>In the current =
implementation, the <code class=3D"literal">native</code>
      identifier generation strategy is not supported for
      <code class=3D"literal">&lt;idbag&gt;</code> collection identifier=
s.</p></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"collections-example"/>7.=
4.=C2=A0Collection examples</h2></div></div></div><p>This section covers=
 collection examples.</p><p>The following class has a collection of <cod=
e class=3D"literal">Child</code>
    instances:</p><div class=3D"example"><a id=3D"d0e11625"/><p class=3D=
"title"><b>Example=C2=A07.32.=C2=A0Example classes <code class=3D"classn=
ame">Parent</code> and
      <code class=3D"classname">Child</code></b></p><div class=3D"exampl=
e-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>public</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type"=
>Parent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">long</span><span class=3D"java_plai=
n">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Set</span><span class=3D"java_opera=
tor">&lt;</span><span class=3D"java_type">Child</span><span class=3D"jav=
a_operator">&gt;</span><span class=3D"java_plain">&nbsp;children</span><=
span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
getter</span><span class=3D"java_operator">/</span><span class=3D"java_p=
lain">setter</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Child</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">long</span><span class=3D"java_plain">&nb=
sp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">String</span><span class=3D"java_plain">&=
nbsp;name</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;getter=
</span><span class=3D"java_operator">/</span><span class=3D"java_plain">=
setter</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>If each child has, at most, one parent, t=
he most natural mapping is
    a one-to-many association:</p><div class=3D"example"><a id=3D"d0e116=
37"/><p class=3D"title"><b>Example=C2=A07.33.=C2=A0One to many unidirect=
ional <code class=3D"classname">Parent-Child</code>
      relationship using annotations</b></p><div class=3D"example-conten=
ts"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhi=
ghlight.dev.java.net) -->
<span class=3D"xml_plain">public&nbsp;class&nbsp;Parent&nbsp;{</span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@GeneratedValue</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp=
;id;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@OneToMany</span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Set</span=
><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name"=
>Child</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain">&nbsp;children;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">public&nbsp;class&nbsp;Child&nbsp;{</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@GeneratedValue</span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;id;</=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;nam=
e;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e11645"/><p class=3D"title"><b>Example=C2=A07.34.=C2=A0One to m=
any unidirectional <code class=3D"classname">Parent-Child</code>
      relationship using mapping files</b></p><div class=3D"example-cont=
ents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Parent&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;children&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pa=
rent_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Child&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>This maps to the follo=
wing table definitions:</p><div class=3D"example"><a id=3D"d0e11655"/><p=
 class=3D"title"><b>Example=C2=A07.35.=C2=A0Table definitions for unidir=
ectional
      <code class=3D"classname">Parent</code>-<code class=3D"classname">=
Child</code>
      relationship</b></p><div class=3D"example-contents"><pre xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XM=
L"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.n=
et) -->
<span class=3D"xml_plain">create&nbsp;table&nbsp;parent&nbsp;(&nbsp;id&n=
bsp;bigint&nbsp;not&nbsp;null&nbsp;primary&nbsp;key&nbsp;)</span><br />
<span class=3D"xml_plain">create&nbsp;table&nbsp;child&nbsp;(&nbsp;id&nb=
sp;bigint&nbsp;not&nbsp;null&nbsp;primary&nbsp;key,&nbsp;name&nbsp;varch=
ar(255),&nbsp;parent_id&nbsp;bigint&nbsp;)</span><br />
<span class=3D"xml_plain">alter&nbsp;table&nbsp;child&nbsp;add&nbsp;cons=
traint&nbsp;childfk0&nbsp;(parent_id)&nbsp;references&nbsp;parent</span>=
<br />
</pre></div></div><br class=3D"example-break"/><p>If the parent is <span=
 class=3D"emphasis"><em>required</em></span>, use a bidirectional
    one-to-many association:</p><div class=3D"example"><a id=3D"d0e11671=
"/><p class=3D"title"><b>Example=C2=A07.36.=C2=A0One to many bidirection=
al <code class=3D"classname">Parent-Child</code>
      relationship using annotations</b></p><div class=3D"example-conten=
ts"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhi=
ghlight.dev.java.net) -->
<span class=3D"xml_plain">public&nbsp;class&nbsp;Parent&nbsp;{</span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@GeneratedValue</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp=
;id;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@OneToMany(mappedBy=3D=
&quot;parent&quot;)</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Set</span=
><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name"=
>Child</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain">&nbsp;children;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">public&nbsp;class&nbsp;Child&nbsp;{</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@GeneratedValue</span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;id;</=
span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;nam=
e;</span><br />
<span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@ManyToOne</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;Parent&nbsp;par=
ent;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e11679"/><p class=3D"title"><b>Example=C2=A07.37.=C2=A0One to m=
any bidirectional <code class=3D"classname">Parent-Child</code>
      relationship using mapping files</b></p><div class=3D"example-cont=
ents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Parent&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;children&quot;</span><span c=
lass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inver=
se</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pa=
rent_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Child&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;parent&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;Parent&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pa=
rent_id&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">not-null</span><span class=3D"xml_tag_symbols">=3D<=
/span><span class=3D"xml_attribute_value">&quot;true&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Notice the <code class=
=3D"literal">NOT NULL</code> constraint:</p><div class=3D"example"><a id=
=3D"d0e11692"/><p class=3D"title"><b>Example=C2=A07.38.=C2=A0Table defin=
itions for bidirectional
      <code class=3D"classname">Parent</code>-<code class=3D"classname">=
Child</code>
      relationship</b></p><div class=3D"example-contents"><pre xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XM=
L"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.n=
et) -->
<span class=3D"xml_plain">create&nbsp;table&nbsp;parent&nbsp;(&nbsp;id&n=
bsp;bigint&nbsp;not&nbsp;null&nbsp;primary&nbsp;key&nbsp;)</span><br />
<span class=3D"xml_plain">create&nbsp;table&nbsp;child&nbsp;(&nbsp;id&nb=
sp;bigint&nbsp;not&nbsp;null</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;primary&nbsp;key,</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;name&nbsp;varchar(255),</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;parent_id&nbsp;bigint&nbsp;not&nbsp;null&nbsp;)</span><br />
<span class=3D"xml_plain">alter&nbsp;table&nbsp;child&nbsp;add&nbsp;cons=
traint&nbsp;childfk0&nbsp;(parent_id)&nbsp;references&nbsp;parent</span>=
<br />
</pre></div></div><br class=3D"example-break"/><p>Alternatively, if this=
 association must be unidirectional you can
    enforce the <code class=3D"literal">NOT NULL</code> constraint.</p><=
div class=3D"example"><a id=3D"d0e11708"/><p class=3D"title"><b>Example=C2=
=A07.39.=C2=A0Enforcing NOT NULL constraint in unidirectional relation u=
sing
      annotations</b></p><div class=3D"example-contents"><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML=
"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.ne=
t) -->
<span class=3D"xml_plain">public&nbsp;class&nbsp;Parent&nbsp;{</span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@GeneratedValue</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp=
;id;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@OneToMany(optional=3D=
false)</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Set</span=
><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name"=
>Child</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain">&nbsp;children;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">public&nbsp;class&nbsp;Child&nbsp;{</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@GeneratedValue</span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;id;</=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;nam=
e;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e11713"/><p class=3D"title"><b>Example=C2=A07.40.=C2=A0Enforcin=
g NOT NULL constraint in unidirectional relation using
      mapping files</b></p><div class=3D"example-contents"><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"X=
ML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.=
net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Parent&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;children&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pa=
rent_id&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">not-null</span><span class=3D"xml_tag_symbols">=3D<=
/span><span class=3D"xml_attribute_value">&quot;true&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Child&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>On the other hand, if =
a child has multiple parents, a many-to-many
    association is appropriate.</p><div class=3D"example"><a id=3D"d0e11=
720"/><p class=3D"title"><b>Example=C2=A07.41.=C2=A0Many to many <code c=
lass=3D"classname">Parent-Child</code> relationship
      using annotations</b></p><div class=3D"example-contents"><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.jav=
a.net) -->
<span class=3D"xml_plain">public&nbsp;class&nbsp;Parent&nbsp;{</span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@GeneratedValue</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp=
;id;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;@ManyToMany</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Set</span=
><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name"=
>Child</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain">&nbsp;children;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">public&nbsp;class&nbsp;Child&nbsp;{</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@GeneratedValue</span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;id;</=
span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;nam=
e;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;//&nbsp;getter/setter</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e11728"/><p class=3D"title"><b>Example=C2=A07.42.=C2=A0Many to =
many <code class=3D"classname">Parent-Child</code> relationship
      using mapping files</b></p><div class=3D"example-contents"><pre xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" clas=
s=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev=
.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Parent&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;children&quot;</span><span c=
lass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;childset&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pa=
rent_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-many</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;Child&quot;</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;child_id&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Table definitions:</p>=
<div class=3D"example"><a id=3D"d0e11738"/><p class=3D"title"><b>Example=
=C2=A07.43.=C2=A0Table definitions for many to many releationship</b></p=
><div class=3D"example-contents"><pre class=3D"programlisting">create ta=
ble parent ( id bigint not null primary key )
create table child ( id bigint not null primary key, name varchar(255) )=

create table childset ( parent_id bigint not null,
                        child_id bigint not null,
                        primary key ( parent_id, child_id ) )
alter table childset add constraint childsetfk0 (parent_id) references p=
arent
alter table childset add constraint childsetfk1 (child_id) references ch=
ild</pre></div></div><br class=3D"example-break"/><p>For more examples a=
nd a complete explanation of a parent/child
    relationship mapping, see <a class=3D"xref" href=3D"#example-parentc=
hild" title=3D"Chapter=C2=A024.=C2=A0Example: Parent/Child">Chapter=C2=A0=
24, <i>Example: Parent/Child</i></a> for more
    information. Even more complex association mappings are covered in t=
he
    next chapter.</p></div></div><div class=3D"chapter" lang=3D"en-US"><=
div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"associati=
ons"/>Chapter=C2=A08.=C2=A0Association Mappings</h2></div></div></div><d=
iv class=3D"toc"><dl><dt><span class=3D"section"><a href=3D"#assoc-intro=
">8.1. Introduction</a></span></dt><dt><span class=3D"section"><a href=3D=
"#assoc-unidirectional">8.2. Unidirectional associations</a></span></dt>=
<dd><dl><dt><span class=3D"section"><a href=3D"#assoc-unidirectional-m21=
">8.2.1. Many-to-one</a></span></dt><dt><span class=3D"section"><a href=3D=
"#assoc-unidirectional-121">8.2.2. One-to-one</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#assoc-unidirectional-12m">8.2.3. One-to-man=
y</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#assoc=
-unidirectional-join">8.3. Unidirectional associations with join tables<=
/a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#assoc-uni=
directional-join-12m">8.3.1. One-to-many</a></span></dt><dt><span class=3D=
"section"><a href=3D"#assoc-unidirectional-join-m21">8.3.2. Many-to-one<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#assoc-unidirectio=
nal-join-121">8.3.3. One-to-one</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#assoc-unidirectional-join-m2m">8.3.4. Many-to-many</a></s=
pan></dt></dl></dd><dt><span class=3D"section"><a href=3D"#assoc-bidirec=
tional">8.4. Bidirectional associations</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"#assoc-bidirectional-m21">8.4.1. one-to-ma=
ny / many-to-one</a></span></dt><dt><span class=3D"section"><a href=3D"#=
assoc-bidirectional-121">8.4.2. One-to-one</a></span></dt></dl></dd><dt>=
<span class=3D"section"><a href=3D"#assoc-bidirectional-join">8.5. Bidir=
ectional associations with join tables</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"#assoc-bidirectional-join-12m">8.5.1. one-t=
o-many / many-to-one</a></span></dt><dt><span class=3D"section"><a href=3D=
"#assoc-bidirectional-join-121">8.5.2. one to one</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"#assoc-bidirectional-join-m2m">8.5.3. Ma=
ny-to-many</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D=
"#assoc-complex">8.6. More complex association mappings</a></span></dt><=
/dl></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"=
><div><div><h2 class=3D"title"><a id=3D"assoc-intro"/>8.1.=C2=A0Introduc=
tion</h2></div></div></div><p>
            Association mappings are often the most difficult thing to i=
mplement correctly. In
            this section we examine some canonical cases one by one, sta=
rting
            with unidirectional mappings and then bidirectional cases.
            We will use <code class=3D"literal">Person</code> and <code =
class=3D"literal">Address</code> in all
            the examples.
        </p><p>
        	Associations will be classified by multiplicity and whether or =
not they map to an intervening
        	join table.
        </p><p>
        	Nullable foreign keys are not considered to be good practice in=
 traditional data
        	modelling, so our examples do not use nullable foreign keys. Th=
is is not a
        	requirement of Hibernate, and the mappings will work if you dro=
p the
        	nullability constraints.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"assoc-unidirectional"/>8=
.2.=C2=A0Unidirectional associations</h2></div></div></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"assoc-unidirectional-m21"/>8.2.1.=C2=A0Many-to-one</h3>=
</div></div></div><p>
            A <span class=3D"emphasis"><em>unidirectional many-to-one as=
sociation</em></span> is the most =

            common kind of unidirectional association.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;add=
ressId&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key, addressId bi=
gint not null )
create table Address ( addressId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-unidirectional-1=
21"/>8.2.2.=C2=A0One-to-one</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>unidirectional one-to-one ass=
ociation on a foreign key</em></span>
            is almost identical. The only difference is the column uniqu=
e constraint.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;add=
ressId&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">unique</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key, addressId bi=
gint not null unique )
create table Address ( addressId bigint not null primary key )
        </pre><p>
            A <span class=3D"emphasis"><em>unidirectional one-to-one ass=
ociation on a primary key</em></span>
            usually uses a special id generator In this example, however=
, we have reversed the direction
            of the association:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;foreign&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">param</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pr=
operty&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain">person</span><span class=3D"xml_tag_symbols">&lt;/</span=
><span class=3D"xml_tag_name">param</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">constrained</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-unidirectional-1=
2m"/>8.2.3.=C2=A0One-to-many</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>unidirectional one-to-many as=
sociation on a foreign key</em></span> =

            is an unusual case, and is not recommended.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;addresses&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Address&quot;</span=
><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table Address ( addressId bigint not null primary key, personId b=
igint not null )
        </pre><p>
          You should instead use a join table for this kind of associati=
on.
        </p></div></div><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"assoc-unidirection=
al-join"/>8.3.=C2=A0Unidirectional associations with join tables</h2></d=
iv></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"title=
page"><div><div><h3 class=3D"title"><a id=3D"assoc-unidirectional-join-1=
2m"/>8.3.1.=C2=A0One-to-many</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>unidirectional one-to-many as=
sociation on a join table</em></span> =

            is the preferred option. Specifying <code class=3D"literal">=
unique=3D"true"</code>,
            changes the multiplicity from many-to-many to one-to-many.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;addresses&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pers=
onAddress&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&quot;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Address&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId not null, addressId bigint not nul=
l primary key )
create table Address ( addressId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-unidirectional-j=
oin-m21"/>8.3.2.=C2=A0Many-to-one</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>unidirectional many-to-one as=
sociation on a join table</em></span> =

            is common when the association is optional. For example:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">join</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ta=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;PersonAddress&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">optional</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">uni=
que</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;address&quot;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;addressId&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">join</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addre=
ssId bigint not null )
create table Address ( addressId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-unidirectional-j=
oin-121"/>8.3.3.=C2=A0One-to-one</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>unidirectional one-to-one ass=
ociation on a join table</em></span> is possible, =

   	but extremely unusual.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">join</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ta=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;PersonAddress&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">optional</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;address&quot;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;addressId&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">join</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addre=
ssId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-unidirectional-j=
oin-m2m"/>8.3.4.=C2=A0Many-to-many</h3></div></div></div><p>
            Finally, here is an example of a <span class=3D"emphasis"><e=
m>unidirectional many-to-many association</em></span>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;addresses&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pers=
onAddress&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&quot;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Address&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint =
not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        </pre></div></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"assoc-bidirectio=
nal"/>8.4.=C2=A0Bidirectional associations</h2></div></div></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 cl=
ass=3D"title"><a id=3D"assoc-bidirectional-m21"/>8.4.1.=C2=A0one-to-many=
 / many-to-one</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>bidirectional many-to-one ass=
ociation</em></span> is the
            most common kind of association. The following example illus=
trates the standard parent/child
            relationship.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;add=
ressId&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;people&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">inverse</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;addressId&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Person&quot;</span>=
<span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key, addressId bi=
gint not null )
create table Address ( addressId bigint not null primary key )
        </pre><p>
            If you use a <code class=3D"literal">List</code>, or other i=
ndexed collection,
            set the <code class=3D"literal">key</code> column of the for=
eign key to <code class=3D"literal">not null</code>.
            Hibernate will manage the association from the collections s=
ide to maintain the index
            of each element, making the other side virtually inverse by =
setting
            <code class=3D"literal">update=3D"false"</code> and <code cl=
ass=3D"literal">insert=3D"false"</code>:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;address&quot;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&quot;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_attribute_name">not-null</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_attribute_name">insert</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;false&quot;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_attribute_name">update</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;false&quot;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">list</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;people&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;addressId&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">not-null</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">lis=
t-index</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;peopleIdx&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one=
-to-many</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D=
"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">list</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
                If the underlying foreign key column is <code class=3D"l=
iteral">NOT NULL</code>, it =

		is important that you define <code class=3D"literal">not-null=3D"true"=
</code> on the
                <code class=3D"literal">&lt;key&gt;</code> element of th=
e collection mapping.
                Do not only
                declare <code class=3D"literal">not-null=3D"true"</code>=
 on a possible nested
                <code class=3D"literal">&lt;column&gt;</code> element, b=
ut on the <code class=3D"literal">&lt;key&gt;</code>
                element.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-bidirectional-1=
21"/>8.4.2.=C2=A0One-to-one</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>bidirectional one-to-one asso=
ciation on a foreign key</em></span>
            is common:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;add=
ressId&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">unique</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_ta=
g_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">na=
me</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;person&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">property-ref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;address&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key, addressId bi=
gint not null unique )
create table Address ( addressId bigint not null primary key )
        </pre><p>
            A <span class=3D"emphasis"><em>bidirectional one-to-one asso=
ciation on a primary key</em></span>
            uses the special id generator:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;foreign&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">param</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pr=
operty&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain">person</span><span class=3D"xml_tag_symbols">&lt;/</span=
><span class=3D"xml_tag_name">param</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">generator</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">constrained</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        </pre></div></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"assoc-bidirectio=
nal-join"/>8.5.=C2=A0Bidirectional associations with join tables</h2></d=
iv></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"title=
page"><div><div><h3 class=3D"title"><a id=3D"assoc-bidirectional-join-12=
m"/>8.5.1.=C2=A0one-to-many / many-to-one</h3></div></div></div><p>
            The following is an example of a <span class=3D"emphasis"><e=
m>bidirectional one-to-many association on a join table</em></span>.
            The <code class=3D"literal">inverse=3D"true"</code> can go o=
n either end of the
            association, on the collection, or on the join.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;addresses&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pers=
onAddress&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&quot;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Address&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">join</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ta=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;PersonAddress&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">inverse</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">optional</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;addressId&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;person&quot;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;personId&quot;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">join</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint =
not null primary key )
create table Address ( addressId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-bidirectional-jo=
in-121"/>8.5.2.=C2=A0one to one</h3></div></div></div><p>
            A <span class=3D"emphasis"><em>bidirectional one-to-one asso=
ciation on a join table</em></span> is possible,
            but extremely unusual.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">join</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ta=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;PersonAddress&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">optional</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;address&quot;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;addressId&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">join</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">join</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ta=
ble</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;PersonAddress&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">optional</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">inverse</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;addressId&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;person&quot;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;personId&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">join</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addre=
ssId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        </pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h3 class=3D"title"><a id=3D"assoc-bidirectional-jo=
in-m2m"/>8.5.3.=C2=A0Many-to-many</h3></div></div></div><p>
            Here is an example of a <span class=3D"emphasis"><em>bidirec=
tional many-to-many association</em></span>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;personId&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;addresses&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Pers=
onAddress&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;personId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&quot;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Address&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addressId&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;people&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">inverse</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&=
quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">table</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;PersonAddress&quot;</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;addressId&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;personId&quot;</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Person&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre class=3D"programlisting">
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint =
not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        </pre></div></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"assoc-complex"/>=
8.6.=C2=A0More complex association mappings</h2></div></div></div><p>
            More complex association joins are <span class=3D"emphasis">=
<em>extremely</em></span> rare. =

            Hibernate handles more complex situations by using
            SQL fragments embedded in the mapping document. For example,=
 if a table
            with historical account information data defines =

            <code class=3D"literal">accountNumber</code>, <code class=3D=
"literal">effectiveEndDate</code> =

            and <code class=3D"literal">effectiveStartDate</code>columns=
, it would be mapped as follows:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
properties</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;currentAccountKey&quot;</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;accountNumber&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;string&quot;</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">not-null</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;currentAccount&quot;</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;boolean&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">case&nbsp;when&nbsp;effectiveEndDate&nbsp;is&nbsp;nu=
ll&nbsp;then&nbsp;1&nbsp;else&nbsp;0&nbsp;end</span><span class=3D"xml_t=
ag_symbols">&lt;/</span><span class=3D"xml_tag_name">formula</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">property</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>properties</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;effectiveEndDate&quot;</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">t=
ype</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;date&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;effectiveStateDate&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>type</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;date&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
            You can then map an association to the <span class=3D"emphas=
is"><em>current</em></span> instance, =

            the one with null <code class=3D"literal">effectiveEndDate</=
code>, by using:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;currentAccountInfo&quot;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">property-ref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;currentAccountKey&quot;</span><span class=3D"xml_plain"></span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">class</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Acco=
untInfo&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;accountNumber&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">formula</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">'1'<=
/span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag=
_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
</pre><p>
            In a more complex example, imagine that the association betw=
een =

            <code class=3D"literal">Employee</code> and <code class=3D"l=
iteral">Organization</code> is maintained
            in an <code class=3D"literal">Employment</code> table full o=
f historical employment data.
            An association to the employee's <span class=3D"emphasis"><e=
m>most recent</em></span> employer,
            the one with the most recent <code class=3D"literal">startDa=
te</code>, could be mapped in the following way:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
join</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;employeeId&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subselect</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;select&nbsp;employeeId,&nbsp;orgId&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;from&nbsp;Employments&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;group&nbsp;by&nbsp;orgId&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;having&nbsp;startDate&nbsp;=3D&nbsp;max(startDate)</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subselect</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;mostRecentEmployer&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Organization&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;orgId&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>join</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
</pre><p>
            This functionality allows a degree of creativity and flexibi=
lity, but it is more practical =

            to handle these kinds of cases using HQL or a criteria query=
.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"components"/>Chapt=
er=C2=A09.=C2=A0Component Mapping</h2></div></div></div><div class=3D"to=
c"><dl><dt><span class=3D"section"><a href=3D"#components-dependentobjec=
ts">9.1. Dependent objects</a></span></dt><dt><span class=3D"section"><a=
 href=3D"#components-incollections">9.2. Collections of dependent object=
s</a></span></dt><dt><span class=3D"section"><a href=3D"#components-asma=
pindex">9.3. Components as Map indices</a></span></dt><dt><span class=3D=
"section"><a href=3D"#components-compositeid">9.4. Components as composi=
te identifiers</a></span></dt><dt><span class=3D"section"><a href=3D"#co=
mponents-dynamic">9.5. Dynamic components</a></span></dt></dl></div><p>
        The notion of a <span class=3D"emphasis"><em>component</em></spa=
n> is re-used in several different contexts and purposes
        throughout Hibernate.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"components-dependentobjects"/>9.1.=
=C2=A0Dependent objects</h2></div></div></div><p>
            A component is a contained object that is persisted as a val=
ue type and not an entity
            reference. The term "component" refers to the object-oriente=
d notion of composition
             and not to architecture-level components. For example, you =
can model a person like this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>public</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type"=
>Person</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;java</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">util</span><span class=3D"java_separator">.</span><span class=3D=
"java_type">Date</span><span class=3D"java_plain">&nbsp;birthday</span><=
span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Name</span><span class=3D"java_plai=
n">&nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;key</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getKey</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;key</span><span class=3D"java_separator">;</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">void</span><span class=3D"java_plai=
n">&nbsp;setKey</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;key</span><=
span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">key</span><spa=
n class=3D"java_operator">=3D</span><span class=3D"java_plain">key</span=
><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;java</span><span class=3D"java_separator">.</span><span class=3D"java=
_plain">util</span><span class=3D"java_separator">.</span><span class=3D=
"java_type">Date</span><span class=3D"java_plain">&nbsp;getBirthday</spa=
n><span class=3D"java_separator">()</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;birthday</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setBirthday</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">java</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">util</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_type">Date</span><span class=3D"java_plain">&nbsp=
;birthday</span><span class=3D"java_separator">)</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">birthday&nbsp;=
</span><span class=3D"java_operator">=3D</span><span class=3D"java_plain=
">&nbsp;birthday</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Name</span><span class=3D"java_plain=
">&nbsp;getName</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;name</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setName</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">Name</span><span class=3D"java_plain">&nbsp;name</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">name&nbsp;</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&n=
bsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">......</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">......</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_keyword">public</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"=
java_keyword">class</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;</span><!-- <br/> --><span class=3D"java_type">Name</span><!-- <br/> --=
><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">char</span><span class=3D"java_plain">&nbsp;in=
itial</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;=
first</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;=
last</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getFirst</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;first</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tFirst</span><span class=3D"java_separator">(</span><span class=3D"java_=
type">String</span><span class=3D"java_plain">&nbsp;first</span><span cl=
ass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">first&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;first</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getLast</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;last</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tLast</span><span class=3D"java_separator">(</span><span class=3D"java_t=
ype">String</span><span class=3D"java_plain">&nbsp;last</span><span clas=
s=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">last&nbsp;</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&n=
bsp;last</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">char</span><span class=3D"java_plain=
">&nbsp;getInitial</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;initial</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">void</span><span class=3D"java_plain">&nbsp;se=
tInitial</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_type">char</span><span class=3D"java_plain">&nbsp;initial</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">initial&nbsp;<=
/span><span class=3D"java_operator">=3D</span><span class=3D"java_plain"=
>&nbsp;initial</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
            Now <code class=3D"literal">Name</code> can be persisted as =
a component of
            <code class=3D"literal">Person</code>. <code class=3D"litera=
l">Name</code> defines getter
            and setter methods for its persistent properties, but it doe=
s not need to declare
            any interfaces or identifier properties.
        </p><p>
            Our Hibernate mapping would look like this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;eg.Person&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;person&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;Key&quot;</span><span class=3D"xml_plain">&nbsp;</spa=
n><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag=
_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pid&quot;<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;string&quot;</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;uuid&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;birthday&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;da=
te&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">component</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;Name&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.=
Name&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_comment">&lt;!--&nbsp;class&=
nbsp;attribute&nbsp;optional&nbsp;--&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;initial&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;first&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;last&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">component</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            The person table would have the columns <code class=3D"liter=
al">pid</code>,
            <code class=3D"literal">birthday</code>,
            <code class=3D"literal">initial</code>,
            <code class=3D"literal">first</code> and
            <code class=3D"literal">last</code>.
        </p><p>
            Like value types, components do not support shared reference=
s. In other words, two
            persons could have the same name, but the two person objects=
 would contain two independent
            name objects that were only "the same" by value. The null va=
lue semantics of a component are
            <span class=3D"emphasis"><em>ad hoc</em></span>. When reload=
ing the containing object, Hibernate will assume
            that if all component columns are null, then the entire comp=
onent is null. This is suitable for most purposes.
        </p><p>
            The properties of a component can be of any Hibernate type (=
collections, many-to-one
            associations, other components, etc). Nested components shou=
ld <span class=3D"emphasis"><em>not</em></span>
            be considered an exotic usage. Hibernate is intended to supp=
ort a fine-grained
            object model.
        </p><p>
            The <code class=3D"literal">&lt;component&gt;</code> element=
 allows a <code class=3D"literal">&lt;parent&gt;</code>
            subelement that maps a property of the component class as a =
reference back to the
            containing entity.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;eg.Person&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;person&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;Key&quot;</span><span class=3D"xml_plain">&nbsp;</spa=
n><span class=3D"xml_attribute_name">column</span><span class=3D"xml_tag=
_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;pid&quot;<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;string&quot;</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;uuid&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;birthday&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;da=
te&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">component</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;Name&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.=
Name&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">unique</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;true&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">parent</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;namedPerson&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_comment">&lt;!--&nbsp;reference&nbsp;back&n=
bsp;to&nbsp;the&nbsp;Person&nbsp;--&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;initial&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;first&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;last&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">component</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"components-incollections"/>9.2=
.=C2=A0Collections of dependent objects</h2></div></div></div><p>
            Collections of components are supported (e.g. an array of ty=
pe
            <code class=3D"literal">Name</code>). Declare your component=
 collection by
            replacing the <code class=3D"literal">&lt;element&gt;</code>=
 tag with a
            <code class=3D"literal">&lt;composite-element&gt;</code> tag=
:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;someNames&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;some_names&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">lazy</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">/&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-eleme=
nt</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attri=
bute_name">class</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;eg.Name&quot;</span><span class=3D"xm=
l_tag_symbols">&gt;</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_comment">&lt;!--&nbsp;class&nbsp;attribute&nbsp;required&nbs=
p;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;initial&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;first&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;last&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-elem=
ent</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"important"><h2>Important</h2><p>
            If you define a <code class=3D"literal">Set</code> of compos=
ite elements, it is
            important to implement <code class=3D"literal">equals()</cod=
e> and
            <code class=3D"literal">hashCode()</code> correctly.
        </p></div><p>
            Composite elements can contain components but not collection=
s. If your
            composite element contains
            components, use the <code class=3D"literal">&lt;nested-compo=
site-element&gt;</code>
            tag. This case is a collection of components which
            themselves have components. You may want to consider if
            a one-to-many association is more appropriate. Remodel the
            composite element as an entity, but be aware that even thoug=
h the Java model
            is the same, the relational model and persistence semantics =
are still
            slightly different.
        </p><p>
            A composite element mapping does not support null-able prope=
rties
            if you are using a <code class=3D"literal">&lt;set&gt;</code=
>. There is no separate primary key column
	    in the composite element table. Hibernate
            uses each column's value to identify a record when deleting =
objects,
            which is not possible with null values. You have to either u=
se only
            not-null properties in a composite-element or choose a
            <code class=3D"literal">&lt;list&gt;</code>, <code class=3D"=
literal">&lt;map&gt;</code>,
            <code class=3D"literal">&lt;bag&gt;</code> or <code class=3D=
"literal">&lt;idbag&gt;</code>.
        </p><p>
            A special case of a composite element is a composite element=
 with a nested
            <code class=3D"literal">&lt;many-to-one&gt;</code> element. =
This mapping allows
            you to map extra columns of a many-to-many association table=
 to the
            composite element class. The following is a many-to-many ass=
ociation
            from <code class=3D"literal">Order</code> to <code class=3D"=
literal">Item</code>, where
            <code class=3D"literal">purchaseDate</code>, <code class=3D"=
literal">price</code> and
            <code class=3D"literal">quantity</code> are properties of th=
e association:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;eg.Order&quot;</span><span class=3D=
"xml_plain">&nbsp;....&nbsp;</span><span class=3D"xml_tag_symbols">&gt;<=
/span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;purchasedItems&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">table</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;purchase_items&quot;</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">lazy</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;order_id&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">composite-element</span><span class=3D"xml_plain">&nbsp;</span>=
<span class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.Purchase&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;purchaseDate&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;price&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;quantity&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-one</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;item&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;eg.Item&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">&nbsp;</s=
pan><span class=3D"xml_comment">&lt;!--&nbsp;class&nbsp;attribute&nbsp;i=
s&nbsp;optional&nbsp;--&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">composite-element</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            There cannot be a reference to the purchase on the other sid=
e for
            bidirectional association navigation. Components are value t=
ypes and
            do not allow shared references. A single <code class=3D"lite=
ral">Purchase</code> can be in the
            set of an <code class=3D"literal">Order</code>, but it canno=
t be referenced by the <code class=3D"literal">Item</code>
            at the same time.
        </p><p>Even ternary (or quaternary, etc) associations are possib=
le:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendere=
rFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://=
jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;eg.Order&quot;</span><span class=3D=
"xml_plain">&nbsp;....&nbsp;</span><span class=3D"xml_tag_symbols">&gt;<=
/span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;purchasedItems&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">table</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;purchase_items&quot;</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">lazy</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;order_id&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">composite-element</span><span class=3D"xml_plain">&nbsp;</span>=
<span class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.OrderLine&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-one</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;purchaseDetails&nbsp;class=3D&quot;</span><span class=3D"xml_attribu=
te_name">eg.Purchase</span><span class=3D"xml_attribute_value">&quot;/</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span class=3D"xml_attribute_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;item&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;eg.Item&quot;</span><span class=3D"xml_tag_symbols">/&gt;</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">composite-element</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Composite elements can appear in queries using the same synt=
ax as
            associations to other entities.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"components-asmapindex"/>=
9.3.=C2=A0Components as Map indices</h2></div></div></div><p>
            The <code class=3D"literal">&lt;composite-map-key&gt;</code>=
 element allows you to map a
            component class as the key of a <code class=3D"literal">Map<=
/code>. Ensure that you override
            <code class=3D"literal">hashCode()</code> and <code class=3D=
"literal">equals()</code> correctly on
            the component class.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"components-compositeid"/=
>9.4.=C2=A0Components as composite identifiers</h2></div></div></div><p>=

            You can use a component as an identifier of an entity class.=
 Your component
            class must satisfy certain requirements:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    It must implement <code class=3D"literal">java.io.Se=
rializable</code>.
                </p></li><li><p>
                    It must re-implement <code class=3D"literal">equals(=
)</code> and
                    <code class=3D"literal">hashCode()</code> consistent=
ly with the database's
                    notion of composite key equality.
                </p></li></ul></div><div xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>
            In Hibernate3, although the second requirement is not an abs=
olutely hard
            requirement of Hibernate, it is recommended.
        </p></div><p>
            You cannot use an <code class=3D"literal">IdentifierGenerato=
r</code> to generate composite keys.
            Instead the application must assign its own identifiers.
        </p><p>
            Use the <code class=3D"literal">&lt;composite-id&gt;</code> =
tag, with nested
            <code class=3D"literal">&lt;key-property&gt;</code> elements=
, in place of the usual
            <code class=3D"literal">&lt;id&gt;</code> declaration. For e=
xample, the
            <code class=3D"literal">OrderLine</code> class has a primary=
 key that depends upon
            the (composite) primary key of <code class=3D"literal">Order=
</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;OrderLine&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Ord=
erLineId&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;lineId&quot;</span>=
<span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;orderId&quot;</span=
><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;customerId&quot;</s=
pan><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;order&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">class</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Or=
der&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inse=
rt</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">update</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;false&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;orderId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;customerId&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">many-to-one</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Any foreign keys referencing the <code class=3D"literal">Ord=
erLine</code> table are now
            composite. Declare this in your mappings for other classes. =
An association
            to <code class=3D"literal">OrderLine</code> is mapped like t=
his:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;orderLine&quot;</span><span c=
lass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;OrderLine&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_comment">&lt;!--&nbsp;the&nbsp;&quot;class&quot;&nbsp=
;attribute&nbsp;is&nbsp;optional,&nbsp;as&nbsp;usual&nbsp;--&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;lineId&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;orderId&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;customerId&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>many-to-one</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"tip"><h2>Tip</h2><p>
                The <code class=3D"literal">column</code> element is an =
alternative to the
                <code class=3D"literal">column</code> attribute everywhe=
re.  Using the
                <code class=3D"literal">column</code> element just gives=
 more declaration
                options, which are mostly useful when utilizing
                <code class=3D"literal">hbm2ddl</code>
            </p></div><p>
            A <code class=3D"literal">many-to-many</code> association to=
 <code class=3D"literal">OrderLine</code> also
            uses the composite foreign key:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;undeliveredOrderLines&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;warehouseId&quot;</span><span class=3D=
"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-many</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;OrderLine&quot;</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;lineId&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;orderId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;customerId&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">many-to-many</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
            The collection of <code class=3D"literal">OrderLine</code>s =
in <code class=3D"literal">Order</code> would
            use:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;orderLines&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse</spa=
n><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute=
_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;orderId&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;customerId&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">key</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;OrderLine&quot;</span><span class=3D"xml_tag=
_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
            The <code class=3D"literal">&lt;one-to-many&gt;</code> eleme=
nt declares no columns.
        </p><p>
            If <code class=3D"literal">OrderLine</code> itself owns a co=
llection, it also has a composite
            foreign key.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;OrderLine&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">list</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">na=
me</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;deliveryAttempts&quot;</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain">&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_comment">&lt=
;!--&nbsp;a&nbsp;collection&nbsp;inherits&nbsp;the&nbsp;composite&nbsp;k=
ey&nbsp;type&nbsp;--&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;li=
neId&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
derId&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;cu=
stomerId&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">list-index</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;attemptId&quot;</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">base</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;1&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">composite-element</span><span class=3D"xml_plain">&nbsp;</span>=
<span class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;DeliveryAttem=
pt&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">composite-element</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"components-dynamic"/>9.5.=C2=A0=
Dynamic components</h2></div></div></div><p>
            You can also map a property of type <code class=3D"literal">=
Map</code>:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
dynamic-component</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;userAttributes&quot;</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;foo&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">column</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;FOO&=
quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;string&quot;</span><span class=3D"x=
ml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;bar&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">column</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;BAR&=
quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;integer&quot;</span><span class=3D"=
xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;baz&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">class</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Ba=
z&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;BAZ_ID&quot;</span><span class=3D=
"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>dynamic-component</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
            The semantics of a <code class=3D"literal">&lt;dynamic-compo=
nent&gt;</code> mapping are identical
            to <code class=3D"literal">&lt;component&gt;</code>. The adv=
antage of this kind of mapping is
            the ability to determine the actual properties of the bean a=
t deployment time just
            by editing the mapping document. Runtime manipulation of the=
 mapping document is
            also possible, using a DOM parser. You can also access, and =
change, Hibernate's
            configuration-time metamodel via the <code class=3D"literal"=
>Configuration</code> object.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"inheritance"/>Chap=
ter=C2=A010.=C2=A0Inheritance mapping</h2></div></div></div><div class=3D=
"toc"><dl><dt><span class=3D"section"><a href=3D"#inheritance-strategies=
">10.1. The three strategies</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"#inheritance-tableperclass">10.1.1. Table per class h=
ierarchy</a></span></dt><dt><span class=3D"section"><a href=3D"#inherita=
nce-tablepersubclass">10.1.2. Table per subclass</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"#inheritance-tablepersubclass-discriminat=
or">10.1.3. Table per subclass: using a discriminator</a></span></dt><dt=
><span class=3D"section"><a href=3D"#inheritance-mixing-tableperclass-ta=
blepersubclass">10.1.4. Mixing table per class hierarchy with table per =
subclass</a></span></dt><dt><span class=3D"section"><a href=3D"#inherita=
nce-tableperconcrete">10.1.5. Table per concrete class</a></span></dt><d=
t><span class=3D"section"><a href=3D"#inheritance-tableperconcreate-poly=
morphism">10.1.6. Table per concrete class using implicit polymorphism</=
a></span></dt><dt><span class=3D"section"><a href=3D"#inheritance-mixing=
polymorphism">10.1.7. Mixing implicit polymorphism with other inheritanc=
e mappings</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D=
"#inheritance-limitations">10.2. Limitations</a></span></dt></dl></div><=
div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div>=
<h2 class=3D"title"><a id=3D"inheritance-strategies"/>10.1.=C2=A0The thr=
ee strategies</h2></div></div></div><p>
            Hibernate supports the three basic inheritance mapping strat=
egies:
        </p><div class=3D"itemizedlist"><ul><li><p>
            table per class hierarchy
        </p></li><li><p>
            table per subclass
        </p></li><li><p>
            table per concrete class
        </p></li></ul></div><p>
            In addition, Hibernate supports a fourth, slightly different=
 kind of =

            polymorphism:
        </p><div class=3D"itemizedlist"><ul><li><p>
            implicit polymorphism
        </p></li></ul></div><p>
            It is possible to use different mapping strategies for diffe=
rent
            branches of the same inheritance hierarchy. You can then mak=
e use of implicit
            polymorphism to achieve polymorphism across the whole hierar=
chy. However, =

            Hibernate does not support mixing <code class=3D"literal">&l=
t;subclass&gt;</code>,
            <code class=3D"literal">&lt;joined-subclass&gt;</code> and =

            <code class=3D"literal">&lt;union-subclass&gt;</code> mappin=
gs under the same root
            <code class=3D"literal">&lt;class&gt;</code> element. It is =
possible to mix together
            the table per hierarchy and table per subclass strategies un=
der the
            the same <code class=3D"literal">&lt;class&gt;</code> elemen=
t, by combining the =

            <code class=3D"literal">&lt;subclass&gt;</code> and <code cl=
ass=3D"literal">&lt;join&gt;</code>
            elements (see below for an example).
        </p><p>
             It is possible to define <code class=3D"literal">subclass</=
code>, <code class=3D"literal">union-subclass</code>,
             and <code class=3D"literal">joined-subclass</code> mappings=
 in separate mapping documents directly beneath
             <code class=3D"literal">hibernate-mapping</code>. This allo=
ws you to extend a class hierarchy by adding
             a new mapping file. You must specify an <code class=3D"lite=
ral">extends</code> attribute in the subclass mapping,
             naming a previously mapped superclass. Previously this feat=
ure made the ordering of the mapping
             documents important. Since Hibernate3, the ordering of mapp=
ing files is irrelevant when using the
             extends keyword. The ordering inside a single mapping file =
still needs to be defined as superclasses
             before subclasses.
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (h=
ttp://jhighlight.dev.java.net) -->
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_tag_symbols">&=
lt;</span><span class=3D"xml_tag_name">hibernate-mapping</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span cla=
ss=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;DomesticCat&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">extends</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;Cat&quot;</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">discriminator-value</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;D&quo=
t;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</span><span cl=
ass=3D"xml_tag_name">property</span><span class=3D"xml_plain">&nbsp;</sp=
an><span class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_=
symbols">=3D</span><span class=3D"xml_attribute_value">&quot;name&quot;<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;string&quot;</span><span class=3D"xml_tag=
_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span cla=
ss=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_tag_symbols">&=
lt;/</span><span class=3D"xml_tag_name">hibernate-mapping</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br =
/>
</pre><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><di=
v><div><h3 class=3D"title"><a id=3D"inheritance-tableperclass"/>10.1.1.=C2=
=A0Table per class hierarchy</h3></div></div></div><p>
            Suppose we have an interface <code class=3D"literal">Payment=
</code> with the implementors
            <code class=3D"literal">CreditCardPayment</code>, <code clas=
s=3D"literal">CashPayment</code>,
            and <code class=3D"literal">ChequePayment</code>. The table =
per hierarchy mapping would
            display in the following way:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Payment&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">discriminator</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;PAYMENT_TYPE&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;AM=
OUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;CreditCardPayment&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-v=
alue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;CREDIT&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;creditCardType&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CCTYPE&quot;</span><span class=3D"xml_tag=
_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;CashPayment&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;CASH&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;ChequePayment&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;CHEQUE&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Exactly one table is required. There is a limitation of this=
 mapping =

            strategy: columns declared by the subclasses, such as <code =
class=3D"literal">CCTYPE</code>, =

            cannot have <code class=3D"literal">NOT NULL</code> constrai=
nts.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h3 class=3D"title"><a id=3D"inheritance-tablepersubc=
lass"/>10.1.2.=C2=A0Table per subclass</h3></div></div></div><p>
            A table per subclass mapping looks like this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Payment&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;AM=
OUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">joined-subclass=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;CreditCardPayment&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;CREDIT_PAYMENT&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;creditCardType&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CCTYPE&quot;</span><span class=3D"xml_tag=
_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">joined-subclas=
s</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">joined-subclass=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;CashPayment&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;CASH_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;<=
/span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">joined-subclas=
s</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">joined-subclass=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;ChequePayment&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;CHEQUE_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">joined-subclas=
s</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Four tables are required. The three subclass tables have pri=
mary
            key associations to the superclass table so the relational m=
odel
            is actually a one-to-one association.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h3 class=3D"title"><a id=3D"inheritance-tablepersubc=
lass-discriminator"/>10.1.3.=C2=A0Table per subclass: using a discrimina=
tor</h3></div></div></div><p>
            Hibernate's implementation of table per subclass
            does not require a discriminator column. Other object/relati=
onal mappers use a
            different implementation of table per subclass that requires=
 a type
            discriminator column in the superclass table. The approach t=
aken by
            Hibernate is much more difficult to implement, but arguably =
more
            correct from a relational point of view. If you want to use
            a discriminator column with the table per subclass strategy,=
 you
            can combine the use of <code class=3D"literal">&lt;subclass&=
gt;</code> and =

            <code class=3D"literal">&lt;join&gt;</code>, as follows:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Payment&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">discriminator</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;PAYMENT_TYPE&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;AM=
OUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;CreditCardPayment&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-v=
alue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;CREDIT&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">join</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">table</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;CREDIT_PAYMENT&quot;</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PA=
YMENT_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;creditCardType&quot;</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;CCTYPE&quot;</spa=
n><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">join</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;CashPayment&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;CASH&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">join</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">table</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;CASH_PAYMENT&quot;</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PA=
YMENT_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">join</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;ChequePayment&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;CHEQUE&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">join</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">table</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;CHEQUE_PAYMENT&quot;</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">fetch</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;select&quot;</span><span class=3D"xml_tag_symb=
ols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;PA=
YMENT_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">join</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            The optional <code class=3D"literal">fetch=3D"select"</code>=
 declaration tells Hibernate =

            not to fetch the <code class=3D"literal">ChequePayment</code=
> subclass data using an
            outer join when querying the superclass.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h3 class=3D"title"><a id=3D"inheritance-mixing-table=
perclass-tablepersubclass"/>10.1.4.=C2=A0Mixing table per class hierarch=
y with table per subclass</h3></div></div></div><p>
            You can even mix the table per hierarchy and table per subcl=
ass strategies
            using the following approach:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Payment&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">discriminator</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;PAYMENT_TYPE&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;AM=
OUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;CreditCardPayment&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-v=
alue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;CREDIT&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">join</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">table</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;CREDIT_PAYMENT&quot;</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;creditCardType&quot;</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbol=
s">=3D</span><span class=3D"xml_attribute_value">&quot;CCTYPE&quot;</spa=
n><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">join</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;CashPayment&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;CASH&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;ChequePayment&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;CHEQUE&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            For any of these mapping strategies, a polymorphic associati=
on to the root
            <code class=3D"literal">Payment</code> class is mapped using=
 =

            <code class=3D"literal">&lt;many-to-one&gt;</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;payment&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column<=
/span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attri=
bute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">class</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Payme=
nt&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"inheritance-tableperconcrete"/=
>10.1.5.=C2=A0Table per concrete class</h3></div></div></div><p>
            There are two ways we can map the table per concrete class
            strategy. First, you can use <code class=3D"literal">&lt;uni=
on-subclass&gt;</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Payment&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;sequence&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;AM=
OUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">union-subclass<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CreditCardPayment&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;CREDIT_PAYMENT&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;creditCardType&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CCTYPE&quot;</span><span class=3D"xml_tag=
_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">union-subclass=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">union-subclass<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CashPayment&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;CASH_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">union-subclass=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">union-subclass<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;ChequePayment&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;CHEQUE_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">union-subclass=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Three tables are involved for the subclasses. Each table def=
ines columns for
            all properties of the class, including inherited properties.=

        </p><p>
            The limitation of this approach is that if a property is map=
ped on the =

            superclass, the column name must be the same on all subclass=
 tables.
            The identity generator strategy is not allowed in union subc=
lass inheritance.
	The primary key seed has to be shared across all unioned subclasses
	of a hierarchy.
	=

        </p><p>
            If your superclass is abstract, map it with <code class=3D"l=
iteral">abstract=3D"true"</code>.
            If it is not abstract, an additional table (it defaults to
            <code class=3D"literal">PAYMENT</code> in the example above)=
, is needed to hold instances
            of the superclass.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h3 class=3D"title"><a id=3D"inheritance-tableperconc=
reate-polymorphism"/>10.1.6.=C2=A0Table per concrete class using implici=
t polymorphism</h3></div></div></div><p>
            An alternative approach is to make use of implicit polymorph=
ism:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;CreditCardPayment&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">tab=
le</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;CREDIT_PAYMENT&quot;</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CREDIT_PAYMENT_ID&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CR=
EDIT_AMOUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;CashPayment&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;CASH_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CASH_PAYMENT_ID&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CA=
SH_AMOUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;ChequePayment&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;CHEQUE_PAYMENT&quot;</span><span class=3D"xml_tag_symbo=
ls">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CHEQUE_PAYMENT_ID&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CH=
EQUE_AMOUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Notice that the <code class=3D"literal">Payment</code> inter=
face =

            is not mentioned explicitly. Also notice that properties of =
<code class=3D"literal">Payment</code> are =

            mapped in each of the subclasses. If you want to avoid dupli=
cation, consider
            using XML entities
            (for example, <code class=3D"literal">[ &lt;!ENTITY allprope=
rties SYSTEM "allproperties.xml"&gt; ]</code>
            in the <code class=3D"literal">DOCTYPE</code> declaration an=
d =

            <code class=3D"literal">&amp;allproperties;</code> in the ma=
pping).
        </p><p>
            The disadvantage of this approach is that Hibernate does not=
 generate SQL
            <code class=3D"literal">UNION</code>s when performing polymo=
rphic queries.
        </p><p>
            For this mapping strategy, a polymorphic association to <cod=
e class=3D"literal">Payment</code> =

            is usually mapped using <code class=3D"literal">&lt;any&gt;<=
/code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
any</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;payment&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">meta-type</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;string&quot;</span><span class=3D"xml_plain">&nbsp;</span><=
span class=3D"xml_attribute_name">id-type</span><span class=3D"xml_tag_s=
ymbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">meta-value</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;CREDIT&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">class</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;CreditCardPayment&quot;</span><span class=3D"xml_tag_symbols">/&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">meta-value</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;CASH&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">class</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Ca=
shPayment&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">meta-value</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">value</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;CHEQUE&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">class</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;ChequePayment&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;PAYMENT_CLASS&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;PAYMENT_ID&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>any</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"inheritance-mixingpolymorphism=
"/>10.1.7.=C2=A0Mixing implicit polymorphism with other inheritance mapp=
ings</h3></div></div></div><p>
            Since the subclasses =

            are each mapped in their own <code class=3D"literal">&lt;cla=
ss&gt;</code> element, and since
            <code class=3D"literal">Payment</code> is just an interface)=
, each of the subclasses could =

            easily be part of another inheritance hierarchy. You can sti=
ll use polymorphic
            queries against the <code class=3D"literal">Payment</code> i=
nterface.
       </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRen=
dererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (htt=
p://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;CreditCardPayment&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">tab=
le</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;CREDIT_PAYMENT&quot;</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;CREDIT_PAYMENT_ID&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">discriminator</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;CREDIT_CARD&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;amount&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CR=
EDIT_AMOUNT&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;MasterCardPayment&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-v=
alue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;MDC&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;VisaPayment&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">discriminator-value</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;VISA&quot;</span><span class=3D"xml_tag_symbols">/&gt;<=
/span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;NonelectronicTransaction&quot;</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;NONELECTRONIC_TXN&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><span class=3D"xml_attribute_name">type</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;long&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;TXN_ID&quot;</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">joined-subclass=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;CashPayment&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;CASH_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&gt;<=
/span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;amount&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">co=
lumn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;CASH_AMOUNT&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">joined-subclas=
s</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">joined-subclass=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;ChequePayment&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;CHEQUE_PAYMENT&quot;</span><span class=3D"xml_tag_symbols">&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;PAYMENT_ID&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;amount&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">co=
lumn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;CHEQUE_AMOUNT&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">joined-subclas=
s</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            Once again, <code class=3D"literal">Payment</code> is not me=
ntioned explicitly. If we
            execute a query against the <code class=3D"literal">Payment<=
/code> interface, for
            example <code class=3D"literal">from Payment</code>, Hiberna=
te
            automatically returns instances of <code class=3D"literal">C=
reditCardPayment</code>
            (and its subclasses, since they also implement <code class=3D=
"literal">Payment</code>),
            <code class=3D"literal">CashPayment</code> and <code class=3D=
"literal">ChequePayment</code>, but
            not instances of <code class=3D"literal">NonelectronicTransa=
ction</code>.
        </p></div></div><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"inheritance-limita=
tions"/>10.2.=C2=A0Limitations</h2></div></div></div><p>
            There are limitations to the "implicit polymorphism" approac=
h to
            the table per concrete-class mapping strategy. There are som=
ewhat less
            restrictive limitations to <code class=3D"literal">&lt;union=
-subclass&gt;</code>
            mappings.
        </p><p>
            The following table shows the limitations of table per concr=
ete-class
            mappings, and of implicit polymorphism, in Hibernate.
        </p><div class=3D"table"><a id=3D"d0e12595"/><p class=3D"title">=
<b>Table=C2=A010.1.=C2=A0Features of inheritance mappings</b></p><div cl=
ass=3D"table-contents"><table summary=3D"Features of inheritance mapping=
s" border=3D"1"><colgroup><col align=3D"left"/><col align=3D"left"/><col=
 align=3D"left"/><col align=3D"left"/><col align=3D"left"/><col align=3D=
"left"/><col align=3D"left"/><col align=3D"left"/><col align=3D"left"/><=
/colgroup><thead><tr><th align=3D"left">Inheritance strategy</th><th ali=
gn=3D"left">Polymorphic many-to-one</th><th align=3D"left">Polymorphic o=
ne-to-one</th><th align=3D"left">Polymorphic one-to-many</th><th align=3D=
"left">Polymorphic many-to-many</th><th align=3D"left">Polymorphic <code=
 class=3D"literal">load()/get()</code></th><th align=3D"left">Polymorphi=
c queries</th><th align=3D"left">Polymorphic joins</th><th align=3D"left=
">Outer join fetching</th></tr></thead><tbody><tr><td align=3D"left">tab=
le per class-hierarchy</td><td align=3D"left"><code class=3D"literal">&l=
t;many-to-one&gt;</code></td><td align=3D"left"><code class=3D"literal">=
&lt;one-to-one&gt;</code></td><td align=3D"left"><code class=3D"literal"=
>&lt;one-to-many&gt;</code></td><td align=3D"left"><code class=3D"litera=
l">&lt;many-to-many&gt;</code></td><td align=3D"left"><code class=3D"lit=
eral">s.get(Payment.class, id)</code></td><td align=3D"left"><code class=
=3D"literal">from Payment p</code></td><td align=3D"left"><code class=3D=
"literal">from Order o join o.payment p</code></td><td align=3D"left"><s=
pan class=3D"emphasis"><em>supported</em></span></td></tr><tr><td align=3D=
"left">table per subclass</td><td align=3D"left"><code class=3D"literal"=
>&lt;many-to-one&gt;</code></td><td align=3D"left"><code class=3D"litera=
l">&lt;one-to-one&gt;</code></td><td align=3D"left"><code class=3D"liter=
al">&lt;one-to-many&gt;</code></td><td align=3D"left"><code class=3D"lit=
eral">&lt;many-to-many&gt;</code></td><td align=3D"left"><code class=3D"=
literal">s.get(Payment.class, id)</code></td><td align=3D"left"><code cl=
ass=3D"literal">from Payment p</code></td><td align=3D"left"><code class=
=3D"literal">from Order o join o.payment p</code></td><td align=3D"left"=
><span class=3D"emphasis"><em>supported</em></span></td></tr><tr><td ali=
gn=3D"left">table per concrete-class (union-subclass)</td><td align=3D"l=
eft"><code class=3D"literal">&lt;many-to-one&gt;</code></td><td align=3D=
"left"><code class=3D"literal">&lt;one-to-one&gt;</code></td><td align=3D=
"left"><code class=3D"literal">&lt;one-to-many&gt;</code> (for <code cla=
ss=3D"literal">inverse=3D"true"</code> only)</td><td align=3D"left"><cod=
e class=3D"literal">&lt;many-to-many&gt;</code></td><td align=3D"left"><=
code class=3D"literal">s.get(Payment.class, id)</code></td><td align=3D"=
left"><code class=3D"literal">from Payment p</code></td><td align=3D"lef=
t"><code class=3D"literal">from Order o join o.payment p</code></td><td =
align=3D"left"><span class=3D"emphasis"><em>supported</em></span></td></=
tr><tr><td align=3D"left">table per concrete class (implicit polymorphis=
m)</td><td align=3D"left"><code class=3D"literal">&lt;any&gt;</code></td=
><td align=3D"left"><span class=3D"emphasis"><em>not supported</em></spa=
n></td><td align=3D"left"><span class=3D"emphasis"><em>not supported</em=
></span></td><td align=3D"left"><code class=3D"literal">&lt;many-to-any&=
gt;</code></td><td align=3D"left"><code class=3D"literal">s.createCriter=
ia(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()</code></td=
><td align=3D"left"><code class=3D"literal">from Payment p</code></td><t=
d align=3D"left"><span class=3D"emphasis"><em>not supported</em></span><=
/td><td align=3D"left"><span class=3D"emphasis"><em>not supported</em></=
span></td></tr></tbody></table></div></div><br class=3D"table-break"/></=
div></div><div class=3D"chapter" lang=3D"en-US"><div class=3D"titlepage"=
><div><div><h2 class=3D"title"><a id=3D"objectstate"/>Chapter=C2=A011.=C2=
=A0Working with objects</h2></div></div></div><div class=3D"toc"><dl><dt=
><span class=3D"section"><a href=3D"#objectstate-overview">11.1. Hiberna=
te object states</a></span></dt><dt><span class=3D"section"><a href=3D"#=
objectstate-makingpersistent">11.2. Making objects persistent</a></span>=
</dt><dt><span class=3D"section"><a href=3D"#objectstate-loading">11.3. =
Loading an object</a></span></dt><dt><span class=3D"section"><a href=3D"=
#objectstate-querying">11.4. Querying</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"#objectstate-querying-executing">11.4.1. Exe=
cuting queries</a></span></dt><dt><span class=3D"section"><a href=3D"#ob=
jectstate-filtering">11.4.2. Filtering collections</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#objecstate-querying-criteria">11.4.3. =
Criteria queries</a></span></dt><dt><span class=3D"section"><a href=3D"#=
objectstate-querying-nativesql">11.4.4. Queries in native SQL</a></span>=
</dt></dl></dd><dt><span class=3D"section"><a href=3D"#objectstate-modif=
ying">11.5. Modifying persistent objects</a></span></dt><dt><span class=3D=
"section"><a href=3D"#objectstate-detached">11.6. Modifying detached obj=
ects</a></span></dt><dt><span class=3D"section"><a href=3D"#objectstate-=
saveorupdate">11.7. Automatic state detection</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#objectstate-deleting">11.8. Deleting persis=
tent objects</a></span></dt><dt><span class=3D"section"><a href=3D"#obje=
ctstate-replicating">11.9. Replicating object between two different data=
stores</a></span></dt><dt><span class=3D"section"><a href=3D"#objectstat=
e-flushing">11.10. Flushing the Session</a></span></dt><dt><span class=3D=
"section"><a href=3D"#objectstate-transitive">11.11. Transitive persiste=
nce</a></span></dt><dt><span class=3D"section"><a href=3D"#objectstate-m=
etadata">11.12. Using metadata</a></span></dt></dl></div><p>Hibernate is=
 a full object/relational mapping solution that not only
  shields the developer from the details of the underlying database mana=
gement
  system, but also offers <span class=3D"emphasis"><em>state management<=
/em></span> of objects.
  This is, contrary to the management of SQL <code class=3D"literal">sta=
tements</code> in
  common JDBC/SQL persistence layers, a natural object-oriented view of
  persistence in Java applications.</p><p>In other words, Hibernate appl=
ication developers should always think
  about the <span class=3D"emphasis"><em>state</em></span> of their obje=
cts, and not necessarily
  about the execution of SQL statements. This part is taken care of by
  Hibernate and is only relevant for the application developer when tuni=
ng the
  performance of the system.</p><div class=3D"section" lang=3D"en-US"><d=
iv class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstat=
e-overview"/>11.1.=C2=A0Hibernate object states</h2></div></div></div><p=
>Hibernate defines and supports the following object states:</p><div cla=
ss=3D"itemizedlist"><ul><li><p><span class=3D"emphasis"><em>Transient</e=
m></span> - an object is transient if it
        has just been instantiated using the <code class=3D"literal">new=
</code> operator,
        and it is not associated with a Hibernate <code class=3D"literal=
">Session</code>.
        It has no persistent representation in the database and no ident=
ifier
        value has been assigned. Transient instances will be destroyed b=
y the
        garbage collector if the application does not hold a reference
        anymore. Use the Hibernate <code class=3D"literal">Session</code=
> to make an
        object persistent (and let Hibernate take care of the SQL statem=
ents
        that need to be executed for this transition).</p></li><li><p><s=
pan class=3D"emphasis"><em>Persistent</em></span> - a persistent instanc=
e has a
        representation in the database and an identifier value. It might=
 just
        have been saved or loaded, however, it is by definition in the s=
cope
        of a <code class=3D"literal">Session</code>. Hibernate will dete=
ct any changes
        made to an object in persistent state and synchronize the state =
with
        the database when the unit of work completes. Developers do not
        execute manual <code class=3D"literal">UPDATE</code> statements,=
 or
        <code class=3D"literal">DELETE</code> statements when an object =
should be made
        transient.</p></li><li><p><span class=3D"emphasis"><em>Detached<=
/em></span> - a detached instance is an object
        that has been persistent, but its <code class=3D"literal">Sessio=
n</code> has been
        closed. The reference to the object is still valid, of course, a=
nd the
        detached instance might even be modified in this state. A detach=
ed
        instance can be reattached to a new <code class=3D"literal">Sess=
ion</code> at a
        later point in time, making it (and all the modifications) persi=
stent
        again. This feature enables a programming model for long running=
 units
        of work that require user think-time. We call them
        <span class=3D"emphasis"><em>application transactions</em></span=
>, i.e., a unit of work
        from the point of view of the user.</p></li></ul></div><p>We wil=
l now discuss the states and state transitions (and the
    Hibernate methods that trigger a transition) in more detail.</p></di=
v><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><d=
iv><h2 class=3D"title"><a id=3D"objectstate-makingpersistent"/>11.2.=C2=A0=
Making objects persistent</h2></div></div></div><p>Newly instantiated in=
stances of a persistent class are considered
    <span class=3D"emphasis"><em>transient</em></span> by Hibernate. We =
can make a transient
    instance <span class=3D"emphasis"><em>persistent</em></span> by asso=
ciating it with a
    session:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type=
">DomesticCat</span><!-- <br/> --><span class=3D"java_plain">&nbsp;fritz=
&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- =
<br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cla=
ss=3D"java_keyword">new</span><!-- <br/> --><span class=3D"java_plain">&=
nbsp;</span><!-- <br/> --><span class=3D"java_type">DomesticCat</span><!=
-- <br/> --><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">fritz</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">setColor</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_type">Color</span><span=
 class=3D"java_separator">.</span><span class=3D"java_plain">GINGER</spa=
n><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">fritz</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">setSex</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">'M'</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">fritz</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">setName</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;Fritz&quo=
t;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Long</span><span class=3D"java_p=
lain">&nbsp;generatedId&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">(</span><span class=3D"java_type">Long</span><span class=3D"java_sepa=
rator">)</span><span class=3D"java_plain">&nbsp;sess</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">save</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">fritz</span><sp=
an class=3D"java_separator">);</span></pre><p>If <code class=3D"literal"=
>Cat</code> has a generated identifier, the identifier
    is generated and assigned to the <code class=3D"literal">cat</code> =
when
    <code class=3D"literal">save()</code> is called. If <code class=3D"l=
iteral">Cat</code> has an
    <code class=3D"literal">assigned</code> identifier, or a composite k=
ey, the identifier
    should be assigned to the <code class=3D"literal">cat</code> instanc=
e before calling
    <code class=3D"literal">save()</code>. You can also use <code class=3D=
"literal">persist()</code>
    instead of <code class=3D"literal">save()</code>, with the semantics=
 defined in the
    EJB3 early draft.</p><div class=3D"itemizedlist"><ul compact=3D"comp=
act"><li><p><code class=3D"literal">persist()</code> makes a transient i=
nstance
        persistent. However, it does not guarantee that the identifier v=
alue
        will be assigned to the persistent instance immediately, the
        assignment might happen at flush time. <code class=3D"literal">p=
ersist()</code>
        also guarantees that it will not execute an <code class=3D"liter=
al">INSERT</code>
        statement if it is called outside of transaction boundaries. Thi=
s is
        useful in long-running conversations with an extended
        Session/persistence context.</p></li><li><p><code class=3D"liter=
al">save()</code> does guarantee to return an
        identifier. If an INSERT has to be executed to get the identifie=
r (
        e.g. "identity" generator, not "sequence"), this INSERT happens
        immediately, no matter if you are inside or outside of a transac=
tion.
        This is problematic in a long-running conversation with an exten=
ded
        Session/persistence context.</p></li></ul></div><p>Alternatively=
, you can assign the identifier using an overloaded
    version of <code class=3D"literal">save()</code>.</p><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAV=
A"><!-- <br/> --><span class=3D"java_type">DomesticCat</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;pk&nbsp;</span><!-- <br/> --><span c=
lass=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain=
">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</span><!--=
 <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cl=
ass=3D"java_type">DomesticCat</span><!-- <br/> --><span class=3D"java_se=
parator">();</span>
<!--  --><br/><span class=3D"java_plain">pk</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">setColor</span><span class=3D=
"java_separator">(</span><span class=3D"java_type">Color</span><span cla=
ss=3D"java_separator">.</span><span class=3D"java_plain">TABBY</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">pk</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">setSex</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">'F'</span><span cla=
ss=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">pk</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">setName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;PK&quot;</sp=
an><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">pk</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">setKittens</span><span class=
=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_type">HashSet</span><span class=3D"java_separator=
">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">);</span>
<!--  --><br/><span class=3D"java_plain">pk</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">addKitten</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">fritz</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">save</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">&nbsp;pk</span><span =
class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">Long</span><span class=3D"java_separat=
or">(</span><span class=3D"java_literal">1234</span><span class=3D"java_=
separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">);</span></pre><p>If the object you make persistent has=
 associated objects (e.g. the
    <code class=3D"literal">kittens</code> collection in the previous ex=
ample), these
    objects can be made persistent in any order you like unless you have=
 a
    <code class=3D"literal">NOT NULL</code> constraint upon a foreign ke=
y column. There is
    never a risk of violating foreign key constraints. However, you migh=
t
    violate a <code class=3D"literal">NOT NULL</code> constraint if you
    <code class=3D"literal">save()</code> the objects in the wrong order=
.</p><p>Usually you do not bother with this detail, as you will normally=
 use
    Hibernate's <span class=3D"emphasis"><em>transitive persistence</em>=
</span> feature to save
    the associated objects automatically. Then, even <code class=3D"lite=
ral">NOT
    NULL</code> constraint violations do not occur - Hibernate will take=

    care of everything. Transitive persistence is discussed later in thi=
s
    chapter.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-loading"/=
>11.3.=C2=A0Loading an object</h2></div></div></div><p>The <code class=3D=
"literal">load()</code> methods of <code class=3D"literal">Session</code=
>
    provide a way of retrieving a persistent instance if you know its
    identifier. <code class=3D"literal">load()</code> takes a class obje=
ct and loads the
    state into a newly instantiated instance of that class in a persiste=
nt
    state.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtml=
RendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">=
Cat</span><!-- <br/> --><span class=3D"java_plain">&nbsp;fritz&nbsp;</sp=
an><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java=
_separator">(</span><!-- <br/> --><span class=3D"java_type">Cat</span><!=
-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"java_s=
eparator">.</span><!-- <br/> --><span class=3D"java_plain">load</span><!=
-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span c=
lass=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java_separator=
">.</span><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <b=
r/> --><span class=3D"java_separator">,</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;generatedId</span><!-- <br/> --><span class=3D"java_s=
eparator">);</span></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"=
java_operator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;y=
ou&nbsp;need&nbsp;to&nbsp;wrap&nbsp;primitive&nbsp;identifiers</span>
<!--  --><br/><span class=3D"java_type">long</span><span class=3D"java_p=
lain">&nbsp;id&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">1234</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_type">DomesticCat</span><span class=3D=
"java_plain">&nbsp;pk&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>(</span><span class=3D"java_type">DomesticCat</span><span class=3D"java=
_separator">)</span><span class=3D"java_plain">&nbsp;sess</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">load</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">DomesticCat</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_keyword">class</span><span class=3D"j=
ava_separator">,</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">Long</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_plain">id</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">);</span></pre><p>Alternatively, you can load state into a given ins=
tance:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Cat<=
/span><!-- <br/> --><span class=3D"java_plain">&nbsp;cat&nbsp;</span><!-=
- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keywo=
rd">new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_type">DomesticCat</span><!-- <br/> --><spa=
n class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;load&nbsp;pk's&nbsp;state&nbsp;into&nbsp;cat</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">load</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">&nbsp;cat</span><span=
 class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_keyword">new</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_type">Long</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_plain">pkId</span><span class=3D"java_s=
eparator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Set</span><span class=3D"java_pl=
ain">&nbsp;kittens&nbsp;</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_plain">&nbsp;cat</span><span class=3D"java_separator"=
>.</span><span class=3D"java_plain">getKittens</span><span class=3D"java=
_separator">();</span></pre><p>Be aware that <code class=3D"literal">loa=
d()</code> will throw an unrecoverable
    exception if there is no matching database row. If the class is mapp=
ed
    with a proxy, <code class=3D"literal">load()</code> just returns an =
uninitialized
    proxy and does not actually hit the database until you invoke a meth=
od of
    the proxy. This is useful if you wish to create an association to an=

    object without actually loading it from the database. It also allows=

    multiple instances to be loaded as a batch if
    <code class=3D"literal">batch-size</code> is defined for the class m=
apping.</p><p>If you are not certain that a matching row exists, you sho=
uld use
    the <code class=3D"literal">get()</code> method which hits the datab=
ase immediately
    and returns null if there is no matching row.</p><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;cat&nbsp;</span><!-- <br/> --><span class=3D"jav=
a_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><=
span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java_sep=
arator">)</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sess</spa=
n><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><sp=
an class=3D"java_plain">get</span><!-- <br/> --><span class=3D"java_sepa=
rator">(</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <b=
r/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_keyword">class</span><!-- <br/> --><span class=3D"java_separator">=
,</span><!-- <br/> --><span class=3D"java_plain">&nbsp;id</span><!-- <br=
/> --><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_keyword">if</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">cat</span><span class=3D"java_operator">=3D=3D</span><span =
class=3D"java_literal">null</span><span class=3D"java_separator">)</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;cat&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">new</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">sa=
ve</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">cat</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;id</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">return</span><span class=3D"j=
ava_plain">&nbsp;cat</span><span class=3D"java_separator">;</span></pre>=
<p>You can even load an object using an SQL <code class=3D"literal">SELE=
CT ... FOR
    UPDATE</code>, using a <code class=3D"literal">LockMode</code>. See =
the API
    documentation for more information.</p><pre xmlns=3D"" xmlns:rf=3D"j=
ava:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> =
--><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;cat&nbsp;</span><!-- <br/> --><span class=3D"java_operator=
">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <=
br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=
=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java_separator">)<=
/span><!-- <br/> --><span class=3D"java_plain">&nbsp;sess</span><!-- <br=
/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_plain">get</span><!-- <br/> --><span class=3D"java_separator">(</s=
pan><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><spa=
n class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_key=
word">class</span><!-- <br/> --><span class=3D"java_separator">,</span><=
!-- <br/> --><span class=3D"java_plain">&nbsp;id</span><!-- <br/> --><sp=
an class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;</span><!-- <br/> --><span class=3D"java_type">LockMode</span=
><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><spa=
n class=3D"java_plain">UPGRADE</span><!-- <br/> --><span class=3D"java_s=
eparator">);</span></pre><p>Any associated instances or contained collec=
tions will
    <span class=3D"emphasis"><em>not</em></span> be selected <code class=
=3D"literal">FOR UPDATE</code>, unless
    you decide to specify <code class=3D"literal">lock</code> or <code c=
lass=3D"literal">all</code> as
    a cascade style for the association.</p><p>It is possible to re-load=
 an object and all its collections at any
    time, using the <code class=3D"literal">refresh()</code> method. Thi=
s is useful when
    database triggers are used to initialize some of the properties of t=
he
    object.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain=
">sess</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <=
br/> --><span class=3D"java_plain">save</span><!-- <br/> --><span class=3D=
"java_separator">(</span><!-- <br/> --><span class=3D"java_plain">cat</s=
pan><!-- <br/> --><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">flush</span><span class=3D=
"java_separator">();</span><span class=3D"java_plain">&nbsp;</span><span=
 class=3D"java_operator">//</span><span class=3D"java_plain">force&nbsp;=
the&nbsp;SQL&nbsp;INSERT</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">refresh</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">cat</span><span clas=
s=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_operator">//</span><span class=3D"java_plain">re</span=
><span class=3D"java_operator">-</span><span class=3D"java_plain">read&n=
bsp;the&nbsp;state&nbsp;</span><span class=3D"java_separator">(</span><s=
pan class=3D"java_plain">after&nbsp;the&nbsp;trigger&nbsp;executes</span=
><span class=3D"java_separator">)</span></pre><p>How much does Hibernate=
 load from the database and how many SQL
    <code class=3D"literal">SELECT</code>s will it use? This depends on =
the
    <span class=3D"emphasis"><em>fetching strategy</em></span>. This is =
explained in <a class=3D"xref" href=3D"#performance-fetching" title=3D"2=
1.1.=C2=A0Fetching strategies">Section=C2=A021.1, =E2=80=9CFetching stra=
tegies=E2=80=9D</a>.</p></div><div class=3D"section" lang=3D"en-US"><div=
 class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-=
querying"/>11.4.=C2=A0Querying</h2></div></div></div><p>If you do not kn=
ow the identifiers of the objects you are looking
    for, you need a query. Hibernate supports an easy-to-use but powerfu=
l
    object oriented query language (HQL). For programmatic query creatio=
n,
    Hibernate supports a sophisticated Criteria and Example query featur=
e (QBC
    and QBE). You can also express your query in the native SQL of your
    database, with optional support from Hibernate for result set conver=
sion
    into objects.</p><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"objectstate-querying-=
executing"/>11.4.1.=C2=A0Executing queries</h3></div></div></div><p>HQL =
and native SQL queries are represented with an instance of
      <code class=3D"literal">org.hibernate.Query</code>. This interface=
 offers methods
      for parameter binding, result set handling, and for the execution =
of the
      actual query. You always obtain a <code class=3D"literal">Query</c=
ode> using the
      current <code class=3D"literal">Session</code>:</p><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAV=
A"><!-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;cats&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;session</span><!-- <br/> --><span class=3D"java_separator">.</span><!--=
 <br/> --><span class=3D"java_plain">createQuery</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;from&nbsp;Cat&nbsp;as&nbsp;cat&nbsp;w=
here&nbsp;cat.birthdate&nbsp;&lt;&nbsp;?&quot;</span><span class=3D"java=
_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setDat=
e</span><span class=3D"java_separator">(</span><span class=3D"java_liter=
al">0</span><span class=3D"java_separator">,</span><span class=3D"java_p=
lain">&nbsp;date</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;mothers&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;session</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;select&nbsp;mother&nbsp;from&nbsp;Cat=
&nbsp;as&nbsp;cat&nbsp;join&nbsp;cat.mother&nbsp;as&nbsp;mother&nbsp;whe=
re&nbsp;cat.name&nbsp;=3D&nbsp;?&quot;</span><span class=3D"java_separat=
or">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setStr=
ing</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">0</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;name</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;kittens&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;session</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;from&nbsp;Cat&nbsp;as&nbsp;cat&nbsp;w=
here&nbsp;cat.mother&nbsp;=3D&nbsp;?&quot;</span><span class=3D"java_sep=
arator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setEnt=
ity</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">0</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;pk</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;mother&nbsp;</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</=
span><span class=3D"java_type">Cat</span><span class=3D"java_separator">=
)</span><span class=3D"java_plain">&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">createQuery</span><span=
 class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;select&nbsp;cat.mother&nbsp;from&nbsp=
;Cat&nbsp;as&nbsp;cat&nbsp;where&nbsp;cat&nbsp;=3D&nbsp;?&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setEnt=
ity</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">0</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;izi</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">unique=
Result</span><span class=3D"java_separator">();]]</span>
</span>
<!--  --><br/><span class=3D"java_type">Query</span><span class=3D"java_=
plain">&nbsp;mothersWithKittens&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">(</span><span class=3D"java_type">Cat</span><span class=3D"ja=
va_separator">)</span><span class=3D"java_plain">&nbsp;session</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">createQue=
ry</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;select&nbsp;mother&nbsp;from&nbsp;Cat=
&nbsp;as&nbsp;mother&nbsp;left&nbsp;join&nbsp;fetch&nbsp;mother.kittens&=
quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Set</span><span class=3D"java_pl=
ain">&nbsp;uniqueMothers&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword=
">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
type">HashSet</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">mothersWithKittens</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">list</span><span class=3D"java_separator=
">());</span></pre><p>A query is usually executed by invoking <code clas=
s=3D"literal">list()</code>.
      The result of the query will be loaded completely into a collectio=
n in
      memory. Entity instances retrieved by a query are in a persistent =
state.
      The <code class=3D"literal">uniqueResult()</code> method offers a =
shortcut if you
      know your query will only return a single object. Queries that mak=
e use
      of eager fetching of collections usually return duplicates of the =
root
      objects, but with their collections initialized. You can filter th=
ese
      duplicates through a <code class=3D"literal">Set</code>.</p><div c=
lass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 c=
lass=3D"title"><a id=3D"objectstate-querying-executing-iterate"/>11.4.1.=
1.=C2=A0Iterating results</h4></div></div></div><p>Occasionally, you mig=
ht be able to achieve better performance by
        executing the query using the <code class=3D"literal">iterate()<=
/code> method.
        This will usually be the case if you expect that the actual enti=
ty
        instances returned by the query will already be in the session o=
r
        second-level cache. If they are not already cached,
        <code class=3D"literal">iterate()</code> will be slower than
        <code class=3D"literal">list()</code> and might require many dat=
abase hits for a
        simple query, usually <span class=3D"emphasis"><em>1</em></span>=
 for the initial select
        which only returns identifiers, and <span class=3D"emphasis"><em=
>n</em></span> additional
        selects to initialize the actual instances.</p><pre xmlns=3D"" x=
mlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"=
><!-- <br/> --><span class=3D"java_operator">//</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;fetch&nbsp;ids</span>
<!--  --><br/><span class=3D"java_type">Iterator</span><span class=3D"ja=
va_plain">&nbsp;iter&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">createQuery</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;from&nbsp;eg.=
Qux&nbsp;q&nbsp;order&nbsp;by&nbsp;q.likeliness&quot;</span><span class=3D=
"java_separator">).</span><span class=3D"java_plain">iterate</span><span=
 class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;iter</span><span class=3D"java_separator">.</span=
><span class=3D"java_plain">hasNext</span><span class=3D"java_separator"=
>()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Qux</span><span class=3D"java_plain">&nbsp;qux=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Qux</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;iter</span><span class=3D"java_separator">.</span>=
<span class=3D"java_plain">next</span><span class=3D"java_separator">();=
</span><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D"java=
_operator">//</span><span class=3D"java_plain">&nbsp;fetch&nbsp;the&nbsp=
;object</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
something&nbsp;we&nbsp;couldnt&nbsp;express&nbsp;in&nbsp;the&nbsp;query<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
&nbsp;qux</span><span class=3D"java_separator">.</span><span class=3D"ja=
va_plain">calculateComplicatedAlgorithm</span><span class=3D"java_separa=
tor">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;delete&nbsp;the&nbsp;current&nbsp;instance</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;iter</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">remove</span><span class=3D"java_separator">();</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;dont&nbsp;need&nbsp;to&nbsp;process&nbsp;the&nbs=
p;rest</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">break</span><span c=
lass=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 cl=
ass=3D"title"><a id=3D"objectstate-querying-executing-tuples"/>11.4.1.2.=
=C2=A0Queries that return tuples</h4></div></div></div><p>Hibernate quer=
ies sometimes return tuples of objects. Each tuple
        is returned as an array:</p><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><spa=
n class=3D"java_type">Iterator</span><!-- <br/> --><span class=3D"java_p=
lain">&nbsp;kittensAndMothers&nbsp;</span><!-- <br/> --><span class=3D"j=
ava_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;s=
ess</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/=
> --><span class=3D"java_plain">createQuery</span><!-- <br/> --><span cl=
ass=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_lite=
ral">&quot;select&nbsp;kitten,&nbsp;mother&nbsp;from&nbsp;Cat&nbsp;kitte=
n&nbsp;join&nbsp;kitten.mother&nbsp;mother&quot;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">list</span><span class=3D"java=
_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">iterator</span><span class=3D"=
java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;kittensAndMothers</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">hasNext</span><span class=3D"ja=
va_separator">()</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Object</span><span class=3D"java_separator">[]=
</span><span class=3D"java_plain">&nbsp;tuple&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_separator">(</span><span class=3D"java_type">Object</span>=
<span class=3D"java_separator">[])</span><span class=3D"java_plain">&nbs=
p;kittensAndMothers</span><span class=3D"java_separator">.</span><span c=
lass=3D"java_plain">next</span><span class=3D"java_separator">();</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp;kit=
ten&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Cat</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;tuple</span><span class=3D"java_separator">[<=
/span><span class=3D"java_literal">0</span><span class=3D"java_separator=
">];</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp;mot=
her&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Cat</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;tuple</span><span class=3D"java_separator">[<=
/span><span class=3D"java_literal">1</span><span class=3D"java_separator=
">];</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">....</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 cl=
ass=3D"title"><a id=3D"objectstate-querying-executing-scalar"/>11.4.1.3.=
=C2=A0Scalar results</h4></div></div></div><p>Queries can specify a prop=
erty of a class in the
        <code class=3D"literal">select</code> clause. They can even call=
 SQL aggregate
        functions. Properties or aggregates are considered "scalar" resu=
lts
        and not entities in persistent state.</p><pre xmlns=3D"" xmlns:r=
f=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- =
<br/> --><span class=3D"java_type">Iterator</span><!-- <br/> --><span cl=
ass=3D"java_plain">&nbsp;results&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;sess</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <b=
r/> --><span class=3D"java_plain">createQuery</span><!-- <br/> --><span =
class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_literal">&quot;select&nbsp;c=
at.color,&nbsp;min(cat.birthdate),&nbsp;count(cat)&nbsp;from&nbsp;Cat&nb=
sp;cat&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_literal">&quot;group&nbsp;by=
&nbsp;cat.color&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">list</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">iterator</span><span class=3D"java_separator">();</spa=
n>
</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;results</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">hasNext</span><span class=3D"java_separat=
or">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Object</span><span class=3D"java_separator">[]=
</span><span class=3D"java_plain">&nbsp;row&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_type">Object</span><s=
pan class=3D"java_separator">[])</span><span class=3D"java_plain">&nbsp;=
results</span><span class=3D"java_separator">.</span><span class=3D"java=
_plain">next</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Color</span><span class=3D"java_plain">&nbsp;t=
ype&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Color</span><span class=3D"java_separator">)</span><spa=
n class=3D"java_plain">&nbsp;row</span><span class=3D"java_separator">[<=
/span><span class=3D"java_literal">0</span><span class=3D"java_separator=
">];</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Date</span><span class=3D"java_plain">&nbsp;ol=
dest&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_type">Date</span><span class=3D"java_separator">)</span><spa=
n class=3D"java_plain">&nbsp;row</span><span class=3D"java_separator">[<=
/span><span class=3D"java_literal">1</span><span class=3D"java_separator=
">];</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Integer</span><span class=3D"java_plain">&nbsp=
;count&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">Integer</span><span class=3D"java_separator">)</span>=
<span class=3D"java_plain">&nbsp;row</span><span class=3D"java_separator=
">[</span><span class=3D"java_literal">2</span><span class=3D"java_separ=
ator">];</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.....</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 cl=
ass=3D"title"><a id=3D"objectstate-querying-executing-parameters"/>11.4.=
1.4.=C2=A0Bind parameters</h4></div></div></div><p>Methods on <code clas=
s=3D"literal">Query</code> are provided for binding
        values to named parameters or JDBC-style <code class=3D"literal"=
>?</code>
        parameters. <span class=3D"emphasis"><em>Contrary to JDBC, Hiber=
nate numbers parameters
        from zero.</em></span> Named parameters are identifiers of the f=
orm
        <code class=3D"literal">:name</code> in the query string. The ad=
vantages of named
        parameters are as follows:</p><div class=3D"itemizedlist"><ul co=
mpact=3D"compact"><li><p>named parameters are insensitive to the order t=
hey occur in
            the query string</p></li><li><p>they can occur multiple time=
s in the same query</p></li><li><p>they are self-documenting</p></li></u=
l></div><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_operator">//=
</span><!-- <br/> --><span class=3D"java_plain">named&nbsp;parameter&nbs=
p;</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/>=
 --><span class=3D"java_plain">preferred</span><!-- <br/> --><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_type">Query</span><span class=3D"java_=
plain">&nbsp;q&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">createQuery</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_literal">&quot;from&nbsp;DomesticC=
at&nbsp;cat&nbsp;where&nbsp;cat.name&nbsp;=3D&nbsp;:name&quot;</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setString</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_literal">&quot;Fritz&quot;</span><span c=
lass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Iterator</span><span class=3D"ja=
va_plain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator"=
>.</span><span class=3D"java_plain">iterate</span><span class=3D"java_se=
parator">();</span></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"=
java_operator">//</span><!-- <br/> --><span class=3D"java_plain">positio=
nal&nbsp;parameter</span>
<!--  --><br/><span class=3D"java_type">Query</span><span class=3D"java_=
plain">&nbsp;q&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">createQuery</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_literal">&quot;from&nbsp;DomesticC=
at&nbsp;cat&nbsp;where&nbsp;cat.name&nbsp;=3D&nbsp;?&quot;</span><span c=
lass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setString</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">0</span><span clas=
s=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_literal">&quot;Izi&quot;</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_type">Iterator</span><span class=3D"ja=
va_plain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator"=
>.</span><span class=3D"java_plain">iterate</span><span class=3D"java_se=
parator">();</span></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"=
java_operator">//</span><!-- <br/> --><span class=3D"java_plain">named&n=
bsp;parameter&nbsp;list</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;names&nbsp;</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">A=
rrayList</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">names</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">add</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;Izi&quot;</sp=
an><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">names</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">add</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;Fritz&quot;</=
span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Query</span><span class=3D"java_=
plain">&nbsp;q&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">createQuery</span><span class=3D"java_s=
eparator">(</span><span class=3D"java_literal">&quot;from&nbsp;DomesticC=
at&nbsp;cat&nbsp;where&nbsp;cat.name&nbsp;in&nbsp;(:namesList)&quot;</sp=
an><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setParameterList</span><span =
class=3D"java_separator">(</span><span class=3D"java_literal">&quot;name=
sList&quot;</span><span class=3D"java_separator">,</span><span class=3D"=
java_plain">&nbsp;names</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">list</span><span class=3D"java_separator=
">();</span></pre></div><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"objectstate-queryi=
ng-executing-pagination"/>11.4.1.5.=C2=A0Pagination</h4></div></div></di=
v><p>If you need to specify bounds upon your result set, that is, the
        maximum number of rows you want to retrieve and/or the first row=
 you
        want to retrieve, you can use methods of the <code class=3D"lite=
ral">Query</code>
        interface:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_type">Query</span><!-- <br/> --><span class=3D"java_plain">&nbsp;q&nbs=
p;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span cla=
ss=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">c=
reateQuery</span><!-- <br/> --><span class=3D"java_separator">(</span><!=
-- <br/> --><span class=3D"java_literal">&quot;from&nbsp;DomesticCat&nbs=
p;cat&quot;</span><!-- <br/> --><span class=3D"java_separator">);</span>=

<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setFirstResult</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">20</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setMaxResults</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_literal">10</span><spa=
n class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">list</span><span class=3D"java_separator=
">();</span></pre><p>Hibernate knows how to translate this limit query i=
nto the
        native SQL of your DBMS.</p></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"=
objectstate-querying-executing-scrolling"/>11.4.1.6.=C2=A0Scrollable ite=
ration</h4></div></div></div><p>If your JDBC driver supports scrollable
        <code class=3D"literal">ResultSet</code>s, the <code class=3D"li=
teral">Query</code> interface
        can be used to obtain a <code class=3D"literal">ScrollableResult=
s</code> object
        that allows flexible navigation of the query results.</p><pre xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" clas=
s=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Query</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;q&nbsp;</span><!-- <br/> --><span =
class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;sess</span><!-- <br/> --><span class=3D"java_separator">.</span=
><!-- <br/> --><span class=3D"java_plain">createQuery</span><!-- <br/> -=
-><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"ja=
va_literal">&quot;select&nbsp;cat.name,&nbsp;cat&nbsp;from&nbsp;Domestic=
Cat&nbsp;cat&nbsp;&quot;</span><!-- <br/> --><span class=3D"java_plain">=
&nbsp;</span><!-- <br/> --><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;order&nbsp;by&nbsp;cat.name&quot;</sp=
an><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">ScrollableResults</span><span cl=
ass=3D"java_plain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_plain">&nbsp;q</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">scroll</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">if</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;cats</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">first</span><span class=3D"java_separator">()</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
find&nbsp;the&nbsp;first&nbsp;name&nbsp;on&nbsp;each&nbsp;page&nbsp;of&n=
bsp;an&nbsp;alphabetical&nbsp;list&nbsp;of&nbsp;cats&nbsp;by&nbsp;name</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;firstNa=
mesOfPages&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">ArrayLis=
t</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">do</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_plain">&nbsp;name&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;cats</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">getString</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">0</span><span c=
lass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;firstNamesOfPages</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">add</span><span class=3D"java_separat=
or">(</span><span class=3D"java_plain">name</span><span class=3D"java_se=
parator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">while</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;cats</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">scroll</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">PAGE_SIZE</span><span class=3D"java_separator">)</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_type">Now</span><span class=3D"java_plain">&n=
bsp;get&nbsp;the&nbsp;first&nbsp;page&nbsp;of&nbsp;cats</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pageOfC=
ats&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">new</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">ArrayList</span=
><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;cats</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">be=
foreFirst</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">int</span><span class=3D"java_plain">&nbsp;i</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_literal=
">0</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">while</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">&nbsp;PAGE_SIZE&nbsp;</span><s=
pan class=3D"java_operator">&gt;</span><span class=3D"java_plain">&nbsp;=
i</span><span class=3D"java_operator">++</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_operator">&amp;&amp;</span><sp=
an class=3D"java_plain">&nbsp;cats</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">next</span><span class=3D"java_separa=
tor">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">)</span><span class=3D"java_plain">&nbsp;pageOfCats</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">add</sp=
an><span class=3D"java_separator">(</span><span class=3D"java_plain">&nb=
sp;cats</span><span class=3D"java_separator">.</span><span class=3D"java=
_plain">get</span><span class=3D"java_separator">(</span><span class=3D"=
java_literal">1</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">cats</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">close</span><span class=3D=
"java_separator">()</span></pre><p>Note that an open database connection=
 and cursor is required for
        this functionality. Use
        <code class=3D"literal">setMaxResult()</code>/<code class=3D"lit=
eral">setFirstResult()</code>
        if you need offline pagination functionality.</p></div><div clas=
s=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 clas=
s=3D"title"><a id=3D"objectstate-querying-executing-named"/>11.4.1.7.=C2=
=A0Externalizing named queries</h4></div></div></div><p>Queries can also=
 be configured as so called named queries using
        annotations or Hibernate mapping documents.
        <code class=3D"literal">@NamedQuery</code> and <code class=3D"li=
teral">@NamedQueries</code>
        can be defined at the class level as seen in <a class=3D"xref" h=
ref=3D"#example-named-query-annotation" title=3D"Example=C2=A011.1.=C2=A0=
Defining a named query using @NamedQuery">Example=C2=A011.1, =E2=80=9CDe=
fining a named query using
          @NamedQuery=E2=80=9D</a> . However their
        definitions are global to the session factory/entity manager fac=
tory
        scope. A named query is defined by its name and the actual query=

        string.</p><div class=3D"example"><a id=3D"example-named-query-a=
nnotation"/><p class=3D"title"><b>Example=C2=A011.1.=C2=A0Defining a nam=
ed query using
          <code class=3D"classname">@NamedQuery</code></b></p><div class=
=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_plain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">NamedQuery</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;night.moreRecentThan&quot;</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;query</span><s=
pan class=3D"java_operator">=3D</span><span class=3D"java_literal">&quot=
;select&nbsp;n&nbsp;from&nbsp;Night&nbsp;n&nbsp;where&nbsp;n.date&nbsp;&=
gt;=3D&nbsp;:date&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Night</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">MyDao</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;doStuff=
</span><span class=3D"java_separator">()</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Query</span><span clas=
s=3D"java_plain">&nbsp;q&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">getNamedQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;night.moreRe=
centThan&quot;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;q</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_plain">setDate</span><span class=3D"java_separator">(</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&qu=
ot;date&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;aMonthAgo&nbsp;</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">List</span><span class=
=3D"java_plain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_plain">&nbsp;q</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">list</span><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre></div></div><br=
 class=3D"example-break"/><p>Using a mapping document can be configured =
using the
        <code class=3D"literal">&lt;query&gt;</code> node. Remember to u=
se a
        <code class=3D"literal">CDATA</code> section if your query conta=
ins characters
        that could be interpreted as markup.</p><div class=3D"example"><=
a id=3D"d0e13147"/><p class=3D"title"><b>Example=C2=A011.2.=C2=A0Definin=
g a named query using
          <code class=3D"literal">&lt;query&gt;</code></b></p><div class=
=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighligh=
t v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;ByNameAndMaximumWeight&quot;</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_char_data"=
>&lt;![CDATA[</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_char_data">&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;eg.Domes=
ticCat&nbsp;as&nbsp;cat</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_char_data">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;where&nbsp;cat.name&nbsp;=3D&nbsp;?</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_char_data">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;and&nbsp;cat.weight&nbsp;&gt;&nbsp;?</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_char_data">]&nbsp;]&gt;&lt;/query&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Parameter binding and =
executing is done programatically as seen
        in <a class=3D"xref" href=3D"#example-parameter-binding-named-qu=
ery" title=3D"Example=C2=A011.3.=C2=A0Parameter binding of a named query=
">Example=C2=A011.3, =E2=80=9CParameter binding of a named query=E2=80=9D=
</a>.</p><div class=3D"example"><a id=3D"example-parameter-binding-named=
-query"/><p class=3D"title"><b>Example=C2=A011.3.=C2=A0Parameter binding=
 of a named query</b></p><div class=3D"example-contents"><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAV=
A"><!-- <br/> --><span class=3D"java_type">Query</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;q&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;sess</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <b=
r/> --><span class=3D"java_plain">getNamedQuery</span><!-- <br/> --><spa=
n class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_lit=
eral">&quot;ByNameAndMaximumWeight&quot;</span><!-- <br/> --><span class=
=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setString</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">0</span><span clas=
s=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;name</span=
><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setInt</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_literal">1</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;minWeight</spa=
n><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">list</span><span class=3D"java_separator=
">();</span></pre></div></div><br class=3D"example-break"/><p>The actual=
 program code is independent of the query language
        that is used. You can also define native SQL queries in metadata=
, or
        migrate existing queries to Hibernate by placing them in mapping=

        files.</p><p>Also note that a query declaration inside a
        <code class=3D"literal">&lt;hibernate-mapping&gt;</code> element=
 requires a global
        unique name for the query, while a query declaration inside a
        <code class=3D"literal">&lt;class&gt;</code> element is made uni=
que automatically
        by prepending the fully qualified name of the class. For example=

        <code class=3D"literal">eg.Cat.ByNameAndMaximumWeight</code>.</p=
></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepa=
ge"><div><div><h3 class=3D"title"><a id=3D"objectstate-filtering"/>11.4.=
2.=C2=A0Filtering collections</h3></div></div></div><p>A collection <spa=
n class=3D"emphasis"><em>filter</em></span> is a special type of
      query that can be applied to a persistent collection or array. The=
 query
      string can refer to <code class=3D"literal">this</code>, meaning t=
he current
      collection element.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.=
highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=
=3D"java_type">Collection</span><!-- <br/> --><span class=3D"java_plain"=
>&nbsp;blackKittens&nbsp;</span><!-- <br/> --><span class=3D"java_operat=
or">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session</sp=
an><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><s=
pan class=3D"java_plain">createFilter</span><!-- <br/> --><span class=3D=
"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pk</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">getK=
ittens</span><span class=3D"java_separator">(),</span><span class=3D"jav=
a_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;where&nbsp;this.color&nbsp;=3D&nbsp;?=
&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPar=
ameter</span><span class=3D"java_separator">(</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Color</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">BLACK</span><span cl=
ass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_type">Hibernate</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">custom</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_type">ColorUserType</span><span class=
=3D"java_separator">.</span><span class=3D"java_keyword">class</span><sp=
an class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_separator">);</span></pre><p>The retur=
ned collection is considered a bag that is a copy of the
      given collection. The original collection is not modified. This is=

      contrary to the implication of the name "filter", but consistent w=
ith
      expected behavior.</p><p>Observe that filters do not require a <co=
de class=3D"literal">from</code>
      clause, although they can have one if required. Filters are not li=
mited
      to returning the collection elements themselves.</p><pre xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JA=
VA"><!-- <br/> --><span class=3D"java_type">Collection</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;blackKittenMates&nbsp;</span><!-- <b=
r/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span class=
=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_plain">createFilter</=
span><!-- <br/> --><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;pk</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">getK=
ittens</span><span class=3D"java_separator">(),</span><span class=3D"jav=
a_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;select&nbsp;this.mate&nbsp;where&nbsp=
;this.color&nbsp;=3D&nbsp;eg.Color.BLACK.intValue&quot;</span><span clas=
s=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>Even an empty fil=
ter query is useful, e.g. to load a subset of
      elements in a large collection:</p><pre xmlns=3D"" xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --=
><span class=3D"java_type">Collection</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;tenKittens&nbsp;</span><!-- <br/> --><span class=3D"j=
ava_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;s=
ession</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <=
br/> --><span class=3D"java_plain">createFilter</span><!-- <br/> --><spa=
n class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;mother<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
getKittens</span><span class=3D"java_separator">(),</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;&quot;</spa=
n><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setFir=
stResult</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_literal">0</span><span class=3D"java_separator">).</span><span class=3D=
"java_plain">setMaxResults</span><span class=3D"java_separator">(</span>=
<span class=3D"java_literal">10</span><span class=3D"java_separator">)</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"=
title"><a id=3D"objecstate-querying-criteria"/>11.4.3.=C2=A0Criteria que=
ries</h3></div></div></div><p>HQL is extremely powerful, but some develo=
pers prefer to build
      queries dynamically using an object-oriented API, rather than buil=
ding
      query strings. Hibernate provides an intuitive
      <code class=3D"literal">Criteria</code> query API for these cases:=
</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Criteria</=
span><!-- <br/> --><span class=3D"java_plain">&nbsp;crit&nbsp;</span><!-=
- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"jav=
a_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCrit=
eria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br=
/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class<=
/span><!-- <br/> --><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">crit</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">add</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">Restrictions</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_plain">eq</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_litera=
l">&quot;color&quot;</span><span class=3D"java_separator">,</span><span =
class=3D"java_plain">&nbsp;eg</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_type">Color</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">BLACK&nbsp;</span><span class=3D"java=
_separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">crit</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">setMaxResults</span><span =
class=3D"java_separator">(</span><span class=3D"java_literal">10</span><=
span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;crit</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">list</span><span class=3D"java_separa=
tor">();</span></pre><p>The <code class=3D"literal">Criteria</code> and =
the associated
      <code class=3D"literal">Example</code> API are discussed in more d=
etail in <a class=3D"xref" href=3D"#querycriteria" title=3D"Chapter=C2=A0=
17.=C2=A0Criteria Queries">Chapter=C2=A017, <i>Criteria Queries</i></a>.=
</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"=
><div><div><h3 class=3D"title"><a id=3D"objectstate-querying-nativesql"/=
>11.4.4.=C2=A0Queries in native SQL</h3></div></div></div><p>You can exp=
ress a query in SQL, using
      <code class=3D"literal">createSQLQuery()</code> and let Hibernate =
manage the mapping
      from result sets to objects. You can at any time call
      <code class=3D"literal">session.connection()</code> and use the JD=
BC
      <code class=3D"literal">Connection</code> directly. If you choose =
to use the
      Hibernate API, you must enclose SQL aliases in braces:</p><pre xml=
ns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=
=3D"JAVA"><!-- <br/> --><span class=3D"java_type">List</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;cats&nbsp;</span><!-- <br/> --><span=
 class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;session</span><!-- <br/> --><span class=3D"java_separator">.</=
span><!-- <br/> --><span class=3D"java_plain">createSQLQuery</span><!-- =
<br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span clas=
s=3D"java_literal">&quot;SELECT&nbsp;{cat.*}&nbsp;FROM&nbsp;CAT&nbsp;{ca=
t}&nbsp;WHERE&nbsp;ROWNUM&lt;10&quot;</span><!-- <br/> --><span class=3D=
"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addEnt=
ity</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">&quot;cat&quot;</span><span class=3D"java_separator">,</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><=
span class=3D"java_separator">.</span><span class=3D"java_keyword">class=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_separator">.</span><span class=3D"java=
_plain">list</span><span class=3D"java_separator">();</span></pre><pre x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cla=
ss=3D"JAVA"><!-- <br/> --><span class=3D"java_type">List</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_p=
lain">&nbsp;session</span><!-- <br/> --><span class=3D"java_separator">.=
</span><!-- <br/> --><span class=3D"java_plain">createSQLQuery</span><!-=
- <br/> --><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;SELECT&nbsp;{cat}.ID&nbsp;AS&nbsp;{ca=
t.id},&nbsp;{cat}.SEX&nbsp;AS&nbsp;{cat.sex},&nbsp;&quot;</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_literal">&=
quot;{cat}.MATE&nbsp;AS&nbsp;{cat.mate},&nbsp;{cat}.SUBCLASS&nbsp;AS&nbs=
p;{cat.class},&nbsp;...&nbsp;&quot;</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;FROM&nbsp;CAT&nbsp;{cat}&nbsp;WHERE&n=
bsp;ROWNUM&lt;10&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addEnt=
ity</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">&quot;cat&quot;</span><span class=3D"java_separator">,</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><=
span class=3D"java_separator">.</span><span class=3D"java_keyword">class=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_separator">.</span><span class=3D"java=
_plain">list</span><span class=3D"java_separator">()</span></pre><p>SQL =
queries can contain named and positional parameters, just like
      Hibernate queries. More information about native SQL queries in
      Hibernate can be found in <a class=3D"xref" href=3D"#querysql" tit=
le=3D"Chapter=C2=A018.=C2=A0Native SQL">Chapter=C2=A018, <i>Native SQL</=
i></a>.</p></div></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-modifying=
"/>11.5.=C2=A0Modifying persistent objects</h2></div></div></div><p><spa=
n class=3D"emphasis"><em>Transactional persistent instances</em></span> =
(i.e.
    objects loaded, saved, created or queried by the
    <code class=3D"literal">Session</code>) can be manipulated by the ap=
plication, and any
    changes to persistent state will be persisted when the
    <code class=3D"literal">Session</code> is <span class=3D"emphasis"><=
em>flushed</em></span>. This is
    discussed later in this chapter. There is no need to call a particul=
ar
    method (like <code class=3D"literal">update()</code>, which has a di=
fferent purpose)
    to make your modifications persistent. The most straightforward way =
to
    update the state of an object is to <code class=3D"literal">load()</=
code> it and then
    manipulate it directly while the <code class=3D"literal">Session</co=
de> is
    open:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">D=
omesticCat</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cat&nbsp=
;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/>=
 --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_separator">(</span><!-- <br/> --><span class=3D"java_type">Domesti=
cCat</span><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span cl=
ass=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">=
load</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_type">Cat</span><!-- <br/> --><span class=3D"java_separator">.</sp=
an><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> -->=
<span class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_keyword">new</spa=
n><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><s=
pan class=3D"java_type">Long</span><!-- <br/> --><span class=3D"java_sep=
arator">(</span><!-- <br/> --><span class=3D"java_literal">69</span><!--=
 <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separat=
or">);</span>
<!--  --><br/><span class=3D"java_plain">cat</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;PK&quot;</sp=
an><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">flush</span><span class=3D=
"java_separator">();</span><span class=3D"java_plain">&nbsp;&nbsp;</span=
><span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp=
;changes&nbsp;to&nbsp;cat&nbsp;are&nbsp;automatically&nbsp;detected&nbsp=
;and&nbsp;persisted</span></pre><p>Sometimes this programming model is i=
nefficient, as it requires in
    the same session both an SQL <code class=3D"literal">SELECT</code> t=
o load an object
    and an SQL <code class=3D"literal">UPDATE</code> to persist its upda=
ted state.
    Hibernate offers an alternate approach by using detached instances.<=
/p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage">=
<div><div><h2 class=3D"title"><a id=3D"objectstate-detached"/>11.6.=C2=A0=
Modifying detached objects</h2></div></div></div><p>Many applications ne=
ed to retrieve an object in one transaction,
    send it to the UI layer for manipulation, then save the changes in a=
 new
    transaction. Applications that use this kind of approach in a
    high-concurrency environment usually use versioned data to ensure
    isolation for the "long" unit of work.</p><p>Hibernate supports this=
 model by providing for reattachment of
    detached instances using the <code class=3D"literal">Session.update(=
)</code> or
    <code class=3D"literal">Session.merge()</code> methods:</p><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"JAVA"><!-- <br/> --><span class=3D"java_operator">//</span><!-- <br/> -=
-><span class=3D"java_plain">&nbsp;in&nbsp;the&nbsp;first&nbsp;session</=
span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;cat&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_type">Cat</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;firstSession</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">load</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_type">Cat</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;catId</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;potentialMate&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword=
">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
type">Cat</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">firstSession</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">save</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">potentialMate</=
span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;in&nbsp;a&nbsp;higher&nbsp;layer&nbsp;of&nbsp;the&nbsp;app=
lication</span>
<!--  --><br/><span class=3D"java_plain">cat</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setMate</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">potentialMate</span>=
<span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;later</span><span class=3D"java_separator">,</span><span c=
lass=3D"java_plain">&nbsp;in&nbsp;a&nbsp;</span><span class=3D"java_keyw=
ord">new</span><span class=3D"java_plain">&nbsp;session</span>
<!--  --><br/><span class=3D"java_plain">secondSession</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">update</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_plain">cat</span>=
<span class=3D"java_separator">);</span><span class=3D"java_plain">&nbsp=
;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;update&nbsp;cat</span>
<!--  --><br/><span class=3D"java_plain">secondSession</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">update</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_plain">mate</span=
><span class=3D"java_separator">);</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_operator">//</span><span class=3D"java_plai=
n">&nbsp;update&nbsp;mate</span></pre><p>If the <code class=3D"literal">=
Cat</code> with identifier
    <code class=3D"literal">catId</code> had already been loaded by
    <code class=3D"literal">secondSession</code> when the application tr=
ied to reattach
    it, an exception would have been thrown.</p><p>Use <code class=3D"li=
teral">update()</code> if you are certain that the session
    does not contain an already persistent instance with the same identi=
fier.
    Use <code class=3D"literal">merge()</code> if you want to merge your=
 modifications at
    any time without consideration of the state of the session. In other=

    words, <code class=3D"literal">update()</code> is usually the first =
method you would
    call in a fresh session, ensuring that the reattachment of your deta=
ched
    instances is the first operation that is executed.</p><p>The applica=
tion should individually <code class=3D"literal">update()</code>
    detached instances that are reachable from the given detached instan=
ce
    <span class=3D"emphasis"><em>only</em></span> if it wants their stat=
e to be updated. This can
    be automated using <span class=3D"emphasis"><em>transitive persisten=
ce</em></span>. See <a class=3D"xref" href=3D"#objectstate-transitive" t=
itle=3D"11.11.=C2=A0Transitive persistence">Section=C2=A011.11, =E2=80=9C=
Transitive persistence=E2=80=9D</a> for more information.</p><p>The <cod=
e class=3D"literal">lock()</code> method also allows an application to
    reassociate an object with a new session. However, the detached inst=
ance
    has to be unmodified.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.=
highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=
=3D"java_operator">//</span><!-- <br/> --><span class=3D"java_plain">jus=
t&nbsp;reassociate</span><!-- <br/> --><span class=3D"java_operator">:</=
span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">lock</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">fritz</span><span cla=
ss=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_type">LockMode</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">NONE</span><span class=3D"java_separato=
r">);</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_keyword">do</span><span class=3D"java_plain">&nbsp;a&nbsp;version&nbsp;=
check</span><span class=3D"java_separator">,</span><span class=3D"java_p=
lain">&nbsp;then&nbsp;reassociate</span><span class=3D"java_operator">:<=
/span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">lock</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">izi</span><span class=
=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_type">LockMode</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">READ</span><span class=3D"java_separator"=
>);</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_keyword">do</span><span class=3D"java_plain">&nbsp;a&nbsp;version&nbsp;=
check</span><span class=3D"java_separator">,</span><span class=3D"java_p=
lain">&nbsp;using&nbsp;SELECT&nbsp;</span><span class=3D"java_separator"=
>...</span><span class=3D"java_plain">&nbsp;FOR&nbsp;UPDATE</span><span =
class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;then&n=
bsp;reassociate</span><span class=3D"java_operator">:</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">lock</span><span class=3D"=
java_separator">(</span><span class=3D"java_plain">pk</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">LockMode</span><span class=3D"java_separator">.</span=
><span class=3D"java_plain">UPGRADE</span><span class=3D"java_separator"=
>);</span></pre><p>Note that <code class=3D"literal">lock()</code> can b=
e used with various
    <code class=3D"literal">LockMode</code>s. See the API documentation =
and the chapter on
    transaction handling for more information. Reattachment is not the o=
nly
    usecase for <code class=3D"literal">lock()</code>.</p><p>Other model=
s for long units of work are discussed in <a class=3D"xref" href=3D"#tra=
nsactions-optimistic" title=3D"13.3.=C2=A0Optimistic concurrency control=
">Section=C2=A013.3, =E2=80=9COptimistic concurrency control=E2=80=9D</a=
>.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"objectstate-saveorupdate"/>11.=
7.=C2=A0Automatic state detection</h2></div></div></div><p>Hibernate use=
rs have requested a general purpose method that either
    saves a transient instance by generating a new identifier or
    updates/reattaches the detached instances associated with its curren=
t
    identifier. The <code class=3D"literal">saveOrUpdate()</code> method=
 implements this
    functionality.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_operator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;in&n=
bsp;the&nbsp;first&nbsp;session</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;cat&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_type">Cat</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;firstSession</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">load</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_type">Cat</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;catID</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;in&nbsp;a&nbsp;higher&nbsp;tier&nbsp;of&nbsp;the&nbsp;appl=
ication</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;mate&nbsp;</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat=
</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">cat</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setMate</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">mate</span><span cla=
ss=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;later</span><span class=3D"java_separator">,</span><span c=
lass=3D"java_plain">&nbsp;in&nbsp;a&nbsp;</span><span class=3D"java_keyw=
ord">new</span><span class=3D"java_plain">&nbsp;session</span>
<!--  --><br/><span class=3D"java_plain">secondSession</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">saveOrUpdate</spa=
n><span class=3D"java_separator">(</span><span class=3D"java_plain">cat<=
/span><span class=3D"java_separator">);</span><span class=3D"java_plain"=
>&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span c=
lass=3D"java_plain">&nbsp;update&nbsp;existing&nbsp;state&nbsp;</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_plain">cat&nbsp=
;has&nbsp;a&nbsp;non</span><span class=3D"java_operator">-</span><span c=
lass=3D"java_literal">null</span><span class=3D"java_plain">&nbsp;id</sp=
an><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">secondSession</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">saveOrUpdate</spa=
n><span class=3D"java_separator">(</span><span class=3D"java_plain">mate=
</span><span class=3D"java_separator">);</span><span class=3D"java_plain=
">&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">&nbsp;save&nbsp;the&nbsp;</span><span class=3D"java_keyword=
">new</span><span class=3D"java_plain">&nbsp;instance&nbsp;</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">mate&nbsp;ha=
s&nbsp;a&nbsp;</span><span class=3D"java_literal">null</span><span class=
=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">)</span></=
pre><p>The usage and semantics of <code class=3D"literal">saveOrUpdate()=
</code> seems
    to be confusing for new users. Firstly, so long as you are not tryin=
g to
    use instances from one session in another new session, you should no=
t need
    to use <code class=3D"literal">update()</code>, <code class=3D"liter=
al">saveOrUpdate()</code>, or
    <code class=3D"literal">merge()</code>. Some whole applications will=
 never use either
    of these methods.</p><p>Usually <code class=3D"literal">update()</co=
de> or
    <code class=3D"literal">saveOrUpdate()</code> are used in the follow=
ing
    scenario:</p><div class=3D"itemizedlist"><ul compact=3D"compact"><li=
><p>the application loads an object in the first session</p></li><li><p>=
the object is passed up to the UI tier</p></li><li><p>some modifications=
 are made to the object</p></li><li><p>the object is passed back down to=
 the business logic tier</p></li><li><p>the application persists these m=
odifications by calling
        <code class=3D"literal">update()</code> in a second session</p><=
/li></ul></div><p><code class=3D"literal">saveOrUpdate()</code> does the=
 following:</p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><=
p>if the object is already persistent in this session, do
        nothing</p></li><li><p>if another object associated with the ses=
sion has the same
        identifier, throw an exception</p></li><li><p>if the object has =
no identifier property,
        <code class=3D"literal">save()</code> it</p></li><li><p>if the o=
bject's identifier has the value assigned to a newly
        instantiated object, <code class=3D"literal">save()</code> it</p=
></li><li><p>if the object is versioned by a
        <code class=3D"literal">&lt;version&gt;</code> or
        <code class=3D"literal">&lt;timestamp&gt;</code>, and the versio=
n property value
        is the same value assigned to a newly instantiated object,
        <code class=3D"literal">save()</code> it</p></li><li><p>otherwis=
e <code class=3D"literal">update()</code> the object</p></li></ul></div>=
<p>and <code class=3D"literal">merge()</code> is very different:</p><div=
 class=3D"itemizedlist"><ul compact=3D"compact"><li><p>if there is a per=
sistent instance with the same identifier
        currently associated with the session, copy the state of the giv=
en
        object onto the persistent instance</p></li><li><p>if there is n=
o persistent instance currently associated with the
        session, try to load it from the database, or create a new persi=
stent
        instance</p></li><li><p>the persistent instance is returned</p><=
/li><li><p>the given instance does not become associated with the sessio=
n,
        it remains detached</p></li></ul></div></div><div class=3D"secti=
on" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title=
"><a id=3D"objectstate-deleting"/>11.8.=C2=A0Deleting persistent objects=
</h2></div></div></div><p><code class=3D"literal">Session.delete()</code=
> will remove an object's state
    from the database. Your application, however, can still hold a refer=
ence
    to a deleted object. It is best to think of <code class=3D"literal">=
delete()</code> as
    making a persistent instance, transient.</p><pre xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <=
br/> --><span class=3D"java_plain">sess</span><!-- <br/> --><span class=3D=
"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">delete=
</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> -=
-><span class=3D"java_plain">cat</span><!-- <br/> --><span class=3D"java=
_separator">);</span></pre><p>You can delete objects in any order, witho=
ut risk of foreign key
    constraint violations. It is still possible to violate a <code class=
=3D"literal">NOT
    NULL</code> constraint on a foreign key column by deleting objects i=
n
    the wrong order, e.g. if you delete the parent, but forget to delete=
 the
    children.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-replicati=
ng"/>11.9.=C2=A0Replicating object between two different datastores</h2>=
</div></div></div><p>It is sometimes useful to be able to take a graph o=
f persistent
    instances and make them persistent in a different datastore, without=

    regenerating identifier values.</p><pre xmlns=3D"" xmlns:rf=3D"java:=
org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><=
span class=3D"java_operator">//</span><!-- <br/> --><span class=3D"java_=
plain">retrieve&nbsp;a&nbsp;cat&nbsp;from&nbsp;one&nbsp;database</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;session1&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;factory1</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">openSession</span><span cl=
ass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx1&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;session1</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">beginTransaction</span><spa=
n class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;cat&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;session1</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">get</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_type">Cat</span><span class=3D"java_se=
parator">.</span><span class=3D"java_keyword">class</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;catId</span><s=
pan class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">tx1</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">commit</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session1</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">close</span><span clas=
s=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">reconcile&nbsp;with&nbsp;a&nbsp;second&nbsp;database</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;session2&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;factory2</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">openSession</span><span cl=
ass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx2&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;session2</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">beginTransaction</span><spa=
n class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session2</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">replicate</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">cat</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">ReplicationMode</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">LATEST_VERSION</span><spa=
n class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">tx2</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">commit</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session2</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">close</span><span clas=
s=3D"java_separator">();</span></pre><p>The <code class=3D"literal">Repl=
icationMode</code> determines how
    <code class=3D"literal">replicate()</code> will deal with conflicts =
with existing rows
    in the database:</p><div class=3D"itemizedlist"><ul compact=3D"compa=
ct"><li><p><code class=3D"literal">ReplicationMode.IGNORE</code>: ignore=
s the object
        when there is an existing database row with the same identifier<=
/p></li><li><p><code class=3D"literal">ReplicationMode.OVERWRITE</code>:=
 overwrites any
        existing database row with the same identifier</p></li><li><p><c=
ode class=3D"literal">ReplicationMode.EXCEPTION</code>: throws an
        exception if there is an existing database row with the same
        identifier</p></li><li><p><code class=3D"literal">ReplicationMod=
e.LATEST_VERSION</code>: overwrites
        the row if its version number is earlier than the version number=
 of
        the object, or ignore the object otherwise</p></li></ul></div><p=
>Usecases for this feature include reconciling data entered into
    different database instances, upgrading system configuration informa=
tion
    during product upgrades, rolling back changes made during non-ACID
    transactions and more.</p></div><div class=3D"section" lang=3D"en-US=
"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"object=
state-flushing"/>11.10.=C2=A0Flushing the Session</h2></div></div></div>=
<p>Sometimes the <code class=3D"literal">Session</code> will execute the=
 SQL
    statements needed to synchronize the JDBC connection's state with th=
e
    state of objects held in memory. This process, called
    <span class=3D"emphasis"><em>flush</em></span>, occurs by default at=
 the following
    points:</p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><=
p>before some query executions</p></li><li><p>from
        <code class=3D"literal">org.hibernate.Transaction.commit()</code=
></p></li><li><p>from <code class=3D"literal">Session.flush()</code></p>=
</li></ul></div><p>The SQL statements are issued in the following order:=
</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" clas=
s=3D"orderedlist"><ol><li><p>all entity insertions in the same order the=
 corresponding
        objects were saved using <code class=3D"literal">Session.save()<=
/code></p></li><li><p>all entity updates</p></li><li><p>all collection d=
eletions</p></li><li><p>all collection element deletions, updates and in=
sertions</p></li><li><p>all collection insertions</p></li><li><p>all ent=
ity deletions in the same order the corresponding objects
        were deleted using <code class=3D"literal">Session.delete()</cod=
e></p></li></ol></div><p>An exception is that objects using <code class=3D=
"literal">native</code> ID
    generation are inserted when they are saved.</p><p>Except when you e=
xplicitly <code class=3D"literal">flush()</code>, there are
    absolutely no guarantees about <span class=3D"emphasis"><em>when</em=
></span> the
    <code class=3D"literal">Session</code> executes the JDBC calls, only=
 the
    <span class=3D"emphasis"><em>order</em></span> in which they are exe=
cuted. However, Hibernate
    does guarantee that the <code class=3D"literal">Query.list(..)</code=
> will never
    return stale or incorrect data.</p><p>It is possible to change the d=
efault behavior so that flush occurs
    less frequently. The <code class=3D"literal">FlushMode</code> class =
defines three
    different modes: only flush at commit time when the Hibernate
    <code class=3D"literal">Transaction</code> API is used, flush automa=
tically using the
    explained routine, or never flush unless <code class=3D"literal">flu=
sh()</code> is
    called explicitly. The last mode is useful for long running units of=
 work,
    where a <code class=3D"literal">Session</code> is kept open and disc=
onnected for a
    long time (see <a class=3D"xref" href=3D"#transactions-optimistic-lo=
ngsession" title=3D"13.3.2.=C2=A0Extended session and automatic versioni=
ng">Section=C2=A013.3.2, =E2=80=9CExtended session and automatic version=
ing=E2=80=9D</a>).</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_plain">sess&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sf</span><!-- <br/=
> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_plain">openSession</span><!-- <br/> --><span class=3D"java_separat=
or">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">beginTransaction</span><span cla=
ss=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">setFlushMode</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_type">FlushMode</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">COMM=
IT</span><span class=3D"java_separator">);</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">&nbsp;allow&nbsp;queries&nbsp;to&nbsp;</span><span class=3D"j=
ava_keyword">return</span><span class=3D"java_plain">&nbsp;stale&nbsp;st=
ate</span>
</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;izi&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_type">Cat</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;sess</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">load</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_type">Cat</span><span class=3D"=
java_separator">.</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;id</spa=
n><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">izi</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setName</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">iznizi</span><span c=
lass=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;might&nbsp;</span><span class=3D"java_keyword">return</spa=
n><span class=3D"java_plain">&nbsp;stale&nbsp;data</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">find</span><span class=3D"=
java_separator">(</span><span class=3D"java_literal">&quot;from&nbsp;Cat=
&nbsp;as&nbsp;cat&nbsp;left&nbsp;outer&nbsp;join&nbsp;cat.kittens&nbsp;k=
itten&quot;</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;change&nbsp;to&nbsp;izi&nbsp;is&nbsp;not&nbsp;flushed</spa=
n><span class=3D"java_operator">!</span>
<!--  --><br/><span class=3D"java_separator">...</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;flush&=
nbsp;occurs</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">close</span><span class=3D=
"java_separator">();</span></pre><p>During flush, an exception might occ=
ur (e.g. if a DML operation
    violates a constraint). Since handling exceptions involves some
    understanding of Hibernate's transactional behavior, we discuss it i=
n
    <a class=3D"xref" href=3D"#transactions" title=3D"Chapter=C2=A013.=C2=
=A0Transactions and Concurrency">Chapter=C2=A013, <i>Transactions and Co=
ncurrency</i></a>.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-tr=
ansitive"/>11.11.=C2=A0Transitive persistence</h2></div></div></div><p>I=
t is quite cumbersome to save, delete, or reattach individual
    objects, especially if you deal with a graph of associated objects. =
A
    common case is a parent/child relationship. Consider the following
    example:</p><p>If the children in a parent/child relationship would =
be value typed
    (e.g. a collection of addresses or strings), their life cycle would =
depend
    on the parent and no further action would be required for convenient=

    "cascading" of state changes. When the parent is saved, the value-ty=
ped
    child objects are saved and when the parent is deleted, the children=
 will
    be deleted, etc. This works for operations such as the removal of a =
child
    from the collection. Since value-typed objects cannot have shared
    references, Hibernate will detect this and delete the child from the=

    database.</p><p>Now consider the same scenario with parent and child=
 objects being
    entities, not value-types (e.g. categories and items, or parent and =
child
    cats). Entities have their own life cycle and support shared referen=
ces.
    Removing an entity from the collection does not mean it can be delet=
ed),
    and there is by default no cascading of state from one entity to any=
 other
    associated entities. Hibernate does not implement <span class=3D"emp=
hasis"><em>persistence by
    reachability</em></span> by default.</p><p>For each basic operation =
of the Hibernate session - including
    <code class=3D"literal">persist(), merge(), saveOrUpdate(), delete()=
, lock(), refresh(),
    evict(), replicate()</code> - there is a corresponding cascade style=
.
    Respectively, the cascade styles are named <code class=3D"literal">c=
reate, merge,
    save-update, delete, lock, refresh, evict, replicate</code>. If you
    want an operation to be cascaded along an association, you must indi=
cate
    that in the mapping document. For example:</p><pre xmlns=3D"" xmlns:=
rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- =
XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
one-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;person&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">cascade</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;persist&quot;</span><span class=3D"xml_tag_symbols">/&g=
t;</span><span class=3D"xml_plain"></span><br />
</pre><p>Cascade styles my be combined:</p><pre xmlns=3D"" xmlns:rf=3D"j=
ava:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : g=
enerated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
one-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;person&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">cascade</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;persist,delete,lock&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>You can even use <code class=3D"literal">cascade=3D"all"</code>=
 to specify that
    <span class=3D"emphasis"><em>all</em></span> operations should be ca=
scaded along the
    association. The default <code class=3D"literal">cascade=3D"none"</c=
ode> specifies that
    no operations are to be cascaded.</p><p>In case you are using annota=
tons you probably have noticed the
    <code class=3D"literal">cascade</code> attribute taking an array of
    <code class=3D"classname">CascadeType</code> as a value. The cascade=
 concept in JPA
    is very is similar to the transitive persistence and cascading of
    operations as described above, but with slightly different semantics=
 and
    cascading types:</p><div class=3D"itemizedlist"><ul><li><p><code cla=
ss=3D"literal">CascadeType.PERSIST</code>: cascades the persist
        (create) operation to associated entities persist() is called or=
 if
        the entity is managed</p></li><li><p><code class=3D"literal">Cas=
cadeType.MERGE</code>: cascades the merge
        operation to associated entities if merge() is called or if the =
entity
        is managed</p></li><li><p><code class=3D"literal">CascadeType.RE=
MOVE</code>: cascades the remove
        operation to associated entities if delete() is called</p></li><=
li><p><code class=3D"literal">CascadeType.REFRESH:</code> cascades the r=
efresh
        operation to associated entities if refresh() is called</p></li>=
<li><p><code class=3D"literal">CascadeType.DETACH:</code> cascades the d=
etach
        operation to associated entities if detach() is called</p></li><=
li><p><code class=3D"literal">CascadeType.ALL</code>: all of the above</=
p></li></ul></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendere=
rFactory" class=3D"note"><h2>Note</h2><p>CascadeType.ALL also covers Hib=
ernate specific operations like
      save-update, lock etc...</p></div><p>A special cascade style, <cod=
e class=3D"literal">delete-orphan</code>, applies
    only to one-to-many associations, and indicates that the
    <code class=3D"literal">delete()</code> operation should be applied =
to any child
    object that is removed from the association. Using annotations there=
 is no
    <code class=3D"literal">CascadeType.DELETE-ORPHAN</code> equivalent.=
 Instead you can
    use the attribute <code class=3D"literal">orphanRemoval as seen in <=
/code><a class=3D"xref" href=3D"#example-one-to-many-with-orphan-removal=
" title=3D"Example=C2=A011.4.=C2=A0@OneToMany with orphanRemoval">Exampl=
e=C2=A011.4, =E2=80=9C@OneToMany with
      orphanRemoval=E2=80=9D</a>. If an entity is
    removed from a <code class=3D"classname">@OneToMany</code> collectio=
n or an
    associated entity is dereferenced from a <code class=3D"classname">@=
OneToOne</code>
    association, this associated entity can be marked for deletion if
    <code class=3D"literal">orphanRemoval</code> is set to true.</p><div=
 class=3D"example"><a id=3D"example-one-to-many-with-orphan-removal"/><p=
 class=3D"title"><b>Example=C2=A011.4.=C2=A0<code class=3D"literal">@One=
ToMany</code> with
      <code class=3D"literal">orphanRemoval</code></b></p><div class=3D"=
example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_pl=
ain">@</span><!-- <br/> --><span class=3D"java_type">Entity</span><!-- <=
br/> --><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">private</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_type">Set</span><span class=3D"java_operator">&=
lt;</span><span class=3D"java_type">Order</span><span class=3D"java_oper=
ator">&gt;</span><span class=3D"java_plain">&nbsp;orders</span><span cla=
ss=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;@</span><span=
 class=3D"java_type">OneToMany</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">cascade</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_type">CascadeType</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">ALL</span><span class=
=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;orphanRemov=
al</span><span class=3D"java_operator">=3D</span><span class=3D"java_lit=
eral">true</span><span class=3D"java_separator">)</span><span class=3D"j=
ava_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">Set</span><span class=3D"java_operator">&l=
t;</span><span class=3D"java_type">Order</span><span class=3D"java_opera=
tor">&gt;</span><span class=3D"java_plain">&nbsp;getOrders</span><span c=
lass=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_keyword">return</span><span class=3D"java_pl=
ain">&nbsp;orders</span><span class=3D"java_separator">;</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_keyword">public</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_type">void</span><span class=3D"java_plain">&nbs=
p;setOrders</span><span class=3D"java_separator">(</span><span class=3D"=
java_type">Set</span><span class=3D"java_operator">&lt;</span><span clas=
s=3D"java_type">Order</span><span class=3D"java_operator">&gt;</span><sp=
an class=3D"java_plain">&nbsp;orders</span><span class=3D"java_separator=
">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">{</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_keyword">this</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_plain">orders&nbsp;</span><span class=3D"java_operator">=3D<=
/span><span class=3D"java_plain">&nbsp;orders</span><span class=3D"java_=
separator">;</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span><span =
class=3D"java_separator">[...]</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Order</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_type">Customer</span><span class=3D"ja=
va_plain">&nbsp;customer&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;em</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">find</span><span class=3D"java_=
separator">(</span><span class=3D"java_type">Customer</span><span class=3D=
"java_separator">.</span><span class=3D"java_keyword">class</span><span =
class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_literal">1l</span><span class=3D"java_separator">);=
</span>
<!--  --><br/><span class=3D"java_type">Order</span><span class=3D"java_=
plain">&nbsp;order&nbsp;</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_plain">&nbsp;em</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">find</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_type">Order</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_keyword">class</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">1l</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">customer</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">getOrders</span><span =
class=3D"java_separator">().</span><span class=3D"java_plain">remove</sp=
an><span class=3D"java_separator">(</span><span class=3D"java_plain">ord=
er</span><span class=3D"java_separator">);</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">order&nbsp;will&nbsp;be&nbsp;deleted&nbsp;by&nbsp;cascade</sp=
an></pre></div></div><br class=3D"example-break"/><p>Recommendations:</p=
><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>It does not =
usually make sense to enable cascade on a
        many-to-one or many-to-many association. In fact the
        <code class=3D"literal">@ManyToOne</code> and <code class=3D"lit=
eral">@ManyToMany</code> don't
        even offer a <code class=3D"literal">orphanRemoval</code> attrib=
ute. Cascading is
        often useful for one-to-one and one-to-many associations.</p></l=
i><li><p>If the child object's lifespan is bounded by the lifespan of th=
e
        parent object, make it a <span class=3D"emphasis"><em>life cycle=
 object</em></span> by
        specifying
        <code class=3D"literal">cascade=3D"all,delete-orphan"(<code clas=
s=3D"literal">@OneToMany(cascade=3DCascadeType.ALL,
        orphanRemoval=3Dtrue)</code>)</code>.</p></li><li><p>Otherwise, =
you might not need cascade at all. But if you think
        that you will often be working with the parent and children toge=
ther
        in the same transaction, and you want to save yourself some typi=
ng,
        consider using
        <code class=3D"literal">cascade=3D"persist,merge,save-update"</c=
ode>.</p></li></ul></div><p>Mapping an association (either a single valu=
ed association, or a
    collection) with <code class=3D"literal">cascade=3D"all"</code> mark=
s the association as
    a <span class=3D"emphasis"><em>parent/child</em></span> style relati=
onship where
    save/update/delete of the parent results in save/update/delete of th=
e
    child or children.</p><p>Furthermore, a mere reference to a child fr=
om a persistent parent
    will result in save/update of the child. This metaphor is incomplete=
,
    however. A child which becomes unreferenced by its parent is
    <span class=3D"emphasis"><em>not</em></span> automatically deleted, =
except in the case of a
    one-to-many association mapped with
    <code class=3D"literal">cascade=3D"delete-orphan"</code>. The precis=
e semantics of
    cascading operations for a parent/child relationship are as
    follows:</p><div class=3D"itemizedlist"><ul compact=3D"compact"><li>=
<p>If a parent is passed to <code class=3D"literal">persist()</code>, al=
l
        children are passed to <code class=3D"literal">persist()</code><=
/p></li><li><p>If a parent is passed to <code class=3D"literal">merge()<=
/code>, all
        children are passed to <code class=3D"literal">merge()</code></p=
></li><li><p>If a parent is passed to <code class=3D"literal">save()</co=
de>,
        <code class=3D"literal">update()</code> or <code class=3D"litera=
l">saveOrUpdate()</code>, all
        children are passed to <code class=3D"literal">saveOrUpdate()</c=
ode></p></li><li><p>If a transient or detached child becomes referenced =
by a
        persistent parent, it is passed to
        <code class=3D"literal">saveOrUpdate()</code></p></li><li><p>If =
a parent is deleted, all children are passed to
        <code class=3D"literal">delete()</code></p></li><li><p>If a chil=
d is dereferenced by a persistent parent,
        <span class=3D"emphasis"><em>nothing special happens</em></span>=
 - the application should
        explicitly delete the child if necessary - unless
        <code class=3D"literal">cascade=3D"delete-orphan"</code>, in whi=
ch case the
        "orphaned" child is deleted.</p></li></ul></div><p>Finally, note=
 that cascading of operations can be applied to an
    object graph at <span class=3D"emphasis"><em>call time</em></span> o=
r at <span class=3D"emphasis"><em>flush
    time</em></span>. All operations, if enabled, are cascaded to associ=
ated
    entities reachable when the operation is executed. However,
    <code class=3D"literal">save-update</code> and <code class=3D"litera=
l">delete-orphan</code> are
    transitive for all associated entities reachable during flush of the=

    <code class=3D"literal">Session</code>.</p></div><div class=3D"secti=
on" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title=
"><a id=3D"objectstate-metadata"/>11.12.=C2=A0Using metadata</h2></div><=
/div></div><p>Hibernate requires a rich meta-level model of all entity a=
nd value
    types. This model can be useful to the application itself. For examp=
le,
    the application might use Hibernate's metadata to implement a "smart=
"
    deep-copy algorithm that understands which objects should be copied =
(eg.
    mutable value types) and which objects that should not (e.g. immutab=
le
    value types and, possibly, associated entities).</p><p>Hibernate exp=
oses metadata via the <code class=3D"literal">ClassMetadata</code>
    and <code class=3D"literal">CollectionMetadata</code> interfaces and=
 the
    <code class=3D"literal">Type</code> hierarchy. Instances of the meta=
data interfaces
    can be obtained from the <code class=3D"literal">SessionFactory</cod=
e>.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendere=
rFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Cat</sp=
an><!-- <br/> --><span class=3D"java_plain">&nbsp;fritz&nbsp;</span><!--=
 <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span cl=
ass=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separa=
tor">......;</span>
<!--  --><br/><span class=3D"java_type">ClassMetadata</span><span class=3D=
"java_plain">&nbsp;catMeta&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;sessionfactory</span><span class=
=3D"java_separator">.</span><span class=3D"java_plain">getClassMetadata<=
/span><span class=3D"java_separator">(</span><span class=3D"java_type">C=
at</span><span class=3D"java_separator">.</span><span class=3D"java_keyw=
ord">class</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_type">Object</span><span class=3D"java=
_separator">[]</span><span class=3D"java_plain">&nbsp;propertyValues&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;catMeta</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">getPropertyValues</span><span class=3D"java_separator"=
>(</span><span class=3D"java_plain">fritz</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_separator">[]</span><span class=3D"java_plain">&nbsp;propertyNames&nbsp=
;</span><span class=3D"java_operator">=3D</span><span class=3D"java_plai=
n">&nbsp;catMeta</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">getPropertyNames</span><span class=3D"java_separator">(=
);</span>
<!--  --><br/><span class=3D"java_type">Type</span><span class=3D"java_s=
eparator">[]</span><span class=3D"java_plain">&nbsp;propertyTypes&nbsp;<=
/span><span class=3D"java_operator">=3D</span><span class=3D"java_plain"=
>&nbsp;catMeta</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">getPropertyTypes</span><span class=3D"java_separator">();</=
span>
</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;get&nbsp;a&nbsp;</span><span class=3D"java_type">Map</span=
><span class=3D"java_plain">&nbsp;of&nbsp;all&nbsp;properties&nbsp;which=
&nbsp;are&nbsp;not&nbsp;collections&nbsp;or&nbsp;associations</span>
<!--  --><br/><span class=3D"java_type">Map</span><span class=3D"java_pl=
ain">&nbsp;namedValues&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">=
new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ty=
pe">HashMap</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">for</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">int</span><span clas=
s=3D"java_plain">&nbsp;i</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_operator=
">&lt;</span><span class=3D"java_plain">propertyNames</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">length</span><span c=
lass=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;i</span=
><span class=3D"java_operator">++</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_operator">!</span><span class=3D"java_p=
lain">propertyTypes</span><span class=3D"java_separator">[</span><span c=
lass=3D"java_plain">i</span><span class=3D"java_separator">].</span><spa=
n class=3D"java_plain">isEntityType</span><span class=3D"java_separator"=
>()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_op=
erator">&amp;&amp;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_operator">!</span><span class=3D"java_plain">propertyTypes<=
/span><span class=3D"java_separator">[</span><span class=3D"java_plain">=
i</span><span class=3D"java_separator">].</span><span class=3D"java_plai=
n">isCollectionType</span><span class=3D"java_separator">()</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;namedValues</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_plain">put</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">&nbsp;propertyNames</span><span class=3D=
"java_separator">[</span><span class=3D"java_plain">i</span><span class=3D=
"java_separator">],</span><span class=3D"java_plain">&nbsp;propertyValue=
s</span><span class=3D"java_separator">[</span><span class=3D"java_plain=
">i</span><span class=3D"java_separator">]</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
div class=3D"chapter" lang=3D"en-US"><div class=3D"titlepage"><div><div>=
<h2 class=3D"title"><a id=3D"readonly"/>Chapter=C2=A012.=C2=A0Read-only =
entities</h2></div></div></div><div class=3D"toc"><dl><dt><span class=3D=
"section"><a href=3D"#readonly-api">12.1. Making persistent entities rea=
d-only</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#re=
adonly-api-immutable">12.1.1. Entities of immutable classes</a></span></=
dt><dt><span class=3D"section"><a href=3D"#readonly-api-loaddefault">12.=
1.2. Loading persistent entities as read-only</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"#readonly-api-querycriteria">12.1.3. Loading=
 read-only entities from an HQL query/criteria</a></span></dt><dt><span =
class=3D"section"><a href=3D"#readonly-api-entity">12.1.4. Making a pers=
istent entity read-only</a></span></dt></dl></dd><dt><span class=3D"sect=
ion"><a href=3D"#readonly-proptypes">12.2. Read-only affect on property =
type</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"#read=
only-proptypes-simple">12.2.1. Simple properties</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"#readonly-prop-types-unidir">12.2.2. Unid=
irectional associations</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"#readonly-proptypes-bidir">12.2.3. Bidirectional associations</a><=
/span></dt></dl></dd></dl></div><div xmlns:rf=3D"java:org.jboss.highligh=
t.XhtmlRendererFactory" class=3D"important"><h2>Important</h2><p>
            Hibernate's treatment of <span class=3D"emphasis"><em>read-o=
nly</em></span> entities may =

            differ from what you may have encountered elsewhere. Incorre=
ct usage =

            may cause unexpected results.
        </p></div><p>
        When an entity is read-only:

        </p><div class=3D"itemizedlist"><ul><li><p> =

                    Hibernate does not dirty-check the entity's simple =

                    properties or single-ended associations;
                </p></li><li><p> =

                    Hibernate will not update simple properties or updat=
able
                    single-ended associations; =

                </p></li><li><p> =

                    Hibernate will not update the version of the read-on=
ly =

                    entity if only simple properties or single-ended =

                    updatable associations are changed;
                </p></li></ul></div><p>
    </p><p>
        In some ways, Hibernate treats read-only entities the same as en=
tities that are =

        not read-only:
 =

        </p><div class=3D"itemizedlist"><ul><li><p> =

                    Hibernate cascades operations to associations as
                    defined in the entity mapping.
                </p></li><li><p> =

                    Hibernate updates the version if the entity has a =

                    collection with changes that dirties the entity;
                </p></li><li><p> =

                    A read-only entity can be deleted.
                </p></li></ul></div><p>
    </p><p>
        Even if an entity is not read-only, its collection association c=
an =

        be affected if it contains a read-only entity.
    </p><p>
        For details about the affect of read-only entities on different
        property and association types, see =

        <a class=3D"xref" href=3D"#readonly-proptypes" title=3D"12.2.=C2=
=A0Read-only affect on property type">Section=C2=A012.2, =E2=80=9CRead-o=
nly affect on property type=E2=80=9D</a>.
    </p><p>     =

        For details about how to make entities read-only, see =

        <a class=3D"xref" href=3D"#readonly-api" title=3D"12.1.=C2=A0Mak=
ing persistent entities read-only">Section=C2=A012.1, =E2=80=9CMaking pe=
rsistent entities read-only=E2=80=9D</a>
    </p><p>
        Hibernate does some optimizing for read-only entities:
    </p><div class=3D"itemizedlist"><ul><li><p>
                    It saves execution time by not dirty-checking simple=
 properties or =

                    single-ended associations.
                 </p></li><li><p>
                    It saves memory by deleting database snapshots.
                </p></li></ul></div><div class=3D"section" lang=3D"en-US=
"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"readon=
ly-api"/>12.1.=C2=A0Making persistent entities read-only</h2></div></div=
></div><p>
            Only persistent entities can be made read-only. Transient an=
d
            detached entities must be put in persistent state before the=
y
            can be made read-only.
        </p><p>
            Hibernate provides the following ways to make persistent ent=
ities read-only:
        </p><div class=3D"itemizedlist"><ul><li><p>
                    you can map an entity class as <span class=3D"emphas=
is"><em>immutable</em></span>;
                    when an entity of an immutable class is made persist=
ent,
                    Hibernate automatically makes it read-only.
                    see <a class=3D"xref" href=3D"#readonly-api-immutabl=
e" title=3D"12.1.1.=C2=A0Entities of immutable classes">Section=C2=A012.=
1.1, =E2=80=9CEntities of immutable classes=E2=80=9D</a> for details =

                </p></li><li><p>
                    you can change a default so that entities loaded
                    into the session by Hibernate are automatically =

                    made read-only; see <a class=3D"xref" href=3D"#reado=
nly-api-loaddefault" title=3D"12.1.2.=C2=A0Loading persistent entities a=
s read-only">Section=C2=A012.1.2, =E2=80=9CLoading persistent entities a=
s read-only=E2=80=9D</a> for details
                </p></li><li><p>
                    you can make an HQL query or criteria read-only so
                    that entities loaded when the query or criteria exec=
utes,
                    scrolls, or iterates, are automatically =

                    made read-only; see <a class=3D"xref" href=3D"#reado=
nly-api-querycriteria" title=3D"12.1.3.=C2=A0Loading read-only entities =
from an HQL query/criteria">Section=C2=A012.1.3, =E2=80=9CLoading read-o=
nly entities from an HQL query/criteria=E2=80=9D</a> for details
                </p></li><li><p>
                    you can make a persistent entity that is already in =
the
                    in the session read-only; see =

                    <a class=3D"xref" href=3D"#readonly-api-entity" titl=
e=3D"12.1.4.=C2=A0Making a persistent entity read-only">Section=C2=A012.=
1.4, =E2=80=9CMaking a persistent entity read-only=E2=80=9D</a> for deta=
ils
                </p></li></ul></div><div class=3D"section" lang=3D"en-US=
"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"readon=
ly-api-immutable"/>12.1.1.=C2=A0Entities of immutable classes</h3></div>=
</div></div><p>
                When an entity instance of an immutable class is made =

                persistent, Hibernate automatically makes it read-only. =

            </p><p>
                An entity of an immutable class can created
                and deleted the same as an entity of a mutable class.
            </p><p>
                Hibernate treats a persistent entity of an immutable =

                class the same way as a read-only persistent entity
                of a mutable class. The only exception is that =

                Hibernate will not allow an entity of an immutable
                class to be changed so it is not read-only.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"readonly-api-loaddefa=
ult"/>12.1.2.=C2=A0Loading persistent entities as read-only</h3></div></=
div></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory=
" class=3D"note"><h2>Note</h2><p>
                    Entities of immutable classes are automatically load=
ed
                    as read-only.
                </p></div><p>
                To change the default behavior so Hibernate loads entity=
 =

                instances of mutable classes into the session and automa=
tically =

                makes them read-only, call:
            </p><pre class=3D"programlisting">Session.setDefaultReadOnly=
( true );</pre><p>
                To change the default back so entities loaded by Hiberna=
te are not
                made read-only, call:
            </p><pre class=3D"programlisting">Session.setDefaultReadOnly=
( false );</pre><p>
                You can determine the current setting by calling:
            </p><pre class=3D"programlisting">Session.isDefaultReadOnly(=
);</pre><p> =

                If Session.isDefaultReadOnly() returns true, entities lo=
aded by =

                the following are automatically made read-only:
            </p><div class=3D"itemizedlist"><ul><li><p>
                        Session.load()
                    </p></li><li><p>
                        Session.get()
                    </p></li><li><p>
                        Session.merge()
                    </p></li><li><p>
                        executing, scrolling, or iterating HQL queries a=
nd =

                        criteria; to override this setting for a particu=
lar
                        HQL query or criteria see =

                        <a class=3D"xref" href=3D"#readonly-api-querycri=
teria" title=3D"12.1.3.=C2=A0Loading read-only entities from an HQL quer=
y/criteria">Section=C2=A012.1.3, =E2=80=9CLoading read-only entities fro=
m an HQL query/criteria=E2=80=9D</a> =

                    </p></li></ul></div><p>
                Changing this default has no effect on:
            </p><div class=3D"itemizedlist"><ul><li><p>
                        persistent entities already in the session when =
the =

                        default was changed
                    </p></li><li><p>
                        persistent entities that are refreshed via
                        Session.refresh(); a refreshed persistent =

                        entity will only be read-only if it was =

                        read-only before refreshing
                    </p></li><li><p>
                        persistent entities added by the application via=
 =

                        Session.persist(), Session.save(), and Session.u=
pdate()
                        Session.saveOrUpdate()
                    </p></li></ul></div></div><div class=3D"section" lan=
g=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=
=3D"readonly-api-querycriteria"/>12.1.3.=C2=A0Loading read-only entities=
 from an HQL query/criteria</h3></div></div></div><div xmlns:rf=3D"java:=
org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p=
>
                    Entities of immutable classes are automatically load=
ed
                    as read-only.
                </p></div><p>
                If Session.isDefaultReadOnly() returns false (the defaul=
t) =

                when an HQL query or criteria executes, then entities =

                and proxies of mutable classes loaded by the query will =

                not be read-only.
            </p><p>
                You can override this behavior so that entities and prox=
ies loaded =

                by an HQL query or criteria are automatically made read-=
only. =

            </p><p>
                For an HQL query, call:
            </p><pre class=3D"programlisting">Query.setReadOnly( true );=
</pre><p>
                <code class=3D"literal">Query.setReadOnly( true )</code>=
 must be called before
                <code class=3D"literal">Query.list()</code>, <code class=
=3D"literal">Query.uniqueResult()</code>,
                <code class=3D"literal">Query.scroll()</code>, or <code =
class=3D"literal">Query.iterate()</code>
            </p><p>
                For an HQL criteria, call:
            </p><pre class=3D"programlisting">Criteria.setReadOnly( true=
 );</pre><p>
                <code class=3D"literal">Criteria.setReadOnly( true )</co=
de> must be called before
                <code class=3D"literal">Criteria.list()</code>, <code cl=
ass=3D"literal">Criteria.uniqueResult()</code>,
                or <code class=3D"literal">Criteria.scroll()</code>
            </p><p>
                Entities and proxies that exist in the session before be=
ing returned
                by an HQL query or criteria are not affected.
            </p><p>
                Uninitialized persistent collections returned by the que=
ry are =

                not affected. Later, when the collection is initialized,=

                entities loaded into the session will be read-only if =

                Session.isDefaultReadOnly() returns true.   =

            </p><p>
                Using <code class=3D"literal">Query.setReadOnly( true )<=
/code> or
                <code class=3D"literal">Criteria.setReadOnly( true )</co=
de> works well
                when a single HQL query or criteria loads all the entiti=
es and =

                intializes all the proxies and collections that the appl=
ication
                needs to be read-only.
            </p><p>
                When it is not possible to load and initialize all =

                necessary entities in a single query or criteria,
                you can temporarily change the session default to load
                entities as read-only before the query is executed.
                Then you can explicitly initialize proxies and collectio=
ns =

                before restoring the session default.
            </p><pre class=3D"programlisting">
Session session =3D factory.openSession();
Transaction tx =3D session.beginTransaction();
 =

setDefaultReadOnly( true );
Contract contract =3D =

   ( Contract ) session.createQuery(
           "from Contract where customerName =3D 'Sherman'" )
           .uniqueResult();
Hibernate.initialize( contract.getPlan() );
Hibernate.initialize( contract.getVariations() );
Hibernate.initialize( contract.getNotes() );
setDefaultReadOnly( false );
...
tx.commit();
session.close();

</pre><p>
                If Session.isDefaultReadOnly() returns true, then you ca=
n
                use Query.setReadOnly( false ) and Criteria.setReadOnly(=
 false )
                to override this session setting and load entities that =
are =

                not read-only.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"readonly-api-entity"/=
>12.1.4.=C2=A0Making a persistent entity read-only</h3></div></div></div=
><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"note"><h2>Note</h2><p>
                    Persistent entities of immutable classes are automat=
ically
                    made read-only.
                </p></div><p>
                To make a persistent entity or proxy read-only, call:
            </p><pre class=3D"programlisting">Session.setReadOnly(entity=
OrProxy, true)</pre><p>
                To change a read-only entity or proxy of a mutable class=
 so =

                it is no longer read-only, call:
            </p><pre class=3D"programlisting">Session.setReadOnly(entity=
OrProxy, false)</pre><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRend=
ererFactory" class=3D"important"><h2>Important</h2><p>
                    When a read-only entity or proxy is changed so it is=
 no longer =

                    read-only, Hibernate assumes that the current state =
of the =

                    read-only entity is consistent with its database rep=
resentation. =

                    If this is not true, then any non-flushed changes ma=
de before
                    or while the entity was read-only, will be ignored.
                </p></div><p>        =

                To throw away non-flushed changes and make the persisten=
t entity =

                consistent with its database representation, call:      =
     </p><pre class=3D"programlisting">session.refresh( entity );</pre><=
p>
                To flush changes made before or while the entity
                was read-only and make the database representation =

                consistent with the current state of the persistent
                entity:
            </p><pre class=3D"programlisting">
// evict the read-only entity so it is detached
session.evict( entity );

// make the detached entity (with the non-flushed changes) persistent
session.update( entity );

// now entity is no longer read-only and its changes can be flushed
s.flush();
</pre></div></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"readonly-proptypes"/>12.=
2.=C2=A0Read-only affect on property type</h2></div></div></div><p>
            The following table summarizes how different property types =
are =

            affected by making an entity read-only.
        </p><div class=3D"table"><a id=3D"readonly-proptype-summary"/><p=
 class=3D"title"><b>Table=C2=A012.1.=C2=A0Affect of read-only entity on =
property types</b></p><div class=3D"table-contents"><table summary=3D"Af=
fect of read-only entity on property types" border=3D"1"><colgroup><col/=
><col/></colgroup><thead><tr><th>Property/Association Type</th><th>Chang=
es flushed to DB?</th></tr></thead><tbody><tr><td>
                            Simple
                            <p>
                                (<a class=3D"xref" href=3D"#readonly-pro=
ptypes-simple" title=3D"12.2.1.=C2=A0Simple properties">Section=C2=A012.=
2.1, =E2=80=9CSimple properties=E2=80=9D</a>)
                            </p>
                        </td><td>no*</td></tr><tr><td>
                            <p>Unidirectional one-to-one</p> =

                            <p>Unidirectional many-to-one</p> =

                            <p>
                                (<a class=3D"xref" href=3D"#readonly-pro=
ptypes-singleended-unidir" title=3D"12.2.2.1.=C2=A0Unidirectional one-to=
-one and many-to-one">Section=C2=A012.2.2.1, =E2=80=9CUnidirectional one=
-to-one and many-to-one=E2=80=9D</a>)
                            </p>
                        </td><td>
                            <p>no*</p>
                            <p>no*</p>
                        </td></tr><tr><td>
                            <p>Unidirectional one-to-many</p>
                            <p>Unidirectional many-to-many</p>
                            <p>
                                (<a class=3D"xref" href=3D"#readonly-pro=
ptypes-manyended-unidir" title=3D"12.2.2.2.=C2=A0Unidirectional one-to-m=
any and many-to-many">Section=C2=A012.2.2.2, =E2=80=9CUnidirectional one=
-to-many and many-to-many=E2=80=9D</a>)
                            </p>
                        </td><td>
                            <p>yes</p>
                            <p>yes</p>
                        </td></tr><tr><td>
                            <p>Bidirectional one-to-one</p>
                            <p>
                                (<a class=3D"xref" href=3D"#readonly-pro=
ptypes-onetoone-bidir" title=3D"12.2.3.1.=C2=A0Bidirectional one-to-one"=
>Section=C2=A012.2.3.1, =E2=80=9CBidirectional one-to-one=E2=80=9D</a>)
                            </p>
                        </td><td>only if the owning entity is not read-o=
nly*</td></tr><tr><td>
                            <p>Bidirectional one-to-many/many-to-one</p>=

                            <p>inverse collection</p>
                            <p>non-inverse collection</p>
                            <p>
                                (<a class=3D"xref" href=3D"#readonly-pro=
ptypes-onetomany-manytoone" title=3D"12.2.3.2.=C2=A0Bidirectional one-to=
-many/many-to-one">Section=C2=A012.2.3.2, =E2=80=9CBidirectional one-to-=
many/many-to-one=E2=80=9D</a>)
                            </p>
                        </td><td>
                            <p> </p>
                            <p>only added/removed entities that are not =
read-only*</p>
                            <p>yes</p>
                        </td></tr><tr><td>
                            <p>Bidirectional many-to-many</p>
                            <p>
                                (<a class=3D"xref" href=3D"#readonly-pro=
ptypes-manytomany-bidir" title=3D"12.2.3.3.=C2=A0Bidirectional many-to-m=
any">Section=C2=A012.2.3.3, =E2=80=9CBidirectional many-to-many=E2=80=9D=
</a>)
                            </p>
                        </td><td>yes</td></tr></tbody></table></div></di=
v><br class=3D"table-break"/><p>
            * Behavior is different when the entity having the property/=
association
              is read-only, compared to when it is not read-only.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"readonly-proptypes-simple"/>12=
.2.1.=C2=A0Simple properties</h3></div></div></div><p>
                When a persistent object is read-only, Hibernate does no=
t =

                dirty-check simple properties.
            </p><p>
                Hibernate will not synchronize simple property state cha=
nges =

                to the database. If you have automatic versioning, Hiber=
nate =

                will not increment the version if any simple properties =
change.
            </p><pre class=3D"programlisting">
Session session =3D factory.openSession();
Transaction tx =3D session.beginTransaction();

// get a contract and make it read-only
Contract contract =3D ( Contract ) session.get( Contract.class, contract=
Id );
session.setReadOnly( contract, true );

// contract.getCustomerName() is "Sherman"
contract.setCustomerName( "Yogi" );
tx.commit();

tx =3D session.beginTransaction();

contract =3D ( Contract ) session.get( Contract.class, contractId );
// contract.getCustomerName() is still "Sherman"
...
tx.commit();
session.close();
            </pre></div><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"readonly-prop-type=
s-unidir"/>12.2.2.=C2=A0Unidirectional associations</h3></div></div></di=
v><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><d=
iv><h4 class=3D"title"><a id=3D"readonly-proptypes-singleended-unidir"/>=
12.2.2.1.=C2=A0Unidirectional one-to-one and many-to-one</h4></div></div=
></div><p>
                    Hibernate treats unidirectional one-to-one and many-=
to-one
                    associations in the same way when the owning entity =
is =

                    read-only. =

                </p><p>
                    We use the term <span class=3D"emphasis"><em>unidire=
ctional single-ended =

                    association</em></span> when referring to functional=
ity
                    that is common to unidirectional one-to-one and many=
-to-one
                    associations.
                </p><p>
                    Hibernate does not dirty-check unidirectional single=
-ended
                    associations when the owning entity is read-only. =

                </p><p>
                    If you change a read-only entity's reference to a =

                    unidirectional single-ended association to null,
                    or to refer to a different entity, that change
                    will not be flushed to the database. =

                </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRende=
rerFactory" class=3D"note"><h2>Note</h2><p>
                        If an entity is of an immutable class,
                        then its references to unidirectional single-end=
ed
                        associations must be assigned when that =

                        entity is first created. Because the entity is
                        automatically made read-only, these references c=
an
                        not be updated.
                    </p></div><p>
                    If automatic versioning is used, Hibernate will not =

                    increment the version due to local changes to =

                    unidirectional single-ended associations.
                </p><p>
                    In the following examples, Contract has a unidirecti=
onal =

                    many-to-one association with Plan. Contract cascades=
 save and
                    update operations to the association.
                </p><p>
                    The following shows that changing a read-only entity=
's =

                    many-to-one association reference to null has no eff=
ect
                    on the entity's database representation.
                </p><pre class=3D"programlisting">// get a contract with=
 an existing plan;
// make the contract read-only and set its plan to null =

tx =3D session.beginTransaction();
Contract contract =3D ( Contract ) session.get( Contract.class, contract=
Id );
session.setReadOnly( contract, true );
contract.setPlan( null );
tx.commit();

// get the same contract
tx =3D session.beginTransaction();
contract =3D ( Contract ) session.get( Contract.class, contractId );

// contract.getPlan() still refers to the original plan;

tx.commit();
session.close();</pre><p>
                    The following shows that, even though
                    an update to a read-only entity's many-to-one =

                    association has no affect on the entity's =

                    database representation, flush still cascades =

                    the save-update operation to the locally
                    changed association.
                </p><pre class=3D"programlisting">// get a contract with=
 an existing plan;
// make the contract read-only and change to a new plan
tx =3D session.beginTransaction();
Contract contract =3D ( Contract ) session.get( Contract.class, contract=
Id );
session.setReadOnly( contract, true );
Plan newPlan =3D new Plan( "new plan"
contract.setPlan( newPlan);
tx.commit();

// get the same contract
tx =3D session.beginTransaction();
contract =3D ( Contract ) session.get( Contract.class, contractId );
newPlan =3D ( Contract ) session.get( Plan.class, newPlan.getId() ); =


// contract.getPlan() still refers to the original plan;
// newPlan is non-null because it was persisted when =

// the previous transaction was committed; =


tx.commit();
session.close();</pre></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"readonly-propt=
ypes-manyended-unidir"/>12.2.2.2.=C2=A0Unidirectional one-to-many and ma=
ny-to-many</h4></div></div></div><p>
                    Hibernate treats unidirectional one-to-many =

                    and many-to-many associations owned by a read-only
                    entity the same as when owned by an entity that is n=
ot =

                    read-only.
                </p><p>
                    Hibernate dirty-checks unidirectional one-to-many an=
d =

                    many-to-many associations;
                </p><p>
                    The collection can contain entities that =

                    are read-only, as well as entities
                    that are not read-only.
                </p><p> =

                    Entities can be added and removed from the
                    collection; changes are flushed to the database.
                </p><p> =

                    If automatic versioning is used, Hibernate will =

                    update the version due to changes in the collection
                    if they dirty the owning entity.
                </p></div></div><div class=3D"section" lang=3D"en-US"><d=
iv class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"readonly-p=
roptypes-bidir"/>12.2.3.=C2=A0Bidirectional associations</h3></div></div=
></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><d=
iv><div><h4 class=3D"title"><a id=3D"readonly-proptypes-onetoone-bidir"/=
>12.2.3.1.=C2=A0Bidirectional one-to-one</h4></div></div></div><p>
                    If a read-only entity owns a bidirectional =

                    one-to-one association:
                </p><div class=3D"itemizedlist"><ul><li><p>
                            Hibernate does not dirty-check the associati=
on. =

                        </p></li><li><p>
                            updates that change the association referenc=
e =

                            to null or to refer to a different entity
                            will not be flushed to the database. =

                        </p></li><li><p>
                            If automatic versioning is used, Hibernate w=
ill not =

                            increment the version due to local changes t=
o =

                            the association.
                       </p></li></ul></div><div xmlns:rf=3D"java:org.jbo=
ss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>
                        If an entity is of an immutable class,
                        and it owns a bidirectional one-to-one
                        association, then its reference must be
                        assigned when that entity is first created. =

                        Because the entity is automatically made =

                        read-only, these references cannot be updated.
                    </p></div><p>
                    When the owner is not read-only, Hibernate treats =

                    an association with a read-only entity the same
                    as when the association is with an entity that is
                    not read-only.
                </p></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h4 class=3D"title"><a id=3D"readonly-proptyp=
es-onetomany-manytoone"/>12.2.3.2.=C2=A0Bidirectional one-to-many/many-t=
o-one</h4></div></div></div><p>
                    A read-only entity has no impact on a bidirectional
                    one-to-many/many-to-one association if:
                </p><div class=3D"itemizedlist"><ul><li><p>
                            the read-only entity is on the one-to-many s=
ide
                            using an inverse collection;
                        </p></li><li><p>
                            the read-only entity is on the one-to-many s=
ide
                            using a non-inverse collection;             =
               =

                        </p></li><li><p>
                            the one-to-many side uses a non-inverse coll=
ection =

                            that contains the read-only entity
                       </p></li></ul></div><p>
                    When the one-to-many side uses an inverse collection=
:
                </p><div class=3D"itemizedlist"><ul><li><p>
                            a read-only entity can only be added to the =
collection
                            when it is created;
                        </p></li><li><p>
                            a read-only entity can only be removed from =
the
                            collection by an orphan delete or by explici=
tly
                            deleting the entity.                        =
    =

                        </p></li></ul></div></div><div class=3D"section"=
 lang=3D"en-US"><div class=3D"titlepage"><div><div><h4 class=3D"title"><=
a id=3D"readonly-proptypes-manytomany-bidir"/>12.2.3.3.=C2=A0Bidirection=
al many-to-many</h4></div></div></div><p>
                    Hibernate treats bidirectional many-to-many =

                    associations owned by a read-only entity the
                    same as when owned by an entity that is not
                    read-only.
                </p><p>
                    Hibernate dirty-checks bidirectional many-to-many =

                    associations.
                </p><p> =

                    The collection on either side of the association
                    can contain entities that are read-only, as well
                    as entities that are not read-only.
                </p><p> =

                    Entities are added and removed from both sides =

                    of the collection; changes are flushed to the =

                    database.
                </p><p> =

                    If automatic versioning is used, Hibernate will =

                    update the version due to changes in both sides of
                    the collection if they dirty the entity owning the
                    respective collections.
                </p></div></div></div></div><div class=3D"chapter" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
transactions"/>Chapter=C2=A013.=C2=A0Transactions and Concurrency</h2></=
div></div></div><div class=3D"toc"><dl><dt><span class=3D"section"><a hr=
ef=3D"#transactions-basics">13.1. Session and transaction scopes</a></sp=
an></dt><dd><dl><dt><span class=3D"section"><a href=3D"#transactions-bas=
ics-uow">13.1.1. Unit of work</a></span></dt><dt><span class=3D"section"=
><a href=3D"#transactions-basics-apptx">13.1.2. Long conversations</a></=
span></dt><dt><span class=3D"section"><a href=3D"#transactions-basics-id=
entity">13.1.3. Considering object identity</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"#transactions-basics-issues">13.1.4. Common is=
sues</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#tr=
ansactions-demarcation">13.2. Database transaction demarcation</a></span=
></dt><dd><dl><dt><span class=3D"section"><a href=3D"#transactions-demar=
cation-nonmanaged">13.2.1. Non-managed environment</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#transactions-demarcation-jta">13.2.2. =
Using JTA</a></span></dt><dt><span class=3D"section"><a href=3D"#transac=
tions-demarcation-exceptions">13.2.3. Exception handling</a></span></dt>=
<dt><span class=3D"section"><a href=3D"#transactions-demarcation-timeout=
">13.2.4. Transaction timeout</a></span></dt></dl></dd><dt><span class=3D=
"section"><a href=3D"#transactions-optimistic">13.3. Optimistic concurre=
ncy control</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"#transactions-optimistic-manual">13.3.1. Application version checking</=
a></span></dt><dt><span class=3D"section"><a href=3D"#transactions-optim=
istic-longsession">13.3.2. Extended session and automatic versioning</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#transactions-optimis=
tic-detached">13.3.3. Detached objects and automatic versioning</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"#transactions-optimistic-c=
ustomizing">13.3.4. Customizing automatic versioning</a></span></dt></dl=
></dd><dt><span class=3D"section"><a href=3D"#transactions-locking">13.4=
. Pessimistic locking</a></span></dt><dt><span class=3D"section"><a href=
=3D"#transactions-connection-release">13.5. Connection release modes</a>=
</span></dt></dl></div><p>
        The most important point about Hibernate and concurrency control=
 is that it is
        easy to understand. Hibernate directly uses JDBC connections and=
 JTA resources without
        adding any additional locking behavior. It is recommended that y=
ou spend some time with the
        JDBC, ANSI, and transaction isolation specification of your data=
base management system.
    </p><p>
        Hibernate does not lock objects in memory. Your application can =
expect the behavior as
        defined by the isolation level of your database transactions. Th=
rough
        <code class=3D"literal">Session</code>, which is also a transact=
ion-scoped cache, Hibernate
        provides repeatable reads for lookup by identifier and entity qu=
eries and not
        reporting queries that return scalar values.
    </p><p>
        In addition to versioning for automatic optimistic concurrency c=
ontrol, Hibernate also
        offers, using the
        <code class=3D"literal">SELECT FOR UPDATE</code> syntax, a (mino=
r) API for pessimistic locking of rows.  Optimistic concurrency control =
and
        this API are discussed later in this chapter.
    </p><p>
        The discussion of concurrency control in Hibernate begins with t=
he granularity of
        <code class=3D"literal">Configuration</code>, <code class=3D"lit=
eral">SessionFactory</code>, and
        <code class=3D"literal">Session</code>, as well as database tran=
sactions and long conversations.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"transactions-basics"/>13.1.=C2=A0S=
ession and transaction scopes</h2></div></div></div><p>
            A <code class=3D"literal">SessionFactory</code> is an expens=
ive-to-create, threadsafe object, =

            intended to be shared by all application threads. It is crea=
ted once, usually on
            application startup, from a <code class=3D"literal">Configur=
ation</code> instance.
        </p><p>
            A <code class=3D"literal">Session</code> is an inexpensive, =
non-threadsafe object that should be
            used once and then discarded for: a single request, a conver=
sation or a single unit of work.
            A <code class=3D"literal">Session</code> will not obtain a J=
DBC <code class=3D"literal">Connection</code>,
            or a <code class=3D"literal">Datasource</code>, unless it is=
 needed. It will not consume any
            resources until used.
        </p><p>
            In order to reduce lock contention in the database, a databa=
se transaction has to be as short as possible. =

            Long database transactions will prevent your application fro=
m scaling
            to a highly concurrent load. It is not recommended that you =
hold a
            database transaction open during user think time until the u=
nit of work is
            complete.
        </p><p>
            What is the scope of a unit of work? Can a single Hibernate =
<code class=3D"literal">Session</code>
            span several database transactions, or is this a one-to-one =
relationship of scopes? When
            should you open and close a <code class=3D"literal">Session<=
/code> and how do you demarcate the
            database transaction boundaries? These questions are address=
ed in the following sections.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"transactions-basics-uow"/>13.1=
.1.=C2=A0Unit of work</h3></div></div></div><p>
                First, let's define a unit of work.  A unit of work is a=

                design pattern described by Martin Fowler as
                =E2=80=9C<span class=3D"quote">
                    [maintaining] a list of objects affected by a busine=
ss
                    transaction and coordinates the writing out of chang=
es
                    and the resolution of concurrency problems.
                </span>=E2=80=9D[<a class=3D"citation" href=3D"#biblio-P=
oEAA"><span class=3D"citation">PoEAA</span></a>]
                In other words, its a series of operations we wish to ca=
rry out
                against the database together.  Basically, it is a trans=
action,
                though fulfilling a unit of work will often span multipl=
e
                physical database transactions (see <a class=3D"xref" hr=
ef=3D"#transactions-basics-apptx" title=3D"13.1.2.=C2=A0Long conversatio=
ns">Section=C2=A013.1.2, =E2=80=9CLong conversations=E2=80=9D</a>).
                So really we are talking about a more abstract notion of=
 a
                transaction.  The term "business transaction" is also so=
metimes
                used in lieu of unit of work.
            </p><p>
                Do not use the <span class=3D"emphasis"><em>session-per-=
operation</em></span> antipattern:
                do not open and close a <code class=3D"literal">Session<=
/code> for every simple database call in
                a single thread. The same is true for database transacti=
ons. Database calls
                in an application are made using a planned sequence; the=
y are grouped into atomic
                units of work. This also means that auto-commit after ev=
ery single
                SQL statement is useless in an application as this mode =
is intended for ad-hoc SQL
                console work. Hibernate disables, or expects the applica=
tion server to disable,
                auto-commit mode immediately. Database transactions are =
never optional. All
                communication with a database has to occur inside a tran=
saction. Auto-commit behavior for reading data
                should be avoided, as many small transactions are unlike=
ly to perform better than
                one clearly defined unit of work. The latter is also mor=
e maintainable
                and extensible.
            </p><p>
                The most common pattern in a multi-user client/server ap=
plication is
                <span class=3D"emphasis"><em>session-per-request</em></s=
pan>. In this model, a request from the client
                is sent to the server, where the Hibernate persistence l=
ayer runs. A new Hibernate
                <code class=3D"literal">Session</code> is opened, and al=
l database operations are executed in this unit
                of work. On completion of the work, and once the respons=
e for the client has been prepared,
                the session is flushed and closed. Use a single database=
 transaction to
                serve the clients request, starting and committing it wh=
en you open and close the
                <code class=3D"literal">Session</code>. The relationship=
 between the two is one-to-one and this
                model is a perfect fit for many applications.
            </p><p>
                The challenge lies in the implementation. Hibernate prov=
ides built-in management of
                the "current session" to simplify this pattern. Start a
                transaction when a server request has to be processed, a=
nd end the transaction
                before the response is sent to the client. Common soluti=
ons are <code class=3D"literal">ServletFilter</code>, AOP interceptor wi=
th a
                pointcut on the service methods, or a proxy/interception=
 container. An EJB container
                is a standardized way to implement cross-cutting aspects=
 such as transaction
                demarcation on EJB session beans, declaratively with CMT=
. If you
                use programmatic transaction demarcation, for ease of us=
e and code portability use the Hibernate <code class=3D"literal">Transac=
tion</code>
                API shown later in this chapter.
            </p><p>
                Your application code can access a "current session" to =
process the request
                by calling <code class=3D"literal">sessionFactory.getCur=
rentSession()</code>. =

		You will always get a <code class=3D"literal">Session</code> scoped
                to the current database transaction. This has to be conf=
igured for either
                resource-local or JTA environments, see <a class=3D"xref=
" href=3D"#architecture-current-session" title=3D"2.3.=C2=A0Contextual s=
essions">Section=C2=A02.3, =E2=80=9CContextual sessions=E2=80=9D</a>.
            </p><p>
                You can extend the scope of a <code class=3D"literal">Se=
ssion</code> and
                database transaction until the "view has been rendered".=
 This is especially useful
                in servlet applications that utilize a separate renderin=
g phase after the request
                has been processed. Extending the database transaction u=
ntil view rendering, is achieved by implementing
                your own interceptor. However, this will be difficult
                if you rely on EJBs with container-managed transactions.=
 A
                transaction will be completed when an EJB method returns=
, before rendering of any
                view can start. See the Hibernate website and forum for =
tips and examples relating to
                this <span class=3D"emphasis"><em>Open Session in View</=
em></span> pattern.
             </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-basics-a=
pptx"/>13.1.2.=C2=A0Long conversations</h3></div></div></div><p>
                The session-per-request pattern is not the only way of d=
esigning
                units of work. Many business processes require a whole s=
eries of interactions with the user that are
                interleaved with database accesses. In web and enterpris=
e applications, it is
                not acceptable for a database transaction to span a user=
 interaction. Consider the following
                example:
            </p><div class=3D"itemizedlist"><ul><li><p>
                        The first screen of a dialog opens. The data see=
n by the user has been loaded in
                        a particular <code class=3D"literal">Session</co=
de> and database transaction. The user is free to
                        modify the objects.
                    </p></li><li><p>
                        The user clicks "Save" after 5 minutes and expec=
ts their modifications to be made
                        persistent. The user also expects that they were=
 the only person editing this information and
                        that no conflicting modification has occurred.
                    </p></li></ul></div><p>
                From the point of view of the user, we call this unit of=
 work a long-running
                <span class=3D"emphasis"><em>conversation</em></span> or=
 <span class=3D"emphasis"><em>application transaction</em></span>.
                There are many ways to implement this in your applicatio=
n.
            </p><p>
                A first naive implementation might keep the <code class=3D=
"literal">Session</code> and database
                transaction open during user think time, with locks held=
 in the database to prevent
                concurrent modification and to guarantee isolation and a=
tomicity. This is =

                an anti-pattern, since lock contention would not allow t=
he application to scale with
                the number of concurrent users.
            </p><p>
                You have to use several database transactions to impleme=
nt the conversation.
                In this case, maintaining isolation of business processe=
s becomes the
                partial responsibility of the application tier. A single=
 conversation
                usually spans several database transactions. It will be =
atomic if only one of
                these database transactions (the last one) stores the up=
dated data. All others
                simply read data (for example, in a wizard-style dialog =
spanning several request/response
                cycles). This is easier to implement than it might sound=
, especially if
                you utilize some of Hibernate's features:
            </p><div class=3D"itemizedlist"><ul><li><p>
                        <span class=3D"emphasis"><em>Automatic Versionin=
g</em></span>: Hibernate can perform automatic
                        optimistic concurrency control for you. It can a=
utomatically detect
                        if a concurrent modification occurred during use=
r think time. Check for this at =

			the end of the conversation.
                    </p></li><li><p>
                        <span class=3D"emphasis"><em>Detached Objects</e=
m></span>: if you decide to use the
                        <span class=3D"emphasis"><em>session-per-request=
</em></span> pattern, all loaded instances
                        will be in the detached state during user think =
time. Hibernate allows you to
                        reattach the objects and persist the modificatio=
ns. The pattern is called
                        <span class=3D"emphasis"><em>session-per-request=
-with-detached-objects</em></span>. Automatic
                        versioning is used to isolate concurrent modific=
ations.
                    </p></li><li><p>
                        <span class=3D"emphasis"><em>Extended (or Long) =
Session</em></span>: the Hibernate
                        <code class=3D"literal">Session</code> can be di=
sconnected from the underlying JDBC
                        connection after the database transaction has be=
en committed and reconnected
                        when a new client request occurs. This pattern i=
s known as
                        <span class=3D"emphasis"><em>session-per-convers=
ation</em></span> and makes
                        even reattachment unnecessary. Automatic version=
ing is used to isolate
                        concurrent modifications and the <code class=3D"=
literal">Session</code> will not
                        be allowed to be flushed automatically, but expl=
icitly.
                    </p></li></ul></div><p>
                Both <span class=3D"emphasis"><em>session-per-request-wi=
th-detached-objects</em></span> and
                <span class=3D"emphasis"><em>session-per-conversation</e=
m></span> have advantages and disadvantages.
                These disadvantages are discussed later in this chapter =
in the context of optimistic concurrency control.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-basics-i=
dentity"/>13.1.3.=C2=A0Considering object identity</h3></div></div></div=
><p>
                An application can concurrently access the same persiste=
nt state in two
                different <code class=3D"literal">Session</code>s. Howev=
er, an instance of a persistent class
                is never shared between two <code class=3D"literal">Sess=
ion</code> instances. It is for this reason that there are
                two different notions of identity:
            </p><div class=3D"variablelist"><dl><dt><span class=3D"term"=
>Database Identity</span></dt><dd><p>
                            <code class=3D"literal">foo.getId().equals( =
bar.getId() )</code>
                        </p></dd><dt><span class=3D"term">JVM Identity</=
span></dt><dd><p>
                            <code class=3D"literal">foo=3D=3Dbar</code>
                        </p></dd></dl></div><p>
                For objects attached to a <span class=3D"emphasis"><em>p=
articular</em></span> <code class=3D"literal">Session</code>
                (i.e., in the scope of a <code class=3D"literal">Session=
</code>), the two notions are equivalent and
                JVM identity for database identity is guaranteed by Hibe=
rnate. While the application
                might concurrently access the "same" (persistent identit=
y) business object in two different
                sessions, the two instances will actually be "different"=
 (JVM identity). Conflicts are
                resolved using an optimistic approach and automatic vers=
ioning at flush/commit time.
            </p><p>
                This approach leaves Hibernate and the database to worry=
 about concurrency. It also provides
                the best scalability, since guaranteeing identity in sin=
gle-threaded units of work means that it does not
                need expensive locking or other means of synchronization=
. The application does not need to
                synchronize on any business object, as long as it mainta=
ins a single thread per
                <code class=3D"literal">Session</code>. Within a <code c=
lass=3D"literal">Session</code> the application can safely use
                <code class=3D"literal">=3D=3D</code> to compare objects=
.
            </p><p>
                However, an application that uses <code class=3D"literal=
">=3D=3D</code> outside of a <code class=3D"literal">Session</code>
                might produce unexpected results. This might occur even =
in some unexpected places. For example,
                if you put two detached instances into the same <code cl=
ass=3D"literal">Set</code>, both might have the same
                database identity (i.e., they represent the same row). J=
VM identity, however, is by definition not
                guaranteed for instances in a detached state. The develo=
per has to override the <code class=3D"literal">equals()</code>
                and <code class=3D"literal">hashCode()</code> methods in=
 persistent classes and implement
                their own notion of object equality. There is one caveat=
: never use the database
                identifier to implement equality. Use a business key tha=
t is a combination of unique, usually
                immutable, attributes. The database identifier will chan=
ge if a transient object is made
                persistent. If the transient instance (usually together =
with detached instances) is held in a
                <code class=3D"literal">Set</code>, changing the hashcod=
e breaks the contract of the <code class=3D"literal">Set</code>.
                Attributes for business keys do not have to be as stable=
 as database primary keys; you only
                have to guarantee stability as long as the objects are i=
n the same <code class=3D"literal">Set</code>. See
                the Hibernate website for a more thorough discussion of =
this issue. Please note that this is not
                a Hibernate issue, but simply how Java object identity a=
nd equality has to be implemented.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-basics-i=
ssues"/>13.1.4.=C2=A0Common issues</h3></div></div></div><p>
                 Do not use the anti-patterns <span class=3D"emphasis"><=
em>session-per-user-session</em></span> or
                 <span class=3D"emphasis"><em>session-per-application</e=
m></span> (there are, however, rare exceptions to
                 this rule). Some of the following issues might also ari=
se within the recommended
                 patterns, so ensure that you understand the implication=
s before making a design decision:
             </p><div class=3D"itemizedlist"><ul><li><p>
                        A <code class=3D"literal">Session</code> is not =
thread-safe. Things that work
                        concurrently, like HTTP requests, session beans,=
 or Swing workers, will cause race
                        conditions if a <code class=3D"literal">Session<=
/code> instance is shared. If you keep your
                        Hibernate <code class=3D"literal">Session</code>=
 in your <code class=3D"literal">HttpSession</code> (this is discussed
                        later in the chapter), you should consider synch=
ronizing access to your Http session. Otherwise,
                        a user that clicks reload fast enough can use th=
e same <code class=3D"literal">Session</code> in
                        two concurrently running threads.
                    </p></li><li><p>
                        An exception thrown by Hibernate means you have =
to rollback your database transaction
                        and close the <code class=3D"literal">Session</c=
ode> immediately (this is discussed in more detail later in the chapter)=
.
                        If your <code class=3D"literal">Session</code> i=
s bound to the application, you have to stop
                        the application. Rolling back the database trans=
action does not put your business
                        objects back into the state they were at the sta=
rt of the transaction. This means that the
                        database state and the business objects will be =
out of sync. Usually this is not a
                        problem, because exceptions are not recoverable =
and you will have to start over after
                        rollback anyway.
                    </p></li><li><p>
                        The <code class=3D"literal">Session</code> cache=
s every object that is in a persistent state (watched
                        and checked for dirty state by Hibernate).  If y=
ou keep it open for a long time or simply load too
                        much data, it will grow endlessly until you
                        get an OutOfMemoryException. One solution is to =
call <code class=3D"literal">clear()</code> and <code class=3D"literal">=
evict()</code>
                        to manage the <code class=3D"literal">Session</c=
ode> cache, but you should consider a
                        Stored Procedure if you need mass data operation=
s. Some solutions are shown in
                        <a class=3D"xref" href=3D"#batch" title=3D"Chapt=
er=C2=A015.=C2=A0Batch processing">Chapter=C2=A015, <i>Batch processing<=
/i></a>. Keeping a <code class=3D"literal">Session</code> open for the d=
uration
                        of a user session also means a higher probabilit=
y of stale data.
                    </p></li></ul></div></div></div><div class=3D"sectio=
n" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"=
><a id=3D"transactions-demarcation"/>13.2.=C2=A0Database transaction dem=
arcation</h2></div></div></div><p>
            Database, or system, transaction boundaries are always neces=
sary. No communication with
            the database can occur outside of a database transaction (th=
is seems to confuse many developers
            who are used to the auto-commit mode). Always use clear tran=
saction boundaries, even for
            read-only operations. Depending on your isolation level and =
database capabilities this might not
            be required, but there is no downside if you always demarcat=
e transactions explicitly. Certainly,
            a single database transaction is going to perform better tha=
n many small transactions, even
            for reading data.
        </p><p>
            A Hibernate application can run in non-managed (i.e., standa=
lone, simple Web- or Swing applications)
            and managed J2EE environments. In a non-managed environment,=
 Hibernate is usually responsible for
            its own database connection pool. The application developer =
has to manually set transaction
            boundaries (begin, commit, or rollback database transactions=
) themselves. A managed environment
            usually provides container-managed transactions (CMT), with =
the transaction assembly defined declaratively
            (in deployment descriptors of EJB session beans, for example=
). Programmatic transaction demarcation is
            then no longer necessary.
        </p><p>
            However, it is often desirable to keep your persistence laye=
r portable between non-managed
            resource-local environments, and systems that can rely on JT=
A but use BMT instead of CMT.
            In both cases use programmatic transaction demarcation. Hibe=
rnate offers a wrapper
            API called <code class=3D"literal">Transaction</code> that t=
ranslates into the native transaction system of
            your deployment environment. This API is actually optional, =
but we strongly encourage its use
            unless you are in a CMT session bean.
        </p><p>
            Ending a <code class=3D"literal">Session</code> usually invo=
lves four distinct phases:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    flush the session
                </p></li><li><p>
                    commit the transaction
                </p></li><li><p>
                    close the session
                </p></li><li><p>
                    handle exceptions
                </p></li></ul></div><p>
            We discussed Flushing the session earlier, so we will now ha=
ve a closer look at transaction
            demarcation and exception handling in both managed and non-m=
anaged environments.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"transactions-demarcation-nonma=
naged"/>13.2.1.=C2=A0Non-managed environment</h3></div></div></div><p>
                If a Hibernate persistence layer runs in a non-managed e=
nvironment, database connections
                are usually handled by simple (i.e., non-DataSource) con=
nection pools from which
	            Hibernate obtains connections as needed. The session/transa=
ction handling idiom looks
	            like this:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-=
- <br/> --><span class=3D"java_type">Non</span><!-- <br/> --><span class=
=3D"java_operator">-</span><!-- <br/> --><span class=3D"java_plain">mana=
ged&nbsp;environment&nbsp;idiom</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;sess&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;factory</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">openSession</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">n=
ull</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">try</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp=
;</span><span class=3D"java_operator">=3D</span><span class=3D"java_plai=
n">&nbsp;sess</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">beginTransaction</span><span class=3D"java_separator">();</=
span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">do</span><span class=3D"java_plain">=
&nbsp;some&nbsp;work</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">comm=
it</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">catch</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">RuntimeException</span><span class=3D"java_plain">&nbsp;=
e</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
tx&nbsp;</span><span class=3D"java_operator">!=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_literal">null</span><span cl=
ass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">rollb=
ack</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;e</span><span class=3D"java_separator">;</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">&nbsp;or&nbsp;display&nbsp;error&nbsp;message</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">finally</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">cl=
ose</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                You do not have to <code class=3D"literal">flush()</code=
> the <code class=3D"literal">Session</code> explicitly:
                the call to <code class=3D"literal">commit()</code> auto=
matically triggers the synchronization depending
	            on the <a class=3D"link" href=3D"#objectstate-flushing" tit=
le=3D"11.10.=C2=A0Flushing the Session">FlushMode</a> for the session.
                A call to <code class=3D"literal">close()</code> marks t=
he end of a session. The main implication
                of <code class=3D"literal">close()</code> is that the JD=
BC connection will be relinquished by the
                session. This Java code is portable and runs in both non=
-managed and JTA environments.
            </p><p>
                As outlined earlier, a much more flexible solution is Hi=
bernate's built-in "current session" context
                management:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-=
- <br/> --><span class=3D"java_type">Non</span><!-- <br/> --><span class=
=3D"java_operator">-</span><!-- <br/> --><span class=3D"java_plain">mana=
ged&nbsp;environment&nbsp;idiom&nbsp;with&nbsp;getCurrentSession</span><=
!-- <br/> --><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_keyword">try</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;factory=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>getCurrentSession</span><span class=3D"java_separator">().</span><span =
class=3D"java_plain">beginTransaction</span><span class=3D"java_separato=
r">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">do</span><span class=3D"java_plain">=
&nbsp;some&nbsp;work</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;factory=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>getCurrentSession</span><span class=3D"java_separator">().</span><span =
class=3D"java_plain">getTransaction</span><span class=3D"java_separator"=
>().</span><span class=3D"java_plain">commit</span><span class=3D"java_s=
eparator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">catch</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">RuntimeException</span><span class=3D"java_plain">&nbsp;=
e</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;factory=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>getCurrentSession</span><span class=3D"java_separator">().</span><span =
class=3D"java_plain">getTransaction</span><span class=3D"java_separator"=
>().</span><span class=3D"java_plain">rollback</span><span class=3D"java=
_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;e</span><span class=3D"java_separator">;</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">&nbsp;or&nbsp;display&nbsp;error&nbsp;message</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                You will not see these code snippets in a regular applic=
ation;
                fatal (system) exceptions should always be caught at the=
 "top". In other words, the
                code that executes Hibernate calls in the persistence la=
yer, and the code that handles
                <code class=3D"literal">RuntimeException</code> (and usu=
ally can only clean up and exit), are in
                different layers. The current context management by Hibe=
rnate can significantly
                simplify this design by accessing a <code class=3D"liter=
al">SessionFactory</code>.
                Exception handling is discussed later in this chapter.
            </p><p>
                You should select <code class=3D"literal">org.hibernate.=
transaction.JDBCTransactionFactory</code>,
                which is the default, and for the second example select =
<code class=3D"literal">"thread"</code> as your
                <code class=3D"literal">hibernate.current_session_contex=
t_class</code>.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-demarcat=
ion-jta"/>13.2.2.=C2=A0Using JTA</h3></div></div></div><p>
                If your persistence layer runs in an application server =
(for example, behind EJB session beans),
                every datasource connection obtained by Hibernate will a=
utomatically be part of the global
                JTA transaction. You can also install a standalone JTA i=
mplementation and use it without
                EJB. Hibernate offers two strategies for JTA integration=
.
            </p><p>
                If you use bean-managed transactions (BMT), Hibernate wi=
ll tell the application server to start
                and end a BMT transaction if you use the <code class=3D"=
literal">Transaction</code> API. The
                transaction management code is identical to the non-mana=
ged environment.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;BMT&nbsp;i=
diom</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;sess&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;factory</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">openSession</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">n=
ull</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">try</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp=
;</span><span class=3D"java_operator">=3D</span><span class=3D"java_plai=
n">&nbsp;sess</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">beginTransaction</span><span class=3D"java_separator">();</=
span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">do</span><span class=3D"java_plain">=
&nbsp;some&nbsp;work</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">comm=
it</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">catch</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">RuntimeException</span><span class=3D"java_plain">&nbsp;=
e</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
tx&nbsp;</span><span class=3D"java_operator">!=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_literal">null</span><span cl=
ass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">rollb=
ack</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;e</span><span class=3D"java_separator">;</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">&nbsp;or&nbsp;display&nbsp;error&nbsp;message</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">finally</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">cl=
ose</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                If you want to use a transaction-bound <code class=3D"li=
teral">Session</code>, that is, the
               <code class=3D"literal">getCurrentSession()</code> functi=
onality for easy context propagation,
               use the JTA <code class=3D"literal">UserTransaction</code=
> API directly:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;BMT&nbsp;i=
diom&nbsp;with&nbsp;getCurrentSession</span><!-- <br/> --><span class=3D=
"java_separator">()</span>
<!--  --><br/><span class=3D"java_keyword">try</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">UserTransaction</span><span class=3D"java_plai=
n">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><=
span class=3D"java_type">UserTransaction</span><span class=3D"java_separ=
ator">)</span><span class=3D"java_keyword">new</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">InitialContext</span><spa=
n class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">lookup=
</span><span class=3D"java_separator">(</span><span class=3D"java_litera=
l">&quot;java:comp/UserTransaction&quot;</span><span class=3D"java_separ=
ator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">begi=
n</span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_type">Do</span><span class=3D"java_plain">&nb=
sp;some&nbsp;work&nbsp;on&nbsp;</span><span class=3D"java_type">Session<=
/span><span class=3D"java_plain">&nbsp;bound&nbsp;to&nbsp;transaction</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;factory=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>getCurrentSession</span><span class=3D"java_separator">().</span><span =
class=3D"java_plain">load</span><span class=3D"java_separator">(...);</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;factory=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>getCurrentSession</span><span class=3D"java_separator">().</span><span =
class=3D"java_plain">persist</span><span class=3D"java_separator">(...);=
</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">comm=
it</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">catch</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">RuntimeException</span><span class=3D"java_plain">&nbsp;=
e</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;tx</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">roll=
back</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;e</span><span class=3D"java_separator">;</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">&nbsp;or&nbsp;display&nbsp;error&nbsp;message</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                With CMT, transaction demarcation is completed in sessio=
n bean deployment descriptors, not programmatically.
                The code is reduced to:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;CMT&nbsp;i=
diom</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Session</span><span class=3D"java_plain">&nbsp;sess&nbsp;</span>=
<span class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp=
;factory</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">getCurrentSession</span><span class=3D"java_separator">();</spa=
n>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_operator">//</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_keyword">do</span><span class=3D"java_plain">&nbsp;some&nbsp;wo=
rk</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">...</span>
</pre><p>
                In a CMT/EJB, even rollback happens automatically. An un=
handled <code class=3D"literal">RuntimeException</code>
                thrown  by a session bean method tells the container to =
set the global transaction to rollback.
                <span class=3D"emphasis"><em>You do not need to use the =
Hibernate <code class=3D"literal">Transaction</code> API at
                all with BMT or CMT, and you get automatic propagation o=
f the "current" Session bound to the
                transaction.</em></span>
            </p><p>
                When configuring Hibernate's transaction factory, choose=
 <code class=3D"literal">org.hibernate.transaction.JTATransactionFactory=
</code>
                if you use JTA directly (BMT), and <code class=3D"litera=
l">org.hibernate.transaction.CMTTransactionFactory</code>
                in a CMT session bean.  Remember to also set
                <code class=3D"literal">hibernate.transaction.manager_lo=
okup_class</code>. Ensure
                that your <code class=3D"literal">hibernate.current_sess=
ion_context_class</code> is either unset (backwards
                compatibility), or is set to <code class=3D"literal">"jt=
a"</code>.
            </p><p>
                The <code class=3D"literal">getCurrentSession()</code> o=
peration has one downside in a JTA environment.
                There is one caveat to the use of <code class=3D"literal=
">after_statement</code> connection release
                mode, which is then used by default. Due to a limitation=
 of the JTA spec, it is not
                possible for Hibernate to automatically clean up any unc=
losed <code class=3D"literal">ScrollableResults</code> or
                <code class=3D"literal">Iterator</code> instances return=
ed by <code class=3D"literal">scroll()</code> or =

                <code class=3D"literal">iterate()</code>. You <span clas=
s=3D"emphasis"><em>must</em></span> release the underlying database =

                cursor by calling <code class=3D"literal">ScrollableResu=
lts.close()</code> or =

                <code class=3D"literal">Hibernate.close(Iterator)</code>=
 explicitly from a <code class=3D"literal">finally</code> =

                block. Most applications can easily avoid using <code cl=
ass=3D"literal">scroll()</code> or =

                <code class=3D"literal">iterate()</code> from the JTA or=
 CMT code.)
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-demarcat=
ion-exceptions"/>13.2.3.=C2=A0Exception handling</h3></div></div></div><=
p>
                If the <code class=3D"literal">Session</code> throws an =
exception, including any
                <code class=3D"literal">SQLException</code>, immediately=
 rollback the database
                transaction, call <code class=3D"literal">Session.close(=
)</code> and discard the
                <code class=3D"literal">Session</code> instance. Certain=
 methods of <code class=3D"literal">Session</code>
                will <span class=3D"emphasis"><em>not</em></span> leave =
the session in a consistent state. No
                exception thrown by Hibernate can be treated as recovera=
ble. Ensure that the
                <code class=3D"literal">Session</code> will be closed by=
 calling <code class=3D"literal">close()</code>
                in a <code class=3D"literal">finally</code> block.
            </p><p>
                The <code class=3D"literal">HibernateException</code>, w=
hich wraps most of the errors that
                can occur in a Hibernate persistence layer, is an unchec=
ked exception. It was not
                in older versions of Hibernate. In our opinion, we shoul=
d not force the application
                developer to catch an unrecoverable exception at a low l=
ayer. In most systems, unchecked
                and fatal exceptions are handled in one of the first fra=
mes of the method call
                stack (i.e., in higher layers) and either an error messa=
ge is presented to the application
                user or some other appropriate action is taken. Note tha=
t Hibernate might also throw
                other unchecked exceptions that are not a <code class=3D=
"literal">HibernateException</code>. These =

                are not recoverable and appropriate action should be tak=
en.
            </p><p>
                Hibernate wraps <code class=3D"literal">SQLException</co=
de>s thrown while interacting with the database
                in a <code class=3D"literal">JDBCException</code>. In fa=
ct, Hibernate will attempt to convert the exception
                into a more meaningful subclass of <code class=3D"litera=
l">JDBCException</code>.  The underlying
                <code class=3D"literal">SQLException</code> is always av=
ailable via <code class=3D"literal">JDBCException.getCause()</code>.
                Hibernate converts the <code class=3D"literal">SQLExcept=
ion</code> into an appropriate =

                <code class=3D"literal">JDBCException</code> subclass us=
ing the <code class=3D"literal">SQLExceptionConverter</code> =

                attached to the <code class=3D"literal">SessionFactory</=
code>. By default, the =

                <code class=3D"literal">SQLExceptionConverter</code> is =
defined by the configured dialect.  However, it is
                also possible to plug in a custom implementation. See th=
e javadocs for the
                <code class=3D"literal">SQLExceptionConverterFactory</co=
de> class for details.  The standard =

                <code class=3D"literal">JDBCException</code> subtypes ar=
e:
            </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li>=
<p>
                        <code class=3D"literal">JDBCConnectionException<=
/code>: indicates an error
                        with the underlying JDBC communication.
                    </p></li><li><p>
                        <code class=3D"literal">SQLGrammarException</cod=
e>: indicates a grammar
                        or syntax problem with the issued SQL.
                    </p></li><li><p>
                        <code class=3D"literal">ConstraintViolationExcep=
tion</code>: indicates some
                        form of integrity constraint violation.
                    </p></li><li><p>
                        <code class=3D"literal">LockAcquisitionException=
</code>: indicates an error
                        acquiring a lock level necessary to perform the =
requested operation.
                    </p></li><li><p>
                        <code class=3D"literal">GenericJDBCException</co=
de>: a generic exception
                        which did not fall into any of the other categor=
ies.
                    </p></li></ul></div></div><div class=3D"section" lan=
g=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=
=3D"transactions-demarcation-timeout"/>13.2.4.=C2=A0Transaction timeout<=
/h3></div></div></div><p>
                An important feature provided by a managed environment l=
ike EJB,
                that is never provided for non-managed code, is transact=
ion timeout. Transaction
                timeouts ensure that no misbehaving transaction can inde=
finitely tie up =

                resources while returning no response to the user. Outsi=
de a managed (JTA)
                environment, Hibernate cannot fully provide this functio=
nality. However,
                Hibernate can at least control data access operations, e=
nsuring that database
                level deadlocks and queries with huge result sets are li=
mited by a defined
                timeout. In a managed environment, Hibernate can delegat=
e transaction timeout
                to JTA. This functionality is abstracted by the Hibernat=
e =

                <code class=3D"literal">Transaction</code> object.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"></span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;sess&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;factory</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">openSession</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">try</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">set&nb=
sp;transaction&nbsp;timeout&nbsp;to&nbsp;</span><span class=3D"java_lite=
ral">3</span><span class=3D"java_plain">&nbsp;seconds</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">ge=
tTransaction</span><span class=3D"java_separator">().</span><span class=3D=
"java_plain">setTimeout</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_literal">3</span><span class=3D"java_separator">);</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">ge=
tTransaction</span><span class=3D"java_separator">().</span><span class=3D=
"java_plain">begin</span><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">do</span><span class=3D"java_plain">=
&nbsp;some&nbsp;work</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">...</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">ge=
tTransaction</span><span class=3D"java_separator">().</span><span class=3D=
"java_plain">commit</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">catch</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">RuntimeException</span><span class=3D"java_plain">&nbsp;=
e</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">ge=
tTransaction</span><span class=3D"java_separator">().</span><span class=3D=
"java_plain">rollback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">throw</span><span class=3D"java_plain">&nbs=
p;e</span><span class=3D"java_separator">;</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"j=
ava_plain">&nbsp;or&nbsp;display&nbsp;error&nbsp;message</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_keyword">finally</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">cl=
ose</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
                <code class=3D"literal">setTimeout()</code> cannot be ca=
lled in a CMT bean,
                where transaction timeouts must be defined declaratively=
.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"transactions-o=
ptimistic"/>13.3.=C2=A0Optimistic concurrency control</h2></div></div></=
div><p>
            The only approach that is consistent with high concurrency a=
nd high
            scalability, is optimistic concurrency control with versioni=
ng. Version
            checking uses version numbers, or timestamps, to detect conf=
licting updates
            and to prevent lost updates. Hibernate provides three possib=
le approaches
            to writing application code that uses optimistic concurrency=
. The use cases
            we discuss are in the context of long conversations, but ver=
sion checking
            also has the benefit of preventing lost updates in single da=
tabase transactions.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"transactions-optimistic-manual=
"/>13.3.1.=C2=A0Application version checking</h3></div></div></div><p>
                In an implementation without much help from Hibernate, e=
ach interaction with the
                database occurs in a new <code class=3D"literal">Session=
</code> and the developer is responsible
                for reloading all persistent instances from the database=
 before manipulating them.
                The application is forced to carry out its own version c=
hecking to ensure
                conversation transaction isolation. This approach is the=
 least efficient in terms of
                database access. It is the approach most similar to enti=
ty EJBs.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;foo&nbsp;i=
s&nbsp;an&nbsp;instance&nbsp;loaded&nbsp;by&nbsp;a&nbsp;previous&nbsp;</=
span><!-- <br/> --><span class=3D"java_type">Session</span>
<!--  --><br/><span class=3D"java_plain">session&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;factory</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">op=
enSession</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;t&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">beginTransaction</span><span c=
lass=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;oldVersion&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;foo</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">getVersion</span><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">load</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;foo</span><spa=
n class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;foo<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
getKey</span><span class=3D"java_separator">()</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">);</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_operator">//</span><spa=
n class=3D"java_plain">&nbsp;load&nbsp;the&nbsp;current&nbsp;state</span=
>
<!--  --><br/><span class=3D"java_keyword">if</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;oldVersion&nbsp;</span><span class=3D"java_operator">=
!=3D</span><span class=3D"java_plain">&nbsp;foo</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">getVersion</span><span c=
lass=3D"java_separator">()</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_keyword">throw</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">new</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">StaleObjectStateExcept=
ion</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">foo</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setProperty</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_literal">&quot;bar&quo=
t;</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">t</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">commit</span><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
                The <code class=3D"literal">version</code> property is m=
apped using <code class=3D"literal">&lt;version&gt;</code>,
                and Hibernate will automatically increment it during flu=
sh if the entity is
                dirty.
            </p><p>
                If you are operating in a low-data-concurrency environme=
nt, and do not
                require version checking, you can use this approach and =
skip the version
                check. In this case, <span class=3D"emphasis"><em>last c=
ommit wins</em></span> is the default
                strategy for long conversations. Be aware that this migh=
t
                confuse the users of the application, as they might expe=
rience lost updates without
                error messages or a chance to merge conflicting changes.=

            </p><p>
                Manual version checking is only feasible in trivial circ=
umstances
                and not practical for most applications. Often not only =
single instances, but
                complete graphs of modified objects, have to be checked.=
 Hibernate offers automatic
                version checking with either an extended <code class=3D"=
literal">Session</code> or detached instances
                as the design paradigm.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-optimist=
ic-longsession"/>13.3.2.=C2=A0Extended session and automatic versioning<=
/h3></div></div></div><p>
                A single <code class=3D"literal">Session</code> instance=
 and its persistent instances that are
                used for the whole conversation are known as <span class=
=3D"emphasis"><em>session-per-conversation</em></span>.
                Hibernate checks instance versions at flush time, throwi=
ng an exception if concurrent
                modification is detected. It is up to the developer to c=
atch and handle this exception. =

                Common options are the opportunity for the user to merge=
 changes or to restart the
                business conversation with non-stale data.
            </p><p>
                The <code class=3D"literal">Session</code> is disconnect=
ed from any underlying JDBC connection
                when waiting for user interaction. This approach is the =
most efficient in terms
                of database access. The application does not version che=
ck or
                reattach detached instances, nor does it have to reload =
instances in every
                database transaction.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;foo&nbsp;i=
s&nbsp;an&nbsp;instance&nbsp;loaded&nbsp;earlier&nbsp;by&nbsp;the&nbsp;o=
ld&nbsp;session</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;t&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">beginTransaction</span><span c=
lass=3D"java_separator">();</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_operator">//</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_type">Obtain</span><span class=3D"java_plai=
n">&nbsp;a&nbsp;</span><span class=3D"java_keyword">new</span><span clas=
s=3D"java_plain">&nbsp;JDBC&nbsp;connection</span><span class=3D"java_se=
parator">,</span><span class=3D"java_plain">&nbsp;start&nbsp;transaction=
</span>
</span>
<!--  --><br/><span class=3D"java_plain">foo</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setProperty</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_literal">&quot;bar&quo=
t;</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span><span class=3D"java_plain">&nbsp;&nbsp;&nb=
sp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Only</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_keyword">for</span><span c=
lass=3D"java_plain">&nbsp;last&nbsp;transaction&nbsp;in&nbsp;conversatio=
n</span>
<!--  --><br/><span class=3D"java_plain">t</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">commit</span><span class=3D"j=
ava_separator">();</span><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">/=
/</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">Also</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_keyword">return</span><span class=3D"java_plain">&nbsp;JDBC&nbsp;connec=
tion</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span><span class=3D"java_plain">&nbsp;&nbsp;&nb=
sp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Only</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_keyword">for</span><span c=
lass=3D"java_plain">&nbsp;last&nbsp;transaction&nbsp;in&nbsp;conversatio=
n</span></pre><p>
                The <code class=3D"literal">foo</code> object knows whic=
h <code class=3D"literal">Session</code> it was
                loaded in. Beginning a new database transaction on an ol=
d session obtains a new connection
                and resumes the session. Committing a database transacti=
on disconnects a session
                from the JDBC connection and returns the connection to t=
he pool. After reconnection, to
                force a version check on data you are not updating, you =
can call <code class=3D"literal">Session.lock()</code>
                with <code class=3D"literal">LockMode.READ</code> on any=
 objects that might have been updated by another
                transaction. You do not need to lock any data that you <=
span class=3D"emphasis"><em>are</em></span> updating.
                Usually you would set <code class=3D"literal">FlushMode.=
MANUAL</code> on an extended <code class=3D"literal">Session</code>,
                so that only the last database transaction cycle is allo=
wed to actually persist all
                modifications made in this conversation. Only this last =
database transaction
                will include the <code class=3D"literal">flush()</code> =
operation, and then
                <code class=3D"literal">close()</code> the session to en=
d the conversation.
            </p><p>
                This pattern is problematic if the <code class=3D"litera=
l">Session</code> is too big to
                be stored during user think time (for example, an <code =
class=3D"literal">HttpSession</code> should
                be kept as small as possible). As the <code class=3D"lit=
eral">Session</code> is also the
                first-level cache and contains all loaded objects, we ca=
n probably
                use this strategy only for a few request/response cycles=
. Use a
                <code class=3D"literal">Session</code> only for a single=
 conversation as it will soon
                have stale data.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>Earlier versions of Hibernate req=
uired explicit disconnection and reconnection
                of a <code class=3D"literal">Session</code>. These metho=
ds are deprecated, as beginning and
                ending a transaction has the same effect.
	    </p></div><p>
                Keep the disconnected <code class=3D"literal">Session</c=
ode> close
                to the persistence layer. Use an EJB stateful session be=
an to
                hold the <code class=3D"literal">Session</code> in a thr=
ee-tier environment. Do not transfer
                it to the web layer, or even serialize it to a separate =
tier, to store it in the
                <code class=3D"literal">HttpSession</code>.
            </p><p>
                The extended session pattern, or <span class=3D"emphasis=
"><em>session-per-conversation</em></span>, is
                more difficult to implement with automatic current sessi=
on context management.
                You need to supply your own implementation of the <code =
class=3D"literal">CurrentSessionContext</code>
                for this. See the Hibernate Wiki for examples.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-optimist=
ic-detached"/>13.3.3.=C2=A0Detached objects and automatic versioning</h3=
></div></div></div><p>
                Each interaction with the persistent store occurs in a n=
ew <code class=3D"literal">Session</code>.
                However, the same persistent instances are reused for ea=
ch interaction with the database.
                The application manipulates the state of detached instan=
ces originally loaded in another
                <code class=3D"literal">Session</code> and then reattach=
es them using <code class=3D"literal">Session.update()</code>,
                <code class=3D"literal">Session.saveOrUpdate()</code>, o=
r <code class=3D"literal">Session.merge()</code>.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_oper=
ator">//</span><!-- <br/> --><span class=3D"java_plain">&nbsp;foo&nbsp;i=
s&nbsp;an&nbsp;instance&nbsp;loaded&nbsp;by&nbsp;a&nbsp;previous&nbsp;</=
span><!-- <br/> --><span class=3D"java_type">Session</span>
<!--  --><br/><span class=3D"java_plain">foo</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setProperty</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_literal">&quot;bar&quo=
t;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;factory</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">op=
enSession</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;t&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">beginTransaction</span><span c=
lass=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">saveOrUpdate</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_plain">foo</span>=
<span class=3D"java_separator">);</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_operator">//</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_type">Use</span><span class=3D"java_p=
lain">&nbsp;merge</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">if</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot=
;foo&quot;</span><span class=3D"java_plain">&nbsp;might&nbsp;have&nbsp;b=
een&nbsp;loaded&nbsp;already</span>
<!--  --><br/><span class=3D"java_plain">t</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">commit</span><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
                Again, Hibernate will check instance versions during flu=
sh, throwing an
                exception if conflicting updates occurred.
            </p><p>
                You can also call <code class=3D"literal">lock()</code> =
instead of <code class=3D"literal">update()</code>,
                and use <code class=3D"literal">LockMode.READ</code> (pe=
rforming a version check and bypassing all
                caches) if you are sure that the object has not been mod=
ified.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"transactions-optimist=
ic-customizing"/>13.3.4.=C2=A0Customizing automatic versioning</h3></div=
></div></div><p>
                You can disable Hibernate's automatic version increment =
for particular properties and =

                collections by setting the <code class=3D"literal">optim=
istic-lock</code> mapping attribute to =

                <code class=3D"literal">false</code>. Hibernate will the=
n no longer increment versions if the =

                property is dirty.
            </p><p>
                Legacy database schemas are often static and cannot be m=
odified. Or, other applications
                might access the same database and will not know how to =
handle version numbers or
                even timestamps. In both cases, versioning cannot rely o=
n a particular column in a table.
                To force a version check with a
                comparison of the state of all fields in a row but witho=
ut a version or timestamp property mapping, =

		turn on <code class=3D"literal">optimistic-lock=3D"all"</code>
                in the <code class=3D"literal">&lt;class&gt;</code> mapp=
ing. This conceptually only works
                if Hibernate can compare the old and the new state (i.e.=
, if you use a single long
                <code class=3D"literal">Session</code> and not session-p=
er-request-with-detached-objects).
            </p><p>
                Concurrent modification can be permitted in instances wh=
ere the changes that have been
                made do not overlap. If you set <code class=3D"literal">=
optimistic-lock=3D"dirty"</code> when mapping the
                <code class=3D"literal">&lt;class&gt;</code>, Hibernate =
will only compare dirty fields during flush.
            </p><p>
                In both cases, with dedicated version/timestamp columns =
or with a full/dirty field
                comparison, Hibernate uses a single <code class=3D"liter=
al">UPDATE</code> statement, with an
                appropriate <code class=3D"literal">WHERE</code> clause,=
 per entity to execute the version check
                and update the information. If you use transitive persis=
tence to cascade reattachment
                to associated entities, Hibernate may execute unnecessar=
y updates. This is usually
                not a problem, but <span class=3D"emphasis"><em>on updat=
e</em></span> triggers in the database might be
                executed even when no changes have been made to detached=
 instances. You can customize
                this behavior by setting  <code class=3D"literal">select=
-before-update=3D"true"</code> in the
                <code class=3D"literal">&lt;class&gt;</code> mapping, fo=
rcing Hibernate to <code class=3D"literal">SELECT</code>
                the instance to ensure that changes did occur before upd=
ating the row.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"transactions-l=
ocking"/>13.4.=C2=A0Pessimistic locking</h2></div></div></div><p>
            It is not intended that users spend much time worrying about=
 locking strategies. It is usually
            enough to specify an isolation level for the JDBC connection=
s and then simply let the
            database do all the work. However, advanced users may wish t=
o obtain
            exclusive pessimistic locks or re-obtain locks at the start =
of a new transaction.
        </p><p>
            Hibernate will always use the locking mechanism of the datab=
ase; it never lock objects
            in memory.
        </p><p>
            The <code class=3D"literal">LockMode</code> class defines th=
e different lock levels that can be acquired
            by Hibernate. A lock is obtained by the following mechanisms=
:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    <code class=3D"literal">LockMode.WRITE</code> is acq=
uired automatically when Hibernate updates or inserts
                    a row.
                </p></li><li><p>
                    <code class=3D"literal">LockMode.UPGRADE</code> can =
be acquired upon explicit user request using
                    <code class=3D"literal">SELECT ... FOR UPDATE</code>=
 on databases which support that syntax.
                </p></li><li><p>
                    <code class=3D"literal">LockMode.UPGRADE_NOWAIT</cod=
e> can be acquired upon explicit user request using a
                    <code class=3D"literal">SELECT ... FOR UPDATE NOWAIT=
</code> under Oracle.
                </p></li><li><p>
                    <code class=3D"literal">LockMode.READ</code> is acqu=
ired automatically when Hibernate reads data
                    under Repeatable Read or Serializable isolation leve=
l. It can be re-acquired by explicit user
                    request.
                </p></li><li><p>
            <code class=3D"literal">LockMode.NONE</code> represents the =
absence of a lock. All objects switch to this
            lock mode at the end of a <code class=3D"literal">Transactio=
n</code>. Objects associated with the session
            via a call to <code class=3D"literal">update()</code> or <co=
de class=3D"literal">saveOrUpdate()</code> also start out
            in this lock mode.
        </p></li></ul></div><p>
            The "explicit user request" is expressed in one of the follo=
wing ways:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    A call to <code class=3D"literal">Session.load()</co=
de>, specifying a <code class=3D"literal">LockMode</code>.
                </p></li><li><p>
                    A call to <code class=3D"literal">Session.lock()</co=
de>.
                </p></li><li><p>
                    A call to <code class=3D"literal">Query.setLockMode(=
)</code>.
                </p></li></ul></div><p>
            If <code class=3D"literal">Session.load()</code> is called w=
ith <code class=3D"literal">UPGRADE</code> or
            <code class=3D"literal">UPGRADE_NOWAIT</code>, and the reque=
sted object was not yet loaded by
            the session, the object is loaded using <code class=3D"liter=
al">SELECT ... FOR UPDATE</code>.
            If <code class=3D"literal">load()</code> is called for an ob=
ject that is already loaded with
            a less restrictive lock than the one requested, Hibernate ca=
lls
            <code class=3D"literal">lock()</code> for that object.
        </p><p>
            <code class=3D"literal">Session.lock()</code> performs a ver=
sion number check if the specified lock
            mode is <code class=3D"literal">READ</code>, <code class=3D"=
literal">UPGRADE</code> or
            <code class=3D"literal">UPGRADE_NOWAIT</code>. In the case o=
f <code class=3D"literal">UPGRADE</code> or
            <code class=3D"literal">UPGRADE_NOWAIT</code>, <code class=3D=
"literal">SELECT ... FOR UPDATE</code> is used.
        </p><p>
            If the requested lock mode is not supported by the database,=
 Hibernate uses an appropriate
            alternate mode instead of throwing an exception. This ensure=
s that applications are
            portable.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"transactions-connection-=
release"/>13.5.=C2=A0Connection release modes</h2></div></div></div><p>
            One of the legacies of Hibernate 2.x JDBC connection managem=
ent =

            meant that a <code class=3D"literal">Session</code> would ob=
tain a connection when it was first
            required and then maintain that connection until the session=
 was closed.
            Hibernate 3.x introduced the notion of connection release mo=
des that would instruct a session
            how to handle its JDBC connections.  The following discussio=
n is pertinent
            only to connections provided through a configured <code clas=
s=3D"literal">ConnectionProvider</code>.
            User-supplied connections are outside the breadth of this di=
scussion.  The different
            release modes are identified by the enumerated values of
            <code class=3D"literal">org.hibernate.ConnectionReleaseMode<=
/code>:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    <code class=3D"literal">ON_CLOSE</code>: is the lega=
cy behavior described above. The
                    Hibernate session obtains a connection when it first=
 needs to perform some JDBC access
                    and maintains that connection until the session is c=
losed.
                </p></li><li><p>
                    <code class=3D"literal">AFTER_TRANSACTION</code>: re=
leases connections after a
                    <code class=3D"literal">org.hibernate.Transaction</c=
ode> has been completed.
                </p></li><li><p>
                    <code class=3D"literal">AFTER_STATEMENT</code> (also=
 referred to as aggressive release):
                    releases connections after every statement execution=
. This aggressive releasing
                    is skipped if that statement leaves open resources a=
ssociated with the given session.
                    Currently the only situation where this occurs is th=
rough the use of
                    <code class=3D"literal">org.hibernate.ScrollableResu=
lts</code>.
                </p></li></ul></div><p>
            The configuration parameter <code class=3D"literal">hibernat=
e.connection.release_mode</code> is used
            to specify which release mode to use.  The possible values a=
re as follows:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    <code class=3D"literal">auto</code> (the default): t=
his choice delegates to the release mode
                    returned by the <code class=3D"literal">org.hibernat=
e.transaction.TransactionFactory.getDefaultReleaseMode()</code>
                    method.  For JTATransactionFactory, this returns Con=
nectionReleaseMode.AFTER_STATEMENT; for
                    JDBCTransactionFactory, this returns ConnectionRelea=
seMode.AFTER_TRANSACTION.  Do not
                    change this default behavior as failures due to the =
value of this setting
                    tend to indicate bugs and/or invalid assumptions in =
user code.
                </p></li><li><p>
                    <code class=3D"literal">on_close</code>: uses Connec=
tionReleaseMode.ON_CLOSE.  This setting
                    is left for backwards compatibility, but its use is =
discouraged.
                </p></li><li><p>
                    <code class=3D"literal">after_transaction</code>: us=
es ConnectionReleaseMode.AFTER_TRANSACTION.
                    This setting should not be used in JTA environments.=
  Also note that with
                    ConnectionReleaseMode.AFTER_TRANSACTION, if a sessio=
n is considered to be in auto-commit
                    mode, connections will be released as if the release=
 mode were AFTER_STATEMENT.
                </p></li><li><p>
                    <code class=3D"literal">after_statement</code>: uses=
 ConnectionReleaseMode.AFTER_STATEMENT.  Additionally,
                    the configured <code class=3D"literal">ConnectionPro=
vider</code> is consulted to see if it supports this
                    setting (<code class=3D"literal">supportsAggressiveR=
elease()</code>).  If not, the release mode is reset
                    to ConnectionReleaseMode.AFTER_TRANSACTION.  This se=
tting is only safe in environments where
                    we can either re-acquire the same underlying JDBC co=
nnection each time you make a call into
                    <code class=3D"literal">ConnectionProvider.getConnec=
tion()</code> or in auto-commit environments where
                    it does not matter if we re-establish the same conne=
ction.
                </p></li></ul></div></div></div><div class=3D"chapter" l=
ang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a =
id=3D"events"/>Chapter=C2=A014.=C2=A0Interceptors and events</h2></div><=
/div></div><div class=3D"toc"><dl><dt><span class=3D"section"><a href=3D=
"#objectstate-interceptors">14.1. Interceptors</a></span></dt><dt><span =
class=3D"section"><a href=3D"#objectstate-events">14.2. Event system</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#objectstate-decl-sec=
urity">14.3. Hibernate declarative security</a></span></dt></dl></div><p=
>
        It is useful for the application to react to certain events that=
 occur
        inside Hibernate. This allows for the implementation of generic =

        functionality and the extension of Hibernate functionality.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"objectstate-interceptors"/>14.1.=C2=
=A0Interceptors</h2></div></div></div><p>
            The <code class=3D"literal">Interceptor</code> interface pro=
vides callbacks from the session to the =

            application, allowing the application to inspect and/or mani=
pulate properties of a
            persistent object before it is saved, updated, deleted or lo=
aded. One =

            possible use for this is to track auditing information. For =
example, the following =

            <code class=3D"literal">Interceptor</code> automatically set=
s the  <code class=3D"literal">createTimestamp</code> =

            when an <code class=3D"literal">Auditable</code> is created =
and updates the =

            <code class=3D"literal">lastUpdateTimestamp</code> property =
when an <code class=3D"literal">Auditable</code> is =

            updated.
        </p><p>
            You can either implement <code class=3D"literal">Interceptor=
</code> directly or extend
            <code class=3D"literal">EmptyInterceptor</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;org</span>=
<!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span=
 class=3D"java_plain">hibernate</span><!-- <br/> --><span class=3D"java_=
separator">.</span><!-- <br/> --><span class=3D"java_plain">test</span><=
!-- <br/> --><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">io</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_type">Serializable</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Date</span><span class=3D"java_separator">;</s=
pan>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Iterator</span><span class=3D"java_separator">=
;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">EmptyInterceptor</span><span class=3D"java=
_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">Transaction</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">type</span><span class=3D"java_separator"=
>.</span><span class=3D"java_type">Type</span><span class=3D"java_separa=
tor">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">AuditIntercep=
tor</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_ke=
yword">extends</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_type">EmptyInterceptor</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">int</span><span class=3D"java_plain=
">&nbsp;updates</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">int</span><span class=3D"java_plain=
">&nbsp;creates</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">int</span><span class=3D"java_plain=
">&nbsp;loads</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;onDelete</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;entity</sp=
an><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"jav=
a_type">Serializable</span><span class=3D"java_plain">&nbsp;id</span><sp=
an class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"jav=
a_type">Object</span><span class=3D"java_separator">[]</span><span class=
=3D"java_plain">&nbsp;state</span><span class=3D"java_separator">,</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"jav=
a_type">String</span><span class=3D"java_separator">[]</span><span class=
=3D"java_plain">&nbsp;propertyNames</span><span class=3D"java_separator"=
>,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"jav=
a_type">Type</span><span class=3D"java_separator">[]</span><span class=3D=
"java_plain">&nbsp;types</span><span class=3D"java_separator">)</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">do</span><sp=
an class=3D"java_plain">&nbsp;nothing</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">boolean</span><span class=3D"java_pl=
ain">&nbsp;onFlushDirty</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;ent=
ity</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Serializable</span><sp=
an class=3D"java_plain">&nbsp;id</span><span class=3D"java_separator">,<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Object</span><span cla=
ss=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;currentS=
tate</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Object</span><span cla=
ss=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;previous=
State</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">String</span><span cla=
ss=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;property=
Names</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Type</span><span class=
=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;types</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;entity&nbsp;</span><span class=3D"java_key=
word">instanceof</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">Auditable</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updates</span><span class=3D"ja=
va_operator">++</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">for</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_type">int</span><span class=3D"java_plain">&nbsp;i</span><span=
 class=3D"java_operator">=3D</span><span class=3D"java_literal">0</span>=
<span class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;=
i&nbsp;</span><span class=3D"java_operator">&lt;</span><span class=3D"ja=
va_plain">&nbsp;propertyNames</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_plain">length</span><span class=3D"java_separator=
">;</span><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_o=
perator">++</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_literal">&quot;lastUpdateTimestamp&quot=
;</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">equals</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">&nbsp;propertyNames</span><span class=3D"java_separator">[</spa=
n><span class=3D"java_plain">i</span><span class=3D"java_separator">]</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;currentState</span><span class=3D"java_separator">[</sp=
an><span class=3D"java_plain">i</span><span class=3D"java_separator">]</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">Date</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">true</spa=
n><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">false</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">boolean</span><span class=3D"java_pl=
ain">&nbsp;onLoad</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;entity</s=
pan><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">Serializable</span><span class=3D"java_plain">&nbsp;id</span=
><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">Object</span><span class=3D"java_separator">[]</span><span c=
lass=3D"java_plain">&nbsp;state</span><span class=3D"java_separator">,</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">String</span><span class=3D"java_separator">[]</span><span c=
lass=3D"java_plain">&nbsp;propertyNames</span><span class=3D"java_separa=
tor">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">Type</span><span class=3D"java_separator">[]</span><span cla=
ss=3D"java_plain">&nbsp;types</span><span class=3D"java_separator">)</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;entity&nbsp;</span><span class=3D"java_key=
word">instanceof</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">Auditable</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loads</span><span class=3D"java=
_operator">++</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">false</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">boolean</span><span class=3D"java_pl=
ain">&nbsp;onSave</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Object</span><span class=3D"java_plain">&nbsp;entity</s=
pan><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">Serializable</span><span class=3D"java_plain">&nbsp;id</span=
><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">Object</span><span class=3D"java_separator">[]</span><span c=
lass=3D"java_plain">&nbsp;state</span><span class=3D"java_separator">,</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">String</span><span class=3D"java_separator">[]</span><span c=
lass=3D"java_plain">&nbsp;propertyNames</span><span class=3D"java_separa=
tor">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D=
"java_type">Type</span><span class=3D"java_separator">[]</span><span cla=
ss=3D"java_plain">&nbsp;types</span><span class=3D"java_separator">)</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">{</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;entity&nbsp;</span><span class=3D"java_key=
word">instanceof</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_type">Auditable</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;creates</span><span class=3D"ja=
va_operator">++</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">for</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_type">int</span><span class=3D"java_plain">&nbsp;i</span><span=
 class=3D"java_operator">=3D</span><span class=3D"java_literal">0</span>=
<span class=3D"java_separator">;</span><span class=3D"java_plain">&nbsp;=
i</span><span class=3D"java_operator">&lt;</span><span class=3D"java_pla=
in">propertyNames</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">length</span><span class=3D"java_separator">;</span><s=
pan class=3D"java_plain">&nbsp;i</span><span class=3D"java_operator">++<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_literal">&quot;createTimestamp&quot;</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">eq=
uals</span><span class=3D"java_separator">(</span><span class=3D"java_pl=
ain">&nbsp;propertyNames</span><span class=3D"java_separator">[</span><s=
pan class=3D"java_plain">i</span><span class=3D"java_separator">]</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;state</span><span class=3D"java_separator">[</span><spa=
n class=3D"java_plain">i</span><span class=3D"java_separator">]</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">=3D<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywor=
d">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">Date</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">true</spa=
n><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">false</sp=
an><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;afterTransactionCompletion</span><span class=3D"java_separator">=
(</span><span class=3D"java_type">Transaction</span><span class=3D"java_=
plain">&nbsp;tx</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;tx</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">wasCommitted</span><span class=3D"java_=
separator">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">System</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">out</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">println</span><span class=3D"java_separator">(</span><span =
class=3D"java_literal">&quot;Creations:&nbsp;&quot;</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_operator">+</span><span cl=
ass=3D"java_plain">&nbsp;creates&nbsp;</span><span class=3D"java_operato=
r">+</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_l=
iteral">&quot;,&nbsp;Updates:&nbsp;&quot;</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_operator">+</span><span class=3D"jav=
a_plain">&nbsp;updates</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;L=
oads:&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;loads</sp=
an><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;updates</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;creates</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;loads</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">0</span><span class=3D"java_separator">;</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
            There are two kinds of inteceptors: <code class=3D"literal">=
Session</code>-scoped and
            <code class=3D"literal">SessionFactory</code>-scoped.
        </p><p>
            A <code class=3D"literal">Session</code>-scoped interceptor =
is specified
            when a session is opened using one of the overloaded Session=
Factory.openSession()
            methods accepting an <code class=3D"literal">Interceptor</co=
de>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sf</span><!-- <br/> --><span class=3D=
"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">openSe=
ssion</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=
=3D"java_keyword">new</span><!-- <br/> --><span class=3D"java_plain">&nb=
sp;</span><!-- <br/> --><span class=3D"java_type">AuditInterceptor</span=
><!-- <br/> --><span class=3D"java_separator">()</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_s=
eparator">);</span></pre><p>
            A <code class=3D"literal">SessionFactory</code>-scoped inter=
ceptor is registered with the <code class=3D"literal">Configuration</cod=
e>
            object prior to building the <code class=3D"literal">Session=
Factory</code>.  Unless
            a session is opened explicitly specifying the interceptor to=
 use, the supplied interceptor
            will be applied to all sessions opened from that <code class=
=3D"literal">SessionFactory</code>.  <code class=3D"literal">SessionFact=
ory</code>-scoped
            interceptors must be thread safe. Ensure that you do not sto=
re session-specific states, since multiple
            sessions will use this interceptor potentially concurrently.=

        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <b=
r/> --><span class=3D"java_type">Configuration</span><!-- <br/> --><span=
 class=3D"java_separator">().</span><!-- <br/> --><span class=3D"java_pl=
ain">setInterceptor</span><!-- <br/> --><span class=3D"java_separator">(=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> =
--><span class=3D"java_keyword">new</span><!-- <br/> --><span class=3D"j=
ava_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type">AuditInt=
erceptor</span><!-- <br/> --><span class=3D"java_separator">()</span><!-=
- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span c=
lass=3D"java_separator">);</span></pre></div><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D=
"objectstate-events"/>14.2.=C2=A0Event system</h2></div></div></div><p>
            If you have to react to particular events in your persistenc=
e layer, you can
            also use the Hibernate3 <span class=3D"emphasis"><em>event</=
em></span> architecture. The event
            system can be used in addition, or as a replacement, for int=
erceptors.
        </p><p>
            All the methods of the <code class=3D"literal">Session</code=
> interface correlate
            to an event. You have a <code class=3D"literal">LoadEvent</c=
ode>, a <code class=3D"literal">FlushEvent</code>, etc.
            Consult the XML configuration-file DTD or the <code class=3D=
"literal">org.hibernate.event</code>
            package for the full list of defined event types. When a req=
uest is made of one of
            these methods, the Hibernate <code class=3D"literal">Session=
</code> generates an appropriate
            event and passes it to the configured event listeners for th=
at type. Out-of-the-box,
            these listeners implement the same processing in which those=
 methods always resulted.
            However, you are free to implement a customization of one of=
 the listener interfaces
            (i.e., the <code class=3D"literal">LoadEvent</code> is proce=
ssed by the registered implementation
            of the <code class=3D"literal">LoadEventListener</code> inte=
rface), in which case their
            implementation would be responsible for processing any <code=
 class=3D"literal">load()</code> requests
            made of the <code class=3D"literal">Session</code>.
        </p><p>
            The listeners should be considered singletons. This means th=
ey are shared between
            requests, and should not save any state as instance variable=
s.
        </p><p>
            A custom listener implements the appropriate interface for t=
he event it wants to
            process and/or extend one of the convenience base classes (o=
r even the default event
            listeners used by Hibernate out-of-the-box as these are decl=
ared non-final for this
            purpose). Custom listeners can either be registered programm=
atically through the
            <code class=3D"literal">Configuration</code> object, or spec=
ified in the Hibernate configuration
            XML. Declarative configuration through the properties file i=
s not supported. Here is an
            example of a custom load event listener:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>public</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type"=
>MyLoadListener</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_keyword">implements</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_type">LoadEventListener</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_keyword">this</span><span class=3D"java_plain=
">&nbsp;is&nbsp;the&nbsp;single&nbsp;method&nbsp;defined&nbsp;by&nbsp;th=
e&nbsp;</span><span class=3D"java_type">LoadEventListener</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">interface</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;onLoad</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">LoadEvent</span><span class=3D"java_plain">&nbsp;event</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_type">LoadEventListener</span><span class=3D=
"java_separator">.</span><span class=3D"java_type">LoadType</span><span =
class=3D"java_plain">&nbsp;loadType</span><span class=3D"java_separator"=
>)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throws</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">HibernateException</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">if</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">!</sp=
an><span class=3D"java_type">MySecurity</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">isAuthorized</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;event</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">getEntit=
yClassName</span><span class=3D"java_separator">(),</span><span class=3D=
"java_plain">&nbsp;event</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">getEntityId</span><span class=3D"java_separator=
">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_type">MySecurityException</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_literal">&quot;Unauthorized&nbsp;access&quot;</s=
pan><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
            You also need a configuration entry telling Hibernate to use=
 the listener in addition
            to the default listener:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-configuration</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">session-factory=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">event</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;load&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">listener</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;com.eg.MyLoadListener&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">listener</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;org.hibernate.event.def.DefaultLoadEventListener&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">event</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">session-factor=
y</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-configuration</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
</pre><p>
            Instead, you can register it programmatically:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Co=
nfiguration</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cfg&nbs=
p;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_keyword">new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;=
</span><!-- <br/> --><span class=3D"java_type">Configuration</span><!-- =
<br/> --><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">LoadEventListener</span><span cl=
ass=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;stack&n=
bsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_separator">{</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">MyLoadListene=
r</span><span class=3D"java_separator">(),</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_keyword">new</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">DefaultLoadEventListen=
er</span><span class=3D"java_separator">()</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">};</span>
<!--  --><br/><span class=3D"java_plain">cfg</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_type">EventListeners</span><span c=
lass=3D"java_separator">().</span><span class=3D"java_plain">setLoadEven=
tListeners</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_plain">stack</span><span class=3D"java_separator">);</span></pre><p>=

            Listeners registered declaratively cannot share instances. I=
f the same class name is
            used in multiple <code class=3D"literal">&lt;listener/&gt;</=
code> elements, each reference will
            result in a separate instance of that class. If you need to =
share
            listener instances between listener types you must use the p=
rogrammatic registration
            approach.
        </p><p>
            Why implement an interface and define the specific type duri=
ng configuration? A
            listener implementation could implement multiple event liste=
ner interfaces. Having the
            type additionally defined during registration makes it easie=
r to turn custom listeners on
            or off during configuration.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-decl-securit=
y"/>14.3.=C2=A0Hibernate declarative security</h2></div></div></div><p>
            Usually, declarative security in Hibernate applications is m=
anaged in a session facade
            layer. Hibernate3 allows certain actions to be permissioned =
via JACC, and authorized =

            via JAAS. This is an optional functionality that is built on=
 top of the event architecture.
        </p><p>
            First, you must configure the appropriate event listeners, t=
o enable the use of JAAS
            authorization.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
listener</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;pre-delete&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;org.hibernate.secure.JACCPreDeleteEventListener&quot;</=
span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
listener</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;pre-update&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;org.hibernate.secure.JACCPreUpdateEventListener&quot;</=
span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
listener</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;pre-insert&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;org.hibernate.secure.JACCPreInsertEventListener&quot;</=
span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
listener</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;pre-load&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;org.hibernate.secure.JACCPreLoadEventListener&quot;</span=
><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"><=
/span><br />
</pre><p>
            Note that <code class=3D"literal">&lt;listener type=3D"..." =
class=3D"..."/&gt;</code> is shorthand
            for <code class=3D"literal">&lt;event type=3D"..."&gt;&lt;li=
stener class=3D"..."/&gt;&lt;/event&gt;</code>
            when there is exactly one listener for a particular event ty=
pe.
        </p><p>
            Next, while still in <code class=3D"literal">hibernate.cfg.x=
ml</code>, bind the permissions to roles:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
grant</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">role</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;admin&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">entity-name</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;User&quot;</span><span class=3D"xml_plain">&nbsp;</span><=
span class=3D"xml_attribute_name">actions</span><span class=3D"xml_tag_s=
ymbols">=3D</span><span class=3D"xml_attribute_value">&quot;insert,updat=
e,read&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
grant</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">role</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;su&quot;</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">entity-name</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;User&quot;</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">actions</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;*&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
</pre><p>
            The role names are the roles understood by your JACC provide=
r.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"batch"/>Chapter=C2=
=A015.=C2=A0Batch processing</h2></div></div></div><div class=3D"toc"><d=
l><dt><span class=3D"section"><a href=3D"#batch-inserts">15.1. Batch ins=
erts</a></span></dt><dt><span class=3D"section"><a href=3D"#batch-update=
">15.2. Batch updates</a></span></dt><dt><span class=3D"section"><a href=
=3D"#batch-statelesssession">15.3. The StatelessSession interface</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"#batch-direct">15.4. DML=
-style operations</a></span></dt></dl></div><p>
        A naive approach to inserting 100,000 rows in the database using=
 Hibernate might =

        look like this:
    </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Sessio=
n</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;</sp=
an><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><span=
 class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plai=
n">openSession</span><!-- <br/> --><span class=3D"java_separator">();</s=
pan>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">for</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">int</span><span clas=
s=3D"java_plain">&nbsp;i</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_operator=
">&lt;</span><span class=3D"java_literal">100000</span><span class=3D"ja=
va_separator">;</span><span class=3D"java_plain">&nbsp;i</span><span cla=
ss=3D"java_operator">++</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Customer</span><span class=3D"java_plain">&nbs=
p;customer&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer=
</span><span class=3D"java_separator">(.....);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;session=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>save</span><span class=3D"java_separator">(</span><span class=3D"java_p=
lain">customer</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
        This would fall over with an <code class=3D"literal">OutOfMemory=
Exception</code> somewhere =

        around the 50,000th row. That is because Hibernate caches all th=
e newly inserted =

        <code class=3D"literal">Customer</code> instances in the session=
-level cache. In this chapter =

	we will show you how to avoid this problem.
    </p><p>
        =

        If you are undertaking batch processing you will need to enable =
the use of
        JDBC batching.  This is absolutely essential if you want to achi=
eve optimal performance.
	Set the JDBC batch size to a reasonable number (10-50, for example):
    </p><pre class=3D"programlisting">hibernate.jdbc.batch_size 20</pre>=
<p><a id=3D"disablebatching"/>
        Hibernate disables insert batching at the JDBC level transparent=
ly if you
        use an <code class=3D"literal">identity</code> identifier genera=
tor.
    </p><p>
        You can also do this kind of work in a process where interaction=
 with =

        the second-level cache is completely disabled:
    </p><pre class=3D"programlisting">hibernate.cache.use_second_level_c=
ache false</pre><p>
        However, this is not absolutely necessary, since we can explicit=
ly set the
        <code class=3D"literal">CacheMode</code> to disable interaction =
with the second-level cache.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"batch-inserts"/>15.1.=C2=A0Batch i=
nserts</h2></div></div></div><p>
            When making new objects persistent <code class=3D"literal">f=
lush()</code> and =

            then <code class=3D"literal">clear()</code> the session regu=
larly in order to control the size of
            the first-level cache.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">openSession</span><!-- <br/> --><span class=3D"java_separator">()=
;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_keyword">for</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">int</span><span clas=
s=3D"java_plain">&nbsp;i</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_operator=
">&lt;</span><span class=3D"java_literal">100000</span><span class=3D"ja=
va_separator">;</span><span class=3D"java_plain">&nbsp;i</span><span cla=
ss=3D"java_operator">++</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Customer</span><span class=3D"java_plain">&nbs=
p;customer&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Customer=
</span><span class=3D"java_separator">(.....);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;session=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>save</span><span class=3D"java_separator">(</span><span class=3D"java_p=
lain">customer</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
&nbsp;i&nbsp;</span><span class=3D"java_operator">%</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">20</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_operator">=3D=3D</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">=
0</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_sepa=
rator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">{</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_operator">//</span><span class=3D"java_literal">20</span><span=
 class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;same&=
nbsp;as&nbsp;the&nbsp;JDBC&nbsp;batch&nbsp;size</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">flush&nbsp;a&nbsp;batch&nbsp;of&nbsp;inserts&nbsp;and&=
nbsp;release&nbsp;memory</span><span class=3D"java_operator">:</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">flush</span><span class=3D"java_separator">();<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">clear</span><span class=3D"java_separator">();<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
batch-update"/>15.2.=C2=A0Batch updates</h2></div></div></div><p>
            For retrieving and updating data, the same ideas apply. In a=
ddition, you need to =

            use <code class=3D"literal">scroll()</code> to take advantag=
e of server-side cursors for =

            queries that return many rows of data.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">openSession</span><!-- <br/> --><span class=3D"java_separator">()=
;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_type">ScrollableResults</span><span cl=
ass=3D"java_plain">&nbsp;customers&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;session</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">getNamedQuery</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_literal">=
&quot;GetCustomers&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setCac=
heMode</span><span class=3D"java_separator">(</span><span class=3D"java_=
type">CacheMode</span><span class=3D"java_separator">.</span><span class=
=3D"java_plain">IGNORE</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">scroll=
</span><span class=3D"java_separator">(</span><span class=3D"java_type">=
ScrollMode</span><span class=3D"java_separator">.</span><span class=3D"j=
ava_plain">FORWARD_ONLY</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;count</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_literal">0</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;customers</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">next</span><span class=3D"java_separato=
r">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Customer</span><span class=3D"java_plain">&nbs=
p;customer&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><s=
pan class=3D"java_type">Customer</span><span class=3D"java_separator">)<=
/span><span class=3D"java_plain">&nbsp;customers</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">get</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">0</span><span clas=
s=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;custome=
r</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">updateStuff</span><span class=3D"java_separator">(...);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">if</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_operator">++</span><span class=3D"java_=
plain">count&nbsp;</span><span class=3D"java_operator">%</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_literal">20</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">=3D=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">0</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">flush&nbsp;a&nbsp;batch&nbsp;of&nbsp;updates&nbsp;and&=
nbsp;release&nbsp;memory</span><span class=3D"java_operator">:</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">flush</span><span class=3D"java_separator">();<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;session</span><span class=3D"java_separator">.</span><s=
pan class=3D"java_plain">clear</span><span class=3D"java_separator">();<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
batch-statelesssession"/>15.3.=C2=A0The StatelessSession interface</h2><=
/div></div></div><p>
            Alternatively, Hibernate provides a command-oriented API tha=
t can be used for =

            streaming data to and from the database in the form of detac=
hed objects. A =

            <code class=3D"literal">StatelessSession</code> has no persi=
stence context associated
            with it and does not provide many of the higher-level life c=
ycle semantics.
            In particular, a stateless session does not implement a firs=
t-level cache nor
            interact with any second-level or query cache. It does not i=
mplement =

            transactional write-behind or automatic dirty checking. Oper=
ations performed
            using a stateless session never cascade to associated instan=
ces. Collections =

            are ignored by a stateless session. Operations performed via=
 a stateless session =

            bypass Hibernate's event model and interceptors. Due to the =
lack of a first-level cache, =

	    Stateless sessions are vulnerable to data aliasing effects. A state=
less
            session is a lower-level abstraction that is much closer to =
the underlying JDBC.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">St=
atelessSession</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sess=
ion&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!=
-- <br/> --><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <=
br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=
=3D"java_plain">openStatelessSession</span><!-- <br/> --><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_type">ScrollableResults</span><span cl=
ass=3D"java_plain">&nbsp;customers&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;session</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">getNamedQuery</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_literal">=
&quot;GetCustomers&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">scroll=
</span><span class=3D"java_separator">(</span><span class=3D"java_type">=
ScrollMode</span><span class=3D"java_separator">.</span><span class=3D"j=
ava_plain">FORWARD_ONLY</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;customers</span><span class=3D"java_separator">.<=
/span><span class=3D"java_plain">next</span><span class=3D"java_separato=
r">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Customer</span><span class=3D"java_plain">&nbs=
p;customer&nbsp;</span><span class=3D"java_operator">=3D</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><s=
pan class=3D"java_type">Customer</span><span class=3D"java_separator">)<=
/span><span class=3D"java_plain">&nbsp;customers</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">get</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">0</span><span clas=
s=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;custome=
r</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">updateStuff</span><span class=3D"java_separator">(...);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;session=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>update</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">customer</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
            In this code example, the <code class=3D"literal">Customer</=
code> instances returned
            by the query are immediately detached. They are never associ=
ated with any persistence
            context.
        </p><p>
            The <code class=3D"literal">insert(), update()</code> and <c=
ode class=3D"literal">delete()</code> operations
            defined by the <code class=3D"literal">StatelessSession</cod=
e> interface are considered to be
            direct database row-level operations. They result in the imm=
ediate execution of a SQL
            <code class=3D"literal">INSERT, UPDATE</code> or <code class=
=3D"literal">DELETE</code> respectively. =

            They have different semantics to the <code class=3D"literal"=
>save(), saveOrUpdate()</code> =

            and <code class=3D"literal">delete()</code> operations defin=
ed by the <code class=3D"literal">Session</code> =

            interface.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"batch-direct"/>15.4.=C2=A0=
DML-style operations</h2></div></div></div><p>
            As already discussed, automatic and transparent object/relat=
ional mapping is concerned
            with the management of the object state. The object state is=
 available in memory. This means that manipulating data directly in the =
database (using the SQL <code class=3D"literal">Data Manipulation Langua=
ge</code>
            (DML) the statements: <code class=3D"literal">INSERT</code>,=
 <code class=3D"literal">UPDATE</code>, <code class=3D"literal">DELETE</=
code>)
            will not affect in-memory state. However, Hibernate provides=
 methods
            for bulk SQL-style DML statement execution that is performed=
 through the
            Hibernate Query Language (<a class=3D"link" href=3D"#queryhq=
l" title=3D"Chapter=C2=A016.=C2=A0HQL: The Hibernate Query Language">HQL=
</a>).
        </p><p>
            The pseudo-syntax for <code class=3D"literal">UPDATE</code> =
and <code class=3D"literal">DELETE</code> statements
            is: <code class=3D"literal">( UPDATE | DELETE ) FROM? Entity=
Name (WHERE where_conditions)?</code>.  =

	    </p><p>
	Some points to note:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    In the from-clause, the FROM keyword is optional
                </p></li><li><p>
                    There can only be a single entity named in the from-=
clause. It can, however, be
                    aliased.  If the entity name is aliased, then any pr=
operty references must
                    be qualified using that alias. If the entity name is=
 not aliased, then it is
                    illegal for any property references to be qualified.=

                </p></li><li><p>
                    No <a class=3D"link" href=3D"#queryhql-joins-forms" =
title=3D"16.4.=C2=A0Forms of join syntax">joins</a>, either implicit or =
explicit,
	                can be specified in a bulk HQL query.  Sub-queries can =
be used in the where-clause, where
	                the subqueries themselves may contain joins.
                </p></li><li><p>
                    The where-clause is also optional.
                </p></li></ul></div><p>
            As an example, to execute an HQL <code class=3D"literal">UPD=
ATE</code>, use the
            <code class=3D"literal">Query.executeUpdate()</code> method.=
 The method is named for
            those familiar with JDBC's <code class=3D"literal">PreparedS=
tatement.executeUpdate()</code>:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">openSession</span><!-- <br/> --><span class=3D"java_separator">()=
;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;hqlUpdate&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal"=
>&quot;update&nbsp;Customer&nbsp;c&nbsp;set&nbsp;c.name&nbsp;=3D&nbsp;:n=
ewName&nbsp;where&nbsp;c.name&nbsp;=3D&nbsp;:oldName&quot;</span><span c=
lass=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;or&nbsp;</span><span class=3D"java_type">String</span><spa=
n class=3D"java_plain">&nbsp;hqlUpdate&nbsp;</span><span class=3D"java_o=
perator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">&quot;update&nbsp;Customer&nbsp;set&nbsp;name&nbsp;=3D&nb=
sp;:newName&nbsp;where&nbsp;name&nbsp;=3D&nbsp;:oldName&quot;</span><spa=
n class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;updatedEntities&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;hqlUpdate&nbsp=
;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setString</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;newName&quot;</span><span class=3D"java_separator">,</span><span cla=
ss=3D"java_plain">&nbsp;newName&nbsp;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setString</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;oldName&quot;</span><span class=3D"java_separator">,</span><span cla=
ss=3D"java_plain">&nbsp;oldName&nbsp;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">executeUpdate</span><span class=3D"java_separator">();=
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
            In keeping with the EJB3 specification, HQL <code class=3D"l=
iteral">UPDATE</code> statements, by default, do not effect the
            <a class=3D"link" href=3D"#">version</a>
            or the <a class=3D"link" href=3D"#mapping-declaration-timest=
amp" title=3D"5.1.3.2.=C2=A0Timestamp">timestamp</a> property values
            for the affected entities. However,
            you can force Hibernate to reset the <code class=3D"literal"=
>version</code> or
            <code class=3D"literal">timestamp</code> property values thr=
ough the use of a <code class=3D"literal">versioned update</code>.
            This is achieved by adding the <code class=3D"literal">VERSI=
ONED</code> keyword after the <code class=3D"literal">UPDATE</code>
            keyword.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">openSession</span><!-- <br/> --><span class=3D"java_separator">()=
;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;hqlVersionedUpdate&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_literal">&quot;update&nbsp;versioned&nbsp;Customer&nbsp;set&nbsp;name&n=
bsp;=3D&nbsp;:newName&nbsp;where&nbsp;name&nbsp;=3D&nbsp;:oldName&quot;<=
/span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;updatedEntities&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;hqlUpdate&nbsp=
;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setString</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;newName&quot;</span><span class=3D"java_separator">,</span><span cla=
ss=3D"java_plain">&nbsp;newName&nbsp;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setString</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;oldName&quot;</span><span class=3D"java_separator">,</span><span cla=
ss=3D"java_plain">&nbsp;oldName&nbsp;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">executeUpdate</span><span class=3D"java_separator">();=
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
            Custom version types, <code class=3D"literal">org.hibernate.=
usertype.UserVersionType</code>,
            are not allowed in conjunction with a <code class=3D"literal=
">update versioned</code> statement.
        </p><p>
            To execute an HQL <code class=3D"literal">DELETE</code>, use=
 the same <code class=3D"literal">Query.executeUpdate()</code>
            method:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">openSession</span><!-- <br/> --><span class=3D"java_separator">()=
;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;hqlDelete&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal"=
>&quot;delete&nbsp;Customer&nbsp;c&nbsp;where&nbsp;c.name&nbsp;=3D&nbsp;=
:oldName&quot;</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_operator">//</span><span class=3D"java=
_plain">&nbsp;or&nbsp;</span><span class=3D"java_type">String</span><spa=
n class=3D"java_plain">&nbsp;hqlDelete&nbsp;</span><span class=3D"java_o=
perator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_literal">&quot;delete&nbsp;Customer&nbsp;where&nbsp;name&nbsp;=3D&=
nbsp;:oldName&quot;</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;deletedEntities&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;hqlDelete&nbsp=
;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setString</span><span class=3D"java_separator">(</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;oldName&quot;</span><span class=3D"java_separator">,</span><span cla=
ss=3D"java_plain">&nbsp;oldName&nbsp;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">executeUpdate</span><span class=3D"java_separator">();=
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
            The <code class=3D"literal">int</code> value returned by the=
 <code class=3D"literal">Query.executeUpdate()</code>
            method indicates the number of entities effected by the oper=
ation.  This may or may not
            correlate to the number of rows effected in the database.  A=
n HQL bulk operation might result in
            multiple actual SQL statements being executed (for joined-su=
bclass, for example).  The returned
            number indicates the number of actual entities affected by t=
he statement.  Going back to the
            example of joined-subclass, a delete against one of the subc=
lasses may actually result
            in deletes against not just the table to which that subclass=
 is mapped, but also the "root"
            table and potentially joined-subclass tables further down th=
e inheritance hierarchy.
        </p><p>
            The pseudo-syntax for <code class=3D"literal">INSERT</code> =
statements is:
            <code class=3D"literal">INSERT INTO EntityName properties_li=
st select_statement</code>.  Some
            points to note:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    Only the INSERT INTO ... SELECT ... form is supporte=
d; not the INSERT INTO ... VALUES ... form.
                </p><p>
                    The properties_list is analogous to the <code class=3D=
"literal">column specification</code>
                    in the SQL <code class=3D"literal">INSERT</code> sta=
tement.  For entities involved in mapped
                    inheritance, only properties directly defined on tha=
t given class-level can be
                    used in the properties_list.  Superclass properties =
are not allowed and subclass
                    properties do not make sense.  In other words, <code=
 class=3D"literal">INSERT</code>
                    statements are inherently non-polymorphic.
                </p></li><li><p>
                    select_statement can be any valid HQL select query, =
with the caveat that the return types
                    must match the types expected by the insert.  Curren=
tly, this is checked during query
                    compilation rather than allowing the check to relega=
te to the database. =

                    This might, however, cause problems between Hibernat=
e <code class=3D"literal">Type</code>s which are
                    <span class=3D"emphasis"><em>equivalent</em></span> =
as opposed to <span class=3D"emphasis"><em>equal</em></span>.  This migh=
t cause
                    issues with mismatches between a property defined as=
 a <code class=3D"literal">org.hibernate.type.DateType</code>
                    and a property defined as a <code class=3D"literal">=
org.hibernate.type.TimestampType</code>, even though the
                    database might not make a distinction or might be ab=
le to handle the conversion.
                </p></li><li><p>
                    For the id property, the insert statement gives you =
two options.  You can either
                    explicitly specify the id property in the properties=
_list, in which case its value
                    is taken from the corresponding select expression, o=
r omit it from the properties_list,
                    in which case a generated value is used.  This latte=
r option is only available when
                    using id generators that operate in the database; at=
tempting to use this option with
                    any "in memory" type generators will cause an except=
ion during parsing.  =

                    For the purposes of this discussion, in-database gen=
erators are considered to be
                    <code class=3D"literal">org.hibernate.id.SequenceGen=
erator</code> (and its subclasses) and
                    any implementers of <code class=3D"literal">org.hibe=
rnate.id.PostInsertIdentifierGenerator</code>.
                    The most notable exception here is <code class=3D"li=
teral">org.hibernate.id.TableHiLoGenerator</code>,
                    which cannot be used because it does not expose a se=
lectable way to get its values.
                </p></li><li><p>
                    For properties mapped as either <code class=3D"liter=
al">version</code> or <code class=3D"literal">timestamp</code>,
                    the insert statement gives you two options.  You can=
 either specify the property in the
                    properties_list, in which case its value is taken fr=
om the corresponding select expressions,
                    or omit it from the properties_list, in which case t=
he <code class=3D"literal">seed value</code> defined
                    by the <code class=3D"literal">org.hibernate.type.Ve=
rsionType</code> is used.
                </p></li></ul></div><p>
            The following is an example of an HQL <code class=3D"literal=
">INSERT</code> statement execution:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Se=
ssion</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">openSession</span><!-- <br/> --><span class=3D"java_separator">()=
;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;hqlInsert&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal"=
>&quot;insert&nbsp;into&nbsp;DelinquentAccount&nbsp;(id,&nbsp;name)&nbsp=
;select&nbsp;c.id,&nbsp;c.name&nbsp;from&nbsp;Customer&nbsp;c&nbsp;where=
&nbsp;...&quot;</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_type">int</span><span class=3D"java_pl=
ain">&nbsp;createdEntities&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;hqlInsert&nbsp=
;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">executeUpdate</span><span class=3D"java_separator">();=
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre></div></div><div class=3D"chapter" l=
ang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a =
id=3D"queryhql"/>Chapter=C2=A016.=C2=A0HQL: The Hibernate Query Language=
</h2></div></div></div><div class=3D"toc"><dl><dt><span class=3D"section=
"><a href=3D"#queryhql-casesensitivity">16.1. Case Sensitivity</a></span=
></dt><dt><span class=3D"section"><a href=3D"#queryhql-from">16.2. The f=
rom clause</a></span></dt><dt><span class=3D"section"><a href=3D"#queryh=
ql-joins">16.3. Associations and joins</a></span></dt><dt><span class=3D=
"section"><a href=3D"#queryhql-joins-forms">16.4. Forms of join syntax</=
a></span></dt><dt><span class=3D"section"><a href=3D"#queryhql-identifie=
r-property">16.5. Referring to identifier property</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#queryhql-select">16.6. The select clau=
se</a></span></dt><dt><span class=3D"section"><a href=3D"#queryhql-aggre=
gation">16.7. Aggregate functions</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#queryhql-polymorphism">16.8. Polymorphic queries</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"#queryhql-where">16.9. T=
he where clause</a></span></dt><dt><span class=3D"section"><a href=3D"#q=
ueryhql-expressions">16.10. Expressions</a></span></dt><dt><span class=3D=
"section"><a href=3D"#queryhql-ordering">16.11. The order by clause</a><=
/span></dt><dt><span class=3D"section"><a href=3D"#queryhql-grouping">16=
.12. The group by clause</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"#queryhql-subqueries">16.13. Subqueries</a></span></dt><dt><span =
class=3D"section"><a href=3D"#queryhql-examples">16.14. HQL examples</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#queryhql-bulk">16.15=
. Bulk update and delete</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"#queryhql-tipstricks">16.16. Tips &amp; Tricks</a></span></dt><dt=
><span class=3D"section"><a href=3D"#queryhql-components">16.17. Compone=
nts</a></span></dt><dt><span class=3D"section"><a href=3D"#queryhql-tupl=
e">16.18. Row value constructor syntax</a></span></dt></dl></div><p>
        Hibernate uses a powerful query language (HQL) that is similar i=
n appearance to
        SQL. Compared with SQL, however, HQL is fully object-oriented
        and understands notions like inheritance, polymorphism and assoc=
iation.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"queryhql-casesensitivity"/>16.1.=C2=
=A0Case Sensitivity</h2></div></div></div><p>
            With the exception of names of Java classes and properties, =
queries are case-insensitive.
            So <code class=3D"literal">SeLeCT</code> is the same as
            <code class=3D"literal">sELEct</code> is the same as
            <code class=3D"literal">SELECT</code>, but
            <code class=3D"literal">org.hibernate.eg.FOO</code> is not
            <code class=3D"literal">org.hibernate.eg.Foo</code>, and
            <code class=3D"literal">foo.barSet</code> is not
            <code class=3D"literal">foo.BARSET</code>.
        </p><p>
            This manual uses lowercase HQL keywords. Some users find que=
ries with uppercase keywords
            more readable, but this convention is unsuitable for queries=
 embedded in Java code.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-from"/>16.2.=C2=
=A0The from clause</h2></div></div></div><p>
            The simplest possible Hibernate query is of the form:
        </p><pre class=3D"programlisting">from eg.Cat</pre><p>
            This returns all instances of the class <code class=3D"liter=
al">eg.Cat</code>.
            You do not usually need to qualify the class name, since <co=
de class=3D"literal">auto-import</code>
            is the default. For example:
        </p><pre class=3D"programlisting">from Cat</pre><p>
            =

            In order to refer to the <code class=3D"literal">Cat</code> =
in other parts of the
            query, you will need to assign an <span class=3D"emphasis"><=
em>alias</em></span>. For example:
        </p><pre class=3D"programlisting">from Cat as cat</pre><p>
            This query assigns the alias <code class=3D"literal">cat</co=
de> to <code class=3D"literal">Cat</code>
            instances, so you can use that alias later in the query. The=
 <code class=3D"literal">as</code>
            keyword is optional. You could also write:
        </p><pre class=3D"programlisting">from Cat cat</pre><p>
            Multiple classes can appear, resulting in a cartesian produc=
t or "cross" join.
        </p><pre class=3D"programlisting">from Formula, Parameter</pre><=
pre class=3D"programlisting">from Formula as form, Parameter as param</p=
re><p>
            It is good practice to name query aliases using an initial l=
owercase as this is
            consistent with Java naming standards for local variables
            (e.g. <code class=3D"literal">domesticCat</code>).
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-joins"/>16.3.=C2=
=A0Associations and joins</h2></div></div></div><p>
            You can also assign aliases to associated entities or to ele=
ments of a
            collection of values using a <code class=3D"literal">join</c=
ode>. For example:
        </p><pre class=3D"programlisting">from Cat as cat
    inner join cat.mate as mate
    left outer join cat.kittens as kitten</pre><pre class=3D"programlist=
ing">from Cat as cat left join cat.mate.kittens as kittens</pre><pre cla=
ss=3D"programlisting">from Formula form full join form.parameter param</=
pre><p>
            The supported join types are borrowed from ANSI SQL:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    <code class=3D"literal">inner join</code>
                </p></li><li><p>
                    <code class=3D"literal">left outer join</code>
                </p></li><li><p>
                    <code class=3D"literal">right outer join</code>
                </p></li><li><p>
                    <code class=3D"literal">full join</code> (not usuall=
y useful)
                </p></li></ul></div><p>
            The <code class=3D"literal">inner join</code>, <code class=3D=
"literal">left outer join</code> and
            <code class=3D"literal">right outer join</code> constructs m=
ay be abbreviated.
        </p><pre class=3D"programlisting">from Cat as cat
    join cat.mate as mate
    left join cat.kittens as kitten</pre><p>
            You may supply extra join conditions using the HQL <code cla=
ss=3D"literal">with</code>
            keyword.
        </p><pre class=3D"programlisting">from Cat as cat
    left join cat.kittens as kitten
        with kitten.bodyWeight &gt; 10.0</pre><p>
            A "fetch" join allows associations or collections of values =
to be
            initialized along with their parent objects using a single s=
elect. This is particularly
            useful in the case of a collection. It effectively overrides=
 the outer join and
            lazy declarations of the mapping file for associations and c=
ollections. See
            <a class=3D"xref" href=3D"#performance-fetching" title=3D"21=
.1.=C2=A0Fetching strategies">Section=C2=A021.1, =E2=80=9CFetching strat=
egies=E2=80=9D</a> for more information.
        </p><pre class=3D"programlisting">from Cat as cat
    inner join fetch cat.mate
    left join fetch cat.kittens</pre><p>
            A fetch join does not usually need to assign an alias, becau=
se the associated objects
            should not be used in the <code class=3D"literal">where</cod=
e> clause (or any other clause). =

            The associated objects are also not returned directly in the=
 query results. Instead, they may
            be accessed via the parent object. The only reason you might=
 need an alias is if you are
            recursively join fetching a further collection:
        </p><pre class=3D"programlisting">from Cat as cat
    inner join fetch cat.mate
    left join fetch cat.kittens child
    left join fetch child.kittens</pre><p>
            The <code class=3D"literal">fetch</code> construct cannot be=
 used in queries called using
            <code class=3D"literal">iterate()</code> (though <code class=
=3D"literal">scroll()</code> can be used). =

            <code class=3D"literal">Fetch</code> should be used together=
 with <code class=3D"literal">setMaxResults()</code> or
            <code class=3D"literal">setFirstResult()</code>, as these op=
erations are based on the result rows which
            usually contain duplicates for eager collection fetching, he=
nce, the number of rows is not what
            you would expect.
            <code class=3D"literal">Fetch</code> should also not be used=
 together with impromptu <code class=3D"literal">with</code> condition.
            It is possible to create a cartesian product by join fetchin=
g more than one collection in a
            query, so take care in this case. Join fetching multiple col=
lection roles can produce
            unexpected results for bag mappings, so user discretion is a=
dvised when formulating queries in this
            case. Finally, note that <code class=3D"literal">full join f=
etch</code> and <code class=3D"literal">right join fetch</code>
            are not meaningful.
        </p><p>
            If you are using property-level lazy fetching (with bytecode=
 instrumentation), it is
            possible to force Hibernate to fetch the lazy properties in =
the first query immediately
            using <code class=3D"literal">fetch all properties</code>.
        </p><pre class=3D"programlisting">from Document fetch all proper=
ties order by name</pre><pre class=3D"programlisting">from Document doc =
fetch all properties where lower(doc.name) like '%cats%'</pre></div><div=
 class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2=
 class=3D"title"><a id=3D"queryhql-joins-forms"/>16.4.=C2=A0Forms of joi=
n syntax</h2></div></div></div><p>
		    HQL supports two forms of association joining: <code class=3D"lite=
ral">implicit</code> and <code class=3D"literal">explicit</code>.
		</p><p>
		    The queries shown in the previous section all use the <code class=3D=
"literal">explicit</code> form, that is, where
		    the join keyword is explicitly used in the from clause.  This is t=
he recommended form.
	    </p><p>
		    The <code class=3D"literal">implicit</code> form does not use the =
join keyword.  Instead, the
		    associations are "dereferenced" using dot-notation.  <code class=3D=
"literal">implicit</code> joins
		    can appear in any of the HQL clauses.  <code class=3D"literal">imp=
licit</code> join result
		    in inner joins in the resulting SQL statement.
	    </p><pre class=3D"programlisting">from Cat as cat where cat.mate.na=
me like '%s%'</pre></div><div class=3D"section" lang=3D"en-US"><div clas=
s=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-identifi=
er-property"/>16.5.=C2=A0Referring to identifier property</h2></div></di=
v></div><p>
            There are 2 ways to refer to an entity's identifier property=
:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    The special property (lowercase) <code class=3D"lite=
ral">id</code> may be used to reference the identifier
                    property of an entity <span class=3D"emphasis"><em>p=
rovided that the entity does not define a non-identifier property
                    named id</em></span>.
                </p></li><li><p>
                    If the entity defines a named identifier property, y=
ou can use that property name.
                </p></li></ul></div><p>
            References to composite identifier properties follow the sam=
e naming rules. If the
            entity has a non-identifier property named id, the composite=
 identifier property can only
            be referenced by its defined named. Otherwise, the special <=
code class=3D"literal">id</code> property
            can be used to reference the identifier property.
        </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"important"><h2>Important</h2><p>
            Please note that, starting in version 3.2.2, this has change=
d significantly. In previous versions,
            <code class=3D"literal">id</code>  <span class=3D"emphasis">=
<em>always</em></span> referred to the identifier property
            regardless of its actual name.  A ramification of that decis=
ion was that non-identifier
            properties named <code class=3D"literal">id</code> could nev=
er be referenced in Hibernate queries.
        </p></div></div><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-select"/>=
16.6.=C2=A0The select clause</h2></div></div></div><p>
            The <code class=3D"literal">select</code> clause picks which=
 objects and properties to return in
            the query result set. Consider the following:
        </p><pre class=3D"programlisting">select mate
from Cat as cat
    inner join cat.mate as mate</pre><p>
            The query will select <code class=3D"literal">mate</code>s o=
f other <code class=3D"literal">Cat</code>s.
            You can express this query more compactly as:
        </p><pre class=3D"programlisting">select cat.mate from Cat cat</=
pre><p>
            Queries can return properties of any value type including pr=
operties of component type:
        </p><pre class=3D"programlisting">select cat.name from DomesticC=
at cat
where cat.name like 'fri%'</pre><pre class=3D"programlisting">select cus=
t.name.firstName from Customer as cust</pre><p>
            Queries can return multiple objects and/or properties as an =
array of type
            <code class=3D"literal">Object[]</code>:
        </p><pre class=3D"programlisting">select mother, offspr, mate.na=
me
from DomesticCat as mother
    inner join mother.mate as mate
    left outer join mother.kittens as offspr</pre><p>
            Or as a <code class=3D"literal">List</code>:
        </p><pre class=3D"programlisting">select new list(mother, offspr=
, mate.name)
from DomesticCat as mother
    inner join mother.mate as mate
    left outer join mother.kittens as offspr</pre><p>
            Or - assuming that the class <code class=3D"literal">Family<=
/code> has an appropriate constructor - as an actual typesafe Java objec=
t:
        </p><pre class=3D"programlisting">select new Family(mother, mate=
, offspr)
from DomesticCat as mother
    join mother.mate as mate
    left join mother.kittens as offspr</pre><p>
            You can assign aliases to selected expressions using <code c=
lass=3D"literal">as</code>:
        </p><pre class=3D"programlisting">select max(bodyWeight) as max,=
 min(bodyWeight) as min, count(*) as n
from Cat cat</pre><p>
            This is most useful when used together with <code class=3D"l=
iteral">select new map</code>:
        </p><pre class=3D"programlisting">select new map( max(bodyWeight=
) as max, min(bodyWeight) as min, count(*) as n )
from Cat cat</pre><p>
            This query returns a <code class=3D"literal">Map</code> from=
 aliases to selected values.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-aggregation"/>1=
6.7.=C2=A0Aggregate functions</h2></div></div></div><p>
            HQL queries can even return the results of aggregate functio=
ns on properties:
        </p><pre class=3D"programlisting">select avg(cat.weight), sum(ca=
t.weight), max(cat.weight), count(cat)
from Cat cat</pre><p>
            The supported aggregate functions are:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    <code class=3D"literal">avg(...), sum(...), min(...)=
, max(...)</code>
                </p></li><li><p>
                    <code class=3D"literal">count(*)</code>
                </p></li><li><p>
                    <code class=3D"literal">count(...), count(distinct .=
..), count(all...)</code>
                </p></li></ul></div><p>
            You can use arithmetic operators, concatenation, and recogni=
zed SQL functions
            in the select clause:
        </p><pre class=3D"programlisting">select cat.weight + sum(kitten=
.weight)
from Cat cat
    join cat.kittens kitten
group by cat.id, cat.weight</pre><pre class=3D"programlisting">select fi=
rstName||' '||initial||' '||upper(lastName) from Person</pre><p>
            The <code class=3D"literal">distinct</code> and <code class=3D=
"literal">all</code> keywords can be used and
            have the same semantics as in SQL.
        </p><pre class=3D"programlisting">select distinct cat.name from =
Cat cat

select count(distinct cat.name), count(cat) from Cat cat</pre></div><div=
 class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2=
 class=3D"title"><a id=3D"queryhql-polymorphism"/>16.8.=C2=A0Polymorphic=
 queries</h2></div></div></div><p>
            A query like:
        </p><pre class=3D"programlisting">from Cat as cat</pre><p>
            returns instances not only of <code class=3D"literal">Cat</c=
ode>, but also of subclasses like
            <code class=3D"literal">DomesticCat</code>. Hibernate querie=
s can name <span class=3D"emphasis"><em>any</em></span> Java
            class or interface in the <code class=3D"literal">from</code=
> clause. The query will return instances
            of all persistent classes that extend that class or implemen=
t the interface. The following
            query would return all persistent objects:
        </p><pre class=3D"programlisting">from java.lang.Object o</pre><=
p>
            The interface <code class=3D"literal">Named</code> might be =
implemented by various persistent
            classes:
        </p><pre class=3D"programlisting">from Named n, Named m where n.=
name =3D m.name</pre><p>
            These last two queries will require more than one SQL <code =
class=3D"literal">SELECT</code>. This
            means that the <code class=3D"literal">order by</code> claus=
e does not correctly order the whole result set.
            It also means you cannot call these queries using <code clas=
s=3D"literal">Query.scroll()</code>.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-where"/>16.9.=C2=
=A0The where clause</h2></div></div></div><p>
            The <code class=3D"literal">where</code> clause allows you t=
o refine the list of instances returned.
            If no alias exists, you can refer to properties by name:
        </p><pre class=3D"programlisting">from Cat where name=3D'Fritz'<=
/pre><p>
        	If there is an alias, use a qualified property name:
        </p><pre class=3D"programlisting">from Cat as cat where cat.name=
=3D'Fritz'</pre><p>
            This returns instances of <code class=3D"literal">Cat</code>=
 named 'Fritz'.
        </p><p>
			The following query:
        </p><pre class=3D"programlisting">select foo
from Foo foo, Bar bar
where foo.startDate =3D bar.date</pre><p>
            returns all instances of <code class=3D"literal">Foo</code> =
with an
            instance of <code class=3D"literal">bar</code> with a
            <code class=3D"literal">date</code> property equal to the
            <code class=3D"literal">startDate</code> property of the
            <code class=3D"literal">Foo</code>. Compound path expression=
s make the
            <code class=3D"literal">where</code> clause extremely powerf=
ul. Consider the following:
        </p><pre class=3D"programlisting">from Cat cat where cat.mate.na=
me is not null</pre><p>
            This query translates to an SQL query with a table (inner) j=
oin. For example:
            =

        </p><pre class=3D"programlisting">from Foo foo
where foo.bar.baz.customer.address.city is not null</pre><p>
            would result in a query that would require four table joins =
in SQL.
        </p><p>
            The <code class=3D"literal">=3D</code> operator can be used =
to compare not only properties, but also
            instances:
        </p><pre class=3D"programlisting">from Cat cat, Cat rival where =
cat.mate =3D rival.mate</pre><pre class=3D"programlisting">select cat, m=
ate
from Cat cat, Cat mate
where cat.mate =3D mate</pre><p>
            The special property (lowercase) <code class=3D"literal">id<=
/code> can be used to reference the
            unique identifier of an object. See <a class=3D"xref" href=3D=
"#queryhql-identifier-property" title=3D"16.5.=C2=A0Referring to identif=
ier property">Section=C2=A016.5, =E2=80=9CReferring to identifier proper=
ty=E2=80=9D</a>
            for more information.
        </p><pre class=3D"programlisting">from Cat as cat where cat.id =3D=
 123

from Cat as cat where cat.mate.id =3D 69</pre><p>
            The second query is efficient and does not require a table j=
oin.
        </p><p>
            Properties of composite identifiers can also be used. Consid=
er the following example where <code class=3D"literal">Person</code>
            has composite identifiers consisting of <code class=3D"liter=
al">country</code> and
            <code class=3D"literal">medicareNumber</code>:
        </p><pre class=3D"programlisting">from bank.Person person
where person.id.country =3D 'AU'
    and person.id.medicareNumber =3D 123456</pre><pre class=3D"programli=
sting">from bank.Account account
where account.owner.id.country =3D 'AU'
    and account.owner.id.medicareNumber =3D 123456</pre><p>
            Once again, the second query does not require a table join.
        </p><p>
	See <a class=3D"xref" href=3D"#queryhql-identifier-property" title=3D"1=
6.5.=C2=A0Referring to identifier property">Section=C2=A016.5, =E2=80=9C=
Referring to identifier property=E2=80=9D</a>
            for more information regarding referencing identifier proper=
ties)
	</p><p>
            The special property <code class=3D"literal">class</code> ac=
cesses the discriminator value
            of an instance in the case of polymorphic persistence. A Jav=
a class name embedded in the
            where clause will be translated to its discriminator value.
        </p><pre class=3D"programlisting">from Cat cat where cat.class =3D=
 DomesticCat</pre><p>
            You can also use components or composite user types, or prop=
erties of said
            component types. See <a class=3D"xref" href=3D"#queryhql-com=
ponents" title=3D"16.17.=C2=A0Components">Section=C2=A016.17, =E2=80=9CC=
omponents=E2=80=9D</a> for more information.
        </p><p>
            An "any" type has the special properties <code class=3D"lite=
ral">id</code> and <code class=3D"literal">class</code> that allows you
            to express a join in the following way (where <code class=3D=
"literal">AuditLog.item</code>
            is a property mapped with <code class=3D"literal">&lt;any&gt=
;</code>):
        </p><pre class=3D"programlisting">from AuditLog log, Payment pay=
ment
where log.item.class =3D 'Payment' and log.item.id =3D payment.id</pre><=
p>
            The <code class=3D"literal">log.item.class</code> and <code =
class=3D"literal">payment.class</code>
            would refer to the values of completely different database c=
olumns in the above query.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-expressions"/>1=
6.10.=C2=A0Expressions</h2></div></div></div><p>
            Expressions used in the <code class=3D"literal">where</code>=
 clause include the following:
            =

        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p>
                    mathematical operators: <code class=3D"literal">+, -=
, *, /</code>
                </p></li><li><p>
                    binary comparison operators: <code class=3D"literal"=
>=3D, &gt;=3D, &lt;=3D, &lt;&gt;, !=3D, like</code>
                </p></li><li><p>
                    logical operations <code class=3D"literal">and, or, =
not</code>
                </p></li><li><p>
                    Parentheses <code class=3D"literal">( )</code> that =
indicates grouping
                </p></li><li><p>
                    <code class=3D"literal">in</code>,
                    <code class=3D"literal">not in</code>,
                    <code class=3D"literal">between</code>,
                    <code class=3D"literal">is null</code>,
                    <code class=3D"literal">is not null</code>,
                    <code class=3D"literal">is empty</code>,
                    <code class=3D"literal">is not empty</code>,
                    <code class=3D"literal">member of</code> and
                    <code class=3D"literal">not member of</code>
                </p></li><li><p>
                	"Simple" case, <code class=3D"literal">case ... when ..=
. then ... else ... end</code>, and
                    "searched" case, <code class=3D"literal">case when .=
.. then ... else ... end</code>
                </p></li><li><p>
                    string concatenation <code class=3D"literal">...||..=
.</code> or <code class=3D"literal">concat(...,...)</code>
                </p></li><li><p>
                    <code class=3D"literal">current_date()</code>, <code=
 class=3D"literal">current_time()</code>, and
                    <code class=3D"literal">current_timestamp()</code>
                </p></li><li><p>
					<code class=3D"literal">second(...)</code>, <code class=3D"literal"=
>minute(...)</code>,
					<code class=3D"literal">hour(...)</code>, <code class=3D"literal">d=
ay(...)</code>,
					<code class=3D"literal">month(...)</code>, and <code class=3D"liter=
al">year(...)</code>
                </p></li><li><p>
                    Any function or operator defined by EJB-QL 3.0: <cod=
e class=3D"literal">substring(), trim(),
                    lower(), upper(), length(), locate(), abs(), sqrt(),=
 bit_length(), mod()</code>
                </p></li><li><p>
                    <code class=3D"literal">coalesce()</code> and <code =
class=3D"literal">nullif()</code>
                </p></li><li><p>
                    <code class=3D"literal">str()</code> for converting =
numeric or temporal values to a
                    readable string
                </p></li><li><p>
                    <code class=3D"literal">cast(... as ...)</code>, whe=
re the second argument is the name of
                    a Hibernate type, and <code class=3D"literal">extrac=
t(... from ...)</code> if ANSI
                    <code class=3D"literal">cast()</code> and <code clas=
s=3D"literal">extract()</code> is supported by
                    the underlying database
                </p></li><li><p>
                    the HQL <code class=3D"literal">index()</code> funct=
ion, that applies to aliases of
                    a joined indexed collection
                </p></li><li><p>
                    HQL functions that take collection-valued path expre=
ssions: <code class=3D"literal">size(),
                    minelement(), maxelement(), minindex(), maxindex()</=
code>, along with the
                    special <code class=3D"literal">elements()</code> an=
d <code class=3D"literal">indices</code> functions
                    that can be quantified using <code class=3D"literal"=
>some, all, exists, any, in</code>.
                </p></li><li><p>
                    Any database-supported SQL scalar function like <cod=
e class=3D"literal">sign()</code>,
                    <code class=3D"literal">trunc()</code>, <code class=3D=
"literal">rtrim()</code>, and <code class=3D"literal">sin()</code>
                </p></li><li><p>
                    JDBC-style positional parameters <code class=3D"lite=
ral">?</code>
                </p></li><li><p>
                    named parameters <code class=3D"literal">:name</code=
>, <code class=3D"literal">:start_date</code>, and <code class=3D"litera=
l">:x1</code>
                </p></li><li><p>
                    SQL literals <code class=3D"literal">'foo'</code>, <=
code class=3D"literal">69</code>, <code class=3D"literal">6.66E+2</code>=
,
                    <code class=3D"literal">'1970-01-01 10:00:01.0'</cod=
e>
                </p></li><li><p>
                    Java <code class=3D"literal">public static final</co=
de> constants <code class=3D"literal">eg.Color.TABBY</code>
                </p></li></ul></div><p>
            <code class=3D"literal">in</code> and <code class=3D"literal=
">between</code> can be used as follows:
        </p><pre class=3D"programlisting">from DomesticCat cat where cat=
.name between 'A' and 'B'</pre><pre class=3D"programlisting">from Domest=
icCat cat where cat.name in ( 'Foo', 'Bar', 'Baz' )</pre><p>
            The negated forms can be written as follows:
        </p><pre class=3D"programlisting">from DomesticCat cat where cat=
.name not between 'A' and 'B'</pre><pre class=3D"programlisting">from Do=
mesticCat cat where cat.name not in ( 'Foo', 'Bar', 'Baz' )</pre><p>
            Similarly, <code class=3D"literal">is null</code> and <code =
class=3D"literal">is not null</code> can be used to test
            for null values.
        </p><p>
            Booleans can be easily used in expressions by declaring HQL =
query substitutions in Hibernate
            configuration:
        </p><pre class=3D"programlisting">&lt;property name=3D"hibernate=
.query.substitutions"&gt;true 1, false 0&lt;/property&gt;</pre><p>
            This will replace the keywords <code class=3D"literal">true<=
/code> and <code class=3D"literal">false</code> with the
            literals <code class=3D"literal">1</code> and <code class=3D=
"literal">0</code> in the translated SQL from this HQL:
        </p><pre class=3D"programlisting">from Cat cat where cat.alive =3D=
 true</pre><p>
            You can test the size of a collection with the special prope=
rty <code class=3D"literal">size</code> or
            the special <code class=3D"literal">size()</code> function.
        </p><pre class=3D"programlisting">from Cat cat where cat.kittens=
.size &gt; 0</pre><pre class=3D"programlisting">from Cat cat where size(=
cat.kittens) &gt; 0</pre><p>
            For indexed collections, you can refer to the minimum and ma=
ximum indices using
            <code class=3D"literal">minindex</code> and <code class=3D"l=
iteral">maxindex</code> functions. Similarly,
            you can refer to the minimum and maximum elements of a colle=
ction of basic type
            using the <code class=3D"literal">minelement</code> and <cod=
e class=3D"literal">maxelement</code>
            functions. For example:
        </p><pre class=3D"programlisting">from Calendar cal where maxele=
ment(cal.holidays) &gt; current_date</pre><pre class=3D"programlisting">=
from Order order where maxindex(order.items) &gt; 100</pre><pre class=3D=
"programlisting">from Order order where minelement(order.items) &gt; 100=
00</pre><p>
            The SQL functions <code class=3D"literal">any, some, all, ex=
ists, in</code> are supported when passed the element
            or index set of a collection (<code class=3D"literal">elemen=
ts</code> and <code class=3D"literal">indices</code> functions)
            or the result of a subquery (see below):
        </p><pre class=3D"programlisting">select mother from Cat as moth=
er, Cat as kit
where kit in elements(foo.kittens)</pre><pre class=3D"programlisting">se=
lect p from NameList list, Person p
where p.name =3D some elements(list.names)</pre><pre class=3D"programlis=
ting">from Cat cat where exists elements(cat.kittens)</pre><pre class=3D=
"programlisting">from Player p where 3 &gt; all elements(p.scores)</pre>=
<pre class=3D"programlisting">from Show show where 'fizard' in indices(s=
how.acts)</pre><p>
            Note that these constructs - <code class=3D"literal">size</c=
ode>, <code class=3D"literal">elements</code>,
            <code class=3D"literal">indices</code>, <code class=3D"liter=
al">minindex</code>, <code class=3D"literal">maxindex</code>,
            <code class=3D"literal">minelement</code>, <code class=3D"li=
teral">maxelement</code> - can only be used in
            the where clause in Hibernate3.
        </p><p>
            Elements of indexed collections (arrays, lists, and maps) ca=
n be referred to by
            index in a where clause only:
        </p><pre class=3D"programlisting">from Order order where order.i=
tems[0].id =3D 1234</pre><pre class=3D"programlisting">select person fro=
m Person person, Calendar calendar
where calendar.holidays['national day'] =3D person.birthDay
    and person.nationality.calendar =3D calendar</pre><pre class=3D"prog=
ramlisting">select item from Item item, Order order
where order.items[ order.deliveredItemIndices[0] ] =3D item and order.id=
 =3D 11</pre><pre class=3D"programlisting">select item from Item item, O=
rder order
where order.items[ maxindex(order.items) ] =3D item and order.id =3D 11<=
/pre><p>
            The expression inside <code class=3D"literal">[]</code> can =
even be an arithmetic expression:
        </p><pre class=3D"programlisting">select item from Item item, Or=
der order
where order.items[ size(order.items) - 1 ] =3D item</pre><p>
            HQL also provides the built-in <code class=3D"literal">index=
()</code> function for elements
            of a one-to-many association or collection of values.
        </p><pre class=3D"programlisting">select item, index(item) from =
Order order
    join order.items item
where index(item) &lt; 5</pre><p>
            Scalar SQL functions supported by the underlying database ca=
n be used:
        </p><pre class=3D"programlisting">from DomesticCat cat where upp=
er(cat.name) like 'FRI%'</pre><p>
            Consider how much longer and less readable the
            following query would be in SQL:
        </p><pre class=3D"programlisting">select cust
from Product prod,
    Store store
    inner join store.customers cust
where prod.name =3D 'widget'
    and store.location.name in ( 'Melbourne', 'Sydney' )
    and prod =3D all elements(cust.currentOrder.lineItems)</pre><p>
            <span class=3D"emphasis"><em>Hint:</em></span> something lik=
e
        </p><pre class=3D"programlisting">SELECT cust.name, cust.address=
, cust.phone, cust.id, cust.current_order
FROM customers cust,
    stores store,
    locations loc,
    store_customers sc,
    product prod
WHERE prod.name =3D 'widget'
    AND store.loc_id =3D loc.id
    AND loc.name IN ( 'Melbourne', 'Sydney' )
    AND sc.store_id =3D store.id
    AND sc.cust_id =3D cust.id
    AND prod.id =3D ALL(
        SELECT item.prod_id
        FROM line_items item, orders o
        WHERE item.order_id =3D o.id
            AND cust.current_order =3D o.id
    )</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"tit=
lepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-ordering"/>16.11=
.=C2=A0The order by clause</h2></div></div></div><p>
            The list returned by a query can be ordered by any property =
of a returned class or components:
        </p><pre class=3D"programlisting">from DomesticCat cat
order by cat.name asc, cat.weight desc, cat.birthdate</pre><p>
            The optional <code class=3D"literal">asc</code> or <code cla=
ss=3D"literal">desc</code> indicate ascending or descending order
            respectively.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-grouping"/>16.1=
2.=C2=A0The group by clause</h2></div></div></div><p>
            A query that returns aggregate values can be grouped by any =
property of a returned class or components:
        </p><pre class=3D"programlisting">select cat.color, sum(cat.weig=
ht), count(cat)
from Cat cat
group by cat.color</pre><pre class=3D"programlisting">select foo.id, avg=
(name), max(name)
from Foo foo join foo.names name
group by foo.id</pre><p>
            A <code class=3D"literal">having</code> clause is also allow=
ed.
        </p><pre class=3D"programlisting">select cat.color, sum(cat.weig=
ht), count(cat)
from Cat cat
group by cat.color
having cat.color in (eg.Color.TABBY, eg.Color.BLACK)</pre><p>
            SQL functions and aggregate functions are allowed in the <co=
de class=3D"literal">having</code>
            and <code class=3D"literal">order by</code> clauses if they =
are supported by the underlying database
            (i.e., not in MySQL).
        </p><pre class=3D"programlisting">select cat
from Cat cat
    join cat.kittens kitten
group by cat.id, cat.name, cat.other, cat.properties
having avg(kitten.weight) &gt; 100
order by count(kitten) asc, sum(kitten.weight) desc</pre><p>
            Neither the <code class=3D"literal">group by</code> clause n=
or the
            <code class=3D"literal">order by</code> clause can contain a=
rithmetic expressions.
            Hibernate also does not currently expand a grouped entity,
            so you cannot write <code class=3D"literal">group by cat</co=
de> if all properties
            of <code class=3D"literal">cat</code> are non-aggregated. Yo=
u have to list all
            non-aggregated properties explicitly.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-subqueries"/>16=
.13.=C2=A0Subqueries</h2></div></div></div><p>
            For databases that support subselects, Hibernate supports su=
bqueries within queries. A subquery must
            be surrounded by parentheses (often by an SQL aggregate func=
tion call). Even correlated subqueries
            (subqueries that refer to an alias in the outer query) are a=
llowed.
        </p><pre class=3D"programlisting">from Cat as fatcat
where fatcat.weight &gt; (
    select avg(cat.weight) from DomesticCat cat
)</pre><pre class=3D"programlisting">from DomesticCat as cat
where cat.name =3D some (
    select name.nickName from Name as name
)</pre><pre class=3D"programlisting">from Cat as cat
where not exists (
    from Cat as mate where mate.mate =3D cat
)</pre><pre class=3D"programlisting">from DomesticCat as cat
where cat.name not in (
    select name.nickName from Name as name
)</pre><pre class=3D"programlisting">select cat.id, (select max(kit.weig=
ht) from cat.kitten kit)
from Cat as cat</pre><p>
            Note that HQL subqueries can occur only in the select or whe=
re clauses.
        </p><p>
            Note that subqueries can also utilize <code class=3D"literal=
">row value constructor</code> syntax.  See
            <a class=3D"xref" href=3D"#queryhql-tuple" title=3D"16.18.=C2=
=A0Row value constructor syntax">Section=C2=A016.18, =E2=80=9CRow value =
constructor syntax=E2=80=9D</a> for more information.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-examples"/>16.1=
4.=C2=A0HQL examples</h2></div></div></div><p>
            Hibernate queries can be quite powerful and complex. In fact=
, the power of the query language
            is one of Hibernate's main strengths. The following example =
queries are similar to queries
            that have been used on recent projects. Please note that mos=
t queries you will write will be much simpler than the following example=
s.
        </p><p>
            The following query returns the order id, number of items, t=
he given minimum total value and the total value of the order for all
            unpaid orders for a particular customer. The results are ord=
ered by
            total value. In determining the prices, it uses the current =
catalog. The resulting SQL query,
            against the <code class=3D"literal">ORDER</code>, <code clas=
s=3D"literal">ORDER_LINE</code>, <code class=3D"literal">PRODUCT</code>,=

            <code class=3D"literal">CATALOG</code> and <code class=3D"li=
teral">PRICE</code> tables has four inner joins and an
            (uncorrelated) subselect.
        </p><pre class=3D"programlisting">select order.id, sum(price.amo=
unt), count(item)
from Order as order
    join order.lineItems as item
    join item.product as product,
    Catalog as catalog
    join catalog.prices as price
where order.paid =3D false
    and order.customer =3D :customer
    and price.product =3D product
    and catalog.effectiveDate &lt; sysdate
    and catalog.effectiveDate &gt;=3D all (
        select cat.effectiveDate
        from Catalog as cat
        where cat.effectiveDate &lt; sysdate
    )
group by order
having sum(price.amount) &gt; :minAmount
order by sum(price.amount) desc</pre><p>
            What a monster! Actually, in real life, I'm not very keen on=
 subqueries, so my query was
            really more like this:
        </p><pre class=3D"programlisting">select order.id, sum(price.amo=
unt), count(item)
from Order as order
    join order.lineItems as item
    join item.product as product,
    Catalog as catalog
    join catalog.prices as price
where order.paid =3D false
    and order.customer =3D :customer
    and price.product =3D product
    and catalog =3D :currentCatalog
group by order
having sum(price.amount) &gt; :minAmount
order by sum(price.amount) desc</pre><p>
            The next query counts the number of payments in each status,=
 excluding all payments in the
            <code class=3D"literal">AWAITING_APPROVAL</code> status wher=
e the most recent status change was made by the
            current user. It translates to an SQL query with two inner j=
oins and a correlated subselect
            against the <code class=3D"literal">PAYMENT</code>, <code cl=
ass=3D"literal">PAYMENT_STATUS</code> and
            <code class=3D"literal">PAYMENT_STATUS_CHANGE</code> tables.=

        </p><pre class=3D"programlisting">select count(payment), status.=
name
from Payment as payment
    join payment.currentStatus as status
    join payment.statusChanges as statusChange
where payment.status.name &lt;&gt; PaymentStatus.AWAITING_APPROVAL
    or (
        statusChange.timeStamp =3D (
            select max(change.timeStamp)
            from PaymentStatusChange change
            where change.payment =3D payment
        )
        and statusChange.user &lt;&gt; :currentUser
    )
group by status.name, status.sortOrder
order by status.sortOrder</pre><p>
            If the <code class=3D"literal">statusChanges</code> collecti=
on was mapped as a list, instead of a set,
            the query would have been much simpler to write.
        </p><pre class=3D"programlisting">select count(payment), status.=
name
from Payment as payment
    join payment.currentStatus as status
where payment.status.name &lt;&gt; PaymentStatus.AWAITING_APPROVAL
    or payment.statusChanges[ maxIndex(payment.statusChanges) ].user &lt=
;&gt; :currentUser
group by status.name, status.sortOrder
order by status.sortOrder</pre><p>
            The next query uses the MS SQL Server <code class=3D"literal=
">isNull()</code> function to return all
            the accounts and unpaid payments for the organization to whi=
ch the current user belongs.
            It translates to an SQL query with three inner joins, an out=
er join and a subselect against
            the <code class=3D"literal">ACCOUNT</code>, <code class=3D"l=
iteral">PAYMENT</code>, <code class=3D"literal">PAYMENT_STATUS</code>,
            <code class=3D"literal">ACCOUNT_TYPE</code>, <code class=3D"=
literal">ORGANIZATION</code> and
            <code class=3D"literal">ORG_USER</code> tables.
        </p><pre class=3D"programlisting">select account, payment
from Account as account
    left outer join account.payments as payment
where :currentUser in elements(account.holder.users)
    and PaymentStatus.UNPAID =3D isNull(payment.currentStatus.name, Paym=
entStatus.UNPAID)
order by account.type.sortOrder, account.accountNumber, payment.dueDate<=
/pre><p>
            For some databases, we would need to do away with the (corre=
lated) subselect.
        </p><pre class=3D"programlisting">select account, payment
from Account as account
    join account.holder.users as user
    left outer join account.payments as payment
where :currentUser =3D user
    and PaymentStatus.UNPAID =3D isNull(payment.currentStatus.name, Paym=
entStatus.UNPAID)
order by account.type.sortOrder, account.accountNumber, payment.dueDate<=
/pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage=
"><div><div><h2 class=3D"title"><a id=3D"queryhql-bulk"/>16.15.=C2=A0Bul=
k update and delete</h2></div></div></div><p>
            HQL now supports <code class=3D"literal">update</code>, <cod=
e class=3D"literal">delete</code> and
            <code class=3D"literal">insert ... select ...</code> stateme=
nts.
            See <a class=3D"xref" href=3D"#batch-direct" title=3D"15.4.=C2=
=A0DML-style operations">Section=C2=A015.4, =E2=80=9CDML-style operation=
s=E2=80=9D</a> for more information.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-tipstricks"/>16=
.16.=C2=A0Tips &amp; Tricks</h2></div></div></div><p>
            You can count the number of query results without returning =
them:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_separato=
r">(</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <b=
r/> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D=
"java_type">Integer</span><!-- <br/> --><span class=3D"java_separator">)=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session</span><!--=
 <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span cla=
ss=3D"java_plain">createQuery</span><!-- <br/> --><span class=3D"java_se=
parator">(</span><!-- <br/> --><span class=3D"java_literal">&quot;select=
&nbsp;count(*)&nbsp;from&nbsp;....&quot;</span><!-- <br/> --><span class=
=3D"java_separator">).</span><!-- <br/> --><span class=3D"java_plain">it=
erate</span><!-- <br/> --><span class=3D"java_separator">().</span><!-- =
<br/> --><span class=3D"java_plain">next</span><!-- <br/> --><span class=
=3D"java_separator">()</span><!-- <br/> --><span class=3D"java_plain">&n=
bsp;</span><!-- <br/> --><span class=3D"java_separator">).</span><!-- <b=
r/> --><span class=3D"java_plain">intValue</span><!-- <br/> --><span cla=
ss=3D"java_separator">()</span></pre><p>
            To order a result by the size of a collection, use the follo=
wing query:
        </p><pre class=3D"programlisting">select usr.id, usr.name
from User as usr
    left join usr.messages as msg
group by usr.id, usr.name
order by count(msg)</pre><p>
            If your database supports subselects, you can place a condit=
ion upon selection
            size in the where clause of your query:
        </p><pre class=3D"programlisting">from User usr where size(usr.m=
essages) &gt;=3D 1</pre><p>
            If your database does not support subselects, use the follow=
ing query:
        </p><pre class=3D"programlisting">select usr.id, usr.name
from User usr
    join usr.messages msg
group by usr.id, usr.name
having count(msg) &gt;=3D 1</pre><p>
            As this solution cannot return a <code class=3D"literal">Use=
r</code> with zero messages
            because of the inner join, the following form is also useful=
:
        </p><pre class=3D"programlisting">select usr.id, usr.name
from User as usr
    left join usr.messages as msg
group by usr.id, usr.name
having count(msg) =3D 0</pre><p>
            Properties of a JavaBean can be bound to named query paramet=
ers:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Qu=
ery</span><!-- <br/> --><span class=3D"java_plain">&nbsp;q&nbsp;</span><=
!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;s</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_plain">createQuery</s=
pan><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><=
span class=3D"java_literal">&quot;from&nbsp;foo&nbsp;Foo&nbsp;as&nbsp;fo=
o&nbsp;where&nbsp;foo.name=3D:name&nbsp;and&nbsp;foo.size=3D:size&quot;<=
/span><!-- <br/> --><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setProperties</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">fooBean</span><=
span class=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_operator">//</span><span class=3D"java_plain"=
>&nbsp;fooBean&nbsp;has&nbsp;getName</span><span class=3D"java_separator=
">()</span><span class=3D"java_plain">&nbsp;and&nbsp;getSize</span><span=
 class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;foos&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">list</span><span class=3D"java_separator=
">();</span></pre><p>
            Collections are pageable by using the <code class=3D"literal=
">Query</code> interface with a filter:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Qu=
ery</span><!-- <br/> --><span class=3D"java_plain">&nbsp;q&nbsp;</span><=
!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;s</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_plain">createFilter</=
span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;collection</span><!-- <br/> --><span cl=
ass=3D"java_separator">,</span><!-- <br/> --><span class=3D"java_plain">=
&nbsp;</span><!-- <br/> --><span class=3D"java_literal">&quot;&quot;</sp=
an><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><=
span class=3D"java_separator">);</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_operator">//</spa=
n><!-- <br/> --><span class=3D"java_plain">&nbsp;the&nbsp;trivial&nbsp;f=
ilter</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setMaxResults</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">PAGE_SIZE</span=
><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setFirstResult</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_plain">PAGE_SIZE&nbsp=
;</span><span class=3D"java_operator">*</span><span class=3D"java_plain"=
>&nbsp;pageNumber</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;page&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;q</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">list</span><span class=3D"java_separator=
">();</span></pre><p>
            Collection elements can be ordered or grouped using a query =
filter:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Co=
llection</span><!-- <br/> --><span class=3D"java_plain">&nbsp;orderedCol=
lection&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</spa=
n><!-- <br/> --><span class=3D"java_plain">&nbsp;s</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
plain">filter</span><!-- <br/> --><span class=3D"java_separator">(</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;collection</span><!-- <b=
r/> --><span class=3D"java_separator">,</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_literal">&qu=
ot;order&nbsp;by&nbsp;this.amount&quot;</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">)=
;</span>
<!--  --><br/><span class=3D"java_type">Collection</span><span class=3D"=
java_plain">&nbsp;counts&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">filter</span><span class=3D"java=
_separator">(</span><span class=3D"java_plain">&nbsp;collection</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_literal">&quot;select&nbsp;this.type,&nbsp;coun=
t(this)&nbsp;group&nbsp;by&nbsp;this.type&quot;</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">);</span></pre><p>
            You can find the size of a collection without initializing i=
t:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_separato=
r">(</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <b=
r/> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D=
"java_type">Integer</span><!-- <br/> --><span class=3D"java_separator">)=
</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session</span><!--=
 <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span cla=
ss=3D"java_plain">createQuery</span><!-- <br/> --><span class=3D"java_se=
parator">(</span><!-- <br/> --><span class=3D"java_literal">&quot;select=
&nbsp;count(*)&nbsp;from&nbsp;....&quot;</span><!-- <br/> --><span class=
=3D"java_separator">).</span><!-- <br/> --><span class=3D"java_plain">it=
erate</span><!-- <br/> --><span class=3D"java_separator">().</span><!-- =
<br/> --><span class=3D"java_plain">next</span><!-- <br/> --><span class=
=3D"java_separator">()</span><!-- <br/> --><span class=3D"java_plain">&n=
bsp;</span><!-- <br/> --><span class=3D"java_separator">).</span><!-- <b=
r/> --><span class=3D"java_plain">intValue</span><!-- <br/> --><span cla=
ss=3D"java_separator">();</span></pre></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
queryhql-components"/>16.17.=C2=A0Components</h2></div></div></div><p>
            Components can be used similarly to the simple value types t=
hat are used in HQL
            queries.  They can appear in the <code class=3D"literal">sel=
ect</code> clause as follows:
        </p><pre class=3D"programlisting">select p.name from Person p</p=
re><pre class=3D"programlisting">select p.name.first from Person p</pre>=
<p>
            where the Person's name property is a component.  Components=
 can also be used
            in the <code class=3D"literal">where</code> clause:
        </p><pre class=3D"programlisting">from Person p where p.name =3D=
 :name</pre><pre class=3D"programlisting">from Person p where p.name.fir=
st =3D :firstName</pre><p>
            Components can also be used in the <code class=3D"literal">o=
rder by</code> clause:
        </p><pre class=3D"programlisting">from Person p order by p.name<=
/pre><pre class=3D"programlisting">from Person p order by p.name.first</=
pre><p>
            Another common use of components is in <a class=3D"link" hre=
f=3D"#queryhql-tuple" title=3D"16.18.=C2=A0Row value constructor syntax"=
>row value constructors</a>.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"queryhql-tuple"/>16.18.=C2=
=A0Row value constructor syntax</h2></div></div></div><p>
            HQL supports the use of ANSI SQL <code class=3D"literal">row=
 value constructor</code> syntax, sometimes
            referred to AS <code class=3D"literal">tuple</code> syntax, =
even though the underlying database may not support
            that notion.  Here, we are generally referring to multi-valu=
ed comparisons, typically associated
            with components.  Consider an entity Person which defines a =
name component:
        </p><pre class=3D"programlisting">from Person p where p.name.fir=
st=3D'John' and p.name.last=3D'Jingleheimer-Schmidt'</pre><p>
            That is valid syntax although it is a little verbose.  You c=
an make this more concise by using
            <code class=3D"literal">row value constructor</code> syntax:=

        </p><pre class=3D"programlisting">from Person p where p.name=3D(=
'John', 'Jingleheimer-Schmidt')</pre><p>
            It can also be useful to specify this in the <code class=3D"=
literal">select</code> clause:
        </p><pre class=3D"programlisting">select p.name from Person p</p=
re><p>
            Using <code class=3D"literal">row value constructor</code> s=
yntax can also be beneficial
            when using subqueries that need to compare against multiple =
values:
        </p><pre class=3D"programlisting">from Cat as cat
where not ( cat.name, cat.color ) in (
    select cat.name, cat.color from DomesticCat cat
)</pre><p>
            One thing to consider when deciding if you want to use this =
syntax, is that the query will
            be dependent upon the ordering of the component sub-properti=
es in the metadata.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"querycriteria"/>Ch=
apter=C2=A017.=C2=A0Criteria Queries</h2></div></div></div><div class=3D=
"toc"><dl><dt><span class=3D"section"><a href=3D"#querycriteria-creating=
">17.1. Creating a Criteria instance</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"#querycriteria-narrowing">17.2. Narrowing the result =
set</a></span></dt><dt><span class=3D"section"><a href=3D"#querycriteria=
-ordering">17.3. Ordering the results</a></span></dt><dt><span class=3D"=
section"><a href=3D"#querycriteria-associations">17.4. Associations</a><=
/span></dt><dt><span class=3D"section"><a href=3D"#querycriteria-dynamic=
fetching">17.5. Dynamic association fetching</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"#querycriteria-examples">17.6. Example querie=
s</a></span></dt><dt><span class=3D"section"><a href=3D"#querycriteria-p=
rojection">17.7. Projections, aggregation and grouping</a></span></dt><d=
t><span class=3D"section"><a href=3D"#querycriteria-detachedqueries">17.=
8. Detached queries and subqueries</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"#query-criteria-naturalid">17.9. Queries by natural ide=
ntifier</a></span></dt></dl></div><p>
        Hibernate features an intuitive, extensible criteria query API.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"querycriteria-creating"/>17.1.=C2=A0=
Creating a <code class=3D"literal">Criteria</code> instance</h2></div></=
div></div><p>
            The interface <code class=3D"literal">org.hibernate.Criteria=
</code> represents a query against
            a particular persistent class. The <code class=3D"literal">S=
ession</code> is a factory for
            <code class=3D"literal">Criteria</code> instances.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Cr=
iteria</span><!-- <br/> --><span class=3D"java_plain">&nbsp;crit&nbsp;</=
span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --=
><span class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D=
"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">create=
Criteria</span><!-- <br/> --><span class=3D"java_separator">(</span><!--=
 <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D=
"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">clas=
s</span><!-- <br/> --><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">crit</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">setMaxResults</span><span =
class=3D"java_separator">(</span><span class=3D"java_literal">50</span><=
span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;crit</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">list</span><span class=3D"java_separa=
tor">();</span></pre></div><div class=3D"section" lang=3D"en-US"><div cl=
ass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"querycriteria-n=
arrowing"/>17.2.=C2=A0Narrowing the result set</h2></div></div></div><p>=

            An individual query criterion is an instance of the interfac=
e
            <code class=3D"literal">org.hibernate.criterion.Criterion</c=
ode>. The class
            <code class=3D"literal">org.hibernate.criterion.Restrictions=
</code> defines
            factory methods for obtaining certain built-in
            <code class=3D"literal">Criterion</code> types.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">like</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;name&quot=
;</span><span class=3D"java_separator">,</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_literal">&quot;Fritz%&quot;</span><sp=
an class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">between</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;weight=
&quot;</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;minWeight</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_plain">&nbsp;maxWeight</span><span class=3D"java_separat=
or">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            Restrictions can be grouped logically.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">like</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;name&quot=
;</span><span class=3D"java_separator">,</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_literal">&quot;Fritz%&quot;</span><sp=
an class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">or</span><span class=3D=
"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Restrictions</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">eq</span>=
<span class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_literal">&quot;age&quot;</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_type">Integer</span><span class=3D"java_separator">(=
</span><span class=3D"java_literal">0</span><span class=3D"java_separato=
r">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Restrictions</span><sp=
an class=3D"java_separator">.</span><span class=3D"java_plain">isNull</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_literal">=
&quot;age&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;cats&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;se=
ss</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/>=
 --><span class=3D"java_plain">createCriteria</span><!-- <br/> --><span =
class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type"=
>Cat</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br=
/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">in</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">&quot;name&quot;</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
keyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">String</span><span class=3D"java_separator">[]</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&qu=
ot;Fritz&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;Izi&quot;</=
span><span class=3D"java_separator">,</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_literal">&quot;Pk&quot;</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">}</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">disjunction</span><spa=
n class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Restriction=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">isNull</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_literal">&quot;age&quot;</span><span class=3D"java_separator">)</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Restriction=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">eq</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;age&quot;</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Int=
eger</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">0</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Restriction=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">eq</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;age&quot;</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Int=
eger</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">1</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Restriction=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">eq</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;age&quot;</span><span class=3D"java_separator">,</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Int=
eger</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">2</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            There are a range of built-in criterion types (<code class=3D=
"literal">Restrictions</code>
            subclasses). One of the most useful allows you to specify SQ=
L directly.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">sqlRestriction</span><=
span class=3D"java_separator">(</span><span class=3D"java_literal">&quot=
;lower({alias}.name)&nbsp;like&nbsp;lower(?)&quot;</span><span class=3D"=
java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_literal">&quot;Fritz%&quot;</span><span class=3D"java_separa=
tor">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_type">Hibernate</span><span class=3D"java_separator">.</span><span clas=
s=3D"java_plain">STRING</span><span class=3D"java_separator">)</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            The <code class=3D"literal">{alias}</code> placeholder with =
be replaced by the row alias
            of the queried entity.
        </p><p>
            You can also obtain a criterion from a =

            <code class=3D"literal">Property</code> instance. You can cr=
eate a <code class=3D"literal">Property</code>
            by calling <code class=3D"literal">Property.forName()</code>=
:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"></span>
<!--  --><br/><span class=3D"java_type">Property</span><span class=3D"ja=
va_plain">&nbsp;age&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Proper=
ty</span><span class=3D"java_separator">.</span><span class=3D"java_plai=
n">forName</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_literal">&quot;age&quot;</span><span class=3D"java_separator">);</sp=
an>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;cats&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">createCriteria</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_type">Cat</span><span class=3D=
"java_separator">.</span><span class=3D"java_keyword">class</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">disjunction</span><spa=
n class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;age</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">isNull</span><span class=3D"java_separat=
or">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;age</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">eq</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyw=
ord">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Integer</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_literal">0</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;age</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">eq</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyw=
ord">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Integer</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_literal">1</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;age</span><span class=3D"java_separator">.</=
span><span class=3D"java_plain">eq</span><span class=3D"java_separator">=
(</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyw=
ord">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Integer</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_literal">2</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">=
)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</=
span><span class=3D"java_separator">).</span><span class=3D"java_plain">=
in</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_keyword">new</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">String</span><span clas=
s=3D"java_separator">[]</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">{</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_literal">&quot;Fritz&quot;</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">&quot;Izi&quot;</span><span class=3D"java_separato=
r">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_l=
iteral">&quot;Pk&quot;</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">}</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"=
title"><a id=3D"querycriteria-ordering"/>17.3.=C2=A0Ordering the results=
</h2></div></div></div><p>
            You can order the results using <code class=3D"literal">org.=
hibernate.criterion.Order</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">like</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;name&quot=
;</span><span class=3D"java_separator">,</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_literal">&quot;F%&quot;</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">asc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</=
span><span class=3D"java_separator">)</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">desc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;age&quot;</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setMax=
Results</span><span class=3D"java_separator">(</span><span class=3D"java=
_literal">50</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;cats&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;se=
ss</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/>=
 --><span class=3D"java_plain">createCriteria</span><!-- <br/> --><span =
class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type"=
>Cat</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br=
/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;name&quot;</=
span><span class=3D"java_separator">).</span><span class=3D"java_plain">=
like</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;F%&quot;</span><span class=3D"java_separator">)</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Property</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">forName</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_literal">&quot;name&=
quot;</span><span class=3D"java_separator">).</span><span class=3D"java_=
plain">asc</span><span class=3D"java_separator">()</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Property</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">forName</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_literal">&quot;age&q=
uot;</span><span class=3D"java_separator">).</span><span class=3D"java_p=
lain">desc</span><span class=3D"java_separator">()</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setMax=
Results</span><span class=3D"java_separator">(</span><span class=3D"java=
_literal">50</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"=
title"><a id=3D"querycriteria-associations"/>17.4.=C2=A0Associations</h2=
></div></div></div><p>
            By navigating
            associations using <code class=3D"literal">createCriteria()<=
/code> you can specify constraints upon related entities:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">like</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;name&quot=
;</span><span class=3D"java_separator">,</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_literal">&quot;F%&quot;</span><span c=
lass=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Criteria</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_literal">&quot;kittens&quot;</span><span class=3D"java_separator">)</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Restriction=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">like</span><span class=3D"java_separator">(</span><span class=3D"java_=
literal">&quot;name&quot;</span><span class=3D"java_separator">,</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quo=
t;F%&quot;</span><span class=3D"java_separator">)</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            The second <code class=3D"literal">createCriteria()</code> r=
eturns a new
            instance of <code class=3D"literal">Criteria</code> that ref=
ers to the elements of
            the <code class=3D"literal">kittens</code> collection.
        </p><p>
            There is also an alternate form that is useful in certain ci=
rcumstances:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Alias</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;kittens&quot;</span><span class=3D"java_separator">,</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;kt&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Alias</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;mate&quot;</span><span class=3D"java_separator">,</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot=
;mt&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">eqProperty</span><span=
 class=3D"java_separator">(</span><span class=3D"java_literal">&quot;kt.=
name&quot;</span><span class=3D"java_separator">,</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_literal">&quot;mt.name&quot;=
</span><span class=3D"java_separator">)</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            (<code class=3D"literal">createAlias()</code> does not creat=
e a new instance of
            <code class=3D"literal">Criteria</code>.)
        </p><p>
            The kittens collections held by the <code class=3D"literal">=
Cat</code> instances
            returned by the previous two queries are <span class=3D"emph=
asis"><em>not</em></span> pre-filtered
            by the criteria. If you want to retrieve just the kittens th=
at match the
            criteria, you must use a <code class=3D"literal">ResultTrans=
former</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Criteria</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_literal">&quot;kittens&quot;</span><span class=3D"java_separator">,</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal"=
>&quot;kt&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Restriction=
s</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">eq</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;name&quot;</span><span class=3D"java_separator">,</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&quot;=
F%&quot;</span><span class=3D"java_separator">)</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setRes=
ultTransformer</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Criteria</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">ALIAS_TO_ENTITY_MAP</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Iterator</span><span class=3D"ja=
va_plain">&nbsp;iter&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;cats</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">iterator</span><span class=3D"jav=
a_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;iter</span><span class=3D"java_separator">.</span=
><span class=3D"java_plain">hasNext</span><span class=3D"java_separator"=
>()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_se=
parator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Map</span><span class=3D"java_plain">&nbsp;map=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Map</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;iter</span><span class=3D"java_separator">.</span>=
<span class=3D"java_plain">next</span><span class=3D"java_separator">();=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp;cat=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Cat</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;map</span><span class=3D"java_separator">.</span><=
span class=3D"java_plain">get</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_type">Criteria</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">ROOT_ALIAS</span><span class=3D"ja=
va_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp;kit=
ten&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">Cat</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;map</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">get</span><span class=3D"java_separator">=
(</span><span class=3D"java_literal">&quot;kt&quot;</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
		Additionally you may manipulate the result set using a left outer join=
:
	</p><pre class=3D"programlisting">
		List cats =3D session.createCriteria( Cat.class )
                       .createAlias("mate", "mt", Criteria.LEFT_JOIN, Re=
strictions.like("mt.name", "good%") )
                       .addOrder(Order.asc("mt.age"))
                       .list();
	=

	</pre><p>
		This will return all of the <code class=3D"literal">Cat</code>s with a=
 mate whose name starts with "good"
		ordered by their mate's age, and all cats who do not have a mate.  =

		 This is useful when there is a need to order or limit in the database=

		 prior to returning complex/large result sets, and removes many instan=
ces where
		 multiple queries would have to be performed and the results unioned =

		 by java in memory.  =

	</p><p>
		Without this feature, first all of the cats without a mate would need =
to be loaded in one query. =

	</p><p>
		A second query would need to retreive the cats with mates who's name s=
tarted with "good" sorted by the mates age.
	</p><p>
		Thirdly, in memory; the lists would need to be joined manually.
	</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage=
"><div><div><h2 class=3D"title"><a id=3D"querycriteria-dynamicfetching"/=
>17.5.=C2=A0Dynamic association fetching</h2></div></div></div><p>
            You can specify association fetching semantics at runtime us=
ing
            <code class=3D"literal">setFetchMode()</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cats&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">createCri=
teria</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <b=
r/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class=
</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">like</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;name&quot=
;</span><span class=3D"java_separator">,</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_literal">&quot;Fritz%&quot;</span><sp=
an class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setFet=
chMode</span><span class=3D"java_separator">(</span><span class=3D"java_=
literal">&quot;mate&quot;</span><span class=3D"java_separator">,</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">FetchMo=
de</span><span class=3D"java_separator">.</span><span class=3D"java_plai=
n">EAGER</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setFet=
chMode</span><span class=3D"java_separator">(</span><span class=3D"java_=
literal">&quot;kittens&quot;</span><span class=3D"java_separator">,</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Fetc=
hMode</span><span class=3D"java_separator">.</span><span class=3D"java_p=
lain">EAGER</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            This query will fetch both <code class=3D"literal">mate</cod=
e> and <code class=3D"literal">kittens</code>
            by outer join. See <a class=3D"xref" href=3D"#performance-fe=
tching" title=3D"21.1.=C2=A0Fetching strategies">Section=C2=A021.1, =E2=80=
=9CFetching strategies=E2=80=9D</a> for more information.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"querycriteria-examples"/=
>17.6.=C2=A0Example queries</h2></div></div></div><p>
            The class <code class=3D"literal">org.hibernate.criterion.Ex=
ample</code> allows
            you to construct a query criterion from a given instance.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Ca=
t</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cat&nbsp;</span><=
!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_key=
word">new</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!=
-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span clas=
s=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">cat</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setSex</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">'F'</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">cat</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">setColor</span><span class=3D=
"java_separator">(</span><span class=3D"java_type">Color</span><span cla=
ss=3D"java_separator">.</span><span class=3D"java_plain">BLACK</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;session</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">createCriteria</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_type">Cat</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Example</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">create</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">cat</span><span clas=
s=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
           Version properties, identifiers and associations are ignored.=
 By default,
           null valued properties are excluded.
        </p><p>
           You can adjust how the <code class=3D"literal">Example</code>=
 is applied.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Ex=
ample</span><!-- <br/> --><span class=3D"java_plain">&nbsp;example&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"=
java_type">Example</span><!-- <br/> --><span class=3D"java_separator">.<=
/span><!-- <br/> --><span class=3D"java_plain">create</span><!-- <br/> -=
-><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"ja=
va_plain">cat</span><!-- <br/> --><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">exclud=
eZeroes</span><span class=3D"java_separator">()</span><span class=3D"jav=
a_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span class=3D"java_operator">//</span><span class=3D"java_pla=
in">exclude&nbsp;zero&nbsp;valued&nbsp;properties</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">exclud=
eProperty</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_literal">&quot;color&quot;</span><span class=3D"java_separator">)</sp=
an><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D"java_ope=
rator">//</span><span class=3D"java_plain">exclude&nbsp;the&nbsp;propert=
y&nbsp;named&nbsp;</span><span class=3D"java_literal">&quot;color&quot;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">ignore=
Case</span><span class=3D"java_separator">()</span><span class=3D"java_p=
lain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cl=
ass=3D"java_plain">perform&nbsp;</span><span class=3D"java_keyword">case=
</span><span class=3D"java_plain">&nbsp;insensitive&nbsp;string&nbsp;com=
parisons</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">enable=
Like</span><span class=3D"java_separator">();</span><span class=3D"java_=
plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">use&nbsp;like&nbsp;</span><span class=3D"java_keyword">for<=
/span><span class=3D"java_plain">&nbsp;string&nbsp;comparisons</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;session</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">createCriteria</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_type">Cat</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">ex=
ample</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            You can even use examples to place criteria upon associated =
objects.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;results&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=
=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">cre=
ateCriteria</span><!-- <br/> --><span class=3D"java_separator">(</span><=
!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span cla=
ss=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword"=
>class</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Example</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">create</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">cat</span><span clas=
s=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</span><sp=
an class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Criteria</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_literal">&quot;mate&quot;</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Example</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">cre=
ate</span><span class=3D"java_separator">(</span><span class=3D"java_pla=
in">&nbsp;cat</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">getMate</span><span class=3D"java_separator">()</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"=
title"><a id=3D"querycriteria-projection"/>17.7.=C2=A0Projections, aggre=
gation and grouping</h2></div></div></div><p>
            The class <code class=3D"literal">org.hibernate.criterion.Pr=
ojections</code> is a
            factory for <code class=3D"literal">Projection</code> instan=
ces. You can apply a
            projection to a query by calling <code class=3D"literal">set=
Projection()</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;results&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=
=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">cre=
ateCriteria</span><!-- <br/> --><span class=3D"java_separator">(</span><=
!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span cla=
ss=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword"=
>class</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">rowCount</spa=
n><span class=3D"java_separator">()</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">eq</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;color&quot;<=
/span><span class=3D"java_separator">,</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_type">Color</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">BLACK</span><span class=3D"=
java_separator">)</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;results&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;session</span><!-- <br/> --><span class=3D"java_separator">.</span><!--=
 <br/> --><span class=3D"java_plain">createCriteria</span><!-- <br/> -->=
<span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java=
_type">Cat</span><!-- <br/> --><span class=3D"java_separator">.</span><!=
-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">projectionLis=
t</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>rowCount</span><span class=3D"java_separator">()</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>avg</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;weight&quot;</span><span class=3D"java_separator">)</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>max</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;weight&quot;</span><span class=3D"java_separator">)</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>groupProperty</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;color&quot;</span><span class=3D"java_separator">)<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separa=
tor">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            There is no explicit "group by" necessary in a criteria quer=
y. Certain
            projection types are defined to be <span class=3D"emphasis">=
<em>grouping projections</em></span>,
            which also appear in the SQL <code class=3D"literal">group b=
y</code> clause.
        </p><p>
            An alias can be assigned to a projection so that the project=
ed value
            can be referred to in restrictions or orderings. Here are tw=
o different ways to
            do this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;results&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=
=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">cre=
ateCriteria</span><!-- <br/> --><span class=3D"java_separator">(</span><=
!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span cla=
ss=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword"=
>class</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">alias</span><=
span class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">Projections</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">groupProperty</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;color&=
quot;</span><span class=3D"java_separator">),</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_literal">&quot;colr&quot;</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">asc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;colr&quot;</=
span><span class=3D"java_separator">)</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;results&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;session</span><!-- <br/> --><span class=3D"java_separator">.</span><!--=
 <br/> --><span class=3D"java_plain">createCriteria</span><!-- <br/> -->=
<span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java=
_type">Cat</span><!-- <br/> --><span class=3D"java_separator">.</span><!=
-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">groupProperty=
</span><span class=3D"java_separator">(</span><span class=3D"java_litera=
l">&quot;color&quot;</span><span class=3D"java_separator">).</span><span=
 class=3D"java_plain">as</span><span class=3D"java_separator">(</span><s=
pan class=3D"java_literal">&quot;colr&quot;</span><span class=3D"java_se=
parator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">asc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;colr&quot;</=
span><span class=3D"java_separator">)</span><span class=3D"java_plain">&=
nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            The <code class=3D"literal">alias()</code> and <code class=3D=
"literal">as()</code> methods simply wrap a
            projection instance in another, aliased, instance of <code c=
lass=3D"literal">Projection</code>.
            As a shortcut, you can assign an alias when you add the proj=
ection to a =

            projection list:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;results&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=
=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">cre=
ateCriteria</span><!-- <br/> --><span class=3D"java_separator">(</span><=
!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span cla=
ss=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword"=
>class</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">projectionLis=
t</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>rowCount</span><span class=3D"java_separator">(),</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_literal">&quot;catCountByCo=
lor&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>avg</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;weight&quot;</span><span class=3D"java_separator">),</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&qu=
ot;avgWeight&quot;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>max</span><span class=3D"java_separator">(</span><span class=3D"java_li=
teral">&quot;weight&quot;</span><span class=3D"java_separator">),</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&qu=
ot;maxWeight&quot;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>groupProperty</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;color&quot;</span><span class=3D"java_separator">),=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">&quot;color&quot;</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">desc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;catCountByCo=
lor&quot;</span><span class=3D"java_separator">)</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">desc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;avgWeight&qu=
ot;</span><span class=3D"java_separator">)</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;results&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;session</span><!-- <br/> --><span class=3D"java_separator">.</span><!--=
 <br/> --><span class=3D"java_plain">createCriteria</span><!-- <br/> -->=
<span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java=
_type">Domestic</span><!-- <br/> --><span class=3D"java_separator">.</sp=
an><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> -->=
<span class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_literal">&quot;ca=
t&quot;</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Alias</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;kittens&quot;</span><span class=3D"java_separator">,</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;kit&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">projectionLis=
t</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>property</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_literal">&quot;cat.name&quot;</span><span class=3D"java_separator">),=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">&quot;catName&quot;</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>property</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_literal">&quot;kit.name&quot;</span><span class=3D"java_separator">),=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">&quot;kitName&quot;</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">asc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;catName&quot=
;</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">asc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;kitName&quot=
;</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            You can also use <code class=3D"literal">Property.forName()<=
/code> to express projections:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Li=
st</span><!-- <br/> --><span class=3D"java_plain">&nbsp;results&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=
=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">cre=
ateCriteria</span><!-- <br/> --><span class=3D"java_separator">(</span><=
!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span cla=
ss=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword"=
>class</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Property</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">forName</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_literal">&quot;=
name&quot;</span><span class=3D"java_separator">)</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;color&quot;<=
/span><span class=3D"java_separator">).</span><span class=3D"java_plain"=
>eq</span><span class=3D"java_separator">(</span><span class=3D"java_typ=
e">Color</span><span class=3D"java_separator">.</span><span class=3D"jav=
a_plain">BLACK</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;results&nbsp;</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;session</span><!-- <br/> --><span class=3D"java_separator">.</span><!--=
 <br/> --><span class=3D"java_plain">createCriteria</span><!-- <br/> -->=
<span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java=
_type">Cat</span><!-- <br/> --><span class=3D"java_separator">.</span><!=
-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Projections</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">projectionLis=
t</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Projections=
</span><span class=3D"java_separator">.</span><span class=3D"java_plain"=
>rowCount</span><span class=3D"java_separator">().</span><span class=3D"=
java_plain">as</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;catCountByColor&quot;</span><span class=3D"java_sep=
arator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Property</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">fo=
rName</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;weight&quot;</span><span class=3D"java_separator">).</span=
><span class=3D"java_plain">avg</span><span class=3D"java_separator">().=
</span><span class=3D"java_plain">as</span><span class=3D"java_separator=
">(</span><span class=3D"java_literal">&quot;avgWeight&quot;</span><span=
 class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Property</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">fo=
rName</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;weight&quot;</span><span class=3D"java_separator">).</span=
><span class=3D"java_plain">max</span><span class=3D"java_separator">().=
</span><span class=3D"java_plain">as</span><span class=3D"java_separator=
">(</span><span class=3D"java_literal">&quot;maxWeight&quot;</span><span=
 class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">add</span><span class=3D"java_separator">(</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Property</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">fo=
rName</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;color&quot;</span><span class=3D"java_separator">).</span>=
<span class=3D"java_plain">group</span><span class=3D"java_separator">()=
.</span><span class=3D"java_plain">as</span><span class=3D"java_separato=
r">(</span><span class=3D"java_literal">&quot;color&quot;</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">desc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;catCountByCo=
lor&quot;</span><span class=3D"java_separator">)</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">addOrd=
er</span><span class=3D"java_separator">(</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Order</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">desc</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;avgWeight&qu=
ot;</span><span class=3D"java_separator">)</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"=
title"><a id=3D"querycriteria-detachedqueries"/>17.8.=C2=A0Detached quer=
ies and subqueries</h2></div></div></div><p>
            The <code class=3D"literal">DetachedCriteria</code> class al=
lows you to create a query outside the scope =

            of a session and then execute it using an arbitrary <code cl=
ass=3D"literal">Session</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">De=
tachedCriteria</span><!-- <br/> --><span class=3D"java_plain">&nbsp;quer=
y&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!--=
 <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cl=
ass=3D"java_type">DetachedCriteria</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">forClass<=
/span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --=
><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java_s=
eparator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span=
><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;sex&quot;</s=
pan><span class=3D"java_separator">).</span><span class=3D"java_plain">e=
q</span><span class=3D"java_separator">(</span><span class=3D"java_liter=
al">'F'</span><span class=3D"java_separator">)</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;session&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">....;</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;txn&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">beginTransaction</span><span=
 class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;query</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">getExecutableCriteria</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">session</sp=
an><span class=3D"java_separator">).</span><span class=3D"java_plain">se=
tMaxResults</span><span class=3D"java_separator">(</span><span class=3D"=
java_literal">100</span><span class=3D"java_separator">).</span><span cl=
ass=3D"java_plain">list</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">txn</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">commit</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
            A <code class=3D"literal">DetachedCriteria</code> can also b=
e used to express a subquery. Criterion
            instances involving subqueries can be obtained via <code cla=
ss=3D"literal">Subqueries</code> or
            <code class=3D"literal">Property</code>.            =

        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">De=
tachedCriteria</span><!-- <br/> --><span class=3D"java_plain">&nbsp;avgW=
eight&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span>=
<!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><spa=
n class=3D"java_type">DetachedCriteria</span><!-- <br/> --><span class=3D=
"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">forCla=
ss</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/>=
 --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"jav=
a_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class</s=
pan><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Property</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">forName</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_literal">&quot;=
weight&quot;</span><span class=3D"java_separator">).</span><span class=3D=
"java_plain">avg</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">createCriteria</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_type">Cat</span=
><span class=3D"java_separator">.</span><span class=3D"java_keyword">cla=
ss</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;weight&quot;=
</span><span class=3D"java_separator">).</span><span class=3D"java_plain=
">gt</span><span class=3D"java_separator">(</span><span class=3D"java_pl=
ain">avgWeight</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!=
-- <br/> --><span class=3D"java_type">DetachedCriteria</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;weights&nbsp;</span><!-- <br/> --><s=
pan class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;</span><!-- <br/> --><span class=3D"java_type">DetachedCrit=
eria</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br=
/> --><span class=3D"java_plain">forClass</span><!-- <br/> --><span clas=
s=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_type">Cat=
</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> -=
-><span class=3D"java_keyword">class</span><!-- <br/> --><span class=3D"=
java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Property</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">forName</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_literal">&quot;=
weight&quot;</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">createCriteria</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_type">Cat</span=
><span class=3D"java_separator">.</span><span class=3D"java_keyword">cla=
ss</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Subqueries</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">geAll</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;weight&quot;=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;weights</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre><p>
            Correlated subqueries are also possible:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">De=
tachedCriteria</span><!-- <br/> --><span class=3D"java_plain">&nbsp;avgW=
eightForSex&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D<=
/span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> -=
-><span class=3D"java_type">DetachedCriteria</span><!-- <br/> --><span c=
lass=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain"=
>forClass</span><!-- <br/> --><span class=3D"java_separator">(</span><!-=
- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=
=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_keyword">c=
lass</span><!-- <br/> --><span class=3D"java_separator">,</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_literal">&quot;cat2&quot;</span><!-- <br/> --><span class=3D"java_=
separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setPro=
jection</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">Property</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">forName</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_literal">&quot;=
weight&quot;</span><span class=3D"java_separator">).</span><span class=3D=
"java_plain">avg</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;cat2.sex&quo=
t;</span><span class=3D"java_separator">).</span><span class=3D"java_pla=
in">eqProperty</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;cat.sex&quot;</span><span class=3D"java_separator">=
)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">createCriteria</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_type">Cat</span=
><span class=3D"java_separator">.</span><span class=3D"java_keyword">cla=
ss</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_literal">&quot;cat&quot;</span><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Property</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">forName</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;weight&quot;=
</span><span class=3D"java_separator">).</span><span class=3D"java_plain=
">gt</span><span class=3D"java_separator">(</span><span class=3D"java_pl=
ain">avgWeightForSex</span><span class=3D"java_separator">)</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</span=
>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"=
title"><a id=3D"query-criteria-naturalid"/>17.9.=C2=A0Queries by natural=
 identifier</h2></div></div></div><p>
            For most queries, including criteria queries, the query cach=
e is not efficient
            because query cache invalidation occurs too frequently. Howe=
ver, there is a special
            kind of query where you can optimize the cache invalidation =
algorithm: lookups by a =

            constant natural key. In some applications, this kind of que=
ry occurs frequently.
            The criteria API provides special provision for this use cas=
e.
        </p><p>
            First, map the natural key of your entity using =

            <code class=3D"literal">&lt;natural-id&gt;</code> and enable=
 use of the second-level cache.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">cache</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">u=
sage</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;read-write&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;increment&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">natural-id</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;org&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">natural-id</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;password&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            This functionality is not intended for use with entities wit=
h =

            <span class=3D"emphasis"><em>mutable</em></span> natural key=
s.
        </p><p>
            Once you have enabled the Hibernate query cache, =

            the <code class=3D"literal">Restrictions.naturalId()</code> =
allows you to make use of
            the more efficient cache algorithm.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">s=
ession</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <=
br/> --><span class=3D"java_plain">createCriteria</span><!-- <br/> --><s=
pan class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_t=
ype">User</span><!-- <br/> --><span class=3D"java_separator">.</span><!-=
- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> --><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">naturalId</span><span =
class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">set</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;name&quot;</span><span class=3D"java_separ=
ator">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_literal">&quot;gavin&quot;</span><span class=3D"java_separator">)</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">set</span><span class=3D"java_separator">(</span><span=
 class=3D"java_literal">&quot;org&quot;</span><span class=3D"java_separa=
tor">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_literal">&quot;hb&quot;</span><span class=3D"java_separator">)</span><s=
pan class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">).</span><span class=3D"java_plain">setCa=
cheable</span><span class=3D"java_separator">(</span><span class=3D"java=
_literal">true</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">unique=
Result</span><span class=3D"java_separator">();</span></pre></div></div>=
<div class=3D"chapter" lang=3D"en-US"><div class=3D"titlepage"><div><div=
><h2 class=3D"title"><a id=3D"querysql"/>Chapter=C2=A018.=C2=A0Native SQ=
L</h2></div></div></div><div class=3D"toc"><dl><dt><span class=3D"sectio=
n"><a href=3D"#querysql-creating">18.1. Using a SQLQuery</a></span></dt>=
<dd><dl><dt><span class=3D"section"><a href=3D"#d0e17378">18.1.1. Scalar=
 queries</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e17428=
">18.1.2. Entity queries</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"#d0e17464">18.1.3. Handling associations and collections</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"#d0e17495">18.1.4. Returni=
ng multiple entities</a></span></dt><dt><span class=3D"section"><a href=3D=
"#d0e17636">18.1.5. Returning non-managed entities</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"#d0e17657">18.1.6. Handling inheritance=
</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e17662">18.1.7=
. Parameters</a></span></dt></dl></dd><dt><span class=3D"section"><a hre=
f=3D"#querysql-namedqueries">18.2. Named SQL queries</a></span></dt><dd>=
<dl><dt><span class=3D"section"><a href=3D"#propertyresults">18.2.1. Usi=
ng return-property to explicitly specify column/alias
      names</a></span></dt><dt><span class=3D"section"><a href=3D"#sp_qu=
ery">18.2.2. Using stored procedures for querying</a></span></dt></dl></=
dd><dt><span class=3D"section"><a href=3D"#querysql-cud">18.3. Custom SQ=
L for create, update and delete</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#querysql-load">18.4. Custom SQL for loading</a></span></d=
t></dl></div><p>You can also express queries in the native SQL dialect o=
f your
  database. This is useful if you want to utilize database-specific feat=
ures
  such as query hints or the <code class=3D"literal">CONNECT</code> keyw=
ord in Oracle. It
  also provides a clean migration path from a direct SQL/JDBC based
  application to Hibernate.</p><p>Hibernate3 allows you to specify handw=
ritten SQL, including stored
  procedures, for all create, update, delete, and load operations.</p><d=
iv class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><=
h2 class=3D"title"><a id=3D"querysql-creating"/>18.1.=C2=A0Using a <code=
 class=3D"literal">SQLQuery</code></h2></div></div></div><p>Execution of=
 native SQL queries is controlled via the
    <code class=3D"literal">SQLQuery</code> interface, which is obtained=
 by calling
    <code class=3D"literal">Session.createSQLQuery()</code>. The followi=
ng sections
    describe how to use this API for querying.</p><div class=3D"section"=
 lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><=
a id=3D"d0e17378"/>18.1.1.=C2=A0Scalar queries</h3></div></div></div><p>=
The most basic SQL query is to get a list of scalars
      (values).</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_p=
lain">sess</span><!-- <br/> --><span class=3D"java_separator">.</span><!=
-- <br/> --><span class=3D"java_plain">createSQLQuery</span><!-- <br/> -=
-><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"ja=
va_literal">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;CATS&quot;</span><!-- <br=
/> --><span class=3D"java_separator">).</span><!-- <br/> --><span class=3D=
"java_plain">list</span><!-- <br/> --><span class=3D"java_separator">();=
</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">createSQLQuery</span><span=
 class=3D"java_separator">(</span><span class=3D"java_literal">&quot;SEL=
ECT&nbsp;ID,&nbsp;NAME,&nbsp;BIRTHDATE&nbsp;FROM&nbsp;CATS&quot;</span><=
span class=3D"java_separator">).</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span>
</pre><p>These will return a List of Object arrays (Object[]) with scala=
r
      values for each column in the CATS table. Hibernate will use
      ResultSetMetadata to deduce the actual order and types of the retu=
rned
      scalar values.</p><p>To avoid the overhead of using
      <code class=3D"literal">ResultSetMetadata</code>, or simply to be =
more explicit in
      what is returned, one can use <code class=3D"literal">addScalar()<=
/code>:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRen=
dererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">se=
ss</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/>=
 --><span class=3D"java_plain">createSQLQuery</span><!-- <br/> --><span =
class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_liter=
al">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;CATS&quot;</span><!-- <br/> --><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addScalar</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;ID&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Hibernate</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">LONG</span><span cla=
ss=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addScalar</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;NAME&q=
uot;</span><span class=3D"java_separator">,</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_type">Hibernate</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">STRING</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addScalar</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;BIRTHD=
ATE&quot;</span><span class=3D"java_separator">,</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_type">Hibernate</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">DATE</span><s=
pan class=3D"java_separator">)</span>
</pre><p>This query specified:</p><div class=3D"itemizedlist"><ul><li><p=
>the SQL query string</p></li><li><p>the columns and types to return</p>=
</li></ul></div><p>This will return Object arrays, but now it will not u=
se
      <code class=3D"literal">ResultSetMetadata</code> but will instead =
explicitly get the
      ID, NAME and BIRTHDATE column as respectively a Long, String and a=
 Short
      from the underlying resultset. This also means that only these thr=
ee
      columns will be returned, even though the query is using
      <code class=3D"literal">*</code> and could return more than the th=
ree listed
      columns.</p><p>It is possible to leave out the type information fo=
r all or some
      of the scalars.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"=
java_plain">sess</span><!-- <br/> --><span class=3D"java_separator">.</s=
pan><!-- <br/> --><span class=3D"java_plain">createSQLQuery</span><!-- <=
br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=
=3D"java_literal">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;CATS&quot;</span><!=
-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addScalar</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;ID&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">Hibernate</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">LONG</span><span cla=
ss=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addScalar</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;NAME&q=
uot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addScalar</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;BIRTHD=
ATE&quot;</span><span class=3D"java_separator">)</span>
</pre><p>This is essentially the same query as before, but now
      <code class=3D"literal">ResultSetMetaData</code> is used to determ=
ine the type of
      NAME and BIRTHDATE, where as the type of ID is explicitly
      specified.</p><p>How the java.sql.Types returned from ResultSetMet=
aData is mapped
      to Hibernate types is controlled by the Dialect. If a specific typ=
e is
      not mapped, or does not result in the expected type, it is possibl=
e to
      customize it via calls to <code class=3D"literal">registerHibernat=
eType</code> in
      the Dialect.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"d0e17428"/>18.=
1.2.=C2=A0Entity queries</h3></div></div></div><p>The above queries were=
 all about returning scalar values,
      basically returning the "raw" values from the resultset. The follo=
wing
      shows how to get entity objects from a native sql query via
      <code class=3D"literal">addEntity()</code>.</p><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_plain">sess</span><!-- <br/> --><span c=
lass=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain"=
>createSQLQuery</span><!-- <br/> --><span class=3D"java_separator">(</sp=
an><!-- <br/> --><span class=3D"java_literal">&quot;SELECT&nbsp;*&nbsp;F=
ROM&nbsp;CATS&quot;</span><!-- <br/> --><span class=3D"java_separator">)=
.</span><!-- <br/> --><span class=3D"java_plain">addEntity</span><!-- <b=
r/> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D=
"java_type">Cat</span><!-- <br/> --><span class=3D"java_separator">.</sp=
an><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> -->=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">createSQLQuery</span><span=
 class=3D"java_separator">(</span><span class=3D"java_literal">&quot;SEL=
ECT&nbsp;ID,&nbsp;NAME,&nbsp;BIRTHDATE&nbsp;FROM&nbsp;CATS&quot;</span><=
span class=3D"java_separator">).</span><span class=3D"java_plain">addEnt=
ity</span><span class=3D"java_separator">(</span><span class=3D"java_typ=
e">Cat</span><span class=3D"java_separator">.</span><span class=3D"java_=
keyword">class</span><span class=3D"java_separator">);</span>
</pre><p>This query specified:</p><div class=3D"itemizedlist"><ul><li><p=
>the SQL query string</p></li><li><p>the entity returned by the query</p=
></li></ul></div><p>Assuming that Cat is mapped as a class with the colu=
mns ID, NAME
      and BIRTHDATE the above queries will both return a List where each=

      element is a Cat entity.</p><p>If the entity is mapped with a <cod=
e class=3D"literal">many-to-one</code> to
      another entity it is required to also return this when performing =
the
      native query, otherwise a database specific "column not found" err=
or
      will occur. The additional columns will automatically be returned =
when
      using the * notation, but we prefer to be explicit as in the follo=
wing
      example for a <code class=3D"literal">many-to-one</code> to a
      <code class=3D"literal">Dog</code>:</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_plain">sess</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_plain">createS=
QLQuery</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- =
<br/> --><span class=3D"java_literal">&quot;SELECT&nbsp;ID,&nbsp;NAME,&n=
bsp;BIRTHDATE,&nbsp;DOG_ID&nbsp;FROM&nbsp;CATS&quot;</span><!-- <br/> --=
><span class=3D"java_separator">).</span><!-- <br/> --><span class=3D"ja=
va_plain">addEntity</span><!-- <br/> --><span class=3D"java_separator">(=
</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><=
span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_=
keyword">class</span><!-- <br/> --><span class=3D"java_separator">);</sp=
an>
</pre><p>This will allow cat.getDog() to function properly.</p></div><di=
v class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h=
3 class=3D"title"><a id=3D"d0e17464"/>18.1.3.=C2=A0Handling associations=
 and collections</h3></div></div></div><p>It is possible to eagerly join=
 in the <code class=3D"literal">Dog</code> to
      avoid the possible extra roundtrip for initializing the proxy. Thi=
s is
      done via the <code class=3D"literal">addJoin()</code> method, whic=
h allows you to
      join in an association or collection.</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_plain">sess</span><!-- <br/> --><span class=3D"=
java_separator">.</span><!-- <br/> --><span class=3D"java_plain">createS=
QLQuery</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- =
<br/> --><span class=3D"java_literal">&quot;SELECT&nbsp;c.ID,&nbsp;NAME,=
&nbsp;BIRTHDATE,&nbsp;DOG_ID,&nbsp;D_ID,&nbsp;D_NAME&nbsp;FROM&nbsp;CATS=
&nbsp;c,&nbsp;DOGS&nbsp;d&nbsp;WHERE&nbsp;c.DOG_ID&nbsp;=3D&nbsp;d.D_ID&=
quot;</span><!-- <br/> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addEntity</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;cat&qu=
ot;</span><span class=3D"java_separator">,</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"java=
_separator">.</span><span class=3D"java_keyword">class</span><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addJoin</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_literal">&quot;cat.dog&=
quot;</span><span class=3D"java_separator">);</span>
</pre><p>In this example, the returned <code class=3D"literal">Cat</code=
>'s will have
      their <code class=3D"literal">dog</code> property fully initialize=
d without any
      extra roundtrip to the database. Notice that you added an alias na=
me
      ("cat") to be able to specify the target property path of the join=
. It
      is possible to do the same eager joining for collections, e.g. if =
the
      <code class=3D"literal">Cat</code> had a one-to-many to <code clas=
s=3D"literal">Dog</code>
      instead.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_pl=
ain">sess</span><!-- <br/> --><span class=3D"java_separator">.</span><!-=
- <br/> --><span class=3D"java_plain">createSQLQuery</span><!-- <br/> --=
><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"jav=
a_literal">&quot;SELECT&nbsp;ID,&nbsp;NAME,&nbsp;BIRTHDATE,&nbsp;D_ID,&n=
bsp;D_NAME,&nbsp;CAT_ID&nbsp;FROM&nbsp;CATS&nbsp;c,&nbsp;DOGS&nbsp;d&nbs=
p;WHERE&nbsp;c.ID&nbsp;=3D&nbsp;d.CAT_ID&quot;</span><!-- <br/> --><span=
 class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addEntity</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;cat&qu=
ot;</span><span class=3D"java_separator">,</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"java=
_separator">.</span><span class=3D"java_keyword">class</span><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addJoin</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_literal">&quot;cat.dogs=
&quot;</span><span class=3D"java_separator">);</span>
</pre><p>At this stage you are reaching the limits of what is possible w=
ith
      native queries, without starting to enhance the sql queries to mak=
e them
      usable in Hibernate. Problems can arise when returning multiple en=
tities
      of the same type or when the default alias/column names are not
      enough.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"d0e17495"/>18.1.4.=C2=
=A0Returning multiple entities</h3></div></div></div><p>Until now, the r=
esult set column names are assumed to be the same
      as the column names specified in the mapping document. This can be=

      problematic for SQL queries that join multiple tables, since the s=
ame
      column names can appear in more than one table.</p><p>Column alias=
 injection is needed in the following query (which
      most likely will fail):</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span c=
lass=3D"java_plain">sess</span><!-- <br/> --><span class=3D"java_separat=
or">.</span><!-- <br/> --><span class=3D"java_plain">createSQLQuery</spa=
n><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><sp=
an class=3D"java_literal">&quot;SELECT&nbsp;c.*,&nbsp;m.*&nbsp;&nbsp;FRO=
M&nbsp;CATS&nbsp;c,&nbsp;CATS&nbsp;m&nbsp;WHERE&nbsp;c.MOTHER_ID&nbsp;=3D=
&nbsp;m.ID&quot;</span><!-- <br/> --><span class=3D"java_separator">)</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addEntity</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;cat&qu=
ot;</span><span class=3D"java_separator">,</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"java=
_separator">.</span><span class=3D"java_keyword">class</span><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addEntity</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;mother=
&quot;</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_keyword">class</span><span cl=
ass=3D"java_separator">)</span>
</pre><p>The query was intended to return two Cat instances per row: a c=
at
      and its mother. The query will, however, fail because there is a
      conflict of names; the instances are mapped to the same column nam=
es.
      Also, on some databases the returned column aliases will most like=
ly be
      on the form "c.ID", "c.NAME", etc. which are not equal to the colu=
mns
      specified in the mappings ("ID" and "NAME").</p><p>The following f=
orm is not vulnerable to column name
      duplication:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"jav=
a_plain">sess</span><!-- <br/> --><span class=3D"java_separator">.</span=
><!-- <br/> --><span class=3D"java_plain">createSQLQuery</span><!-- <br/=
> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D=
"java_literal">&quot;SELECT&nbsp;{cat.*},&nbsp;{m.*}&nbsp;&nbsp;FROM&nbs=
p;CATS&nbsp;c,&nbsp;CATS&nbsp;m&nbsp;WHERE&nbsp;c.MOTHER_ID&nbsp;=3D&nbs=
p;m.ID&quot;</span><!-- <br/> --><span class=3D"java_separator">)</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addEntity</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;cat&qu=
ot;</span><span class=3D"java_separator">,</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"java=
_separator">.</span><span class=3D"java_keyword">class</span><span class=
=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addEntity</span><span cl=
ass=3D"java_separator">(</span><span class=3D"java_literal">&quot;mother=
&quot;</span><span class=3D"java_separator">,</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_keyword">class</span><span cl=
ass=3D"java_separator">)</span>
</pre><p>This query specified:</p><div class=3D"itemizedlist"><ul><li><p=
>the SQL query string, with placeholders for Hibernate to
          inject column aliases</p></li><li><p>the entities returned by =
the query</p></li></ul></div><p>The {cat.*} and {mother.*} notation used=
 above is a shorthand for
      "all properties". Alternatively, you can list the columns explicit=
ly,
      but even in this case Hibernate injects the SQL column aliases for=
 each
      property. The placeholder for a column alias is just the property =
name
      qualified by the table alias. In the following example, you retrie=
ve
      Cats and their mothers from a different table (cat_log) to the one=

      declared in the mapping metadata. You can even use the property al=
iases
      in the where clause.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss=
.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span clas=
s=3D"java_type">String</span><!-- <br/> --><span class=3D"java_plain">&n=
bsp;sql&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</spa=
n><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><s=
pan class=3D"java_literal">&quot;SELECT&nbsp;ID&nbsp;as&nbsp;{c.id},&nbs=
p;NAME&nbsp;as&nbsp;{c.name},&nbsp;&quot;</span><!-- <br/> --><span clas=
s=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_operator=
">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_literal">&quot;BIRTHDA=
TE&nbsp;as&nbsp;{c.birthDate},&nbsp;MOTHER_ID&nbsp;as&nbsp;{c.mother},&n=
bsp;{mother.*}&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</span=
><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_literal">&quot;FROM&nb=
sp;CAT_LOG&nbsp;c,&nbsp;CAT_LOG&nbsp;m&nbsp;WHERE&nbsp;{c.mother}&nbsp;=3D=
&nbsp;c.ID&quot;</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;loggedCats&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;sess</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">createSQLQuery</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">sql</span><span =
class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">addEntity</span><span class=3D"java_separator">(</span=
><span class=3D"java_literal">&quot;cat&quot;</span><span class=3D"java_=
separator">,</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">Cat</span><span class=3D"java_separator">.</span><span class=
=3D"java_keyword">class</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">addEntity</span><span class=3D"java_separator">(</span=
><span class=3D"java_literal">&quot;mother&quot;</span><span class=3D"ja=
va_separator">,</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_type">Cat</span><span class=3D"java_separator">.</span><span c=
lass=3D"java_keyword">class</span><span class=3D"java_separator">).</spa=
n><span class=3D"java_plain">list</span><span class=3D"java_separator">(=
)</span>
</pre><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><di=
v><div><h4 class=3D"title"><a id=3D"querysql-aliasreferences"/>18.1.4.1.=
=C2=A0Alias and property references</h4></div></div></div><p>In most cas=
es the above alias injection is needed. For queries
        relating to more complex mappings, like composite properties,
        inheritance discriminators, collections etc., you can use specif=
ic
        aliases that allow Hibernate to inject the proper aliases.</p><p=
>The following table shows the different ways you can use the
        alias injection. Please note that the alias names in the result =
are
        simply examples; each alias will have a unique and probably diff=
erent
        name when used.</p><div class=3D"table"><a id=3D"aliasinjection-=
summary"/><p class=3D"title"><b>Table=C2=A018.1.=C2=A0Alias injection na=
mes</b></p><div class=3D"table-contents"><table summary=3D"Alias injecti=
on names" border=3D"1"><colgroup><col/><col/><col/></colgroup><thead><tr=
><th>Description</th><th>Syntax</th><th>Example</th></tr></thead><tbody>=
<tr><td>A simple property</td><td><code class=3D"literal">{[aliasname].[=
propertyname]</code></td><td><code class=3D"literal">A_NAME as {item.nam=
e}</code></td></tr><tr><td>A composite property</td><td><code class=3D"l=
iteral">{[aliasname].[componentname].[propertyname]}</code></td><td><cod=
e class=3D"literal">CURRENCY as {item.amount.currency}, VALUE as
                {item.amount.value}</code></td></tr><tr><td>Discriminato=
r of an entity</td><td><code class=3D"literal">{[aliasname].class}</code=
></td><td><code class=3D"literal">DISC as {item.class}</code></td></tr><=
tr><td>All properties of an entity</td><td><code class=3D"literal">{[ali=
asname].*}</code></td><td><code class=3D"literal">{item.*}</code></td></=
tr><tr><td>A collection key</td><td><code class=3D"literal">{[aliasname]=
.key}</code></td><td><code class=3D"literal">ORGID as {coll.key}</code><=
/td></tr><tr><td>The id of an collection</td><td><code class=3D"literal"=
>{[aliasname].id}</code></td><td><code class=3D"literal">EMPID as {coll.=
id}</code></td></tr><tr><td>The element of an collection</td><td><code c=
lass=3D"literal">{[aliasname].element}</code></td><td><code class=3D"lit=
eral">XID as {coll.element}</code></td></tr><tr><td>property of the elem=
ent in the collection</td><td><code class=3D"literal">{[aliasname].eleme=
nt.[propertyname]}</code></td><td><code class=3D"literal">NAME as {coll.=
element.name}</code></td></tr><tr><td>All properties of the element in t=
he collection</td><td><code class=3D"literal">{[aliasname].element.*}</c=
ode></td><td><code class=3D"literal">{coll.element.*}</code></td></tr><t=
r><td>All properties of the collection</td><td><code class=3D"literal">{=
[aliasname].*}</code></td><td><code class=3D"literal">{coll.*}</code></t=
d></tr></tbody></table></div></div><br class=3D"table-break"/></div></di=
v><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><d=
iv><h3 class=3D"title"><a id=3D"d0e17636"/>18.1.5.=C2=A0Returning non-ma=
naged entities</h3></div></div></div><p>It is possible to apply a Result=
Transformer to native SQL queries,
      allowing it to return non-managed entities.</p><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><=
!-- <br/> --><span class=3D"java_plain">sess</span><!-- <br/> --><span c=
lass=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain"=
>createSQLQuery</span><!-- <br/> --><span class=3D"java_separator">(</sp=
an><!-- <br/> --><span class=3D"java_literal">&quot;SELECT&nbsp;NAME,&nb=
sp;BIRTHDATE&nbsp;FROM&nbsp;CATS&quot;</span><!-- <br/> --><span class=3D=
"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setResultTransformer</span><span class=3D"java_separat=
or">(</span><span class=3D"java_type">Transformers</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">aliasToBean</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_type">CatDTO</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_keyword">c=
lass</span><span class=3D"java_separator">))</span></pre><p>This query s=
pecified:</p><div class=3D"itemizedlist"><ul><li><p>the SQL query string=
</p></li><li><p>a result transformer</p></li></ul></div><p>The above que=
ry will return a list of <code class=3D"literal">CatDTO</code>
      which has been instantiated and injected the values of NAME and
      BIRTHNAME into its corresponding properties or fields.</p></div><d=
iv class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><=
h3 class=3D"title"><a id=3D"d0e17657"/>18.1.6.=C2=A0Handling inheritance=
</h3></div></div></div><p>Native SQL queries which query for entities th=
at are mapped as
      part of an inheritance must include all properties for the basecla=
ss and
      all its subclasses.</p></div><div class=3D"section" lang=3D"en-US"=
><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"d0e1766=
2"/>18.1.7.=C2=A0Parameters</h3></div></div></div><p>Native SQL queries =
support positional as well as named
      parameters:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highligh=
t.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java=
_type">Query</span><!-- <br/> --><span class=3D"java_plain">&nbsp;query&=
nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <=
br/> --><span class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span =
class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain=
">createSQLQuery</span><!-- <br/> --><span class=3D"java_separator">(</s=
pan><!-- <br/> --><span class=3D"java_literal">&quot;SELECT&nbsp;*&nbsp;=
FROM&nbsp;CATS&nbsp;WHERE&nbsp;NAME&nbsp;like&nbsp;?&quot;</span><!-- <b=
r/> --><span class=3D"java_separator">).</span><!-- <br/> --><span class=
=3D"java_plain">addEntity</span><!-- <br/> --><span class=3D"java_separa=
tor">(</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/=
> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_keyword">class</span><!-- <br/> --><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;pusList&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;query</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">setString</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_literal">0</span><span class=3D=
"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_literal">&quot;Pus%&quot;</span><span class=3D"java_separat=
or">).</span><span class=3D"java_plain">list</span><span class=3D"java_s=
eparator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/span>
<!--  --><br/><span class=3D"java_plain">query&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;sess</span><s=
pan class=3D"java_separator">.</span><span class=3D"java_plain">createSQ=
LQuery</span><span class=3D"java_separator">(</span><span class=3D"java_=
literal">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;CATS&nbsp;WHERE&nbsp;NAME&nb=
sp;like&nbsp;:name&quot;</span><span class=3D"java_separator">).</span><=
span class=3D"java_plain">addEntity</span><span class=3D"java_separator"=
>(</span><span class=3D"java_type">Cat</span><span class=3D"java_separat=
or">.</span><span class=3D"java_keyword">class</span><span class=3D"java=
_separator">);</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;pusList&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;query</span><span class=3D"java_separat=
or">.</span><span class=3D"java_plain">setString</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_literal">&quot;name&quot;</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_literal">&quot;Pus%&quot;</span><span class=
=3D"java_separator">).</span><span class=3D"java_plain">list</span><span=
 class=3D"java_separator">();</span><span class=3D"java_plain">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre></div></=
div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div>=
<div><h2 class=3D"title"><a id=3D"querysql-namedqueries"/>18.2.=C2=A0Nam=
ed SQL queries</h2></div></div></div><p>Named SQL queries can also be de=
fined in the mapping document and
    called in exactly the same way as a named HQL query (see <a class=3D=
"xref" href=3D"#objectstate-querying-executing-named" title=3D"11.4.1.7.=
=C2=A0Externalizing named queries">Section=C2=A011.4.1.7, =E2=80=9CExter=
nalizing named queries=E2=80=9D</a>). In this case, you do
    <span class=3D"emphasis"><em>not</em></span> need to call
    <code class=3D"literal">addEntity()</code>.</p><div class=3D"example=
"><a id=3D"d0e17682"/><p class=3D"title"><b>Example=C2=A018.1.=C2=A0Name=
d sql query using the &lt;sql-query&gt; maping
      element</b></p><div class=3D"example-contents"><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!=
-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -=
->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;persons&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.=
Person&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;person.NAM=
E&nbsp;AS&nbsp;{person.name},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.AGE&nbsp;AS&nbsp;{person.age},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.SEX&nbsp;AS&nbsp;{person.sex}</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON&nbsp;=
person</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;person.NAME=
&nbsp;LIKE&nbsp;:namePattern</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e17687"/><p class=3D"title"><b>Example=C2=A018.2.=C2=A0Executio=
n of a named query</b></p><div class=3D"example-contents"><pre xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JA=
VA"><!-- <br/> --><span class=3D"java_type">List</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;people&nbsp;</span><!-- <br/> --><span cla=
ss=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">=
&nbsp;sess</span><!-- <br/> --><span class=3D"java_separator">.</span><!=
-- <br/> --><span class=3D"java_plain">getNamedQuery</span><!-- <br/> --=
><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"jav=
a_literal">&quot;persons&quot;</span><!-- <br/> --><span class=3D"java_s=
eparator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setStr=
ing</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">&quot;namePattern&quot;</span><span class=3D"java_separator">,</sp=
an><span class=3D"java_plain">&nbsp;namePattern</span><span class=3D"jav=
a_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setMax=
Results</span><span class=3D"java_separator">(</span><span class=3D"java=
_literal">50</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div></div><br clas=
s=3D"example-break"/><p>The <code class=3D"literal">&lt;return-join&gt;<=
/code> element is use to join
    associations and the <code class=3D"literal">&lt;load-collection&gt;=
</code> element is
    used to define queries which initialize collections,</p><div class=3D=
"example"><a id=3D"d0e17700"/><p class=3D"title"><b>Example=C2=A018.3.=C2=
=A0Named sql query with association</b></p><div class=3D"example-content=
s"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFac=
tory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhig=
hlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;personsWith&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.=
Person&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return-join</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">property</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;person.mailingAddress&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;person.NAM=
E&nbsp;AS&nbsp;{person.name},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.AGE&nbsp;AS&nbsp;{person.age},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.SEX&nbsp;AS&nbsp;{person.sex},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.STREET&nbsp;AS&nbsp;{address.street},</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.CITY&nbsp;AS&nbsp;{address.city},</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.STATE&nbsp;AS&nbsp;{address.state},</span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.ZIP&nbsp;AS&nbsp;{address.zip}</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON&nbsp;=
person</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;JOIN&nbsp;ADDRESS&nbsp=
;address</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;ON&nbsp;person.ID&nbsp;=3D&nbsp;address.PERSON_ID&nbsp;AND&nbsp;addres=
s.TYPE=3D'MAILING'</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;person.NAME=
&nbsp;LIKE&nbsp;:namePattern</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>A named SQL query may =
return a scalar value. You must declare the
    column alias and Hibernate type using the
    <code class=3D"literal">&lt;return-scalar&gt;</code> element:</p><di=
v class=3D"example"><a id=3D"d0e17710"/><p class=3D"title"><b>Example=C2=
=A018.4.=C2=A0Named query returning a scalar</b></p><div class=3D"exampl=
e-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;mySqlQuery&quot;</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return-scalar</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;name&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;string&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return-scalar</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;age&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;long&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;p.NAME&nbs=
p;AS&nbsp;name,&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;p.AGE&nbsp;AS&nbsp;age,</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON&nbsp;=
p&nbsp;WHERE&nbsp;p.NAME&nbsp;LIKE&nbsp;'Hiber%'</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>You can externalize th=
e resultset mapping information in a
    <code class=3D"literal">&lt;resultset&gt;</code> element which will =
allow you to
    either reuse them across several named queries or through the
    <code class=3D"literal">setResultSetMapping()</code> API.</p><div cl=
ass=3D"example"><a id=3D"d0e17723"/><p class=3D"title"><b>Example=C2=A01=
8.5.=C2=A0&lt;resultset&gt; mapping used to externalize mapping
      information</b></p><div class=3D"example-contents"><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML=
"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.ne=
t) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
resultset</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;personAddress&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.=
Person&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return-join</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">property</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;person.mailingAddress&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>resultset</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;personsWith&quot;</span><span c=
lass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">resul=
tset-ref</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;personAddress&quot;</span><span class=3D"xml_=
tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;person.NAM=
E&nbsp;AS&nbsp;{person.name},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.AGE&nbsp;AS&nbsp;{person.age},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.SEX&nbsp;AS&nbsp;{person.sex},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.STREET&nbsp;AS&nbsp;{address.street},</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.CITY&nbsp;AS&nbsp;{address.city},</span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.STATE&nbsp;AS&nbsp;{address.state},</span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;address.ZIP&nbsp;AS&nbsp;{address.zip}</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON&nbsp;=
person</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;JOIN&nbsp;ADDRESS&nbsp=
;address</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;ON&nbsp;person.ID&nbsp;=3D&nbsp;address.PERSON_ID&nbsp;AND&nbsp;addres=
s.TYPE=3D'MAILING'</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;person.NAME=
&nbsp;LIKE&nbsp;:namePattern</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>You can, alternatively=
, use the resultset mapping information in
    your hbm files directly in java code.</p><div class=3D"example"><a i=
d=3D"d0e17730"/><p class=3D"title"><b>Example=C2=A018.6.=C2=A0Programmat=
ically specifying the result mapping information
      </b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_type">List</span><!-- <br/> --><span class=3D"j=
ava_plain">&nbsp;cats&nbsp;</span><!-- <br/> --><span class=3D"java_oper=
ator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sess</spa=
n><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><sp=
an class=3D"java_plain">createSQLQuery</span><!-- <br/> --><span class=3D=
"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_literal">&quot;select&nbsp;{=
cat.*},&nbsp;{kitten.*}&nbsp;from&nbsp;cats&nbsp;cat,&nbsp;cats&nbsp;kit=
ten&nbsp;where&nbsp;kitten.mother&nbsp;=3D&nbsp;cat.id&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setRes=
ultSetMapping</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;catAndKitten&quot;</span><span class=3D"java_separa=
tor">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span></pre></div></div><br clas=
s=3D"example-break"/><p>So far we have only looked at externalizing SQL =
queries using
    Hibernate mapping files. The same concept is also available with
    anntations and is called named native queries. You can use
    <code class=3D"classname">@NamedNativeQuery</code>
    (<code class=3D"classname">@NamedNativeQueries</code>) in conjunctio=
n with
    <code class=3D"literal">@SqlResultSetMapping</code>
    (<code class=3D"literal">@SqlResultSetMappings</code>). Like
    <code class=3D"literal">@NamedQuery</code>, <code class=3D"classname=
">@NamedNativeQuery</code>
    and <code class=3D"literal">@SqlResultSetMapping</code> can be defin=
ed at class level,
    but their scope is global to the application. Lets look at a view
    examples.</p><p><a class=3D"xref" href=3D"#example-named-native-quer=
y-annotation-with-result-set-mapping" title=3D"Example=C2=A018.7.=C2=A0N=
amed SQL query using @NamedNativeQuery together with @SqlResultSetMappin=
g">Example=C2=A018.7, =E2=80=9CNamed SQL query using @NamedNativeQuery
      together with @SqlResultSetMapping=E2=80=9D</a>
    shows how a <code class=3D"literal">resultSetMapping</code> paramete=
r is defined in
    <code class=3D"literal">@NamedNativeQuery</code>. It represents the =
name of a defined
    <code class=3D"literal">@SqlResultSetMapping</code>. The resultset m=
apping declares
    the entities retrieved by this native query. Each field of the entit=
y is
    bound to an SQL alias (or column name). All fields of the entity inc=
luding
    the ones of subclasses and the foreign key columns of related entiti=
es
    have to be present in the SQL query. Field definitions are optional
    provided that they map to the same column name as the one declared o=
n the
    class property. In the example 2 entities, <code class=3D"literal">N=
ight</code> and
    <code class=3D"literal">Area</code>, are returned and each property =
is declared and
    associated to a column name, actually the column name retrieved by t=
he
    query. </p><p>In <a class=3D"xref" href=3D"#example-implicit-result-=
set-mapping" title=3D"Example=C2=A018.8.=C2=A0Implicit result set mappin=
g">Example=C2=A018.8, =E2=80=9CImplicit result set mapping=E2=80=9D</a> =
the result
    set mapping is implicit. We only describe the entity class of the re=
sult
    set mapping. The property / column mappings is done using the entity=

    mapping values. In this case the model property is bound to the mode=
l_txt
    column. </p><p>Finally, if the association to a related entity invol=
ve a composite
    primary key, a <code class=3D"literal">@FieldResult</code> element s=
hould be used for
    each foreign key column. The <code class=3D"literal">@FieldResult</c=
ode> name is
    composed of the property name for the relationship, followed by a do=
t
    ("."), followed by the name or the field or property of the primary =
key.
    This can be seen in <a class=3D"xref" href=3D"#example-field-result-=
annotation-with-associations" title=3D"Example=C2=A018.9.=C2=A0Using dot=
 notation in @FieldResult for specifying associations">Example=C2=A018.9=
, =E2=80=9CUsing dot notation in @FieldResult for specifying association=
s
      =E2=80=9D</a>.</p><div class=3D"example"><a id=3D"example-named-na=
tive-query-annotation-with-result-set-mapping"/><p class=3D"title"><b>Ex=
ample=C2=A018.7.=C2=A0Named SQL query using <code class=3D"classname">@N=
amedNativeQuery</code>
      together with <code class=3D"classname">@SqlResultSetMapping</code=
></b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --=
><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_ty=
pe">NamedNativeQuery</span><!-- <br/> --><span class=3D"java_separator">=
(</span><!-- <br/> --><span class=3D"java_plain">name</span><!-- <br/> -=
-><span class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"j=
ava_literal">&quot;night&amp;area&quot;</span><!-- <br/> --><span class=3D=
"java_separator">,</span><!-- <br/> --><span class=3D"java_plain">&nbsp;=
query</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <=
br/> --><span class=3D"java_literal">&quot;select&nbsp;night.id&nbsp;nid=
,&nbsp;night.night_duration,&nbsp;&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_literal">&quot;&nbsp;night.night_date,&nbsp;ar=
ea.id&nbsp;aid,&nbsp;night.area_id,&nbsp;area.name&nbsp;&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_literal">&quot;from&nbsp;Night&nbsp;night,&nbs=
p;Area&nbsp;area&nbsp;where&nbsp;night.area_id&nbsp;=3D&nbsp;area.id&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;resultSetMapping</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_literal">&quot;joinMapping&quot;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SqlResultSetMapping</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_plain">name</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_literal">&quot;joinMapping&quot;</span><span class=
=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;entities</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_separato=
r">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">EntityResult</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_plain">entityClass</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_type">Night</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_keyword">class</span>=
<span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;=
fields&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;id&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;nid&quot;</span><span class=3D"java_s=
eparator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;duration&quot;</span><span class=3D"java_separator">,</span><span c=
lass=3D"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_literal">&quot;night_duration&quot;</span><sp=
an class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;date&quot;</span><span class=3D"java_separator">,</span><span class=
=3D"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_literal">&quot;night_date&quot;</span><span class=
=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;area&quot;</span><span class=3D"java_separator">,</span><span class=
=3D"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_literal">&quot;area_id&quot;</span><span class=3D=
"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;discriminatorColumn</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_literal">&quot;disc&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">EntityResult</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_plain">entityClass</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">org</span><span cla=
ss=3D"java_separator">.</span><span class=3D"java_plain">hibernate</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">test<=
/span><span class=3D"java_separator">.</span><span class=3D"java_plain">=
annotations</span><span class=3D"java_separator">.</span><span class=3D"=
java_plain">query</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_type">Area</span><span class=3D"java_separator">.</span><span=
 class=3D"java_keyword">class</span><span class=3D"java_separator">,</sp=
an><span class=3D"java_plain">&nbsp;fields&nbsp;</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;id&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;aid&quot;</span><span class=3D"java_s=
eparator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;name&quot;</span><span class=3D"java_separator">,</span><span class=
=3D"java_plain">&nbsp;column</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_literal">&quot;name&quot;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">})</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">)</span></pre></div></div><=
br class=3D"example-break"/><div class=3D"example"><a id=3D"example-impl=
icit-result-set-mapping"/><p class=3D"title"><b>Example=C2=A018.8.=C2=A0=
Implicit result set mapping</b></p><div class=3D"example-contents"><pre =
xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/>=
 --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SqlResultSetMapping</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_plain">name</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_literal">&quot;implicit&quot;</span><span class=3D=
"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;entities</span><span class=3D"java_operator">=3D<=
/span><span class=3D"java_plain">@</span><span class=3D"java_type">Entit=
yResult</span><span class=3D"java_separator">(</span><span class=3D"java=
_plain">entityClass</span><span class=3D"java_operator">=3D</span><span =
class=3D"java_type">SpaceShip</span><span class=3D"java_separator">.</sp=
an><span class=3D"java_keyword">class</span><span class=3D"java_separato=
r">))</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">NamedNativeQuery</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">&quot;implicitSample&quot;</span><span class=
=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;query</span><span class=3D"java_operator">=3D</span><span class=3D"=
java_literal">&quot;select&nbsp;*&nbsp;from&nbsp;SpaceShip&quot;</span><=
span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;resultSetMapping</span><span class=3D"java_operator">=3D</span><spa=
n class=3D"java_literal">&quot;implicit&quot;</span><span class=3D"java_=
separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">SpaceShip</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;model</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">double</span><span class=3D"java_pl=
ain">&nbsp;speed</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;name</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setName</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;name</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">name&nbsp;</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&n=
bsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Column</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;model_txt&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getModel</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;model</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setModel</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">String</span><span class=3D"java_plain">&nbsp;model</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">model&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;model</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">double</span><span class=3D"java_pla=
in">&nbsp;getSpeed</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;speed</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setSpeed</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">double</span><span class=3D"java_plain">&nbsp;speed</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">speed&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;speed</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><div class=3D"example"><a id=3D"example-fiel=
d-result-annotation-with-associations"/><p class=3D"title"><b>Example=C2=
=A018.9.=C2=A0Using dot notation in @FieldResult for specifying associat=
ions
      </b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"jav=
a_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SqlResultSetMapping</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_plain">name</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_literal">&quot;compositekey&quot;</span><span clas=
s=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;entities</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">@</span><span class=3D"java_type">EntityResul=
t</span><span class=3D"java_separator">(</span><span class=3D"java_plain=
">entityClass</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_type">SpaceShip</span><span class=3D"java_separator">.</span><span=
 class=3D"java_keyword">class</span><span class=3D"java_separator">,</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;name&quot;</span><span class=3D"java_separator">,</span><span class=
=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">&quot;name&quot;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;model&quot;</span><span class=3D"java_separator">,</span><span clas=
s=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_li=
teral">&quot;model&quot;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;speed&quot;</span><span class=3D"java_separator">,</span><span clas=
s=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"java_operator">=
=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_li=
teral">&quot;speed&quot;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;captain.firstname&quot;</span><span class=3D"java_separator">,</spa=
n><span class=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_literal">&quot;firstn&quot;</span><span class=3D"java_separato=
r">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;captain.lastname&quot;</span><span class=3D"java_separator">,</span=
><span class=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_literal">&quot;lastn&quot;</span><span class=3D"java_separator"=
>),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;dimensions.length&quot;</span><span class=3D"java_separator">,</spa=
n><span class=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_literal">&quot;length&quot;</span><span class=3D"java_separato=
r">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">FieldResult</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">name</spa=
n><span class=3D"java_operator">=3D</span><span class=3D"java_literal">&=
quot;dimensions.width&quot;</span><span class=3D"java_separator">,</span=
><span class=3D"java_plain">&nbsp;column&nbsp;</span><span class=3D"java=
_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_literal">&quot;width&quot;</span><span class=3D"java_separator"=
>)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;columns&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">{</span><span class=3D"java_plain">&nbsp;@</span><span class=3D"java=
_type">ColumnResult</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">name&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal=
">&quot;surface&quot;</span><span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;@</span><span class=3D"java_type">ColumnResult</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_plain">name&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_literal">&quot;volume&quot;</span><=
span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">}</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_separator">)</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">NamedNativeQuery</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">&quot;compositekey&quot;</span><span class=3D=
"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;query</=
span><span class=3D"java_operator">=3D</span><span class=3D"java_literal=
">&quot;select&nbsp;name,&nbsp;model,&nbsp;speed,&nbsp;lname&nbsp;as&nbs=
p;lastn,&nbsp;fname&nbsp;as&nbsp;firstn,&nbsp;length,&nbsp;width,&nbsp;l=
ength&nbsp;*&nbsp;width&nbsp;as&nbsp;surface&nbsp;from&nbsp;SpaceShip&qu=
ot;</span><span class=3D"java_separator">,</span><span class=3D"java_pla=
in">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;resultS=
etMapping</span><span class=3D"java_operator">=3D</span><span class=3D"j=
ava_literal">&quot;compositekey&quot;</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">SpaceShip</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;model</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">double</span><span class=3D"java_pl=
ain">&nbsp;speed</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Captain</span><span class=3D"java_p=
lain">&nbsp;captain</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Dimensions</span><span class=3D"jav=
a_plain">&nbsp;dimensions</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;name</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setName</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;name</span>=
<span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">name&nbsp;</sp=
an><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&n=
bsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">ManyToOne</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">fetch</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"=
java_type">FetchType</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">LAZY</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinColumns</span><span class=3D"java_separat=
or">(</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;fname&quot;</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;referencedColumnName&nbsp;<=
/span><span class=3D"java_operator">=3D</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_literal">&quot;firstname&quot;</span><=
span class=3D"java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class=3D"java_typ=
e">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;lname&quot;</span><span class=3D"java_separat=
or">,</span><span class=3D"java_plain">&nbsp;referencedColumnName&nbsp;<=
/span><span class=3D"java_operator">=3D</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_literal">&quot;lastname&quot;</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">}</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Captain</span><span class=3D"java_pl=
ain">&nbsp;getCaptain</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;captain</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setCaptain</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_type">Captain</span><span class=3D"java_plain">&nbsp;captain=
</span><span class=3D"java_separator">)</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">captain&nbsp;<=
/span><span class=3D"java_operator">=3D</span><span class=3D"java_plain"=
>&nbsp;captain</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getModel</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;model</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setModel</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">String</span><span class=3D"java_plain">&nbsp;model</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">model&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;model</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">double</span><span class=3D"java_pla=
in">&nbsp;getSpeed</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;speed</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setSpeed</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">double</span><span class=3D"java_plain">&nbsp;speed</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">speed&nbsp;</s=
pan><span class=3D"java_operator">=3D</span><span class=3D"java_plain">&=
nbsp;speed</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Dimensions</span><span class=3D"java=
_plain">&nbsp;getDimensions</span><span class=3D"java_separator">()</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;dimensions</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setDimensions</span><span class=3D"java_separator">(</span><span=
 class=3D"java_type">Dimensions</span><span class=3D"java_plain">&nbsp;d=
imensions</span><span class=3D"java_separator">)</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">dimensions&nbs=
p;</span><span class=3D"java_operator">=3D</span><span class=3D"java_pla=
in">&nbsp;dimensions</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">IdClass</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_type">Identity</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_keyword">class</span><span class=3D"java_separator">)</span>=

<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Captain</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">im=
plements</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_type">Serializable</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;firstname</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;lastname</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getFirstname</span><span class=3D"java_separator">()</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;firstname</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setFirstname</span><span class=3D"java_separator">(</span><span =
class=3D"java_type">String</span><span class=3D"java_plain">&nbsp;firstn=
ame</span><span class=3D"java_separator">)</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">firstname&nbsp=
;</span><span class=3D"java_operator">=3D</span><span class=3D"java_plai=
n">&nbsp;firstname</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getLastname</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</sp=
an>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;lastname</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setLastname</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">String</span><span class=3D"java_plain">&nbsp;lastnam=
e</span><span class=3D"java_separator">)</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">this</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">lastname&nbsp;=
</span><span class=3D"java_operator">=3D</span><span class=3D"java_plain=
">&nbsp;lastname</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</pre></div></div><br class=3D"example-break"/><div xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"tip"><h2>Tip</h2><p>If y=
ou retrieve a single entity using the default mapping, you can
      specify the <code class=3D"literal">resultClass</code> attribute i=
nstead of
      <code class=3D"literal">resultSetMapping</code>:</p><pre xmlns=3D"=
" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <=
br/> --><span class=3D"java_type">NamedNativeQuery</span><!-- <br/> --><=
span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_=
plain">name</span><!-- <br/> --><span class=3D"java_operator">=3D</span>=
<!-- <br/> --><span class=3D"java_literal">&quot;implicitSample&quot;</s=
pan><!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;query</span><!-- <br/> --><span class=3D=
"java_operator">=3D</span><!-- <br/> --><span class=3D"java_literal">&qu=
ot;select&nbsp;*&nbsp;from&nbsp;SpaceShip&quot;</span><!-- <br/> --><spa=
n class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;resultClass</span><!-- <br/> --><span class=3D"java_operator">=
=3D</span><!-- <br/> --><span class=3D"java_type">SpaceShip</span><!-- <=
br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=
=3D"java_keyword">class</span><!-- <br/> --><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">SpaceShip</sp=
an><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator=
">{</span></pre></div><p>In some of your native queries, you'll have to =
return scalar values,
    for example when building report queries. You can map them in the
    <code class=3D"literal">@SqlResultsetMapping</code> through
    <code class=3D"literal">@ColumnResult</code>. You actually can even =
mix, entities and
    scalar returns in the same native query (this is probably not that c=
ommon
    though).</p><div class=3D"example"><a id=3D"d0e17829"/><p class=3D"t=
itle"><b>Example=C2=A018.10.=C2=A0Scalar values via <code class=3D"class=
name">@ColumnResult</code></b></p><div class=3D"example-contents"><pre x=
mlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cla=
ss=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> =
--><span class=3D"java_type">SqlResultSetMapping</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_pl=
ain">name</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!=
-- <br/> --><span class=3D"java_literal">&quot;scalar&quot;</span><!-- <=
br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span class=
=3D"java_plain">&nbsp;columns</span><!-- <br/> --><span class=3D"java_op=
erator">=3D</span><!-- <br/> --><span class=3D"java_plain">@</span><!-- =
<br/> --><span class=3D"java_type">ColumnResult</span><!-- <br/> --><spa=
n class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_pla=
in">name</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-=
- <br/> --><span class=3D"java_literal">&quot;dimension&quot;</span><!--=
 <br/> --><span class=3D"java_separator">))</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">NamedNativeQuery</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">&quot;scalar&quot;</span><span class=3D"java=
_separator">,</span><span class=3D"java_plain">&nbsp;query</span><span c=
lass=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;sele=
ct&nbsp;length*width&nbsp;as&nbsp;dimension&nbsp;from&nbsp;SpaceShip&quo=
t;</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;resultSetMapping</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;scalar&quot;</span><span class=3D"jav=
a_separator">)</span></pre></div></div><br class=3D"example-break"/><p>A=
n other query hint specific to native queries has been introduced:
    <code class=3D"literal">org.hibernate.callable</code> which can be t=
rue or false
    depending on whether the query is a stored procedure or not.</p><div=
 class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3=
 class=3D"title"><a id=3D"propertyresults"/>18.2.1.=C2=A0Using return-pr=
operty to explicitly specify column/alias
      names</h3></div></div></div><p>You can explicitly tell Hibernate w=
hat column aliases to use with
      <code class=3D"literal">&lt;return-property&gt;</code>, instead of=
 using the
      <code class=3D"literal">{}</code>-syntax to let Hibernate inject i=
ts own aliases.For
      example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1=
.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;mySqlQuery&quot;</span><span cl=
ass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">class</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;eg.=
Person&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;name&quot;</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;myName&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;age&quot;</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;myAge&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;sex&quot;</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;mySex&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">return</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;person.NAM=
E&nbsp;AS&nbsp;myName,</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.AGE&nbsp;AS&nbsp;myAge,</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;person.SEX&nbsp;AS&nbsp;mySex,</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON&nbsp;=
person&nbsp;WHERE&nbsp;person.NAME&nbsp;LIKE&nbsp;:name</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p><code class=3D"literal">&lt;return-property&gt;</code> also wor=
ks with
      multiple columns. This solves a limitation with the
      <code class=3D"literal">{}</code>-syntax which cannot allow fine g=
rained control of
      multi-column properties.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated =
by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;organizationCurrentEmployments&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;emp&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">class</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Employ=
ment&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;salary&quot;</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">return-column</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;VALUE&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">return-column</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;CURRENCY&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">return-property</span><span class=3D"xml_tag_symbols">&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;endDate&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;myEndDate&quot;</span><span class=3D"xml_=
tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">return</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;SELECT&nbsp;EMPLOYEE&nbsp;AS&nbsp;{emp.employee},&nbsp;EMPLOYER&nbsp;A=
S&nbsp;{emp.employer},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;STARTDATE&nbsp;AS&nbsp;{emp.startDate},&nbsp;ENDDATE&nbsp;AS&nbsp;{emp=
.endDate},</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;REGIONCODE&nbsp;as&nbsp;{emp.regionCode},&nbsp;EID&nbsp;AS&nbsp;{emp.i=
d},&nbsp;VALUE,&nbsp;CURRENCY</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;FROM&nbsp;EMPLOYMENT</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;WHERE&nbsp;EMPLOYER&nbsp;=3D&nbsp;:id&nbsp;AND&nbsp;ENDDATE&nbsp;IS&nb=
sp;NULL</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;ORDER&nbsp;BY&nbsp;STARTDATE&nbsp;ASC</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>In this example <code class=3D"literal">&lt;return-property&gt;=
</code> was
      used in combination with the <code class=3D"literal">{}</code>-syn=
tax for injection.
      This allows users to choose how they want to refer column and
      properties.</p><p>If your mapping has a discriminator you must use=

      <code class=3D"literal">&lt;return-discriminator&gt;</code> to spe=
cify the
      discriminator column.</p></div><div class=3D"section" lang=3D"en-U=
S"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"sp_qu=
ery"/>18.2.2.=C2=A0Using stored procedures for querying</h3></div></div>=
</div><p>Hibernate3 provides support for queries via stored procedures a=
nd
      functions. Most of the following documentation is equivalent for b=
oth.
      The stored procedure/function must return a resultset as the first=

      out-parameter to be able to work with Hibernate. An example of suc=
h a
      stored function in Oracle 9 and higher is as follows:</p><pre xmln=
s=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D=
"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.jav=
a.net) -->
<span class=3D"xml_plain">CREATE&nbsp;OR&nbsp;REPLACE&nbsp;FUNCTION&nbsp=
;selectAllEmployments</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;RETURN&nbsp;SYS_REFCUR=
SOR</span><br />
<span class=3D"xml_plain">AS</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;st_cursor&nbsp;SYS_REF=
CURSOR;</span><br />
<span class=3D"xml_plain">BEGIN</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;OPEN&nbsp;st_cursor&nb=
sp;FOR</span><br />
<span class=3D"xml_plain">&nbsp;SELECT&nbsp;EMPLOYEE,&nbsp;EMPLOYER,</sp=
an><br />
<span class=3D"xml_plain">&nbsp;STARTDATE,&nbsp;ENDDATE,</span><br />
<span class=3D"xml_plain">&nbsp;REGIONCODE,&nbsp;EID,&nbsp;VALUE,&nbsp;C=
URRENCY</span><br />
<span class=3D"xml_plain">&nbsp;FROM&nbsp;EMPLOYMENT;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETURN&nbs=
p;&nbsp;st_cursor;</span><br />
<span class=3D"xml_plain">&nbsp;END;</span><br />
</pre><p>To use this query in Hibernate you need to map it via a named
      query.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;selectAllEmployees_SP&quot;</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">callable</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;emp&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">class</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Employ=
ment&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;employee&quot;</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;EMPLOYEE&quot;</span><span class=3D"xml_=
tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;employer&quot;</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span clas=
s=3D"xml_attribute_value">&quot;EMPLOYER&quot;</span><span class=3D"xml_=
tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;startDate&quot;<=
/span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribut=
e_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span cla=
ss=3D"xml_attribute_value">&quot;STARTDATE&quot;</span><span class=3D"xm=
l_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;endDate&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;ENDDATE&quot;</span><span class=3D"xml_ta=
g_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;regionCode&quot;=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">column</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;REGIONCODE&quot;</span><span class=3D"=
xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;id&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;EID&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">return-property</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;salary&quot;</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">return-column</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;VALUE&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">return-column</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;CURRENCY&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">return-property</span><span class=3D"xml_tag_symbols">&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">return</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;?&nbsp;=3D&nbsp=
;call&nbsp;selectAllEmployments()&nbsp;}</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>Stored procedures currently only return scalars and entities.
      <code class=3D"literal">&lt;return-join&gt;</code> and
      <code class=3D"literal">&lt;load-collection&gt;</code> are not sup=
ported.</p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage=
"><div><div><h4 class=3D"title"><a id=3D"querysql-limits-storedprocedure=
s"/>18.2.2.1.=C2=A0Rules/limitations for using stored procedures</h4></d=
iv></div></div><p>You cannot use stored procedures with Hibernate unless=
 you
        follow some procedure/function rules. If they do not follow thos=
e
        rules they are not usable with Hibernate. If you still want to u=
se
        these procedures you have to execute them via
        <code class=3D"literal">session.connection()</code>. The rules a=
re different for
        each database, since database vendors have different stored proc=
edure
        semantics/syntax.</p><p>Stored procedure queries cannot be paged=
 with
        <code class=3D"literal">setFirstResult()/setMaxResults()</code>.=
</p><p>The recommended call form is standard SQL92: <code class=3D"liter=
al">{ ? =3D call
        functionName(&lt;parameters&gt;) }</code> or <code class=3D"lite=
ral">{ ? =3D call
        procedureName(&lt;parameters&gt;}</code>. Native call syntax is =
not
        supported.</p><p>For Oracle the following rules apply:</p><div c=
lass=3D"itemizedlist"><ul compact=3D"compact"><li><p>A function must ret=
urn a result set. The first parameter of
            a procedure must be an <code class=3D"literal">OUT</code> th=
at returns a
            result set. This is done by using a
            <code class=3D"literal">SYS_REFCURSOR</code> type in Oracle =
9 or 10. In Oracle
            you need to define a <code class=3D"literal">REF CURSOR</cod=
e> type. See
            Oracle literature for further information.</p></li></ul></di=
v><p>For Sybase or MS SQL server the following rules apply:</p><div clas=
s=3D"itemizedlist"><ul compact=3D"compact"><li><p>The procedure must ret=
urn a result set. Note that since
            these servers can return multiple result sets and update cou=
nts,
            Hibernate will iterate the results and take the first result=
 that
            is a result set as its return value. Everything else will be=

            discarded.</p></li><li><p>If you can enable <code class=3D"l=
iteral">SET NOCOUNT ON</code> in your
            procedure it will probably be more efficient, but this is no=
t a
            requirement.</p></li></ul></div></div></div></div><div class=
=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=
=3D"title"><a id=3D"querysql-cud"/>18.3.=C2=A0Custom SQL for create, upd=
ate and delete</h2></div></div></div><p>Hibernate3 can use custom SQL fo=
r create, update, and delete
    operations. The SQL can be overridden at the statement level or
    inidividual column level. This section describes statement overrides=
. For
    columns, see <a class=3D"xref" href=3D"#mapping-column-read-and-writ=
e" title=3D"5.6.=C2=A0Column transformers: read and write expressions">S=
ection=C2=A05.6, =E2=80=9CColumn transformers: read and write expression=
s=E2=80=9D</a>. <a class=3D"xref" href=3D"#example-custom-crdu-via-annot=
ations" title=3D"Example=C2=A018.11.=C2=A0Custom CRUD via annotations">E=
xample=C2=A018.11, =E2=80=9CCustom CRUD via annotations=E2=80=9D</a> sho=
ws how to define
    custom SQL operatons using annotations.</p><div class=3D"example"><a=
 id=3D"example-custom-crdu-via-annotations"/><p class=3D"title"><b>Examp=
le=C2=A018.11.=C2=A0Custom CRUD via annotations</b></p><div class=3D"exa=
mple-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain=
">@</span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Table</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">name</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;CHAOS&quot;</span><span class=3D"java_separator">)<=
/span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SQLInsert</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;sql</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">&quot;INSERT&nbsp;INTO&nbsp;CHAOS(size,&nbsp;n=
ame,&nbsp;nickname,&nbsp;id)&nbsp;VALUES(?,upper(?),?,?)&quot;</span><sp=
an class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SQLUpdate</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;sql</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">&quot;UPDATE&nbsp;CHAOS&nbsp;SET&nbsp;size&nbs=
p;=3D&nbsp;?,&nbsp;name&nbsp;=3D&nbsp;upper(?),&nbsp;nickname&nbsp;=3D&n=
bsp;?&nbsp;WHERE&nbsp;id&nbsp;=3D&nbsp;?&quot;</span><span class=3D"java=
_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SQLDelete</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;sql</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">&quot;DELETE&nbsp;CHAOS&nbsp;WHERE&nbsp;id&nbs=
p;=3D&nbsp;?&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SQLDeleteAll</span><span class=3D"java_separator">(</span><span class=
=3D"java_plain">&nbsp;sql</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_literal">&quot;DELETE&nbsp;CHAOS&quot;</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Loader</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_plain">namedQuery&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">&q=
uot;chaos&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">NamedNativeQuery</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_plain">name</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">&quot;chaos&quot;</span><span class=3D"java_=
separator">,</span><span class=3D"java_plain">&nbsp;query</span><span cl=
ass=3D"java_operator">=3D</span><span class=3D"java_literal">&quot;selec=
t&nbsp;id,&nbsp;size,&nbsp;name,&nbsp;lower(&nbsp;nickname&nbsp;)&nbsp;a=
s&nbsp;nickname&nbsp;from&nbsp;CHAOS&nbsp;where&nbsp;id=3D&nbsp;?&quot;<=
/span><span class=3D"java_separator">,</span><span class=3D"java_plain">=
&nbsp;resultClass&nbsp;</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chaos</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_keyword">=
class</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chaos</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Id</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Long</span><span class=3D"java_plai=
n">&nbsp;id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Long</span><span class=3D"java_plai=
n">&nbsp;size</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;nickname</span><span class=3D"java_separator">;</span></pre><=
/div></div><br class=3D"example-break"/><p><code class=3D"literal">@SQLI=
nsert</code>, <code class=3D"literal">@SQLUpdate</code>,
    <code class=3D"literal">@SQLDelete</code>, <code class=3D"literal">@=
SQLDeleteAll</code>
    respectively override the INSERT, UPDATE, DELETE, and DELETE all
    statement. The same can be achieved using Hibernate mapping files an=
d the
    <code class=3D"literal">&lt;sql-insert&gt;</code>,
    <code class=3D"literal">&lt;sql-update&gt;</code> and
    <code class=3D"literal">&lt;sql-delete&gt;</code> nodes. This can be=
 seen in <a class=3D"xref" href=3D"#example-custom-crdu-via-xml" title=3D=
"Example=C2=A018.12.=C2=A0Custom CRUD XML">Example=C2=A018.12, =E2=80=9C=
Custom CRUD XML=E2=80=9D</a>.</p><div class=3D"example"><a id=3D"example=
-custom-crdu-via-xml"/><p class=3D"title"><b>Example=C2=A018.12.=C2=A0Cu=
stom CRUD XML</b></p><div class=3D"example-contents"><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!=
-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -=
->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;increment&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">sql-insert</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">I=
NSERT&nbsp;INTO&nbsp;PERSON&nbsp;(NAME,&nbsp;ID)&nbsp;VALUES&nbsp;(&nbsp=
;UPPER(?),&nbsp;?&nbsp;)</span><span class=3D"xml_tag_symbols">&lt;/</sp=
an><span class=3D"xml_tag_name">sql-insert</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">sql-update</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">U=
PDATE&nbsp;PERSON&nbsp;SET&nbsp;NAME=3DUPPER(?)&nbsp;WHERE&nbsp;ID=3D?</=
span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_=
name">sql-update</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">sql-delete</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">D=
ELETE&nbsp;FROM&nbsp;PERSON&nbsp;WHERE&nbsp;ID=3D?</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">sql-delete</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>If you expect to call =
a store procedure, be sure to set the
    <code class=3D"literal">callable</code> attribute to <code class=3D"=
constant">true</code>. In
    annotations as well as in xml. </p><p>To check that the execution ha=
ppens correctly, Hibernate allows you
    to define one of those three strategies:</p><div class=3D"itemizedli=
st"><ul><li><p>none: no check is performed: the store procedure is expec=
ted to
        fail upon issues</p></li><li><p>count: use of rowcount to check =
that the update is
        successful</p></li><li><p>param: like COUNT but using an output =
parameter rather that the
        standard mechanism</p></li></ul></div><p>To define the result ch=
eck style, use the <code class=3D"literal">check</code>
    parameter which is again available in annoations as well as in xml.<=
/p><p>You can use the exact same set of annotations respectively xml nod=
es
    to override the collection related statements -see <a class=3D"xref"=
 href=3D"#example-overriding-sql-collections-annotations" title=3D"Examp=
le=C2=A018.13.=C2=A0Overriding SQL statements for collections using anno=
tations">Example=C2=A018.13, =E2=80=9COverriding SQL statements for coll=
ections using
      annotations=E2=80=9D</a>.</p><div class=3D"example"><a id=3D"examp=
le-overriding-sql-collections-annotations"/><p class=3D"title"><b>Exampl=
e=C2=A018.13.=C2=A0Overriding SQL statements for collections using
      annotations</b></p><div class=3D"example-contents"><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAV=
A"><!-- <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span =
class=3D"java_type">OneToMany</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;chaos_fk&quot;</span><span class=3D"java_sepa=
rator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SQLInsert</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;sql</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">&quot;UPDATE&nbsp;CASIMIR_PARTICULE&nbsp;SET&n=
bsp;chaos_fk&nbsp;=3D&nbsp;?&nbsp;where&nbsp;id&nbsp;=3D&nbsp;?&quot;</s=
pan><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SQLDelete</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;sql</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_literal">&quot;UPDATE&nbsp;CASIMIR_PARTICULE&nbsp;SET&n=
bsp;chaos_fk&nbsp;=3D&nbsp;null&nbsp;where&nbsp;id&nbsp;=3D&nbsp;?&quot;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">private</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Set</span><span class=
=3D"java_operator">&lt;</span><span class=3D"java_type">CasimirParticle<=
/span><span class=3D"java_operator">&gt;</span><span class=3D"java_plain=
">&nbsp;particles&nbsp;</span><span class=3D"java_operator">=3D</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">H=
ashSet</span><span class=3D"java_operator">&lt;</span><span class=3D"jav=
a_type">CasimirParticle</span><span class=3D"java_operator">&gt;</span><=
span class=3D"java_separator">();</span></pre></div></div><br class=3D"e=
xample-break"/><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"tip"><h2>Tip</h2><p>The parameter order is important and=
 is defined by the order
      Hibernate handles properties. You can see the expected order by en=
abling
      debug logging for the <code class=3D"literal">org.hibernate.persis=
ter.entity</code>
      level. With this level enabled Hibernate will print out the static=
 SQL
      that is used to create, update, delete etc. entities. (To see the
      expected sequence, remember to not include your custom SQL through=

      annotations or mapping files as that will override the Hibernate
      generated static sql)</p></div><p>Overriding SQL statements for se=
condary tables is also possible
    using <code class=3D"literal">@org.hibernate.annotations.Table</code=
> and either (or
    all) attributes <code class=3D"literal">sqlInsert</code>,
    <code class=3D"literal">sqlUpdate</code>, <code class=3D"literal">sq=
lDelete</code>:</p><div class=3D"example"><a id=3D"d0e18040"/><p class=3D=
"title"><b>Example=C2=A018.14.=C2=A0Overriding SQL statements for second=
ary tables</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:=
rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!--=
 <br/> --><span class=3D"java_plain">@</span><!-- <br/> --><span class=3D=
"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">SecondaryTables</span><span class=3D"java_separator">({</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">SecondaryTable</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">name&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_literal">&quot;`Cat&nbsp;nbr1`&quot;</span><span class=3D"=
java_separator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">SecondaryTable</span><span class=3D"java_sepa=
rator">(</span><span class=3D"java_plain">name&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span =
class=3D"java_literal">&quot;Cat2&quot;</span><span class=3D"java_separa=
tor">})</span>
<!--  --><br/><span class=3D"java_plain">@org</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">hibernate</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">annotations</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_type">Table=
s</span><span class=3D"java_separator">(</span><span class=3D"java_plain=
">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Table</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">appliesTo&nbsp;</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">&quot;Cat&quot;</span><span class=3D"java_separator"=
>,</span><span class=3D"java_plain">&nbsp;comment&nbsp;</span><span clas=
s=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><s=
pan class=3D"java_literal">&quot;My&nbsp;cat&nbsp;table&quot;</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">),</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Table</span><span class=3D"java_separator">(<=
/span><span class=3D"java_plain">appliesTo&nbsp;</span><span class=3D"ja=
va_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><span cla=
ss=3D"java_literal">&quot;Cat2&quot;</span><span class=3D"java_separator=
">,</span><span class=3D"java_plain">&nbsp;foreignKey&nbsp;</span><span =
class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;@</sp=
an><span class=3D"java_type">ForeignKey</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_plain">name</span><span class=3D"java_o=
perator">=3D</span><span class=3D"java_literal">&quot;FK_CAT2_CAT&quot;<=
/span><span class=3D"java_separator">),</span><span class=3D"java_plain"=
>&nbsp;fetch&nbsp;</span><span class=3D"java_operator">=3D</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">FetchMode</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">SEL=
ECT</span><span class=3D"java_separator">,</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;sqlInsert</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">@</span><span class=3D"java_type">SQLInsert<=
/span><span class=3D"java_separator">(</span><span class=3D"java_plain">=
sql</span><span class=3D"java_operator">=3D</span><span class=3D"java_li=
teral">&quot;insert&nbsp;into&nbsp;Cat2(storyPart2,&nbsp;id)&nbsp;values=
(upper(?),&nbsp;?)&quot;</span><span class=3D"java_separator">)</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">)</=
span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Cat</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">implem=
ents</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_t=
ype">Serializable</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">{</span></pre></div></div><br class=3D"example-br=
eak"/><p>The previous example also shows that you can give a comment to =
a
    given table (primary or secondary): This comment will be used for DD=
L
    generation.</p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"tip"><h2>Tip</h2><p>The SQL is directly executed in =
your database, so you can use any
      dialect you like. This will, however, reduce the portability of yo=
ur
      mapping if you use database specific SQL.</p></div><p>Last but not=
 least, stored procedures are in most cases required to
    return the number of rows inserted, updated and deleted. Hibernate a=
lways
    registers the first statement parameter as a numeric output paramete=
r for
    the CUD operations:</p><div class=3D"example"><a id=3D"d0e18052"/><p=
 class=3D"title"><b>Example=C2=A018.15.=C2=A0Stored procedures and their=
 return value</b></p><div class=3D"example-contents"><pre class=3D"progr=
amlisting">CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname=
 IN VARCHAR2)
    RETURN NUMBER IS
BEGIN

    update PERSON
    set
        NAME =3D uname,
    where
        ID =3D uid;

    return SQL%ROWCOUNT;

END updatePerson;</pre></div></div><br class=3D"example-break"/></div><d=
iv class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><=
h2 class=3D"title"><a id=3D"querysql-load"/>18.4.=C2=A0Custom SQL for lo=
ading</h2></div></div></div><p>You can also declare your own SQL (or HQL=
) queries for entity
    loading. As with inserts, updates, and deletes, this can be done at =
the
    individual column level as described in <a class=3D"xref" href=3D"#m=
apping-column-read-and-write" title=3D"5.6.=C2=A0Column transformers: re=
ad and write expressions">Section=C2=A05.6, =E2=80=9CColumn transformers=
: read and write expressions=E2=80=9D</a> or at the statement level. Her=
e
    is an example of a statement level override:</p><pre xmlns=3D"" xmln=
s:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-=
- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) --=
>
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;person&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;pers&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">class</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Perso=
n&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">lock-mode</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;upgrade&quot;</span><span cl=
ass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;NAME&nbsp;=
AS&nbsp;{pers.name},&nbsp;ID&nbsp;AS&nbsp;{pers.id}</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON</span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ID=3D?</spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FOR&nbsp;UPDATE</span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>This is just a named query declaration, as discussed earlier. Y=
ou
    can reference this named query in a class mapping:</p><pre xmlns=3D"=
" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XM=
L"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.n=
et) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;increment&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">loader</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
query-ref</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;person&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>This even works with stored procedures.</p><p>You can even defi=
ne a query for collection loading:</p><pre xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : genera=
ted by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;employments&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse</spa=
n><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute=
_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Employment&quot;</span><span class=3D"xml_ta=
g_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">loader</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
query-ref</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;employments&quot;</span><span class=3D"xml_t=
ag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;employments&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">load-collection=
</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribu=
te_name">alias</span><span class=3D"xml_tag_symbols">=3D</span><span cla=
ss=3D"xml_attribute_value">&quot;emp&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">role</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;Person.employments&quot;</span><span class=3D"xml_tag_symbols">/&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;{emp.*}</s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;EMPLOYMENT&n=
bsp;emp</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;EMPLOYER&nb=
sp;=3D&nbsp;:id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;ORDER&nbsp;BY&nbsp;STA=
RTDATE&nbsp;ASC,&nbsp;EMPLOYEE&nbsp;ASC</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>You can also define an entity loader that loads a collection by=
 join
    fetching:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.=
0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
sql-query</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xm=
l_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;person&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;pers&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">class</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Perso=
n&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">return-join</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">alias</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;emp&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">property</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;pers.employments&quot;</span><span class=3D"xml_tag_symbols">/&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;NAME&nbsp;=
AS&nbsp;{pers.*},&nbsp;{emp.*}</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;PERSON&nbsp;=
pers</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;OUTER&nbsp;J=
OIN&nbsp;EMPLOYMENT&nbsp;emp</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;ON&nbsp;pers.ID&nbsp;=3D&nbsp;emp.PERSON_ID</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ID=3D?</spa=
n><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>sql-query</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>The annotation equivalent <code class=3D"literal">&lt;loader&gt=
;</code> is the
    @Loader annotation as seen in <a class=3D"xref" href=3D"#example-cus=
tom-crdu-via-annotations" title=3D"Example=C2=A018.11.=C2=A0Custom CRUD =
via annotations">Example=C2=A018.11, =E2=80=9CCustom CRUD via annotation=
s=E2=80=9D</a>.</p></div></div><div class=3D"chapter" lang=3D"en-US"><di=
v class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"filters"/>C=
hapter=C2=A019.=C2=A0Filtering data</h2></div></div></div><div class=3D"=
toc"><dl><dt><span class=3D"section"><a href=3D"#objectstate-filters">19=
.1. Hibernate filters</a></span></dt></dl></div><p>Hibernate3 provides a=
n innovative new approach to handling data with
  "visibility" rules. A <span class=3D"emphasis"><em>Hibernate filter</e=
m></span> is a global,
  named, parameterized filter that can be enabled or disabled for a part=
icular
  Hibernate session.</p><div class=3D"section" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"objectstate-filter=
s"/>19.1.=C2=A0Hibernate filters</h2></div></div></div><p>Hibernate3 has=
 the ability to pre-define filter criteria and attach
    those filters at both a class level and a collection level. A filter=

    criteria allows you to define a restriction clause similar to the ex=
isting
    "where" attribute available on the class and various collection elem=
ents.
    These filter conditions, however, can be parameterized. The applicat=
ion
    can then decide at runtime whether certain filters should be enabled=
 and
    what their parameter values should be. Filters can be used like data=
base
    views, but they are parameterized inside the application.</p><p>Usin=
g annotatons filters are defined via
    <code class=3D"literal">@org.hibernate.annotations.FilterDef</code> =
or
    <code class=3D"literal">@org.hibernate.annotations.FilterDefs</code>=
. A filter
    definition has a <code class=3D"methodname">name()</code> and an arr=
ay of
    parameters(). A parameter will allow you to adjust the behavior of t=
he
    filter at runtime. Each parameter is defined by a
    <code class=3D"literal">@ParamDef</code> which has a name and a type=
. You can also
    define a <code class=3D"methodname">defaultCondition()</code> parame=
ter for a given
    <code class=3D"literal">@FilterDef</code> to set the default conditi=
on to use when
    none are defined in each individual <code class=3D"literal">@Filter<=
/code>.
    <code class=3D"literal">@FilterDef</code>(s) can be defined at the c=
lass or package
    level. </p><p>We now need to define the SQL filter clause applied to=
 either the
    entity load or the collection load. <code class=3D"literal">@Filter<=
/code> is used and
    placed either on the entity or the collection element. The connectio=
n
    between <code class=3D"classname">@FilterName</code> and
    <code class=3D"classname">@Filter</code> is a matching name.</p><div=
 class=3D"example"><a id=3D"d0e18140"/><p class=3D"title"><b>Example=C2=A0=
19.1.=C2=A0@FilterDef and @Filter annotations</b></p><div class=3D"examp=
le-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">=
@</span><!-- <br/> --><span class=3D"java_type">Entity</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">FilterDef</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;minLength&quot;</span><span class=3D"java_sep=
arator">,</span><span class=3D"java_plain">&nbsp;parameters</span><span =
class=3D"java_operator">=3D</span><span class=3D"java_plain">@</span><sp=
an class=3D"java_type">ParamDef</span><span class=3D"java_separator">(</=
span><span class=3D"java_plain">&nbsp;name</span><span class=3D"java_ope=
rator">=3D</span><span class=3D"java_literal">&quot;minLength&quot;</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;type</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_literal">&quot;integer&quot;</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Filters</span><span class=3D"java_separator">(</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Filter</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;betweenLength&quot;</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;condition</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;:minLength&nbsp;&lt;=3D&nbsp;length&nbsp;and&nbsp;:=
maxLength&nbsp;&gt;=3D&nbsp;length&quot;</span><span class=3D"java_separ=
ator">),</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Filter</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;minLength&quot;</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;co=
ndition</span><span class=3D"java_operator">=3D</span><span class=3D"jav=
a_literal">&quot;:minLength&nbsp;&lt;=3D&nbsp;length&quot;</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_separator">}</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Forest</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span></pre></div></div><br class=3D"example-break"/><p=
>When the collection use an association table as a relational
    representation, you might want to apply the filter condition to the
    association table itself or to the target entity table. To apply the=

    constraint on the target entity, use the regular
    <code class=3D"literal">@Filter</code> annotation. However, if you w=
ant to target the
    association table, use the <code class=3D"literal">@FilterJoinTable<=
/code>
    annotation.</p><div class=3D"example"><a id=3D"d0e18153"/><p class=3D=
"title"><b>Example=C2=A019.2.=C2=A0Using <code class=3D"classname">@Filt=
erJoinTable</code> for filterting on
      the association table</b></p><div class=3D"example-contents"><pre =
xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" cl=
ass=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;=
&nbsp;@</span><!-- <br/> --><span class=3D"java_type">OneToMany</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">JoinTable</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">filter=
&nbsp;on&nbsp;the&nbsp;target&nbsp;entity&nbsp;table</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">Filter</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">name</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_literal">&quot;betweenLength&quot;</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;condition</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_literal">&quot;:minLength&nbsp;&lt;=3D&nbsp;length&nbsp;and&nbsp;:=
maxLength&nbsp;&gt;=3D&nbsp;length&quot;</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">filter=
&nbsp;on&nbsp;the&nbsp;association&nbsp;table</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span=
><span class=3D"java_type">FilterJoinTable</span><span class=3D"java_sep=
arator">(</span><span class=3D"java_plain">name</span><span class=3D"jav=
a_operator">=3D</span><span class=3D"java_literal">&quot;security&quot;<=
/span><span class=3D"java_separator">,</span><span class=3D"java_plain">=
&nbsp;condition</span><span class=3D"java_operator">=3D</span><span clas=
s=3D"java_literal">&quot;:userlevel&nbsp;&gt;=3D&nbsp;requredLevel&quot;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Set</span><span class=3D"java_operat=
or">&lt;</span><span class=3D"java_type">Forest</span><span class=3D"jav=
a_operator">&gt;</span><span class=3D"java_plain">&nbsp;getForests</span=
><span class=3D"java_separator">()</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_separator">...</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_separator">}</span></pre></=
div></div><br class=3D"example-break"/><p>Using Hibernate mapping files =
for defining filters the situtation is
    very similar. The filters must first be defined and then attached to=
 the
    appropriate mapping elements. To define a filter, use the
    <code class=3D"literal">&lt;filter-def/&gt;</code> element within a
    <code class=3D"literal">&lt;hibernate-mapping/&gt;</code> element:</=
p><div class=3D"example"><a id=3D"d0e18169"/><p class=3D"title"><b>Examp=
le=C2=A019.3.=C2=A0Defining a filter definition via
      <code class=3D"literal">&lt;filter-def&gt;</code></b></p><div clas=
s=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highli=
ght.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlig=
ht v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
filter-def</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;myFilter&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">filter-param</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;myFilterParam&quot;</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>filter-def</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>This filter can then b=
e attached to a class or collection (or, to
    both or multiples of each at the same time):</p><div class=3D"exampl=
e"><a id=3D"d0e18178"/><p class=3D"title"><b>Example=C2=A019.4.=C2=A0Att=
aching a filter to a class or collection using
      <code class=3D"literal">&lt;filter&gt;</code></b></p><div class=3D=
"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v=
1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;myClass&quot;</span><span class=3D"=
xml_plain">&nbsp;...</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">filter</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;myFilter&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">condition</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;:myFilterParam&nbsp;=3D&nbsp;MY_FILTERED_COLUMN&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;...</span><span class=3D"xml_tag_symbols">&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">filter</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;myFilter&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">co=
ndition</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;:myFilterParam&nbsp;=3D&nbsp;MY_FILTERED_COLUM=
N&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">&nbsp;&=
nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>The methods on <code c=
lass=3D"literal">Session</code> are:
    <code class=3D"literal">enableFilter(String filterName)</code>,
    <code class=3D"literal">getEnabledFilter(String filterName)</code>, =
and
    <code class=3D"literal">disableFilter(String filterName)</code>. By =
default, filters
    are <span class=3D"emphasis"><em>not</em></span> enabled for a given=
 session. Filters must be
    enabled through use of the <code class=3D"literal">Session.enableFil=
ter()</code>
    method, which returns an instance of the <code class=3D"literal">Fil=
ter</code>
    interface. If you used the simple filter defined above, it would loo=
k like
    this:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain">=
session</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- =
<br/> --><span class=3D"java_plain">enableFilter</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_li=
teral">&quot;myFilter&quot;</span><!-- <br/> --><span class=3D"java_sepa=
rator">).</span><!-- <br/> --><span class=3D"java_plain">setParameter</s=
pan><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><=
span class=3D"java_literal">&quot;myFilterParam&quot;</span><!-- <br/> -=
-><span class=3D"java_separator">,</span><!-- <br/> --><span class=3D"ja=
va_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_literal">&quot;=
some-value&quot;</span><!-- <br/> --><span class=3D"java_separator">);</=
span></pre><p>Methods on the org.hibernate.Filter interface do allow the=

    method-chaining common to much of Hibernate.</p><p>The following is =
a full example, using temporal data with an
    effective record date pattern:</p><pre xmlns=3D"" xmlns:rf=3D"java:o=
rg.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : genera=
ted by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
filter-def</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;effectiveDate&quot;</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">filter-param</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;asOfDate&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;date&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>filter-def</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Employee&quot;</span><span class=3D=
"xml_plain">&nbsp;...</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;department&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;dept_id&quot;</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;Department&quot;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;effectiveStartDate&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;date&quot;</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;eff_start_dt&quot;<=
/span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_pla=
in"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;effectiveEndDate&quot;</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;date&quot;</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;eff_end_dt&quot;</span>=
<span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_comment">&lt;!--</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;Note&nbsp;that&nbsp;this&nbsp;assumes&nbsp;non-terminal&nbsp;records=
&nbsp;have&nbsp;an&nbsp;eff_end_dt&nbsp;set&nbsp;to</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;a&nbsp;max&nbsp;db&nbsp;date&nbsp;for&nbsp;simplicity-sake</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_comment">&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">filter</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;effectiveDate&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">cond=
ition</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;:asOfDate&nbsp;BETWEEN&nbsp;eff_start_dt&nbsp;an=
d&nbsp;eff_end_dt&quot;</span><span class=3D"xml_tag_symbols">/&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Department&quot;</span><span class=3D=
"xml_plain">&nbsp;...</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;employees&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">lazy</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;dept_id&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Employee&quot;</spa=
n><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">filter</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;effectiveDate&quot;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">condition</span><span class=3D"xml_tag_symbols">=3D<=
/span><span class=3D"xml_attribute_value">&quot;:asOfDate&nbsp;BETWEEN&n=
bsp;eff_start_dt&nbsp;and&nbsp;eff_end_dt&quot;</span><span class=3D"xml=
_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>In order to ensure that you are provided with currently effecti=
ve
    records, enable the filter on the session prior to retrieving employ=
ee
    data:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">S=
ession</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&nbsp=
;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/>=
 --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_separator">...;</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">enableFilter</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_literal">&quot;ef=
fectiveDate&quot;</span><span class=3D"java_separator">).</span><span cl=
ass=3D"java_plain">setParameter</span><span class=3D"java_separator">(</=
span><span class=3D"java_literal">&quot;asOfDate&quot;</span><span class=
=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span><spa=
n class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_type">Date</span><span class=3D"java_separator">(=
));</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;session</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;from&nbsp;Em=
ployee&nbsp;as&nbsp;e&nbsp;where&nbsp;e.salary&nbsp;&gt;&nbsp;:targetSal=
ary&quot;</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">setLong</span><span class=3D"java_separator">(</=
span><span class=3D"java_literal">&quot;targetSalary&quot;</span><span c=
lass=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_keyword">new</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_type">Long</span><span class=3D"java_separato=
r">(</span><span class=3D"java_literal">1000000</span><span class=3D"jav=
a_separator">))</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><sp=
an class=3D"java_plain">list</span><span class=3D"java_separator">();</s=
pan>
</pre><p>Even though a salary constraint was mentioned explicitly on the=

    results in the above HQL, because of the enabled filter, the query w=
ill
    return only currently active employees who have a salary greater tha=
n one
    million dollars.</p><p>If you want to use filters with outer joining=
, either through HQL or
    load fetching, be careful of the direction of the condition expressi=
on. It
    is safest to set this up for left outer joining. Place the parameter=
 first
    followed by the column name(s) after the operator.</p><p>After being=
 defined, a filter might be attached to multiple entities
    and/or collections each with its own condition. This can be problema=
tic
    when the conditions are the same each time. Using
    <code class=3D"literal">&lt;filter-def/&gt;</code> allows you to def=
inine a default
    condition, either as an attribute or CDATA:</p><pre xmlns=3D"" xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!--=
 XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->=

<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
filter-def</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;myFilter&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">conditi=
on</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;abc&nbsp;</span><span class=3D"xml_tag_symbols">&gt=
;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">xyz</span><span class=3D"xml_attribute_value">&quot;</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">...&lt=
;/</span><span class=3D"xml_attribute_name">filter-def</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
filter-def</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"x=
ml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;myOtherFilter&quot;</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">abc=3Dx=
yz</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">filter-def</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
</pre><p>This default condition will be used whenever the filter is atta=
ched
    to something without specifying a condition. This means you can give=
 a
    specific condition as part of the attachment of the filter that over=
rides
    the default condition in that particular case.</p></div></div><div c=
lass=3D"chapter" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 c=
lass=3D"title"><a id=3D"xml"/>Chapter=C2=A020.=C2=A0XML Mapping</h2></di=
v></div></div><div class=3D"toc"><dl><dt><span class=3D"section"><a href=
=3D"#xml-intro">20.1. Working with XML data</a></span></dt><dd><dl><dt><=
span class=3D"section"><a href=3D"#xml-intro-mapping">20.1.1. Specifying=
 XML and class mapping together</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#xml-onlyxml">20.1.2. Specifying only an XML mapping</a></=
span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#xml-mapping"=
>20.2. XML mapping metadata</a></span></dt><dt><span class=3D"section"><=
a href=3D"#xml-manipulation">20.3. Manipulating XML data</a></span></dt>=
</dl></div><p><span class=3D"emphasis"><em>
        XML Mapping is an experimental feature in Hibernate 3.0 and is c=
urrently under
        active development.
    </em></span></p><div class=3D"section" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h2 class=3D"title"><a id=3D"xml-intro"/>20.1.=C2=A0=
Working with XML data</h2></div></div></div><p>
            Hibernate allows you to work with persistent XML data in muc=
h the same way
            you work with persistent POJOs. A parsed XML tree can be tho=
ught of
            as another way of representing the relational data at the ob=
ject level,
            instead of POJOs.
        </p><p>
            Hibernate supports dom4j as API for manipulating XML trees. =
You can write =

            queries that retrieve dom4j trees from the database and have=
 any =

            modification you make to the tree automatically synchronized=
 to the =

            database. You can even take an XML document, parse it using =
dom4j, and
            write it to the database with any of Hibernate's basic opera=
tions: =

            <code class=3D"literal">persist(), saveOrUpdate(), merge(), =
delete(), replicate()</code> =

            (merging is not yet supported).
        </p><p>
            This feature has many applications including data import/exp=
ort, =

            externalization of entity data via JMS or SOAP and XSLT-base=
d reporting.
        </p><p>
            A single mapping can be used to simultaneously map propertie=
s of a class
            and nodes of an XML document to the database, or, if there i=
s no class to map, =

            it can be used to map just the XML.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"xml-intro-mapping"/>20.1.1.=C2=
=A0Specifying XML and class mapping together</h3></div></div></div><p>
                Here is an example of mapping a POJO and XML simultaneou=
sly:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Account&quot;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;ACCO=
UNTS&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">node</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;accou=
nt&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;accountId&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;ACCOUNT_ID&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;@id&quot;</span><span class=3D"xml_tag_symbols">/&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;customer&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;CUSTOMER_ID&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;customer/@id&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">embe=
d-xml</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;false&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;balance&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;BALANCE&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;balance&quot;</span><span class=3D"xml_tag_symbols">/=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"xml-onlyxml"/>20.1.2.=C2=A0Spe=
cifying only an XML mapping</h3></div></div></div><p>
                Here is an example where there is no POJO class:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">entity-name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;Account&quot;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;ACCO=
UNTS&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">node</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;accou=
nt&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;ACCOUNT_ID&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;@id&quot;</span><span class=3D"xml_plain">&nbsp;</spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;string&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;customerId&quot;</span><span class=3D"xml_pl=
ain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;CUSTOMER_ID&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;customer/@id&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">embe=
d-xml</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">enti=
ty-name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;Customer&quot;</span><span class=3D"xml_tag_sy=
mbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;balance&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;BALANCE&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;balance&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;big_decimal&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
                This mapping allows you to access the data as a dom4j tr=
ee, or as a graph of
                property name/value pairs or java <code class=3D"literal=
">Map</code>s. The property names
                are purely logical constructs that can be referred to in=
 HQL queries.
            </p></div></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"xml-mapping"/>=
20.2.=C2=A0XML mapping metadata</h2></div></div></div><p>
            A range of Hibernate mapping elements accept the <code class=
=3D"literal">node</code> attribute.
            This lets you specify the name of an XML attribute or elemen=
t that holds the
            property or entity data. The format of the <code class=3D"li=
teral">node</code> attribute
            must be one of the following:
        </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li><p><=
code class=3D"literal">"element-name"</code>: map to the named XML eleme=
nt</p></li><li><p><code class=3D"literal">"@attribute-name"</code>: map =
to the named XML attribute</p></li><li><p><code class=3D"literal">"."</c=
ode>: map to the parent element</p></li><li><p>
                <code class=3D"literal">"element-name/@attribute-name"</=
code>:
                map to the named attribute of the named element
            </p></li></ul></div><p>
            For collections and single valued associations, there is an =
additional =

            <code class=3D"literal">embed-xml</code> attribute. If <code=
 class=3D"literal">embed-xml=3D"true"</code>,
            the default, the XML tree for the associated entity (or coll=
ection of value type) =

            will be embedded directly in the XML tree for the entity tha=
t owns the association.
            Otherwise, if <code class=3D"literal">embed-xml=3D"false"</c=
ode>, then only the referenced =

            identifier value will appear in the XML for single point ass=
ociations and =

            collections will not appear at all.
        </p><p>
            Do not leave <code class=3D"literal">embed-xml=3D"true"</cod=
e> for
            too many associations, since XML does not deal well with cir=
cularity.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;CUST=
OMER&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">node</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;custo=
mer&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;CUST_ID&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;@id&quot;</span><span class=3D"xml_tag_symbols">/&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">map</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;accounts&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;.&quot;</span><span class=3D"xml_plain">&nbsp;</span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">embe=
d-xml</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;CUSTOMER_ID&quot;</span><s=
pan class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">not-null</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;true&quot;</span><span cl=
ass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">map-key</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;SHORT_DESC&quot;</span>=
<span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">node</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;@short-desc&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">type</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;string&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">entity-name</span><span class=3D"xml_tag_sy=
mbols">=3D</span><span class=3D"xml_attribute_value">&quot;Account&quot;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">embed-xml</span><span class=3D"xml_tag_symbols">=3D<=
/span><span class=3D"xml_attribute_value">&quot;false&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">node</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;account&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">map</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">component</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">node=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;name&quot;</span><span class=3D"xml_tag_symbols">&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;firstName&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">node</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;first-name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;initial&quot;</span><sp=
an class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">node</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;initial&quot;</span><span cla=
ss=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br =
/>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;lastName&quot;</span><s=
pan class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">node</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;last-name&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">component</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
            In this case, the collection of account ids is embedded, but=
 not
            the actual account data. The following HQL query:
        </p><pre class=3D"programlisting">from Customer c left join fetc=
h c.accounts where c.lastName like :lastName</pre><p>
            would return datasets such as this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
customer</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">id</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;123456789&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">account</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>short-desc</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Savings&quot;</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain">987632567</span><span class=
=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">account</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">account</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>short-desc</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Credit&nbsp;Card&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain">985612323</span><s=
pan class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">a=
ccount</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">name</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">first-name</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain">Gavin</span><span class=3D"xml_tag_symbols">&lt;/=
</span><span class=3D"xml_tag_name">first-name</span><span class=3D"xml_=
tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">initial</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">A</span><span class=3D"xml_tag_symbols">&lt;/</span>=
<span class=3D"xml_tag_name">initial</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">last-name</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain">King</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">last-name</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">name</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>customer</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
            If you set <code class=3D"literal">embed-xml=3D"true"</code>=
 on the <code class=3D"literal">&lt;one-to-many&gt;</code>
            mapping, the data might look more like this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
customer</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">id</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;123456789&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">account</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>id</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;987632567&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">short-desc</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;Savings&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">customer</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">id</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;123456789&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">balance</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">100.29</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">balance</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">account</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">account</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>id</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;985612323&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">short-desc</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;Credit&nbsp;Card&quot;</span><span class=3D"xml_tag_symbols">&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">customer</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">id</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;123456789&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">balance</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">-2370.34</span><span class=3D"xml_tag_symbols">&lt;/=
</span><span class=3D"xml_tag_name">balance</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">account</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">name</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">first-name</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain">Gavin</span><span class=3D"xml_tag_symbols">&lt;/=
</span><span class=3D"xml_tag_name">first-name</span><span class=3D"xml_=
tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">initial</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">A</span><span class=3D"xml_tag_symbols">&lt;/</span>=
<span class=3D"xml_tag_name">initial</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">last-name</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain">King</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">last-name</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">name</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>customer</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"xml-manipulation"/>20.3.=C2=A0=
Manipulating XML data</h2></div></div></div><p>
            You can also re-read and update XML documents in the applica=
tion. You can do this by
            obtaining a dom4j session:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Do=
cument</span><!-- <br/> --><span class=3D"java_plain">&nbsp;doc&nbsp;</s=
pan><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"jav=
a_separator">....;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;session&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;factory</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">openSession</span><span clas=
s=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;dom4jSession&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;session</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">getSession</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_type">EntityMode</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">DOM=
4J</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">List</span><span class=3D"java_p=
lain">&nbsp;results&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;dom4jSession</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">create=
Query</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;from&nbsp;Customer&nbsp;c&nbsp;left&nbsp;join&nbsp;fetch&n=
bsp;c.accounts&nbsp;where&nbsp;c.lastName&nbsp;like&nbsp;:lastName&quot;=
</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">list</=
span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_keyword">for</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">int</span><span clas=
s=3D"java_plain">&nbsp;i</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_operator=
">&lt;</span><span class=3D"java_plain">results</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">size</span><span class=3D=
"java_separator">();</span><span class=3D"java_plain">&nbsp;i</span><spa=
n class=3D"java_operator">++</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">add&nb=
sp;the&nbsp;customer&nbsp;data&nbsp;to&nbsp;the&nbsp;XML&nbsp;document</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Element</span><span class=3D"java_plain">&nbsp=
;customer&nbsp;</span><span class=3D"java_operator">=3D</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_type">Element</span><span class=3D"java_separator">)</s=
pan><span class=3D"java_plain">&nbsp;results</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">get</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_plain">i</span><span class=3D"=
java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;doc</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">add=
</span><span class=3D"java_separator">(</span><span class=3D"java_plain"=
>customer</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><pre xmlns=3D"" xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><spa=
n class=3D"java_type">Session</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;session&nbsp;</span><!-- <br/> --><span class=3D"java_operato=
r">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;factory</spa=
n><!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><sp=
an class=3D"java_plain">openSession</span><!-- <br/> --><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_type">Session</span><span class=3D"jav=
a_plain">&nbsp;dom4jSession&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;session</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">getSession</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_type">EntityMode</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">DOM=
4J</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">beginTransaction</span><span =
class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">Element</span><span class=3D"jav=
a_plain">&nbsp;cust&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(=
</span><span class=3D"java_type">Element</span><span class=3D"java_separ=
ator">)</span><span class=3D"java_plain">&nbsp;dom4jSession</span><span =
class=3D"java_separator">.</span><span class=3D"java_plain">get</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_literal">&quot;=
Customer&quot;</span><span class=3D"java_separator">,</span><span class=3D=
"java_plain">&nbsp;customerId</span><span class=3D"java_separator">);</s=
pan>
<!--  --><br/><span class=3D"java_keyword">for</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">int</span><span clas=
s=3D"java_plain">&nbsp;i</span><span class=3D"java_operator">=3D</span><=
span class=3D"java_literal">0</span><span class=3D"java_separator">;</sp=
an><span class=3D"java_plain">&nbsp;i</span><span class=3D"java_operator=
">&lt;</span><span class=3D"java_plain">results</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">size</span><span class=3D=
"java_separator">();</span><span class=3D"java_plain">&nbsp;i</span><spa=
n class=3D"java_operator">++</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Element</span><span class=3D"java_plain">&nbsp=
;customer&nbsp;</span><span class=3D"java_operator">=3D</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_type">Element</span><span class=3D"java_separator">)</s=
pan><span class=3D"java_plain">&nbsp;results</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">get</span><span class=3D"ja=
va_separator">(</span><span class=3D"java_plain">i</span><span class=3D"=
java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_operator">//</span><span class=3D"java_plain">change=
&nbsp;the&nbsp;customer&nbsp;name&nbsp;in&nbsp;the&nbsp;XML&nbsp;and&nbs=
p;database</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Element</span><span class=3D"java_plain">&nbsp=
;name&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;customer</span><span class=3D"java_separator">.</span=
><span class=3D"java_plain">element</span><span class=3D"java_separator"=
>(</span><span class=3D"java_literal">&quot;name&quot;</span><span class=
=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">el=
ement</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;first-name&quot;</span><span class=3D"java_separator">).</=
span><span class=3D"java_plain">setText</span><span class=3D"java_separa=
tor">(</span><span class=3D"java_plain">firstName</span><span class=3D"j=
ava_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">el=
ement</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;initial&quot;</span><span class=3D"java_separator">).</spa=
n><span class=3D"java_plain">setText</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">initial</span><span class=3D"java_s=
eparator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;name</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">el=
ement</span><span class=3D"java_separator">(</span><span class=3D"java_l=
iteral">&quot;last-name&quot;</span><span class=3D"java_separator">).</s=
pan><span class=3D"java_plain">setText</span><span class=3D"java_separat=
or">(</span><span class=3D"java_plain">lastName</span><span class=3D"jav=
a_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span>
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span></pre><p>
            When implementing XML-based data import/export, it is useful=
 to combine this feature with Hibernate's <code class=3D"literal">replic=
ate()</code>
            operation.
        </p></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"performance"/>Chap=
ter=C2=A021.=C2=A0Improving performance</h2></div></div></div><div class=
=3D"toc"><dl><dt><span class=3D"section"><a href=3D"#performance-fetchin=
g">21.1. Fetching strategies</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"#performance-fetching-lazy">21.1.1. Working with lazy=
 associations</a></span></dt><dt><span class=3D"section"><a href=3D"#per=
formance-fetching-custom">21.1.2. Tuning fetch strategies</a></span></dt=
><dt><span class=3D"section"><a href=3D"#performance-fetching-proxies">2=
1.1.3. Single-ended association proxies</a></span></dt><dt><span class=3D=
"section"><a href=3D"#performance-fetching-initialization">21.1.4. Initi=
alizing collections and proxies</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"#performance-fetching-batch">21.1.5. Using batch fetching<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#performance-fetch=
ing-subselect">21.1.6. Using subselect fetching</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#performance-fetching-profiles">21.1.7. Fe=
tch profiles</a></span></dt><dt><span class=3D"section"><a href=3D"#perf=
ormance-fetching-lazyproperties">21.1.8. Using lazy property fetching</a=
></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#performan=
ce-cache">21.2. The Second Level Cache</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"#performance-cache-mapping">21.2.1. Cache m=
appings</a></span></dt><dt><span class=3D"section"><a href=3D"#performan=
ce-cache-readonly">21.2.2. Strategy: read only</a></span></dt><dt><span =
class=3D"section"><a href=3D"#performance-cache-readwrite">21.2.3. Strat=
egy: read/write</a></span></dt><dt><span class=3D"section"><a href=3D"#p=
erformance-cache-nonstrict">21.2.4. Strategy: nonstrict read/write</a></=
span></dt><dt><span class=3D"section"><a href=3D"#performance-cache-tran=
sactional">21.2.5. Strategy: transactional</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"#performance-cache-compat-matrix">21.2.6. Cache=
-provider/concurrency-strategy compatibility</a></span></dt></dl></dd><d=
t><span class=3D"section"><a href=3D"#performance-sessioncache">21.3. Ma=
naging the caches</a></span></dt><dt><span class=3D"section"><a href=3D"=
#performance-querycache">21.4. The Query Cache</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"#performance-querycache-enable">21.=
4.1. Enabling query caching</a></span></dt><dt><span class=3D"section"><=
a href=3D"#performance-querycache-regions">21.4.2. Query cache regions</=
a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"#performa=
nce-collections">21.5. Understanding Collection performance</a></span></=
dt><dd><dl><dt><span class=3D"section"><a href=3D"#performance-collectio=
ns-taxonomy">21.5.1. Taxonomy</a></span></dt><dt><span class=3D"section"=
><a href=3D"#performance-collections-mostefficientupdate">21.5.2. Lists,=
 maps, idbags and sets are the most efficient collections
      to update</a></span></dt><dt><span class=3D"section"><a href=3D"#p=
erformance-collections-mostefficentinverse">21.5.3. Bags and lists are t=
he most efficient inverse collections</a></span></dt><dt><span class=3D"=
section"><a href=3D"#performance-collections-oneshotdelete">21.5.4. One =
shot delete</a></span></dt></dl></dd><dt><span class=3D"section"><a href=
=3D"#performance-monitoring">21.6. Monitoring performance</a></span></dt=
><dd><dl><dt><span class=3D"section"><a href=3D"#performance-monitoring-=
sf">21.6.1. Monitoring a SessionFactory</a></span></dt><dt><span class=3D=
"section"><a href=3D"#performance-monitoring-metrics">21.6.2. Metrics</a=
></span></dt></dl></dd></dl></div><div class=3D"section" lang=3D"en-US">=
<div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"performa=
nce-fetching"/>21.1.=C2=A0Fetching strategies</h2></div></div></div><p>H=
ibernate uses a <span class=3D"emphasis"><em>fetching strategy</em></spa=
n> to retrieve
    associated objects if the application needs to navigate the associat=
ion.
    Fetch strategies can be declared in the O/R mapping metadata, or
    over-ridden by a particular HQL or <code class=3D"literal">Criteria<=
/code>
    query.</p><p>Hibernate3 defines the following fetching strategies:</=
p><div class=3D"itemizedlist"><ul><li><p><span class=3D"emphasis"><em>Jo=
in fetching</em></span>: Hibernate retrieves the
        associated instance or collection in the same
        <code class=3D"literal">SELECT</code>, using an <code class=3D"l=
iteral">OUTER
        JOIN</code>.</p></li><li><p><span class=3D"emphasis"><em>Select =
fetching</em></span>: a second
        <code class=3D"literal">SELECT</code> is used to retrieve the as=
sociated entity or
        collection. Unless you explicitly disable lazy fetching by speci=
fying
        <code class=3D"literal">lazy=3D"false"</code>, this second selec=
t will only be
        executed when you access the association.</p></li><li><p><span c=
lass=3D"emphasis"><em>Subselect fetching</em></span>: a second
        <code class=3D"literal">SELECT</code> is used to retrieve the as=
sociated
        collections for all entities retrieved in a previous query or fe=
tch.
        Unless you explicitly disable lazy fetching by specifying
        <code class=3D"literal">lazy=3D"false"</code>, this second selec=
t will only be
        executed when you access the association.</p></li><li><p><span c=
lass=3D"emphasis"><em>Batch fetching</em></span>: an optimization strate=
gy
        for select fetching. Hibernate retrieves a batch of entity insta=
nces
        or collections in a single <code class=3D"literal">SELECT</code>=
 by specifying a
        list of primary or foreign keys.</p></li></ul></div><p>Hibernate=
 also distinguishes between:</p><div class=3D"itemizedlist"><ul><li><p><=
span class=3D"emphasis"><em>Immediate fetching</em></span>: an associati=
on,
        collection or attribute is fetched immediately when the owner is=

        loaded.</p></li><li><p><span class=3D"emphasis"><em>Lazy collect=
ion fetching</em></span>: a collection is
        fetched when the application invokes an operation upon that
        collection. This is the default for collections.</p></li><li><p>=
<span class=3D"emphasis"><em>"Extra-lazy" collection fetching</em></span=
>:
        individual elements of the collection are accessed from the data=
base
        as needed. Hibernate tries not to fetch the whole collection int=
o
        memory unless absolutely needed. It is suitable for large
        collections.</p></li><li><p><span class=3D"emphasis"><em>Proxy f=
etching</em></span>: a single-valued association
        is fetched when a method other than the identifier getter is inv=
oked
        upon the associated object.</p></li><li><p><span class=3D"emphas=
is"><em>"No-proxy" fetching</em></span>: a single-valued
        association is fetched when the instance variable is accessed.
        Compared to proxy fetching, this approach is less lazy; the
        association is fetched even when only the identifier is accessed=
. It
        is also more transparent, since no proxy is visible to the
        application. This approach requires buildtime bytecode instrumen=
tation
        and is rarely necessary.</p></li><li><p><span class=3D"emphasis"=
><em>Lazy attribute fetching</em></span>: an attribute or
        single valued association is fetched when the instance variable =
is
        accessed. This approach requires buildtime bytecode instrumentat=
ion
        and is rarely necessary.</p></li></ul></div><p>We have two ortho=
gonal notions here: <span class=3D"emphasis"><em>when</em></span> is
    the association fetched and <span class=3D"emphasis"><em>how</em></s=
pan> is it fetched. It is
    important that you do not confuse them. We use <code class=3D"litera=
l">fetch</code> to
    tune performance. We can use <code class=3D"literal">lazy</code> to =
define a contract
    for what data is always available in any detached instance of a part=
icular
    class.</p><div class=3D"section" lang=3D"en-US"><div class=3D"titlep=
age"><div><div><h3 class=3D"title"><a id=3D"performance-fetching-lazy"/>=
21.1.1.=C2=A0Working with lazy associations</h3></div></div></div><p>By =
default, Hibernate3 uses lazy select fetching for collections
      and lazy proxy fetching for single-valued associations. These defa=
ults
      make sense for most associations in the majority of applications.<=
/p><p>If you set <code class=3D"literal">hibernate.default_batch_fetch_s=
ize</code>,
      Hibernate will use the batch fetch optimization for lazy fetching.=
 This
      optimization can also be enabled at a more granular level.</p><p>P=
lease be aware that access to a lazy association outside of the
      context of an open Hibernate session will result in an exception. =
For
      example:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.X=
htmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_pl=
ain">s&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;sessions</span><!-- <br/=
> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_plain">openSession</span><!-- <br/> --><span class=3D"java_separat=
or">();</span>
<!--  --><br/><span class=3D"java_type">Transaction</span><span class=3D=
"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">beginTransaction</span><span class=3D=
"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_type">User</span><span class=3D"java_p=
lain">&nbsp;u&nbsp;</span><span class=3D"java_operator">=3D</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span=
><span class=3D"java_type">User</span><span class=3D"java_separator">)</=
span><span class=3D"java_plain">&nbsp;s</span><span class=3D"java_separa=
tor">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;from&nbsp;Us=
er&nbsp;u&nbsp;where&nbsp;u.name=3D:userName&quot;</span><span class=3D"=
java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setStr=
ing</span><span class=3D"java_separator">(</span><span class=3D"java_lit=
eral">&quot;userName&quot;</span><span class=3D"java_separator">,</span>=
<span class=3D"java_plain">&nbsp;userName</span><span class=3D"java_sepa=
rator">).</span><span class=3D"java_plain">uniqueResult</span><span clas=
s=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Map</span><span class=3D"java_pl=
ain">&nbsp;permissions&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;u</span><span class=3D"java_separato=
r">.</span><span class=3D"java_plain">getPermissions</span><span class=3D=
"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_plain">tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">s</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">close</span><span class=3D"ja=
va_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">Integer</span><span class=3D"jav=
a_plain">&nbsp;accessLevel&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">(</span><span class=3D"java_type">Integer</span><span class=3D"jav=
a_separator">)</span><span class=3D"java_plain">&nbsp;permissions</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">get</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_literal">=
&quot;accounts&quot;</span><span class=3D"java_separator">);</span><span=
 class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D"java_operator">/=
/</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">Error</span><span class=3D"java_operator">!</span></pre><p>Since the p=
ermissions collection was not initialized when the
      <code class=3D"literal">Session</code> was closed, the collection =
will not be able
      to load its state. <span class=3D"emphasis"><em>Hibernate does not=
 support lazy
      initialization for detached objects</em></span>. This can be fixed=
 by
      moving the code that reads from the collection to just before the
      transaction is committed.</p><p>Alternatively, you can use a non-l=
azy collection or association,
      by specifying <code class=3D"literal">lazy=3D"false"</code> for th=
e association
      mapping. However, it is intended that lazy initialization be used =
for
      almost all collections and associations. If you define too many no=
n-lazy
      associations in your object model, Hibernate will fetch the entire=

      database into memory in every transaction.</p><p>On the other hand=
, you can use join fetching, which is non-lazy by
      nature, instead of select fetching in a particular transaction. We=
 will
      now explain how to customize the fetching strategy. In Hibernate3,=
 the
      mechanisms for choosing a fetch strategy are identical for single-=
valued
      associations and collections.</p></div><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D=
"performance-fetching-custom"/>21.1.2.=C2=A0Tuning fetch strategies</h3>=
</div></div></div><p>Select fetching (the default) is extremely vulnerab=
le to N+1
      selects problems, so we might want to enable join fetching in the
      mapping document:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hi=
ghlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHig=
hlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;permissions&quot;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">fetc=
h</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;join&quot;</span><span class=3D"xml_tag_symbols">&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;userId&quot;</span><span class=3D"xml_tag_symbols"=
>/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Permission&quot;</span><span class=3D"xml_ta=
g_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;mother&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;Cat&quot;</span><span class=3D"xml_plain">&nbsp;</span><=
span class=3D"xml_attribute_name">fetch</span><span class=3D"xml_tag_sym=
bols">=3D</span><span class=3D"xml_attribute_value">&quot;join&quot;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
</pre><p>The <code class=3D"literal">fetch</code> strategy defined in th=
e mapping
      document affects:</p><div class=3D"itemizedlist"><ul><li><p>retrie=
val via <code class=3D"literal">get()</code> or
          <code class=3D"literal">load()</code></p></li><li><p>retrieval=
 that happens implicitly when an association is
          navigated</p></li><li><p><code class=3D"literal">Criteria</cod=
e> queries</p></li><li><p>HQL queries if <code class=3D"literal">subsele=
ct</code> fetching is
          used</p></li></ul></div><p>Irrespective of the fetching strate=
gy you use, the defined
      non-lazy graph is guaranteed to be loaded into memory. This might,=

      however, result in several immediate selects being used to execute=
 a
      particular HQL query.</p><p>Usually, the mapping document is not u=
sed to customize fetching.
      Instead, we keep the default behavior, and override it for a parti=
cular
      transaction, using <code class=3D"literal">left join fetch</code> =
in HQL. This tells
      Hibernate to fetch the association eagerly in the first select, us=
ing an
      outer join. In the <code class=3D"literal">Criteria</code> query A=
PI, you would use
      <code class=3D"literal">setFetchMode(FetchMode.JOIN)</code>.</p><p=
>If you want to change the fetching strategy used by
      <code class=3D"literal">get()</code> or <code class=3D"literal">lo=
ad()</code>, you can use a
      <code class=3D"literal">Criteria</code> query. For example:</p><pr=
e xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">User</span><!-- <=
br/> --><span class=3D"java_plain">&nbsp;user&nbsp;</span><!-- <br/> -->=
<span class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"jav=
a_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">(</sp=
an><!-- <br/> --><span class=3D"java_type">User</span><!-- <br/> --><spa=
n class=3D"java_separator">)</span><!-- <br/> --><span class=3D"java_pla=
in">&nbsp;session</span><!-- <br/> --><span class=3D"java_separator">.</=
span><!-- <br/> --><span class=3D"java_plain">createCriteria</span><!-- =
<br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span clas=
s=3D"java_type">User</span><!-- <br/> --><span class=3D"java_separator">=
.</span><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/=
> --><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">setFet=
chMode</span><span class=3D"java_separator">(</span><span class=3D"java_=
literal">&quot;permissions&quot;</span><span class=3D"java_separator">,<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">=
FetchMode</span><span class=3D"java_separator">.</span><span class=3D"ja=
va_plain">JOIN</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">add</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Restrictions</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_plain">idEq</span><span class=
=3D"java_separator">(</span><span class=3D"java_plain">userId</span><spa=
n class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">.</span><span class=3D"java_plain">unique=
Result</span><span class=3D"java_separator">();</span></pre><p>This is H=
ibernate's equivalent of what some ORM solutions call a
      "fetch plan".</p><p>A completely different approach to problems wi=
th N+1 selects is to
      use the second-level cache.</p></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"=
performance-fetching-proxies"/>21.1.3.=C2=A0Single-ended association pro=
xies</h3></div></div></div><p>Lazy fetching for collections is implement=
ed using Hibernate's own
      implementation of persistent collections. However, a different mec=
hanism
      is needed for lazy behavior in single-ended associations. The targ=
et
      entity of the association must be proxied. Hibernate implements la=
zy
      initializing proxies for persistent objects using runtime bytecode=

      enhancement which is accessed via the CGLIB library.</p><p>At star=
tup, Hibernate3 generates proxies by default for all
      persistent classes and uses them to enable lazy fetching of
      <code class=3D"literal">many-to-one</code> and <code class=3D"lite=
ral">one-to-one</code>
      associations.</p><p>The mapping file may declare an interface to u=
se as the proxy
      interface for that class, with the <code class=3D"literal">proxy</=
code> attribute.
      By default, Hibernate uses a subclass of the class. <span class=3D=
"emphasis"><em>The
      proxied class must implement a default constructor with at least p=
ackage
      visibility. This constructor is recommended for all persistent
      classes</em></span>.</p><p>There are potential problems to note wh=
en extending this approach
      to polymorphic classes.For example:</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XML :=
 generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Cat&quot;</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">proxy</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;Cat&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;......</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;DomesticCat&quot;</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;.....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>Firstly, instances of <code class=3D"literal">Cat</code> will n=
ever be
      castable to <code class=3D"literal">DomesticCat</code>, even if th=
e underlying
      instance is an instance of <code class=3D"literal">DomesticCat</co=
de>:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Cat</s=
pan><!-- <br/> --><span class=3D"java_plain">&nbsp;cat&nbsp;</span><!-- =
<br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><span cla=
ss=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_separat=
or">(</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/>=
 --><span class=3D"java_separator">)</span><!-- <br/> --><span class=3D"=
java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"java_separa=
tor">.</span><!-- <br/> --><span class=3D"java_plain">load</span><!-- <b=
r/> --><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D=
"java_type">Cat</span><!-- <br/> --><span class=3D"java_separator">.</sp=
an><!-- <br/> --><span class=3D"java_keyword">class</span><!-- <br/> -->=
<span class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;id</span><!-- <br/> --><span class=3D"java_separator">);</=
span><!-- <br/> --><span class=3D"java_plain">&nbsp;&nbsp;</span><!-- <b=
r/> --><span class=3D"java_operator">//</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;instantiate&nbsp;a&nbsp;proxy&nbsp;</span><!-- <br/> =
--><span class=3D"java_separator">(</span><!-- <br/> --><span class=3D"j=
ava_plain">does&nbsp;not&nbsp;hit&nbsp;the&nbsp;db</span><!-- <br/> --><=
span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_keyword">if</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">&nbsp;cat</span><span class=3D"java_separator">.</span><spa=
n class=3D"java_plain">isDomesticCat</span><span class=3D"java_separator=
">()</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_s=
eparator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_separator">{</span><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span clas=
s=3D"java_plain">&nbsp;hit&nbsp;the&nbsp;db&nbsp;to&nbsp;initialize&nbsp=
;the&nbsp;proxy</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">DomesticCat</span><span class=3D"java_plain">&=
nbsp;dc&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">DomesticCat</span><span class=3D"java_separator">)</s=
pan><span class=3D"java_plain">&nbsp;cat</span><span class=3D"java_separ=
ator">;</span><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D"=
java_plain">&nbsp;</span><span class=3D"java_type">Error</span><span cla=
ss=3D"java_operator">!</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">....</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>Secondly, =
it is possible to break proxy
      <code class=3D"literal">=3D=3D</code>:</p><pre xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <=
br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;cat&nbsp;</span><!-- <br/> --><span class=3D"java_ope=
rator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><=
!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span =
class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"java_separato=
r">)</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session</span>=
<!-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span=
 class=3D"java_plain">load</span><!-- <br/> --><span class=3D"java_separ=
ator">(</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br=
/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_keyword">class</span><!-- <br/> --><span class=3D"java_separator">=
,</span><!-- <br/> --><span class=3D"java_plain">&nbsp;id</span><!-- <br=
/> --><span class=3D"java_separator">);</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_operator">//</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;instantiate&nbsp;a&nbsp;=
</span><!-- <br/> --><span class=3D"java_type">Cat</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;proxy</span>
<!--  --><br/><span class=3D"java_type">DomesticCat</span><span class=3D=
"java_plain">&nbsp;dc&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">(</span><span cla=
ss=3D"java_type">DomesticCat</span><span class=3D"java_separator">)</spa=
n><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">load</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_type">DomesticCat</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;id</span><span class=3D"java_separator">);</span><span class=3D"java_pl=
ain">&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span cla=
ss=3D"java_plain">&nbsp;acquire&nbsp;</span><span class=3D"java_keyword"=
>new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_t=
ype">DomesticCat</span><span class=3D"java_plain">&nbsp;proxy</span><spa=
n class=3D"java_operator">!</span>
<!--  --><br/><span class=3D"java_type">System</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">out</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">println</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_plain">cat</span><sp=
an class=3D"java_operator">=3D=3D</span><span class=3D"java_plain">dc</s=
pan><span class=3D"java_separator">);</span><span class=3D"java_plain">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">false<=
/span></pre><p>However, the situation is not quite as bad as it looks. E=
ven
      though we now have two references to different proxy objects, the
      underlying instance will still be the same object:</p><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_plain">cat</span><!-- <br/> --><s=
pan class=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_p=
lain">setWeight</span><!-- <br/> --><span class=3D"java_separator">(</sp=
an><!-- <br/> --><span class=3D"java_literal">11.0</span><!-- <br/> --><=
span class=3D"java_separator">);</span><!-- <br/> --><span class=3D"java=
_plain">&nbsp;&nbsp;</span><!-- <br/> --><span class=3D"java_operator">/=
/</span><!-- <br/> --><span class=3D"java_plain">&nbsp;hit&nbsp;the&nbsp=
;db&nbsp;to&nbsp;initialize&nbsp;the&nbsp;proxy</span>
<!--  --><br/><span class=3D"java_type">System</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">out</span><span class=3D"=
java_separator">.</span><span class=3D"java_plain">println</span><span c=
lass=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;dc</spa=
n><span class=3D"java_separator">.</span><span class=3D"java_plain">getW=
eight</span><span class=3D"java_separator">()</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_separator">);</span><span class=3D=
"java_plain">&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_literal">11.0=
</span></pre><p>Third, you cannot use a CGLIB proxy for a <code class=3D=
"literal">final</code>
      class or a class with any <code class=3D"literal">final</code> met=
hods.</p><p>Finally, if your persistent object acquires any resources up=
on
      instantiation (e.g. in initializers or default constructor), then =
those
      resources will also be acquired by the proxy. The proxy class is a=
n
      actual subclass of the persistent class.</p><p>These problems are =
all due to fundamental limitations in Java's
      single inheritance model. To avoid these problems your persistent
      classes must each implement an interface that declares its busines=
s
      methods. You should specify these interfaces in the mapping file w=
here
      <code class=3D"literal">CatImpl</code> implements the interface
      <code class=3D"literal">Cat</code> and <code class=3D"literal">Dom=
esticCatImpl</code> implements
      the interface <code class=3D"literal">DomesticCat</code>. For exam=
ple:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRender=
erFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http:/=
/jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;CatImpl&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">proxy</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;Cat&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;......</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;DomesticCatImpl&quot;</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">proxy</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;DomesticCat&quot;</span><span class=3D"xml_tag_symbols">&gt;</spa=
n><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;.....</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>Then proxies for instances of <code class=3D"literal">Cat</code=
> and
      <code class=3D"literal">DomesticCat</code> can be returned by
      <code class=3D"literal">load()</code> or <code class=3D"literal">i=
terate()</code>.</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_=
type">Cat</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cat&nbsp;=
</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> =
--><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"=
java_separator">(</span><!-- <br/> --><span class=3D"java_type">Cat</spa=
n><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D=
"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</=
span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> -->=
<span class=3D"java_type">CatImpl</span><!-- <br/> --><span class=3D"jav=
a_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class</s=
pan><!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><=
span class=3D"java_plain">&nbsp;catid</span><!-- <br/> --><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Iterator</span><span class=3D"ja=
va_plain">&nbsp;iter&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;session</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">createQuery</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">&quot;from&nbsp;Ca=
tImpl&nbsp;as&nbsp;cat&nbsp;where&nbsp;cat.name=3D'fritz'&quot;</span><s=
pan class=3D"java_separator">).</span><span class=3D"java_plain">iterate=
</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">Cat</span><span class=3D"java_pl=
ain">&nbsp;fritz&nbsp;</span><span class=3D"java_operator">=3D</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_type">Cat</span><span class=3D"java_separator">)=
</span><span class=3D"java_plain">&nbsp;iter</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">next</span><span class=3D"j=
ava_separator">();</span></pre><div xmlns:rf=3D"java:org.jboss.highlight=
.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p><code class=3D"lit=
eral">list()</code> does not usually return
        proxies.</p></div><p>Relationships are also lazily initialized. =
This means you must
      declare any properties to be of type <code class=3D"literal">Cat</=
code>, not
      <code class=3D"literal">CatImpl</code>.</p><p>Certain operations d=
o <span class=3D"emphasis"><em>not</em></span> require proxy
      initialization:</p><div class=3D"itemizedlist"><ul compact=3D"comp=
act"><li><p><code class=3D"literal">equals()</code>: if the persistent c=
lass does not
          override <code class=3D"literal">equals()</code></p></li><li><=
p><code class=3D"literal">hashCode()</code>: if the persistent class doe=
s
          not override <code class=3D"literal">hashCode()</code></p></li=
><li><p>The identifier getter method</p></li></ul></div><p>Hibernate wil=
l detect persistent classes that override
      <code class=3D"literal">equals()</code> or <code class=3D"literal"=
>hashCode()</code>.</p><p>By choosing <code class=3D"literal">lazy=3D"no=
-proxy"</code> instead of the
      default <code class=3D"literal">lazy=3D"proxy"</code>, you can avo=
id problems
      associated with typecasting. However, buildtime bytecode instrumen=
tation
      is required, and all operations will result in immediate proxy
      initialization.</p></div><div class=3D"section" lang=3D"en-US"><di=
v class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performance=
-fetching-initialization"/>21.1.4.=C2=A0Initializing collections and pro=
xies</h3></div></div></div><p>A <code class=3D"literal">LazyInitializati=
onException</code> will be thrown by
      Hibernate if an uninitialized collection or proxy is accessed outs=
ide of
      the scope of the <code class=3D"literal">Session</code>, i.e., whe=
n the entity
      owning the collection or having the reference to the proxy is in t=
he
      detached state.</p><p>Sometimes a proxy or collection needs to be =
initialized before
      closing the <code class=3D"literal">Session</code>. You can force =
initialization by
      calling <code class=3D"literal">cat.getSex()</code> or
      <code class=3D"literal">cat.getKittens().size()</code>, for exampl=
e. However, this
      can be confusing to readers of the code and it is not convenient f=
or
      generic code.</p><p>The static methods <code class=3D"literal">Hib=
ernate.initialize()</code> and
      <code class=3D"literal">Hibernate.isInitialized()</code>, provide =
the application
      with a convenient way of working with lazily initialized collectio=
ns or
      proxies. <code class=3D"literal">Hibernate.initialize(cat)</code> =
will force the
      initialization of a proxy, <code class=3D"literal">cat</code>, as =
long as its
      <code class=3D"literal">Session</code> is still open. <code class=3D=
"literal">Hibernate.initialize(
      cat.getKittens() )</code> has a similar effect for the collection =
of
      kittens.</p><p>Another option is to keep the <code class=3D"litera=
l">Session</code> open
      until all required collections and proxies have been loaded. In so=
me
      application architectures, particularly where the code that access=
es
      data using Hibernate, and the code that uses it are in different
      application layers or different physical processes, it can be a pr=
oblem
      to ensure that the <code class=3D"literal">Session</code> is open =
when a collection
      is initialized. There are two basic ways to deal with this issue:<=
/p><div class=3D"itemizedlist"><ul><li><p>In a web-based application, a =
servlet filter can be used to
          close the <code class=3D"literal">Session</code> only at the e=
nd of a user
          request, once the rendering of the view is complete (the
          <span class=3D"emphasis"><em>Open Session in View</em></span> =
pattern). Of course, this
          places heavy demands on the correctness of the exception handl=
ing of
          your application infrastructure. It is vitally important that =
the
          <code class=3D"literal">Session</code> is closed and the trans=
action ended
          before returning to the user, even when an exception occurs du=
ring
          rendering of the view. See the Hibernate Wiki for examples of =
this
          "Open Session in View" pattern.</p></li><li><p>In an applicati=
on with a separate business tier, the business
          logic must "prepare" all collections that the web tier needs b=
efore
          returning. This means that the business tier should load all t=
he
          data and return all the data already initialized to the
          presentation/web tier that is required for a particular use ca=
se.
          Usually, the application calls
          <code class=3D"literal">Hibernate.initialize()</code> for each=
 collection that
          will be needed in the web tier (this call must occur before th=
e
          session is closed) or retrieves the collection eagerly using a=

          Hibernate query with a <code class=3D"literal">FETCH</code> cl=
ause or a
          <code class=3D"literal">FetchMode.JOIN</code> in <code class=3D=
"literal">Criteria</code>.
          This is usually easier if you adopt the <span class=3D"emphasi=
s"><em>Command</em></span>
          pattern instead of a <span class=3D"emphasis"><em>Session Faca=
de</em></span>.</p></li><li><p>You can also attach a previously loaded o=
bject to a new
          <code class=3D"literal">Session</code> with <code class=3D"lit=
eral">merge()</code> or
          <code class=3D"literal">lock()</code> before accessing uniniti=
alized collections
          or other proxies. Hibernate does not, and certainly
          <span class=3D"emphasis"><em>should</em></span> not, do this a=
utomatically since it
          would introduce impromptu transaction semantics.</p></li></ul>=
</div><p>Sometimes you do not want to initialize a large collection, but=

      still need some information about it, like its size, for example, =
or a
      subset of the data.</p><p>You can use a collection filter to get t=
he size of a collection
      without initializing it:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.j=
boss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span =
class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_plain=
">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">(</span><!--=
 <br/> --><span class=3D"java_type">Integer</span><!-- <br/> --><span cl=
ass=3D"java_separator">)</span><!-- <br/> --><span class=3D"java_plain">=
&nbsp;s</span><!-- <br/> --><span class=3D"java_separator">.</span><!-- =
<br/> --><span class=3D"java_plain">createFilter</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;collection</span><!-- <br/> --><span class=3D"java_separator"=
>,</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/=
> --><span class=3D"java_literal">&quot;select&nbsp;count(*)&quot;</span=
><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><sp=
an class=3D"java_separator">).</span><!-- <br/> --><span class=3D"java_p=
lain">list</span><!-- <br/> --><span class=3D"java_separator">().</span>=
<!-- <br/> --><span class=3D"java_plain">get</span><!-- <br/> --><span c=
lass=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_litera=
l">0</span><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br=
/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D=
"java_separator">).</span><!-- <br/> --><span class=3D"java_plain">intVa=
lue</span><!-- <br/> --><span class=3D"java_separator">()</span></pre><p=
>The <code class=3D"literal">createFilter()</code> method is also used t=
o
      efficiently retrieve subsets of a collection without needing to
      initialize the whole collection:</p><pre xmlns=3D"" xmlns:rf=3D"ja=
va:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> -=
-><span class=3D"java_plain">s</span><!-- <br/> --><span class=3D"java_s=
eparator">.</span><!-- <br/> --><span class=3D"java_plain">createFilter<=
/span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --=
><span class=3D"java_plain">&nbsp;lazyCollection</span><!-- <br/> --><sp=
an class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;</span><!-- <br/> --><span class=3D"java_literal">&quot;&quot=
;</span><!-- <br/> --><span class=3D"java_separator">).</span><!-- <br/>=
 --><span class=3D"java_plain">setFirstResult</span><!-- <br/> --><span =
class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_liter=
al">0</span><!-- <br/> --><span class=3D"java_separator">).</span><!-- <=
br/> --><span class=3D"java_plain">setMaxResults</span><!-- <br/> --><sp=
an class=3D"java_separator">(</span><!-- <br/> --><span class=3D"java_li=
teral">10</span><!-- <br/> --><span class=3D"java_separator">).</span><!=
-- <br/> --><span class=3D"java_plain">list</span><!-- <br/> --><span cl=
ass=3D"java_separator">();</span></pre></div><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D=
"performance-fetching-batch"/>21.1.5.=C2=A0Using batch fetching</h3></di=
v></div></div><p>Using batch fetching, Hibernate can load several uninit=
ialized
      proxies if one proxy is accessed. Batch fetching is an optimizatio=
n of
      the lazy select fetching strategy. There are two ways you can conf=
igure
      batch fetching: on the class level and the collection level.</p><p=
>Batch fetching for classes/entities is easier to understand.
      Consider the following example: at runtime you have 25
      <code class=3D"literal">Cat</code> instances loaded in a <code cla=
ss=3D"literal">Session</code>,
      and each <code class=3D"literal">Cat</code> has a reference to its=

      <code class=3D"literal">owner</code>, a <code class=3D"literal">Pe=
rson</code>. The
      <code class=3D"literal">Person</code> class is mapped with a proxy=
,
      <code class=3D"literal">lazy=3D"true"</code>. If you now iterate t=
hrough all cats and
      call <code class=3D"literal">getOwner()</code> on each, Hibernate =
will, by default,
      execute 25 <code class=3D"literal">SELECT</code> statements to ret=
rieve the proxied
      owners. You can tune this behavior by specifying a
      <code class=3D"literal">batch-size</code> in the mapping of
      <code class=3D"literal">Person</code>:</p><pre xmlns=3D"" xmlns:rf=
=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!-- XM=
L : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">batch-size</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;10&quot;</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain">...</span><span class=3D"xml_tag_symbols">&lt=
;/</span><span class=3D"xml_tag_name">class</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>Hibernate will now execute only three queries: the pattern is 1=
0,
      10, 5.</p><p>You can also enable batch fetching of collections. Fo=
r example, if
      each <code class=3D"literal">Person</code> has a lazy collection o=
f
      <code class=3D"literal">Cat</code>s, and 10 persons are currently =
loaded in the
      <code class=3D"literal">Session</code>, iterating through all pers=
ons will generate
      10 <code class=3D"literal">SELECT</code>s, one for every call to
      <code class=3D"literal">getCats()</code>. If you enable batch fetc=
hing for the
      <code class=3D"literal">cats</code> collection in the mapping of
      <code class=3D"literal">Person</code>, Hibernate can pre-fetch col=
lections:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (h=
ttp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;cats&quot;</span><span class=3D"xml_plain">&nbsp;</s=
pan><span class=3D"xml_attribute_name">batch-size</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;3&qu=
ot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_=
plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>With a <code class=3D"literal">batch-size</code> of 3, Hibernat=
e will load 3,
      3, 3, 1 collections in four <code class=3D"literal">SELECT</code>s=
. Again, the value
      of the attribute depends on the expected number of uninitialized
      collections in a particular <code class=3D"literal">Session</code>=
.</p><p>Batch fetching of collections is particularly useful if you have=
 a
      nested tree of items, i.e. the typical bill-of-materials pattern.
      However, a <span class=3D"emphasis"><em>nested set</em></span> or =
a <span class=3D"emphasis"><em>materialized
      path</em></span> might be a better option for read-mostly trees.</=
p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h3 class=3D"title"><a id=3D"performance-fetching-subselect"/>2=
1.1.6.=C2=A0Using subselect fetching</h3></div></div></div><p>If one laz=
y collection or single-valued proxy has to be fetched,
      Hibernate will load all of them, re-running the original query in =
a
      subselect. This works in the same way as batch-fetching but withou=
t the
      piecemeal loading.</p></div><div class=3D"section" lang=3D"en-US">=
<div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performa=
nce-fetching-profiles"/>21.1.7.=C2=A0Fetch profiles</h3></div></div></di=
v><p>Another way to affect the fetching strategy for loading associated
      objects is through something called a fetch profile, which is a na=
med
      configuration associated with the
      <code class=3D"interfacename">org.hibernate.SessionFactory</code> =
but enabled,
      by name, on the <code class=3D"interfacename">org.hibernate.Sessio=
n</code>.
      Once enabled on a <code class=3D"interfacename">org.hibernate.Sess=
ion</code>,
      the fetch profile will be in affect for that
      <code class=3D"interfacename">org.hibernate.Session</code> until i=
t is
      explicitly disabled.</p><p>So what does that mean? Well lets expla=
in that by way of an
      example which show the different available approaches to configure=
 a
      fetch profile:</p><div class=3D"example"><a id=3D"d0e18928"/><p cl=
ass=3D"title"><b>Example=C2=A021.1.=C2=A0Specifying a fetch profile usin=
g
        <code class=3D"classname">@FetchProfile</code></b></p><div class=
=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighligh=
t v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_plain">@Entity</span><br />
<span class=3D"xml_plain">@FetchProfile(name&nbsp;=3D&nbsp;&quot;custome=
r-with-orders&quot;,&nbsp;fetchOverrides&nbsp;=3D&nbsp;{</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@FetchProfile.FetchOverride(=
entity&nbsp;=3D&nbsp;Customer.class,&nbsp;association&nbsp;=3D&nbsp;&quo=
t;orders&quot;,&nbsp;mode&nbsp;=3D&nbsp;FetchMode.JOIN)</span><br />
<span class=3D"xml_plain">})</span><br />
<span class=3D"xml_plain">public&nbsp;class&nbsp;Customer&nbsp;{</span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@Id</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@GeneratedValue</span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;id;</=
span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;nam=
e;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;custo=
merNumber;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;@OneToMany</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;private&nbsp;Set</span><span=
 class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">Order=
</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pla=
in">&nbsp;orders;</span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;//&nbsp;standard&nbsp;getter=
/setter</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">}</span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e18935"/><p class=3D"title"><b>Example=C2=A021.2.=C2=A0Specifyi=
ng a fetch profile using
        <code class=3D"literal">&lt;fetch-profile&gt;</code> outside
        <code class=3D"literal">&lt;class&gt;</code> node</b></p><div cl=
ass=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighl=
ight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Customer&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;orders&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;cu=
st_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Order&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Order&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">fetch-profile</=
span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute=
_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;customer-with-orders&quot;</span><span class=
=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">fetch</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">entity</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;Customer&quot;</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">ass=
ociation</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;orders&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">style</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;jo=
in&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">fetch-profile<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><div class=3D"example"><a=
 id=3D"d0e18946"/><p class=3D"title"><b>Example=C2=A021.3.=C2=A0Specifyi=
ng a fetch profile using
        <code class=3D"literal">&lt;fetch-profile&gt;</code> inside
        <code class=3D"literal">&lt;class&gt;</code> node</b></p><div cl=
ass=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.high=
light.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHighl=
ight v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Customer&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;orders&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;cu=
st_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Order&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">fetch-profile</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;customer-with-orde=
rs&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">fetch</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">association</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;orders&quot;</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">style</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;join&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">fetch-profile</span><span class=3D"xml_tag_symbols">&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Order&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><p>Now normally when you =
get a reference to a particular customer,
      that customer's set of orders will be lazy meaning we will not yet=
 have
      loaded those orders from the database. Normally this is a good thi=
ng.
      Now lets say that you have a certain use case where it is more eff=
icient
      to load the customer and their orders together. One way certainly =
is to
      use "dynamic fetching" strategies via an HQL or criteria queries. =
But
      another option is to use a fetch profile to achieve that. The foll=
owing
      code will load both the customer <span class=3D"emphasis"><em>and<=
/em></span>their
      orders:</p><div class=3D"example"><a id=3D"d0e18962"/><p class=3D"=
title"><b>Example=C2=A021.4.=C2=A0Activating a fetch profile for a given=

        <code class=3D"classname">Session</code></b></p><div class=3D"ex=
ample-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type=
">Session</span><!-- <br/> --><span class=3D"java_plain">&nbsp;session&n=
bsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <b=
r/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=
=3D"java_separator">...;</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">enableFetchProfile</spa=
n><span class=3D"java_separator">(</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_literal">&quot;customer-with-orders&quot;</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">);</span><span class=3D"java_plain">&nbsp;&nbsp;</span><span class=3D=
"java_operator">//</span><span class=3D"java_plain">&nbsp;name&nbsp;matc=
hes&nbsp;from&nbsp;mapping</span>
<!--  --><br/><span class=3D"java_type">Customer</span><span class=3D"ja=
va_plain">&nbsp;customer&nbsp;</span><span class=3D"java_operator">=3D</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separat=
or">(</span><span class=3D"java_type">Customer</span><span class=3D"java=
_separator">)</span><span class=3D"java_plain">&nbsp;session</span><span=
 class=3D"java_separator">.</span><span class=3D"java_plain">get</span><=
span class=3D"java_separator">(</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_type">Customer</span><span class=3D"java_separ=
ator">.</span><span class=3D"java_keyword">class</span><span class=3D"ja=
va_separator">,</span><span class=3D"java_plain">&nbsp;customerId&nbsp;<=
/span><span class=3D"java_separator">);</span>
</pre></div></div><br class=3D"example-break"/><div xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p><c=
ode class=3D"classname">@FetchProfile </code>definitions are global and
        it does not matter on which class you place them. You can place =
the
        <code class=3D"classname">@FetchProfile</code> annotation either=
 onto a class or
        package (package-info.java). In order to define multiple fetch
        profiles for the same class or package
        <code class=3D"classname">@FetchProfiles</code> can be used.</p>=
</div><p>Currently only join style fetch profiles are supported, but the=
y
      plan is to support additional styles. See <a class=3D"ulink" href=3D=
"http://opensource.atlassian.com/projects/hibernate/browse/HHH-3414">HHH=
-3414</a>
      for details.</p></div><div class=3D"section" lang=3D"en-US"><div c=
lass=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performance-fe=
tching-lazyproperties"/>21.1.8.=C2=A0Using lazy property fetching</h3></=
div></div></div><p>Hibernate3 supports the lazy fetching of individual p=
roperties.
      This optimization technique is also known as <span class=3D"emphas=
is"><em>fetch
      groups</em></span>. Please note that this is mostly a marketing fe=
ature;
      optimizing row reads is much more important than optimization of c=
olumn
      reads. However, only loading some properties of a class could be u=
seful
      in extreme cases. For example, when legacy tables have hundreds of=

      columns and the data model cannot be improved.</p><p>To enable laz=
y property loading, set the <code class=3D"literal">lazy</code>
      attribute on your particular property mappings:</p><pre xmlns=3D""=
 xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML=
"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.ne=
t) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Document&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</sp=
an><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_nam=
e">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_t=
ag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;50&quot;</span><span class=3D"=
xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;summary&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">not-null</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;200&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">lazy</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;text&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;2000&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">lazy</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>Lazy property loading requires buildtime bytecode instrumentati=
on.
      If your persistent classes are not enhanced, Hibernate will ignore=
 lazy
      property settings and return to immediate fetching.</p><p>For byte=
code instrumentation, use the following Ant task:</p><pre xmlns=3D"" xml=
ns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"XML"><!=
-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -=
->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
target</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_a=
ttribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;instrument&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">depends</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;compile&quot;</span><span class=3D"xml_tag_symbols">&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">taskdef</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;instrument&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">classname</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;org.hibernate.tool.instrument.InstrumentTask&quot;</span><span clas=
s=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />=

<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">classpath</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">path</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;${jar.path}&quot;</span=
><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">classpath</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">path</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;${classes.dir}&quot;</s=
pan><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">classpath</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">refid</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;lib.class.path&quot;</s=
pan><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">taskdef</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">instrument</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">verbose</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symb=
ols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">fileset</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">dir</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;${testclasses.dir}/org/hi=
bernate/auction/model&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">include</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;*.=
class&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">fileset</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">instrument</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>target</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
</pre><p>A different way of avoiding unnecessary column reads, at least =
for
      read-only transactions, is to use the projection features of HQL o=
r
      Criteria queries. This avoids the need for buildtime bytecode proc=
essing
      and is certainly a preferred solution.</p><p>You can force the usu=
al eager fetching of properties using
      <code class=3D"literal">fetch all properties</code> in HQL.</p></d=
iv></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage">=
<div><div><h2 class=3D"title"><a id=3D"performance-cache"/>21.2.=C2=A0Th=
e Second Level Cache</h2></div></div></div><p>A Hibernate <code class=3D=
"literal">Session</code> is a transaction-level cache
    of persistent data. It is possible to configure a cluster or JVM-lev=
el
    (<code class=3D"literal">SessionFactory</code>-level) cache on a cla=
ss-by-class and
    collection-by-collection basis. You can even plug in a clustered cac=
he. Be
    aware that caches are not aware of changes made to the persistent st=
ore by
    another application. They can, however, be configured to regularly e=
xpire
    cached data.</p><p>You have the option to tell Hibernate which cachi=
ng
    implementation to use by specifying the name of a class that impleme=
nts
    <code class=3D"literal">org.hibernate.cache.CacheProvider</code> usi=
ng the property
    <code class=3D"literal">hibernate.cache.provider_class</code>. Hiber=
nate is bundled
    with a number of built-in integrations with the open-source cache
    providers that are listed in <a class=3D"xref" href=3D"#cacheprovide=
rs" title=3D"Table=C2=A021.1.=C2=A0Cache Providers">Table=C2=A021.1, =E2=
=80=9CCache Providers=E2=80=9D</a>. You can
    also implement your own and plug it in as outlined above. Note that
    versions prior to Hibernate 3.2 use EhCache as the default cache
    provider.</p><div class=3D"table"><a id=3D"cacheproviders"/><p class=
=3D"title"><b>Table=C2=A021.1.=C2=A0Cache Providers</b></p><div class=3D=
"table-contents"><table summary=3D"Cache Providers" border=3D"1"><colgro=
up><col align=3D"left"/><col align=3D"left"/><col align=3D"left"/><col a=
lign=3D"left"/><col align=3D"left"/></colgroup><thead><tr><th align=3D"l=
eft">Cache</th><th align=3D"left">Provider class</th><th align=3D"left">=
Type</th><th align=3D"left">Cluster Safe</th><th align=3D"left">Query Ca=
che Supported</th></tr></thead><tbody><tr><td align=3D"left">Hashtable (=
not intended for production use)</td><td align=3D"left"><code class=3D"l=
iteral">org.hibernate.cache.HashtableCacheProvider</code></td><td align=3D=
"left">memory</td><td align=3D"left">=C2=A0</td><td align=3D"left">yes</=
td></tr><tr><td align=3D"left">EHCache</td><td align=3D"left"><code clas=
s=3D"literal">org.hibernate.cache.EhCacheProvider</code></td><td align=3D=
"left">memory, disk, transactional, clustered</td><td align=3D"left">yes=
</td><td align=3D"left">yes</td></tr><tr><td align=3D"left">OSCache</td>=
<td align=3D"left"><code class=3D"literal">org.hibernate.cache.OSCachePr=
ovider</code></td><td align=3D"left">memory, disk</td><td align=3D"left"=
>=C2=A0</td><td align=3D"left">yes</td></tr><tr><td align=3D"left">Swarm=
Cache</td><td align=3D"left"><code class=3D"literal">org.hibernate.cache=
.SwarmCacheProvider</code></td><td align=3D"left">clustered (ip multicas=
t)</td><td align=3D"left">yes (clustered invalidation)</td><td align=3D"=
left">=C2=A0</td></tr><tr><td align=3D"left">JBoss Cache 1.x</td><td ali=
gn=3D"left"><code class=3D"literal">org.hibernate.cache.TreeCacheProvide=
r</code></td><td align=3D"left">clustered (ip multicast), transactional<=
/td><td align=3D"left">yes (replication)</td><td align=3D"left">yes (clo=
ck sync req.)</td></tr><tr><td align=3D"left">JBoss Cache 2</td><td alig=
n=3D"left"><code class=3D"literal">org.hibernate.cache.jbc.JBossCacheReg=
ionFactory</code></td><td align=3D"left">clustered (ip multicast), trans=
actional</td><td align=3D"left">yes (replication or invalidation)</td><t=
d align=3D"left">yes (clock sync req.)</td></tr></tbody></table></div></=
div><br class=3D"table-break"/><div class=3D"section" lang=3D"en-US"><di=
v class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performance=
-cache-mapping"/>21.2.1.=C2=A0Cache mappings</h3></div></div></div><p>As=
 we have done in previous chapters we are looking at the two
      different possibiltites to configure caching. First configuration =
via
      annotations and then via Hibernate mapping files.</p><p>By default=
, entities are not part of the second level cache and we
      recommend you to stick to this setting. However, you can override =
this
      by setting the <code class=3D"literal">shared-cache-mode</code> el=
ement in your
      <code class=3D"filename">persistence.xml</code> file or by using t=
he
      <code class=3D"literal">javax.persistence.sharedCache.mode </code>=
property in your
      configuration. The following values are possible:</p><div class=3D=
"itemizedlist"><ul><li><p><code class=3D"literal">ENABLE_SELECTIVE</code=
> (Default and recommended
          value): entities are not cached unless explicitly marked as
          cacheable.</p></li><li><p><code class=3D"literal">DISABLE_SELE=
CTIVE</code>: entities are cached
          unless explicitly marked as not cacheable.</p></li><li><p><cod=
e class=3D"literal">ALL</code>: all entities are always cached even if
          marked as non cacheable.</p></li><li><p><code class=3D"literal=
">NONE</code>: no entity are cached even if marked
          as cacheable. This option can make sense to disable second-lev=
el
          cache altogether.</p></li></ul></div><p>The cache concurrency =
strategy used by default can be set globaly
      via the
      <code class=3D"literal">hibernate.cache.default_cache_concurrency_=
strategy</code>
      configuration property. The values for this property are:</p><div =
class=3D"itemizedlist"><ul><li><p><code class=3D"literal">read-only</cod=
e></p></li><li><p><code class=3D"literal">read-write</code></p></li><li>=
<p><code class=3D"literal">nonstrict-read-write</code></p></li><li><p><c=
ode class=3D"literal">transactional</code></p></li></ul></div><div xmlns=
:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2=
>Note</h2><p>It is recommended to define the cache concurrency strategy =
per
        entity rather than using a global one. Use the
        <code class=3D"classname">@org.hibernate.annotations.Cache</code=
> annotation for
        that.</p></div><div class=3D"example"><a id=3D"example-cache-con=
currency-with-cache-annotation"/><p class=3D"title"><b>Example=C2=A021.5=
.=C2=A0Definition of cache concurrency strategy via
        <code class=3D"classname">@Cache</code></b></p><div class=3D"exa=
mple-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xhtm=
lRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_plain=
">@</span><!-- <br/> --><span class=3D"java_type">Entity</span><!-- <br/=
> --><span class=3D"java_plain">&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Cacheable</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Cache</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">usage&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">CacheConcur=
rencyStrategy</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">NONSTRICT_READ_WRITE</span><span class=3D"java_separator">)=
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Forest</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">...</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_separator">}</span></pre></div></div><br class=3D"example-break"/><p=
>Hibernate also let's you cache the content of a collection or the
      identifiers if the collection contains other entities. Use the
      <code class=3D"classname">@Cache</code> annotation on the collecti=
on
      property.</p><div class=3D"example"><a id=3D"d0e19202"/><p class=3D=
"title"><b>Example=C2=A021.6.=C2=A0Caching collections using annotations=
</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> -->=
<span class=3D"java_plain">@</span><!-- <br/> --><span class=3D"java_typ=
e">OneToMany</span><!-- <br/> --><span class=3D"java_separator">(</span>=
<!-- <br/> --><span class=3D"java_plain">cascade</span><!-- <br/> --><sp=
an class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D"java_t=
ype">CascadeType</span><!-- <br/> --><span class=3D"java_separator">.</s=
pan><!-- <br/> --><span class=3D"java_plain">ALL</span><!-- <br/> --><sp=
an class=3D"java_separator">,</span><!-- <br/> --><span class=3D"java_pl=
ain">&nbsp;fetch</span><!-- <br/> --><span class=3D"java_operator">=3D</=
span><!-- <br/> --><span class=3D"java_type">FetchType</span><!-- <br/> =
--><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D"j=
ava_plain">EAGER</span><!-- <br/> --><span class=3D"java_separator">)</s=
pan>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">JoinColumn</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">name</span><span class=3D"java_operator">=3D</span><span cl=
ass=3D"java_literal">&quot;CUST_ID&quot;</span><span class=3D"java_separ=
ator">)</span>
<!--  --><br/><span class=3D"java_plain">@</span><span class=3D"java_typ=
e">Cache</span><span class=3D"java_separator">(</span><span class=3D"jav=
a_plain">usage&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">CacheConcur=
rencyStrategy</span><span class=3D"java_separator">.</span><span class=3D=
"java_plain">NONSTRICT_READ_WRITE</span><span class=3D"java_separator">)=
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_type">SortedSet</span><span =
class=3D"java_operator">&lt;</span><span class=3D"java_type">Ticket</spa=
n><span class=3D"java_operator">&gt;</span><span class=3D"java_plain">&n=
bsp;getTickets</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">return</span><span class=3D"java_plain">&nb=
sp;tickets</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p><a class=3D"xref" href=3D"#example-cache-=
annotation-with-attributes" title=3D"Example=C2=A021.7.=C2=A0@Cache anno=
tation with attributes">Example=C2=A021.7, =E2=80=9C@Cache annotation wi=
th
        attributes=E2=80=9D</a>shows
      the<code class=3D"literal"> @org.hibernate.annotations.Cache</code=
> annotations with
      its attributes. It allows you to define the caching strategy and r=
egion
      of a given second level cache.</p><div class=3D"example"><a id=3D"=
example-cache-annotation-with-attributes"/><p class=3D"title"><b>Example=
=C2=A021.7.=C2=A0<code class=3D"classname">@Cache</code> annotation with=

        attributes</b></p><div class=3D"example-contents"><div class=3D"=
programlistingco"><pre class=3D"programlisting">@Cache(
    CacheConcu<span xmlns=3D"" class=3D"co" id=3D"cache-hm1"><img src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>rrency=
Strategy usage();
    String reg<span xmlns=3D"" class=3D"co" id=3D"cache-hm2"><img src=3D=
"images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>ion() =
default "";
    String inc<span xmlns=3D"" class=3D"co" id=3D"cache-hm3"><img src=3D=
"images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>lude()=
 default "all";
)</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Callout=
 list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p>usa=
ge: the given cache concurrency strategy (NONE,
              READ_ONLY, NONSTRICT_READ_WRITE, READ_WRITE,
              TRANSACTIONAL)</p></td></tr><tr><td width=3D"5%" valign=3D=
"top" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highl=
ight.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/=
2.png" alt=3D"2" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><=
td valign=3D"top" align=3D"left"><p>region (optional): the cache region =
(default to the fqcn
              of the class or the fq role name of the collection)</p></t=
d></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"ima=
ges/org/hibernate/docbook/callouts/3.png" alt=3D"3" border=3D"0" height=3D=
"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><co=
de class=3D"literal">include</code> (optional): all to include all
              properties, non-lazy to only include non lazy properties
              (default all).</p></td></tr></table></div></div></div></di=
v><br class=3D"example-break"/><p>Let's now take a look at Hibernate map=
ping files. There the
      <code class=3D"literal">&lt;cache&gt;</code> element of a class or=
 collection
      mapping is used to configure the second level cache. Looking at <a=
 class=3D"xref" href=3D"#example-hibernate-cache-mapping-element" title=3D=
"Example=C2=A021.8.=C2=A0The Hibernate &lt;cache&gt; mapping element">Ex=
ample=C2=A021.8, =E2=80=9CThe Hibernate &lt;cache&gt; mapping
        element=E2=80=9D</a> the parallels to
      anotations is obvious.</p><div class=3D"example"><a id=3D"example-=
hibernate-cache-mapping-element"/><p class=3D"title"><b>Example=C2=A021.=
8.=C2=A0The Hibernate <code class=3D"literal">&lt;cache&gt;</code> mappi=
ng
        element</b></p><div class=3D"example-contents"><div class=3D"pro=
gramlistingco"><pre class=3D"programlisting">&lt;cache
    usage=3D"tra<span xmlns=3D"" class=3D"co" id=3D"cache1"><img src=3D"=
images/org/hibernate/docbook/callouts/1.png" alt=3D"(1)"/></span>nsactio=
nal|read-write|nonstrict-read-write|read-only"
    region=3D"Re<span xmlns=3D"" class=3D"co" id=3D"cache2"><img src=3D"=
images/org/hibernate/docbook/callouts/2.png" alt=3D"(2)"/></span>gionNam=
e"
    include=3D"a<span xmlns=3D"" class=3D"co" id=3D"cache3"><img src=3D"=
images/org/hibernate/docbook/callouts/3.png" alt=3D"(3)"/></span>ll|non-=
lazy"
/&gt;</pre><div class=3D"calloutlist"><table border=3D"0" summary=3D"Cal=
lout list"><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><img xm=
lns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D=
"images/org/hibernate/docbook/callouts/1.png" alt=3D"1" border=3D"0" hei=
ght=3D"17px" width=3D"17px"/></p></td><td valign=3D"top" align=3D"left">=
<p><code class=3D"literal">usage</code> (required) specifies the caching=

              strategy: <code class=3D"literal">transactional</code>,
              <code class=3D"literal">read-write</code>,
              <code class=3D"literal">nonstrict-read-write</code> or
              <code class=3D"literal">read-only</code></p></td></tr><tr>=
<td width=3D"5%" valign=3D"top" align=3D"left"><p><img xmlns=3D"" xmlns:=
rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" src=3D"images/org/h=
ibernate/docbook/callouts/2.png" alt=3D"2" border=3D"0" height=3D"17px" =
width=3D"17px"/></p></td><td valign=3D"top" align=3D"left"><p><code clas=
s=3D"literal">region</code> (optional: defaults to the class
              or collection role name): specifies the name of the second=
 level
              cache region</p></td></tr><tr><td width=3D"5%" valign=3D"t=
op" align=3D"left"><p><img xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlig=
ht.XhtmlRendererFactory" src=3D"images/org/hibernate/docbook/callouts/3.=
png" alt=3D"3" border=3D"0" height=3D"17px" width=3D"17px"/></p></td><td=
 valign=3D"top" align=3D"left"><p><code class=3D"literal">include</code>=
 (optional: defaults to
              <code class=3D"literal">all</code>) <code class=3D"literal=
">non-lazy</code>: specifies
              that properties of the entity mapped with
              <code class=3D"literal">lazy=3D"true"</code> cannot be cac=
hed when
              attribute-level lazy fetching is enabled</p></td></tr></ta=
ble></div></div></div></div><br class=3D"example-break"/><p>Alternativel=
y to <code class=3D"literal">&lt;cache&gt;</code>, you can use
      <code class=3D"literal">&lt;class-cache&gt;</code> and
      <code class=3D"literal">&lt;collection-cache&gt;</code> elements i=
n
      <code class=3D"literal">hibernate.cfg.xml</code>.</p><p>Let's now =
have a closer look at the different usage
      strategies</p></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performance-cach=
e-readonly"/>21.2.2.=C2=A0Strategy: read only</h3></div></div></div><p>I=
f your application needs to read, but not modify, instances of a
      persistent class, a <code class=3D"literal">read-only</code> cache=
 can be used. This
      is the simplest and optimal performing strategy. It is even safe f=
or use
      in a cluster.</p></div><div class=3D"section" lang=3D"en-US"><div =
class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performance-c=
ache-readwrite"/>21.2.3.=C2=A0Strategy: read/write</h3></div></div></div=
><p>If the application needs to update data, a
      <code class=3D"literal">read-write</code> cache might be appropria=
te. This cache
      strategy should never be used if serializable transaction isolatio=
n
      level is required. If the cache is used in a JTA environment, you =
must
      specify the property
      <code class=3D"literal">hibernate.transaction.manager_lookup_class=
</code> and naming
      a strategy for obtaining the JTA <code class=3D"literal">Transacti=
onManager</code>.
      In other environments, you should ensure that the transaction is
      completed when <code class=3D"literal">Session.close()</code> or
      <code class=3D"literal">Session.disconnect()</code> is called. If =
you want to use
      this strategy in a cluster, you should ensure that the underlying =
cache
      implementation supports locking. The built-in cache providers
      <span class=3D"emphasis"><em>do not</em></span> support locking.</=
p></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h3 class=3D"title"><a id=3D"performance-cache-nonstrict"/>21.2=
.4.=C2=A0Strategy: nonstrict read/write</h3></div></div></div><p>If the =
application only occasionally needs to update data (i.e. if
      it is extremely unlikely that two transactions would try to update=
 the
      same item simultaneously), and strict transaction isolation is not=

      required, a <code class=3D"literal">nonstrict-read-write</code> ca=
che might be
      appropriate. If the cache is used in a JTA environment, you must s=
pecify
      <code class=3D"literal">hibernate.transaction.manager_lookup_class=
</code>. In other
      environments, you should ensure that the transaction is completed =
when
      <code class=3D"literal">Session.close()</code> or
      <code class=3D"literal">Session.disconnect()</code> is called.</p>=
</div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><di=
v><div><h3 class=3D"title"><a id=3D"performance-cache-transactional"/>21=
.2.5.=C2=A0Strategy: transactional</h3></div></div></div><p>The <code cl=
ass=3D"literal">transactional</code> cache strategy provides
      support for fully transactional cache providers such as JBoss Tree=
Cache.
      Such a cache can only be used in a JTA environment and you must sp=
ecify
      <code class=3D"literal">hibernate.transaction.manager_lookup_class=
</code>.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h3 class=3D"title"><a id=3D"performance-cache-compat=
-matrix"/>21.2.6.=C2=A0Cache-provider/concurrency-strategy compatibility=
</h3></div></div></div><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"important"><h2>Important</h2><p>None of the cach=
e providers support all of the cache concurrency
        strategies.</p></div><p>The following table shows which provider=
s are compatible with
      which concurrency strategies.</p><div class=3D"table"><a id=3D"d0e=
19376"/><p class=3D"title"><b>Table=C2=A021.2.=C2=A0Cache Concurrency St=
rategy Support</b></p><div class=3D"table-contents"><table summary=3D"Ca=
che Concurrency Strategy Support" border=3D"1"><colgroup><col align=3D"l=
eft"/><col align=3D"left"/><col align=3D"left"/><col align=3D"left"/><co=
l align=3D"left"/></colgroup><thead><tr><th align=3D"left">Cache</th><th=
 align=3D"left">read-only</th><th align=3D"left">nonstrict-read-write</t=
h><th align=3D"left">read-write</th><th align=3D"left">transactional</th=
></tr></thead><tbody><tr><td align=3D"left">Hashtable (not intended for =
production use)</td><td align=3D"left">yes</td><td align=3D"left">yes</t=
d><td align=3D"left">yes</td><td align=3D"left">=C2=A0</td></tr><tr><td =
align=3D"left">EHCache</td><td align=3D"left">yes</td><td align=3D"left"=
>yes</td><td align=3D"left">yes</td><td align=3D"left">yes</td></tr><tr>=
<td align=3D"left">OSCache</td><td align=3D"left">yes</td><td align=3D"l=
eft">yes</td><td align=3D"left">yes</td><td align=3D"left">=C2=A0</td></=
tr><tr><td align=3D"left">SwarmCache</td><td align=3D"left">yes</td><td =
align=3D"left">yes</td><td align=3D"left">=C2=A0</td><td align=3D"left">=
=C2=A0</td></tr><tr><td align=3D"left">JBoss Cache 1.x</td><td align=3D"=
left">yes</td><td align=3D"left">=C2=A0</td><td align=3D"left">=C2=A0</t=
d><td align=3D"left">yes</td></tr><tr><td align=3D"left">JBoss Cache 2</=
td><td align=3D"left">yes</td><td align=3D"left">=C2=A0</td><td align=3D=
"left">=C2=A0</td><td align=3D"left">yes</td></tr></tbody></table></div>=
</div><br class=3D"table-break"/></div></div><div class=3D"section" lang=
=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D=
"performance-sessioncache"/>21.3.=C2=A0Managing the caches</h2></div></d=
iv></div><p>Whenever you pass an object to <code class=3D"literal">save(=
)</code>,
    <code class=3D"literal">update()</code> or <code class=3D"literal">s=
aveOrUpdate()</code>, and
    whenever you retrieve an object using <code class=3D"literal">load()=
</code>,
    <code class=3D"literal">get()</code>, <code class=3D"literal">list()=
</code>,
    <code class=3D"literal">iterate()</code> or <code class=3D"literal">=
scroll()</code>, that object
    is added to the internal cache of the <code class=3D"literal">Sessio=
n</code>.</p><p>When <code class=3D"literal">flush()</code> is subsequen=
tly called, the state of
    that object will be synchronized with the database. If you do not wa=
nt
    this synchronization to occur, or if you are processing a huge numbe=
r of
    objects and need to manage memory efficiently, the
    <code class=3D"literal">evict()</code> method can be used to remove =
the object and its
    collections from the first-level cache.</p><div class=3D"example"><a=
 id=3D"d0e19496"/><p class=3D"title"><b>Example=C2=A021.9.=C2=A0Explcitl=
y evicting a cached instance from the first level cache
      using <code class=3D"methodname">Session.evict()</code></b></p><di=
v class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.=
highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=
=3D"java_type">ScrollableResult</span><!-- <br/> --><span class=3D"java_=
plain">&nbsp;cats&nbsp;</span><!-- <br/> --><span class=3D"java_operator=
">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;sess</span><!=
-- <br/> --><span class=3D"java_separator">.</span><!-- <br/> --><span c=
lass=3D"java_plain">createQuery</span><!-- <br/> --><span class=3D"java_=
separator">(</span><!-- <br/> --><span class=3D"java_literal">&quot;from=
&nbsp;Cat&nbsp;as&nbsp;cat&quot;</span><!-- <br/> --><span class=3D"java=
_separator">).</span><!-- <br/> --><span class=3D"java_plain">scroll</sp=
an><!-- <br/> --><span class=3D"java_separator">();</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"jav=
a_operator">//</span><!-- <br/> --><span class=3D"java_plain">a&nbsp;hug=
e&nbsp;result&nbsp;set</span>
<!--  --><br/><span class=3D"java_keyword">while</span><span class=3D"ja=
va_plain">&nbsp;</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_plain">&nbsp;cats</span><span class=3D"java_separator">.</span=
><span class=3D"java_plain">next</span><span class=3D"java_separator">()=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separ=
ator">)</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_type">Cat</span><span class=3D"java_plain">&nbsp;cat=
&nbsp;</span><span class=3D"java_operator">=3D</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Cat</span><span class=3D"java_separator">)</span><span class=
=3D"java_plain">&nbsp;cats</span><span class=3D"java_separator">.</span>=
<span class=3D"java_plain">get</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_literal">0</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;doSomet=
hingWithACat</span><span class=3D"java_separator">(</span><span class=3D=
"java_plain">cat</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;sess</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">ev=
ict</span><span class=3D"java_separator">(</span><span class=3D"java_pla=
in">cat</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
br class=3D"example-break"/><p>The <code class=3D"literal">Session</code=
> also provides a
    <code class=3D"literal">contains()</code> method to determine if an =
instance belongs
    to the session cache.</p><p>To evict all objects from the session ca=
che, call
    <code class=3D"literal">Session.clear()</code></p><p>For the second-=
level cache, there are methods defined on
    <code class=3D"literal">SessionFactory</code> for evicting the cache=
d state of an
    instance, entire class, collection instance or entire collection
    role.</p><div class=3D"example"><a id=3D"d0e19520"/><p class=3D"titl=
e"><b>Example=C2=A021.10.=C2=A0Second-level cache eviction via
      <code class=3D"methodname">SessionFactoty.evict() </code>and
      <code class=3D"methodname">SessionFacyory.evictCollection()</code>=
</b></p><div class=3D"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> -->=
<span class=3D"java_plain">sessionFactory</span><!-- <br/> --><span clas=
s=3D"java_separator">.</span><!-- <br/> --><span class=3D"java_plain">ev=
ict</span><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/=
> --><span class=3D"java_type">Cat</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_keyword">class</=
span><!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> -->=
<span class=3D"java_plain">&nbsp;catId</span><!-- <br/> --><span class=3D=
"java_separator">);</span><!-- <br/> --><span class=3D"java_plain">&nbsp=
;</span><!-- <br/> --><span class=3D"java_operator">//</span><!-- <br/> =
--><span class=3D"java_plain">evict&nbsp;a&nbsp;particular&nbsp;</span><=
!-- <br/> --><span class=3D"java_type">Cat</span>
<!--  --><br/><span class=3D"java_plain">sessionFactory</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">evict</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_type">Cat</span><=
span class=3D"java_separator">.</span><span class=3D"java_keyword">class=
</span><span class=3D"java_separator">);</span><span class=3D"java_plain=
">&nbsp;&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">evict&nbsp;all&nbsp;</span><span class=3D"java_type">Cats</=
span>
<!--  --><br/><span class=3D"java_plain">sessionFactory</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">evictCollection<=
/span><span class=3D"java_separator">(</span><span class=3D"java_literal=
">&quot;Cat.kittens&quot;</span><span class=3D"java_separator">,</span><=
span class=3D"java_plain">&nbsp;catId</span><span class=3D"java_separato=
r">);</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
operator">//</span><span class=3D"java_plain">evict&nbsp;a&nbsp;particul=
ar&nbsp;collection&nbsp;of&nbsp;kittens</span>
<!--  --><br/><span class=3D"java_plain">sessionFactory</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">evictCollection<=
/span><span class=3D"java_separator">(</span><span class=3D"java_literal=
">&quot;Cat.kittens&quot;</span><span class=3D"java_separator">);</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_operator">//=
</span><span class=3D"java_plain">evict&nbsp;all&nbsp;kitten&nbsp;collec=
tions</span></pre></div></div><br class=3D"example-break"/><p>The <code =
class=3D"literal">CacheMode</code> controls how a particular session
    interacts with the second-level cache:</p><div class=3D"itemizedlist=
"><ul><li><p><code class=3D"literal">CacheMode.NORMAL</code>: will read =
items from and
        write items to the second-level cache</p></li><li><p><code class=
=3D"literal">CacheMode.GET</code>: will read items from the
        second-level cache. Do not write to the second-level cache excep=
t when
        updating data</p></li><li><p><code class=3D"literal">CacheMode.P=
UT</code>: will write items to the
        second-level cache. Do not read from the second-level cache</p><=
/li><li><p><code class=3D"literal">CacheMode.REFRESH</code>: will write =
items to the
        second-level cache. Do not read from the second-level cache. Byp=
ass
        the effect of <code class=3D"literal">hibernate.cache.use_minima=
l_puts</code>
        forcing a refresh of the second-level cache for all items read f=
rom
        the database</p></li></ul></div><p>To browse the contents of a s=
econd-level or query cache region, use
    the <code class=3D"literal">Statistics</code> API:</p><div class=3D"=
example"><a id=3D"d0e19564"/><p class=3D"title"><b>Example=C2=A021.11.=C2=
=A0Browsing the second-level cache entries via the
      <code class=3D"classname">Statistics</code> API</b></p><div class=3D=
"example-contents"><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.=
XhtmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_t=
ype">Map</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cacheEntri=
es&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-=
- <br/> --><span class=3D"java_plain">&nbsp;sessionFactory</span><!-- <b=
r/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_plain">getStatistics</span><!-- <br/> --><span class=3D"java_separ=
ator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">getSecondLevelCacheStatistics</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">regionName</span><span c=
lass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">getEntries</span><span class=3D"java_separator">();</s=
pan></pre></div></div><br class=3D"example-break"/><p>You will need to e=
nable statistics and, optionally, force Hibernate
    to keep the cache entries in a more readable format:</p><div class=3D=
"example"><a id=3D"d0e19574"/><p class=3D"title"><b>Example=C2=A021.12.=C2=
=A0Enabling Hibernate statistics</b></p><div class=3D"example-contents">=
<pre class=3D"programlisting">hibernate.generate_statistics true
hibernate.cache.use_structured_entries true</pre></div></div><br class=3D=
"example-break"/></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h2 class=3D"title"><a id=3D"performance-querycach=
e"/>21.4.=C2=A0The Query Cache</h2></div></div></div><p>Query result set=
s can also be cached. This is only useful for
    queries that are run frequently with the same parameters.</p><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 cl=
ass=3D"title"><a id=3D"performance-querycache-enable"/>21.4.1.=C2=A0Enab=
ling query caching</h3></div></div></div><p>Caching of query results int=
roduces some overhead in terms of your
      applications normal transactional processing. For example, if you =
cache
      results of a query against Person Hibernate will need to keep trac=
k of
      when those results should be invalidated because changes have been=

      committed against Person. That, coupled with the fact that most
      applications simply gain no benefit from caching query results, le=
ads
      Hibernate to disable caching of query results by default. To use q=
uery
      caching, you will first need to enable the query cache:</p><pre cl=
ass=3D"programlisting">hibernate.cache.use_query_cache true</pre><p>This=
 setting creates two new cache regions: </p><div class=3D"itemizedlist">=
<ul><li><p><code class=3D"classname">org.hibernate.cache.StandardQueryCa=
che</code>,
            holding the cached query results</p></li><li><p><code class=3D=
"classname">org.hibernate.cache.UpdateTimestampsCache</code>,
            holding timestamps of the most recent updates to queryable t=
ables.
            These are used to validate the results as they are served fr=
om the
            query cache.</p></li></ul></div><div xmlns:rf=3D"java:org.jb=
oss.highlight.XhtmlRendererFactory" class=3D"important"><h2>Important</h=
2><p>If you configure your underlying cache implementation to use
        expiry or timeouts is very important that the cache timeout of t=
he
        underlying cache region for the UpdateTimestampsCache be set to =
a
        higher value than the timeouts of any of the query caches. In fa=
ct, we
        recommend that the the UpdateTimestampsCache region not be confi=
gured
        for expiry at all. Note, in particular, that an LRU cache expiry=

        policy is never appropriate.</p></div><p>As mentioned above, mos=
t queries do not benefit from caching or
      their results. So by default, individual queries are not cached ev=
en
      after enabling query caching. To enable results caching for a part=
icular
      query, call <code class=3D"literal">org.hibernate.Query.setCacheab=
le(true)</code>.
      This call allows the query to look for existing cache results or a=
dd its
      results to the cache when it is executed.</p><div xmlns:rf=3D"java=
:org.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><=
p>The query cache does not cache the state of the actual entities
        in the cache; it caches only identifier values and results of va=
lue
        type. For this reaso, the query cache should always be used in
        conjunction with the second-level cache for those entities expec=
ted to
        be cached as part of a query result cache (just as with collecti=
on
        caching).</p></div></div><div class=3D"section" lang=3D"en-US"><=
div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performan=
ce-querycache-regions"/>21.4.2.=C2=A0Query cache regions</h3></div></div=
></div><p>If you require fine-grained control over query cache expiratio=
n
      policies, you can specify a named cache region for a particular qu=
ery by
      calling <code class=3D"literal">Query.setCacheRegion()</code>.</p>=
<pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactor=
y" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">List</span><!-=
- <br/> --><span class=3D"java_plain">&nbsp;blogs&nbsp;</span><!-- <br/>=
 --><span class=3D"java_operator">=3D</span><!-- <br/> --><span class=3D=
"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"java_separato=
r">.</span><!-- <br/> --><span class=3D"java_plain">createQuery</span><!=
-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><span c=
lass=3D"java_literal">&quot;from&nbsp;Blog&nbsp;blog&nbsp;where&nbsp;blo=
g.blogger&nbsp;=3D&nbsp;:blogger&quot;</span><!-- <br/> --><span class=3D=
"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setEntity</span><span class=3D"java_separator">(</span=
><span class=3D"java_literal">&quot;blogger&quot;</span><span class=3D"j=
ava_separator">,</span><span class=3D"java_plain">&nbsp;blogger</span><s=
pan class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setMaxResults</span><span class=3D"java_separator">(</=
span><span class=3D"java_literal">15</span><span class=3D"java_separator=
">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setCacheable</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_literal">true</span><span class=3D"java_separato=
r">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">setCacheRegion</span><span class=3D"java_separator">(<=
/span><span class=3D"java_literal">&quot;frontpages&quot;</span><span cl=
ass=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">.</span><span cla=
ss=3D"java_plain">list</span><span class=3D"java_separator">();</span></=
pre><p>If you want to force the query cache to refresh one of its region=
s
      (disregard any cached results it finds there) you can use
      <code class=3D"literal">org.hibernate.Query.setCacheMode(CacheMode=
.REFRESH)</code>.
      In conjunction with the region you have defined for the given quer=
y,
      Hibernate will selectively force the results cached in that partic=
ular
      region to be refreshed. This is particularly useful in cases where=

      underlying data may have been updated via a separate process and i=
s a
      far more efficient alternative to bulk eviction of the region via
      <code class=3D"literal">org.hibernate.SessionFactory.evictQueries(=
)</code>.</p></div></div><div class=3D"section" lang=3D"en-US"><div clas=
s=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"performance-colle=
ctions"/>21.5.=C2=A0Understanding Collection performance</h2></div></div=
></div><p>In the previous sections we have covered collections and their=

    applications. In this section we explore some more issues in relatio=
n to
    collections at runtime.</p><div class=3D"section" lang=3D"en-US"><di=
v class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"performance=
-collections-taxonomy"/>21.5.1.=C2=A0Taxonomy</h3></div></div></div><p>H=
ibernate defines three basic kinds of collections:</p><div class=3D"item=
izedlist"><ul><li><p>collections of values</p></li><li><p>one-to-many as=
sociations</p></li><li><p>many-to-many associations</p></li></ul></div><=
p>This classification distinguishes the various table and foreign
      key relationships but does not tell us quite everything we need to=
 know
      about the relational model. To fully understand the relational str=
ucture
      and performance characteristics, we must also consider the structu=
re of
      the primary key that is used by Hibernate to update or delete coll=
ection
      rows. This suggests the following classification:</p><div class=3D=
"itemizedlist"><ul><li><p>indexed collections</p></li><li><p>sets</p></l=
i><li><p>bags</p></li></ul></div><p>All indexed collections (maps, lists=
, and arrays) have a primary
      key consisting of the <code class=3D"literal">&lt;key&gt;</code> a=
nd
      <code class=3D"literal">&lt;index&gt;</code> columns. In this case=
, collection
      updates are extremely efficient. The primary key can be efficientl=
y
      indexed and a particular row can be efficiently located when Hiber=
nate
      tries to update or delete it.</p><p>Sets have a primary key consis=
ting of
      <code class=3D"literal">&lt;key&gt;</code> and element columns. Th=
is can be less
      efficient for some types of collection element, particularly compo=
site
      elements or large text or binary fields, as the database may not b=
e able
      to index a complex primary key as efficiently. However, for one-to=
-many
      or many-to-many associations, particularly in the case of syntheti=
c
      identifiers, it is likely to be just as efficient. If you want
      <code class=3D"literal">SchemaExport</code> to actually create the=
 primary key of a
      <code class=3D"literal">&lt;set&gt;</code>, you must declare all c=
olumns as
      <code class=3D"literal">not-null=3D"true"</code>.</p><p><code clas=
s=3D"literal">&lt;idbag&gt;</code> mappings define a surrogate key,
      so they are efficient to update. In fact, they are the best case.<=
/p><p>Bags are the worst case since they permit duplicate element values=

      and, as they have no index column, no primary key can be defined.
      Hibernate has no way of distinguishing between duplicate rows. Hib=
ernate
      resolves this problem by completely removing in a single
      <code class=3D"literal">DELETE</code> and recreating the collectio=
n whenever it
      changes. This can be inefficient.</p><p>For a one-to-many associat=
ion, the "primary key" may not be the
      physical primary key of the database table. Even in this case, the=
 above
      classification is still useful. It reflects how Hibernate "locates=
"
      individual rows of the collection.</p></div><div class=3D"section"=
 lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><=
a id=3D"performance-collections-mostefficientupdate"/>21.5.2.=C2=A0Lists=
, maps, idbags and sets are the most efficient collections
      to update</h3></div></div></div><p>From the discussion above, it s=
hould be clear that indexed
      collections and sets allow the most efficient operation in terms o=
f
      adding, removing and updating elements.</p><p>There is, arguably, =
one more advantage that indexed collections
      have over sets for many-to-many associations or collections of val=
ues.
      Because of the structure of a <code class=3D"literal">Set</code>, =
Hibernate does not
      <code class=3D"literal">UPDATE</code> a row when an element is "ch=
anged". Changes to
      a <code class=3D"literal">Set</code> always work via <code class=3D=
"literal">INSERT</code> and
      <code class=3D"literal">DELETE</code> of individual rows. Once aga=
in, this
      consideration does not apply to one-to-many associations.</p><p>Af=
ter observing that arrays cannot be lazy, you can conclude that
      lists, maps and idbags are the most performant (non-inverse) colle=
ction
      types, with sets not far behind. You can expect sets to be the mos=
t
      common kind of collection in Hibernate applications. This is becau=
se the
      "set" semantics are most natural in the relational model.</p><p>Ho=
wever, in well-designed Hibernate domain models, most
      collections are in fact one-to-many associations with
      <code class=3D"literal">inverse=3D"true"</code>. For these associa=
tions, the update is
      handled by the many-to-one end of the association, and so consider=
ations
      of collection update performance simply do not apply.</p></div><di=
v class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h=
3 class=3D"title"><a id=3D"performance-collections-mostefficentinverse"/=
>21.5.3.=C2=A0Bags and lists are the most efficient inverse collections<=
/h3></div></div></div><p>There is a particular case, however, in which b=
ags, and also
      lists, are much more performant than sets. For a collection with
      <code class=3D"literal">inverse=3D"true"</code>, the standard bidi=
rectional
      one-to-many relationship idiom, for example, we can add elements t=
o a
      bag or list without needing to initialize (fetch) the bag elements=
. This
      is because, unlike a <code class=3D"literal">set</code>,
      <code class=3D"literal">Collection.add()</code> or
      <code class=3D"literal">Collection.addAll()</code> must always ret=
urn true for a bag
      or <code class=3D"literal">List</code>. This can make the followin=
g common code much
      faster:</p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xh=
tmlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_typ=
e">Parent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</=
span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --=
><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_separator">(</span><!-- <br/> --><span class=3D"java_type">Parent</sp=
an><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><s=
pan class=3D"java_plain">&nbsp;sess</span><!-- <br/> --><span class=3D"j=
ava_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</sp=
an><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><s=
pan class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_s=
eparator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span=
><!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;id</span><!-- <br/> --><span class=3D"java_=
separator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chil=
d</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">c</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setParent</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">p</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">getChildren</span><span class=
=3D"java_separator">().</span><span class=3D"java_plain">add</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">c</span><sp=
an class=3D"java_separator">);</span><span class=3D"java_plain">&nbsp;&n=
bsp;</span><span class=3D"java_operator">//</span><span class=3D"java_pl=
ain">no&nbsp;need&nbsp;to&nbsp;fetch&nbsp;the&nbsp;collection</span><spa=
n class=3D"java_operator">!</span>
<!--  --><br/><span class=3D"java_plain">sess</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">flush</span><span class=3D=
"java_separator">();</span></pre></div><div class=3D"section" lang=3D"en=
-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"per=
formance-collections-oneshotdelete"/>21.5.4.=C2=A0One shot delete</h3></=
div></div></div><p>Deleting collection elements one by one can sometimes=
 be extremely
      inefficient. Hibernate knows not to do that in the case of an
      newly-empty collection (if you called <code class=3D"literal">list=
.clear()</code>,
      for example). In this case, Hibernate will issue a single
      <code class=3D"literal">DELETE</code>.</p><p>Suppose you added a s=
ingle element to a collection of size twenty
      and then remove two elements. Hibernate will issue one
      <code class=3D"literal">INSERT</code> statement and two <code clas=
s=3D"literal">DELETE</code>
      statements, unless the collection is a bag. This is certainly
      desirable.</p><p>However, suppose that we remove eighteen elements=
, leaving two and
      then add thee new elements. There are two possible ways to
      proceed</p><div class=3D"itemizedlist"><ul><li><p>delete eighteen =
rows one by one and then insert three
          rows</p></li><li><p>remove the whole collection in one SQL
          <code class=3D"literal">DELETE</code> and insert all five curr=
ent elements one
          by one</p></li></ul></div><p>Hibernate cannot know that the se=
cond option is probably quicker.
      It would probably be undesirable for Hibernate to be that intuitiv=
e as
      such behavior might confuse database triggers, etc.</p><p>Fortunat=
ely, you can force this behavior (i.e. the second
      strategy) at any time by discarding (i.e. dereferencing) the origi=
nal
      collection and returning a newly instantiated collection with all =
the
      current elements.</p><p>One-shot-delete does not apply to collecti=
ons mapped
      <code class=3D"literal">inverse=3D"true"</code>.</p></div></div><d=
iv class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><=
h2 class=3D"title"><a id=3D"performance-monitoring"/>21.6.=C2=A0Monitori=
ng performance</h2></div></div></div><p>Optimization is not much use wit=
hout monitoring and access to
    performance numbers. Hibernate provides a full range of figures abou=
t its
    internal operations. Statistics in Hibernate are available per
    <code class=3D"literal">SessionFactory</code>.</p><div class=3D"sect=
ion" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a id=3D"performance-monitoring-sf"/>21.6.1.=C2=A0Monitoring a Sessio=
nFactory</h3></div></div></div><p>You can access <code class=3D"literal"=
>SessionFactory</code> metrics in two
      ways. Your first option is to call
      <code class=3D"literal">sessionFactory.getStatistics()</code> and =
read or display
      the <code class=3D"literal">Statistics</code> yourself.</p><p>Hibe=
rnate can also use JMX to publish metrics if you enable the
      <code class=3D"literal">StatisticsService</code> MBean. You can en=
able a single
      MBean for all your <code class=3D"literal">SessionFactory</code> o=
r one per factory.
      See the following code for minimalistic configuration examples:</p=
><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFacto=
ry" class=3D"JAVA"><!-- <br/> --><span class=3D"java_operator">//</span>=
<!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><spa=
n class=3D"java_type">MBean</span><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;service&nbsp;registration&nbsp;</span><!-- <br/> --><span class=
=3D"java_keyword">for</span><!-- <br/> --><span class=3D"java_plain">&nb=
sp;a&nbsp;specific&nbsp;</span><!-- <br/> --><span class=3D"java_type">S=
essionFactory</span>
<!--  --><br/><span class=3D"java_type">Hashtable</span><span class=3D"j=
ava_plain">&nbsp;tb&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>Hashtable</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">tb</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">put</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_literal">&quot;type&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_literal">&quot;statistics&quot;</span><span =
class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">tb</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">put</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_literal">&quot;sessionFactory&q=
uot;</span><span class=3D"java_separator">,</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_literal">&quot;myFinancialApp&quot=
;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">ObjectName</span><span class=3D"=
java_plain">&nbsp;on&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">ne=
w</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">ObjectName</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;hibernate&quot;</span><span class=3D"java_separator=
">,</span><span class=3D"java_plain">&nbsp;tb</span><span class=3D"java_=
separator">);</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_operator">//</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">MBean</span><span class=3D"java_plain">&nbsp;object&n=
bsp;name</span>
</span>
<!--  --><br/><span class=3D"java_type">StatisticsService</span><span cl=
ass=3D"java_plain">&nbsp;stats&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_k=
eyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">StatisticsService</span><span class=3D"java_separator">();</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_operato=
r">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
type">MBean</span><span class=3D"java_plain">&nbsp;implementation</span>=

<!--  --><br/><span class=3D"java_plain">stats</span><span class=3D"java=
_separator">.</span><span class=3D"java_plain">setSessionFactory</span><=
span class=3D"java_separator">(</span><span class=3D"java_plain">session=
Factory</span><span class=3D"java_separator">);</span><span class=3D"jav=
a_plain">&nbsp;</span><span class=3D"java_operator">//</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_type">Bind</span><span =
class=3D"java_plain">&nbsp;the&nbsp;stats&nbsp;to&nbsp;a&nbsp;</span><sp=
an class=3D"java_type">SessionFactory</span>
<!--  --><br/><span class=3D"java_plain">server</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">registerMBean</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_plain">stats</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;on</span><span class=3D"java_separator">);</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">Register</span><span=
 class=3D"java_plain">&nbsp;the&nbsp;</span><span class=3D"java_type">Mb=
ean</span><span class=3D"java_plain">&nbsp;on&nbsp;the&nbsp;server</span=
></pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendere=
rFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_operator">//<=
/span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> -=
-><span class=3D"java_type">MBean</span><!-- <br/> --><span class=3D"jav=
a_plain">&nbsp;service&nbsp;registration&nbsp;</span><!-- <br/> --><span=
 class=3D"java_keyword">for</span><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;all&nbsp;</span><!-- <br/> --><span class=3D"java_type">Session=
Factory</span><!-- <br/> --><span class=3D"java_plain">'s</span>
<!--  --><br/><span class=3D"java_type">Hashtable</span><span class=3D"j=
ava_plain">&nbsp;tb&nbsp;</span><span class=3D"java_operator">=3D</span>=
<span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>Hashtable</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">tb</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">put</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_literal">&quot;type&quot;</span=
><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_literal">&quot;statistics&quot;</span><span =
class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">tb</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">put</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_literal">&quot;sessionFactory&q=
uot;</span><span class=3D"java_separator">,</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_literal">&quot;all&quot;</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">ObjectName</span><span class=3D"=
java_plain">&nbsp;on&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">ne=
w</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type=
">ObjectName</span><span class=3D"java_separator">(</span><span class=3D=
"java_literal">&quot;hibernate&quot;</span><span class=3D"java_separator=
">,</span><span class=3D"java_plain">&nbsp;tb</span><span class=3D"java_=
separator">);</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_operator">//</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_type">MBean</span><span class=3D"java_plain">&nbsp;object&n=
bsp;name</span>
</span>
<!--  --><br/><span class=3D"java_type">StatisticsService</span><span cl=
ass=3D"java_plain">&nbsp;stats&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_k=
eyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">StatisticsService</span><span class=3D"java_separator">();</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_operato=
r">//</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
type">MBean</span><span class=3D"java_plain">&nbsp;implementation</span>=

<!--  --><br/><span class=3D"java_plain">server</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">registerMBean</span><spa=
n class=3D"java_separator">(</span><span class=3D"java_plain">stats</spa=
n><span class=3D"java_separator">,</span><span class=3D"java_plain">&nbs=
p;on</span><span class=3D"java_separator">);</span><span class=3D"java_p=
lain">&nbsp;</span><span class=3D"java_operator">//</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_type">Register</span><span=
 class=3D"java_plain">&nbsp;the&nbsp;</span><span class=3D"java_type">MB=
ean</span><span class=3D"java_plain">&nbsp;on&nbsp;the&nbsp;server</span=
></pre><p>You can activate and deactivate the monitoring for a
      <code class=3D"literal">SessionFactory</code>:</p><div class=3D"it=
emizedlist"><ul><li><p>at configuration time, set
          <code class=3D"literal">hibernate.generate_statistics</code> t=
o
          <code class=3D"literal">false</code></p></li></ul></div><div c=
lass=3D"itemizedlist"><ul><li><p>at runtime:
          <code class=3D"literal">sf.getStatistics().setStatisticsEnable=
d(true)</code> or
          <code class=3D"literal">hibernateStatsBean.setStatisticsEnable=
d(true)</code></p></li></ul></div><p>Statistics can be reset programmati=
cally using the
      <code class=3D"literal">clear()</code> method. A summary can be se=
nt to a logger
      (info level) using the <code class=3D"literal">logSummary()</code>=
 method.</p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h3 class=3D"title"><a id=3D"performance-monitoring-m=
etrics"/>21.6.2.=C2=A0Metrics</h3></div></div></div><p>Hibernate provide=
s a number of metrics, from basic information to
      more specialized information that is only relevant in certain scen=
arios.
      All available counters are described in the
      <code class=3D"literal">Statistics</code> interface API, in three =
categories:</p><div class=3D"itemizedlist"><ul><li><p>Metrics related to=
 the general <code class=3D"literal">Session</code>
          usage, such as number of open sessions, retrieved JDBC connect=
ions,
          etc.</p></li><li><p>Metrics related to the entities, collectio=
ns, queries, and
          caches as a whole (aka global metrics).</p></li><li><p>Detaile=
d metrics related to a particular entity, collection,
          query or cache region.</p></li></ul></div><p>For example, you =
can check the cache hit, miss, and put ratio of
      entities, collections and queries, and the average time a query ne=
eds.
      Be aware that the number of milliseconds is subject to approximati=
on in
      Java. Hibernate is tied to the JVM precision and on some platforms=
 this
      might only be accurate to 10 seconds.</p><p>Simple getters are use=
d to access the global metrics (i.e. not
      tied to a particular entity, collection, cache region, etc.). You =
can
      access the metrics of a particular entity, collection or cache reg=
ion
      through its name, and through its HQL or SQL representation for qu=
eries.
      Please refer to the <code class=3D"literal">Statistics</code>,
      <code class=3D"literal">EntityStatistics</code>,
      <code class=3D"literal">CollectionStatistics</code>,
      <code class=3D"literal">SecondLevelCacheStatistics</code>, and
      <code class=3D"literal">QueryStatistics</code> API Javadoc for mor=
e information. The
      following code is a simple example:</p><pre xmlns=3D"" xmlns:rf=3D=
"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"JAVA"><!-- <br/=
> --><span class=3D"java_type">Statistics</span><!-- <br/> --><span clas=
s=3D"java_plain">&nbsp;stats&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_operator">=3D</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</=
span><!-- <br/> --><span class=3D"java_type">HibernateUtil</span><!-- <b=
r/> --><span class=3D"java_separator">.</span><!-- <br/> --><span class=3D=
"java_plain">sessionFactory</span><!-- <br/> --><span class=3D"java_sepa=
rator">.</span><!-- <br/> --><span class=3D"java_plain">getStatistics</s=
pan><!-- <br/> --><span class=3D"java_separator">();</span>
</span>
<!--  --><br/><span class=3D"java_type">double</span><span class=3D"java=
_plain">&nbsp;queryCacheHitCount&nbsp;&nbsp;</span><span class=3D"java_o=
perator">=3D</span><span class=3D"java_plain">&nbsp;stats</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">getQueryCacheH=
itCount</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">double</span><span class=3D"java=
_plain">&nbsp;queryCacheMissCount&nbsp;</span><span class=3D"java_operat=
or">=3D</span><span class=3D"java_plain">&nbsp;stats</span><span class=3D=
"java_separator">.</span><span class=3D"java_plain">getQueryCacheMissCou=
nt</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_type">double</span><span class=3D"java=
_plain">&nbsp;queryCacheHitRatio&nbsp;</span><span class=3D"java_operato=
r">=3D</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;queryCacheHitCount&=
nbsp;</span><span class=3D"java_operator">/</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_separator">(</span><span class=3D"=
java_plain">queryCacheHitCount&nbsp;</span><span class=3D"java_operator"=
>+</span><span class=3D"java_plain">&nbsp;queryCacheMissCount</span><spa=
n class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">log</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">info</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_literal">&quot;Query&nbsp;Hit=
&nbsp;ratio:&quot;</span><span class=3D"java_plain">&nbsp;</span><span c=
lass=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;queryCac=
heHitRatio</span><span class=3D"java_separator">);</span>
</span>
<!--  --><br/><span class=3D"java_type">EntityStatistics</span><span cla=
ss=3D"java_plain">&nbsp;entityStats&nbsp;</span><span class=3D"java_oper=
ator">=3D</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;stats</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_plain">getEntityStat=
istics</span><span class=3D"java_separator">(</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">Cat</span><span class=3D"j=
ava_separator">.</span><span class=3D"java_keyword">class</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">getName</span>=
<span class=3D"java_separator">()</span><span class=3D"java_plain">&nbsp=
;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">long</span><span class=3D"java_p=
lain">&nbsp;changes&nbsp;</span><span class=3D"java_operator">=3D</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;entityStats</span><span class=3D"java_separator">.</spa=
n><span class=3D"java_plain">getInsertCount</span><span class=3D"java_se=
parator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">+</span><span clas=
s=3D"java_plain">&nbsp;entityStats</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">getUpdateCount</span><span class=3D"j=
ava_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_operator">+</span><span clas=
s=3D"java_plain">&nbsp;entityStats</span><span class=3D"java_separator">=
.</span><span class=3D"java_plain">getDeleteCount</span><span class=3D"j=
ava_separator">();</span>
<!--  --><br/><span class=3D"java_plain">log</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">info</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_type">Cat</span><span class=3D=
"java_separator">.</span><span class=3D"java_keyword">class</span><span =
class=3D"java_separator">.</span><span class=3D"java_plain">getName</spa=
n><span class=3D"java_separator">()</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_operator">+</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_literal">&quot;&nbsp;changed&nbsp;&q=
uot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_o=
perator">+</span><span class=3D"java_plain">&nbsp;changes&nbsp;</span><s=
pan class=3D"java_operator">+</span><span class=3D"java_plain">&nbsp;</s=
pan><span class=3D"java_literal">&quot;times&quot;</span><span class=3D"=
java_plain">&nbsp;&nbsp;</span><span class=3D"java_separator">);</span><=
/pre><p>You can work on all entities, collections, queries and region
      caches, by retrieving the list of names of entities, collections,
      queries and region caches using the following methods:
      <code class=3D"literal">getQueries()</code>, <code class=3D"litera=
l">getEntityNames()</code>,
      <code class=3D"literal">getCollectionRoleNames()</code>, and
      <code class=3D"literal">getSecondLevelCacheRegionNames()</code>.</=
p></div></div></div><div class=3D"chapter" lang=3D"en-US"><div class=3D"=
titlepage"><div><div><h2 class=3D"title"><a id=3D"toolsetguide"/>Chapter=
=C2=A022.=C2=A0Toolset Guide</h2></div></div></div><div class=3D"toc"><d=
l><dt><span class=3D"section"><a href=3D"#toolsetguide-s1">22.1. Automat=
ic schema generation</a></span></dt><dd><dl><dt><span class=3D"section">=
<a href=3D"#toolsetguide-s1-2">22.1.1. Customizing the schema</a></span>=
</dt><dt><span class=3D"section"><a href=3D"#toolsetguide-s1-3">22.1.2. =
Running the tool</a></span></dt><dt><span class=3D"section"><a href=3D"#=
toolsetguide-s1-4">22.1.3. Properties</a></span></dt><dt><span class=3D"=
section"><a href=3D"#toolsetguide-s1-5">22.1.4. Using Ant</a></span></dt=
><dt><span class=3D"section"><a href=3D"#toolsetguide-s1-6">22.1.5. Incr=
emental schema updates</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"#toolsetguide-s1-7">22.1.6. Using Ant for incremental schema update=
s</a></span></dt><dt><span class=3D"section"><a href=3D"#toolsetguide-s1=
-8">22.1.7. Schema validation</a></span></dt><dt><span class=3D"section"=
><a href=3D"#toolsetguide-s1-9">22.1.8. Using Ant for schema validation<=
/a></span></dt></dl></dd></dl></div><p>
        Roundtrip engineering with Hibernate is possible using a set of =
Eclipse plugins,
        commandline tools, and Ant tasks.
    </p><p>
        <span class=3D"emphasis"><em>Hibernate Tools</em></span> current=
ly include plugins for the Eclipse
        IDE as well as Ant tasks for reverse engineering of existing dat=
abases:
    </p><div class=3D"itemizedlist"><ul><li><p>
            <span class=3D"emphasis"><em>Mapping Editor:</em></span> an =
editor for Hibernate XML mapping files that
            supports auto-completion and syntax highlighting. It also su=
pports semantic
            auto-completion for class names and property/field names, ma=
king it more versatile than a normal XML editor.
        </p></li><li><p>
            <span class=3D"emphasis"><em>Console:</em></span> the consol=
e is a new view in Eclipse. In addition to
            a tree overview of your console configurations, you are also=
 provided with an interactive view
            of your persistent classes and their relationships. The cons=
ole allows you to
            execute HQL queries against your database and browse the res=
ult directly in
            Eclipse.
        </p></li><li><p>
            <span class=3D"emphasis"><em>Development Wizards:</em></span=
> several wizards are provided with the
            Hibernate Eclipse tools. You can use a wizard to quickly gen=
erate Hibernate configuration
            (cfg.xml) files, or to reverse engineer an existing database=
 schema
            into POJO source files and Hibernate mapping files. The reve=
rse engineering wizard
            supports customizable templates.
        </p></li><li><p>

        </p></li></ul></div><p>
        Please refer to the <span class=3D"emphasis"><em>Hibernate Tools=
</em></span> package documentation
        for more information.
    </p><p>
        However, the Hibernate main package comes bundled with an integr=
ated tool : <span class=3D"emphasis"><em>SchemaExport</em></span> aka
        <code class=3D"literal">hbm2ddl</code>.It can even
        be used from "inside" Hibernate.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"toolsetguide-s1"/>22.1.=C2=A0Autom=
atic schema generation</h2></div></div></div><p>
            DDL can be generated from your mapping files by a Hibernate =
utility. The generated
            schema includes referential integrity constraints, primary a=
nd foreign keys, for
            entity and collection tables. Tables and sequences are also =
created for mapped
            identifier generators.
        </p><p>
            You <span class=3D"emphasis"><em>must</em></span> specify a =
SQL <code class=3D"literal">Dialect</code> via the =

            <code class=3D"literal">hibernate.dialect</code> property wh=
en using this tool, as DDL
            is highly vendor-specific.
        </p><p>
            First, you must customize your mapping files to improve the =
generated schema. The next section covers schema customization.  =

        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"toolsetguide-s1-2"/>22.1.1.=C2=
=A0Customizing the schema</h3></div></div></div><p>
                Many Hibernate mapping elements define optional attribut=
es named <code class=3D"literal">length</code>,
                <code class=3D"literal">precision</code> and <code class=
=3D"literal">scale</code>. You can set the length, precision =

                and scale of a column with this attribute. =

                =

            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;zip&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">length</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;5&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><sp=
an class=3D"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;balance&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">precision</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;12&quot;</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">scale</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;2&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
</pre><p>
                Some tags also accept a <code class=3D"literal">not-null=
</code> attribute for generating a =

                <code class=3D"literal">NOT NULL</code> constraint on ta=
ble columns, and a <code class=3D"literal">unique</code> =

                attribute for generating <code class=3D"literal">UNIQUE<=
/code> constraint on table columns.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;bar&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;barId&quot;</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">not-null</span><span class=3D"xml_tag_s=
ymbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</=
span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plai=
n"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
element</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;serialNumber&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;long&quot;</span><span class=3D"xml_plain">&nbsp;</sp=
an><span class=3D"xml_attribute_name">not-null</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&qu=
ot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">unique</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;true&quot;</span><span class=3D"xml=
_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>
                A <code class=3D"literal">unique-key</code> attribute ca=
n be used to group columns in
                a single, unique key constraint. Currently, the specifie=
d value of the =

                <code class=3D"literal">unique-key</code> attribute is <=
span class=3D"emphasis"><em>not</em></span> used =

                to name the constraint in the generated DDL. It is only =
used to group the columns in =

                the mapping file.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;org&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;orgId&quot;</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">unique-key</span><span class=3D"xml_tag=
_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;OrgEmploye=
eId&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;employeeId&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">unique-=
key</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;OrgEmployee&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
</pre><p>
                An <code class=3D"literal">index</code> attribute specif=
ies the name of an index that
                will be created using the mapped column or columns. Mult=
iple columns can be =

                grouped into the same index by simply specifying the sam=
e index name. =

            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;lastName&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">index</sp=
an><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribut=
e_value">&quot;CustName&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;firstName&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">index</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;CustName&quot;</span><span class=3D"xml_tag_symbols">/&g=
t;</span><span class=3D"xml_plain"></span><br />
</pre><p>
                A <code class=3D"literal">foreign-key</code> attribute c=
an be used to override the name =

                of any generated foreign key constraint.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;bar&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;barId&quot;</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">foreign-key</span><span class=3D"xml_ta=
g_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;FKFooBar&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>
                Many mapping elements also accept a child <code class=3D=
"literal">&lt;column&gt;</code> element. =

                This is particularly useful for mapping multi-column typ=
es:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;name&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;my.customtypes.Name&quot;</span><span class=3D"xml_tag_symbols=
">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;last&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">not-null</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tru=
e&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">index</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;bar_idx&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">length</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;30&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;first&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">index</span><span class=3D"xml_tag_symbols">=3D</span><=
span class=3D"xml_attribute_value">&quot;bar_idx&quot;</span><span class=
=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">length</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;20&quot;</span><span class=3D"xml_tag_symbols">/&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;initial&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
                The <code class=3D"literal">default</code> attribute all=
ows you to specify a default value for
                a column.You should assign the same value to the mapped =
property before
                saving a new instance of the mapped class.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;credits&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;integer&quot;</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">insert</span><span class=3D"xml_tag_sym=
bols">=3D</span><span class=3D"xml_attribute_value">&quot;false&quot;</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;credits&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">default</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;10=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
version</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><sp=
an class=3D"xml_attribute_value">&quot;version&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;integer&quot;</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">insert</span><span class=3D"xml_tag_sym=
bols">=3D</span><span class=3D"xml_attribute_value">&quot;false&quot;</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;version&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">default</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;0&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
                The <code class=3D"literal">sql-type</code> attribute al=
lows the user to override the default =

                mapping of a Hibernate type to SQL datatype.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;balance&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;float&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;balance&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">sql-type</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;de=
cimal(13,3)&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
                The <code class=3D"literal">check</code> attribute allow=
s you to specify a check constraint.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;foo&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">type</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;integer&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;foo&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">check</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;foo&nbs=
p;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_p=
lain">&nbsp;10</span><span class=3D"xml_attribute_value">&quot;/</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&lt;/</span><span class=3D"xml_attribute_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Foo&quot;</span><span class=3D"xml_=
plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><span=
 class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value"=
>&quot;foos&quot;</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">check</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;bar&nbsp;</span><span c=
lass=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">&nbsp;100.=
0</span><span class=3D"xml_attribute_value">&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span class=
=3D"xml_attribute_name">property</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">name</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;bar&quot=
;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">type</span><span class=3D"xml_tag_symbols">=3D</span><span cla=
ss=3D"xml_attribute_value">&quot;float&quot;</span><span class=3D"xml_ta=
g_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><p>The following table summarizes these optional attributes.</p><d=
iv class=3D"table"><a id=3D"schemattributes-summary"/><p class=3D"title"=
><b>Table=C2=A022.1.=C2=A0Summary</b></p><div class=3D"table-contents"><=
table summary=3D"Summary" border=3D"1"><colgroup><col/><col/><col/></col=
group><thead><tr><th>Attribute</th><th>Values</th><th>Interpretation</th=
></tr></thead><tbody><tr><td><code class=3D"literal">length</code></td><=
td>number</td><td>column length</td></tr><tr><td><code class=3D"literal"=
>precision</code></td><td>number</td><td>column decimal precision</td></=
tr><tr><td><code class=3D"literal">scale</code></td><td>number</td><td>c=
olumn decimal scale</td></tr><tr><td><code class=3D"literal">not-null</c=
ode></td><td><code class=3D"literal">true|false</code></td><td>specifies=
 that the column should be non-nullable</td></tr><tr><td><code class=3D"=
literal">unique</code></td><td><code class=3D"literal">true|false</code>=
</td><td>specifies that the column should have a unique constraint</td><=
/tr><tr><td><code class=3D"literal">index</code></td><td><code class=3D"=
literal">index_name</code></td><td>specifies the name of a (multi-column=
) index</td></tr><tr><td><code class=3D"literal">unique-key</code></td><=
td><code class=3D"literal">unique_key_name</code></td><td>specifies the =
name of a multi-column unique constraint</td></tr><tr><td><code class=3D=
"literal">foreign-key</code></td><td><code class=3D"literal">foreign_key=
_name</code></td><td>
                                specifies the name of the foreign key co=
nstraint generated
                                for an association, for a <code class=3D=
"literal">&lt;one-to-one&gt;</code>, =

                                <code class=3D"literal">&lt;many-to-one&=
gt;</code>, <code class=3D"literal">&lt;key&gt;</code>, =

                                or <code class=3D"literal">&lt;many-to-m=
any&gt;</code> mapping element. Note that
                                <code class=3D"literal">inverse=3D"true"=
</code> sides will not be considered
                                by <code class=3D"literal">SchemaExport<=
/code>.
                            </td></tr><tr><td><code class=3D"literal">sq=
l-type</code></td><td><code class=3D"literal">SQL column type</code></td=
><td>
                                overrides the default column type (attri=
bute of =

                                <code class=3D"literal">&lt;column&gt;</=
code> element only)
                            </td></tr><tr><td><code class=3D"literal">de=
fault</code></td><td>SQL expression</td><td>
                                specify a default value for the column
                            </td></tr><tr><td><code class=3D"literal">ch=
eck</code></td><td>SQL expression</td><td>
                                create an SQL check constraint on either=
 column or table
                            </td></tr></tbody></table></div></div><br cl=
ass=3D"table-break"/><p>
                The <code class=3D"literal">&lt;comment&gt;</code> eleme=
nt allows you to specify comments
                for the generated schema.
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;CurCust&quot;</span><span class=3D"xml_tag_symbols">&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">comment</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">Curr=
ent&nbsp;customers&nbsp;only</span><span class=3D"xml_tag_symbols">&lt;/=
</span><span class=3D"xml_tag_name">comment</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
property</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><s=
pan class=3D"xml_attribute_value">&quot;balance&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;bal&quot;</span><span class=3D"xml_tag_symbols">&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">comment</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">Balance&nbsp;in&nbsp;USD</span><span class=3D"xml_ta=
g_symbols">&lt;/</span><span class=3D"xml_tag_name">comment</span><span =
class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">column</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>property</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
</pre><p>
                This results in a <code class=3D"literal">comment on tab=
le</code> or =

                <code class=3D"literal">comment on column</code> stateme=
nt in the generated
                DDL where supported.
            </p></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"toolsetguide-s1-3"/>2=
2.1.2.=C2=A0Running the tool</h3></div></div></div><p>
                The <code class=3D"literal">SchemaExport</code> tool wri=
tes a DDL script to standard out and/or
                executes the DDL statements.
            </p><p>The following table displays the <code class=3D"liter=
al">SchemaExport</code> command line options</p><p>
                <code class=3D"literal">java -cp </code><span class=3D"e=
mphasis"><em>hibernate_classpaths</em></span>
                <code class=3D"literal">org.hibernate.tool.hbm2ddl.Schem=
aExport</code> <span class=3D"emphasis"><em>options mapping_files</em></=
span>
            </p><div class=3D"table"><a id=3D"d0e20247"/><p class=3D"tit=
le"><b>Table=C2=A022.2.=C2=A0<code class=3D"literal">SchemaExport</code>=
 Command Line Options</b></p><div class=3D"table-contents"><table summar=
y=3D"SchemaExport Command Line Options" border=3D"1"><colgroup><col/><co=
l/></colgroup><thead><tr><th>Option</th><th>Description</th></tr></thead=
><tbody><tr><td><code class=3D"literal">--quiet</code></td><td>do not ou=
tput the script to stdout</td></tr><tr><td><code class=3D"literal">--dro=
p</code></td><td>only drop the tables</td></tr><tr><td><code class=3D"li=
teral">--create</code></td><td>only create the tables</td></tr><tr><td><=
code class=3D"literal">--text</code></td><td>do not export to the databa=
se</td></tr><tr><td><code class=3D"literal">--output=3Dmy_schema.ddl</co=
de></td><td>output the ddl script to a file</td></tr><tr><td><code class=
=3D"literal">--naming=3Deg.MyNamingStrategy</code></td><td>select a <cod=
e class=3D"literal">NamingStrategy</code></td></tr><tr><td><code class=3D=
"literal">--config=3Dhibernate.cfg.xml</code></td><td>read Hibernate con=
figuration from an XML file</td></tr><tr><td><code class=3D"literal">--p=
roperties=3Dhibernate.properties</code></td><td>read database properties=
 from a file</td></tr><tr><td><code class=3D"literal">--format</code></t=
d><td>format the generated SQL nicely in the script</td></tr><tr><td><co=
de class=3D"literal">--delimiter=3D;</code></td><td>set an end of line d=
elimiter for the script</td></tr></tbody></table></div></div><br class=3D=
"table-break"/><p>
                You can even embed <code class=3D"literal">SchemaExport<=
/code> in your application:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type=
">Configuration</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cfg=
&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- =
<br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cla=
ss=3D"java_separator">....;</span>
<!--  --><br/><span class=3D"java_keyword">new</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">SchemaExport</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">cfg</span><s=
pan class=3D"java_separator">).</span><span class=3D"java_plain">create<=
/span><span class=3D"java_separator">(</span><span class=3D"java_literal=
">false</span><span class=3D"java_separator">,</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_literal">true</span><span class=
=3D"java_separator">);</span></pre></div><div class=3D"section" lang=3D"=
en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"t=
oolsetguide-s1-4"/>22.1.3.=C2=A0Properties</h3></div></div></div><p>
                Database properties can be specified:
            </p><div class=3D"itemizedlist"><ul compact=3D"compact"><li>=
<p>as system properties with <code class=3D"literal">-D</code><span clas=
s=3D"emphasis"><em>&lt;property&gt;</em></span></p></li><li><p>in <code =
class=3D"literal">hibernate.properties</code></p></li><li><p>in a named =
properties file with <code class=3D"literal">--properties</code></p></li=
></ul></div><p>
                The needed properties are:
            </p><div class=3D"table"><a id=3D"d0e20356"/><p class=3D"tit=
le"><b>Table=C2=A022.3.=C2=A0SchemaExport Connection Properties</b></p><=
div class=3D"table-contents"><table summary=3D"SchemaExport Connection P=
roperties" border=3D"1"><colgroup><col/><col/></colgroup><thead><tr><th>=
Property Name</th><th>Description</th></tr></thead><tbody><tr><td><code =
class=3D"literal">hibernate.connection.driver_class</code></td><td>jdbc =
driver class</td></tr><tr><td><code class=3D"literal">hibernate.connecti=
on.url</code></td><td>jdbc url</td></tr><tr><td><code class=3D"literal">=
hibernate.connection.username</code></td><td>database user</td></tr><tr>=
<td><code class=3D"literal">hibernate.connection.password</code></td><td=
>user password</td></tr><tr><td><code class=3D"literal">hibernate.dialec=
t</code></td><td>dialect</td></tr></tbody></table></div></div><br class=3D=
"table-break"/></div><div class=3D"section" lang=3D"en-US"><div class=3D=
"titlepage"><div><div><h3 class=3D"title"><a id=3D"toolsetguide-s1-5"/>2=
2.1.4.=C2=A0Using Ant</h3></div></div></div><p>
                You can call <code class=3D"literal">SchemaExport</code>=
 from your Ant build script:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
target</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_a=
ttribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;schemaexport&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">taskdef</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;schemaexport&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">classname</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
g.hibernate.tool.hbm2ddl.SchemaExportTask&quot;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">classpathref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;class.path&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">schemaexport</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">properties</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;hibernate.properties&quot;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">quiet</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;no&q=
uot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">text</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;no&qu=
ot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">drop</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;no&qu=
ot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">delimiter</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;;&=
quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">output</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;sch=
ema-export.sql&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">fileset</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">dir</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;src&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">include</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;**=
/*.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">fileset</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">schemaexport</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>target</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"toolsetguide-s1-6"/>22.1.5.=C2=
=A0Incremental schema updates</h3></div></div></div><p>
                The <code class=3D"literal">SchemaUpdate</code> tool wil=
l update an existing schema with "incremental" changes.
                The <code class=3D"literal">SchemaUpdate</code> depends =
upon the JDBC metadata API and, as such, will
                not work with all JDBC drivers.
            </p><p>
                <code class=3D"literal">java -cp </code><span class=3D"e=
mphasis"><em>hibernate_classpaths</em></span>
                <code class=3D"literal">org.hibernate.tool.hbm2ddl.Schem=
aUpdate</code> <span class=3D"emphasis"><em>options mapping_files</em></=
span>
            </p><div class=3D"table"><a id=3D"d0e20433"/><p class=3D"tit=
le"><b>Table=C2=A022.4.=C2=A0<code class=3D"literal">SchemaUpdate</code>=
 Command Line Options</b></p><div class=3D"table-contents"><table summar=
y=3D"SchemaUpdate Command Line Options" border=3D"1"><colgroup><col/><co=
l/></colgroup><thead><tr><th>Option</th><th>Description</th></tr></thead=
><tbody><tr><td><code class=3D"literal">--quiet</code></td><td>do not ou=
tput the script to stdout</td></tr><tr><td><code class=3D"literal">--tex=
t</code></td><td>do not export the script to the database</td></tr><tr><=
td><code class=3D"literal">--naming=3Deg.MyNamingStrategy</code></td><td=
>select a <code class=3D"literal">NamingStrategy</code></td></tr><tr><td=
><code class=3D"literal">--properties=3Dhibernate.properties</code></td>=
<td>read database properties from a file</td></tr><tr><td><code class=3D=
"literal">--config=3Dhibernate.cfg.xml</code></td><td>specify a <code cl=
ass=3D"literal">.cfg.xml</code> file</td></tr></tbody></table></div></di=
v><br class=3D"table-break"/><p>
                You can embed <code class=3D"literal">SchemaUpdate</code=
> in your application:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type=
">Configuration</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cfg=
&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- =
<br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cla=
ss=3D"java_separator">....;</span>
<!--  --><br/><span class=3D"java_keyword">new</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">SchemaUpdate</span><span =
class=3D"java_separator">(</span><span class=3D"java_plain">cfg</span><s=
pan class=3D"java_separator">).</span><span class=3D"java_plain">execute=
</span><span class=3D"java_separator">(</span><span class=3D"java_litera=
l">false</span><span class=3D"java_separator">);</span></pre></div><div =
class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 =
class=3D"title"><a id=3D"toolsetguide-s1-7"/>22.1.6.=C2=A0Using Ant for =
incremental schema updates</h3></div></div></div><p>
                You can call <code class=3D"literal">SchemaUpdate</code>=
 from the Ant script:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
target</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_a=
ttribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;schemaupdate&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">taskdef</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;schemaupdate&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">classname</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
g.hibernate.tool.hbm2ddl.SchemaUpdateTask&quot;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">classpathref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;class.path&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">schemaupdate</s=
pan><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">properties</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;hibernate.properties&quot;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">quiet</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;no&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">fileset</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">dir</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;src&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">include</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;**=
/*.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">fileset</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">schemaupdate</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>target</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"toolsetguide-s1-8"/>22.1.7.=C2=
=A0Schema validation</h3></div></div></div><p>
                The <code class=3D"literal">SchemaValidator</code> tool =
will validate that the existing database schema "matches"
                your mapping documents. The <code class=3D"literal">Sche=
maValidator</code> depends heavily upon the JDBC =

                metadata API and, as such, will not work with all JDBC d=
rivers. This tool is extremely useful for testing.
            </p><p>
                <code class=3D"literal">java -cp </code><span class=3D"e=
mphasis"><em>hibernate_classpaths</em></span>
                <code class=3D"literal">org.hibernate.tool.hbm2ddl.Schem=
aValidator</code> <span class=3D"emphasis"><em>options mapping_files</em=
></span>
            </p><p>The following table displays the <code class=3D"liter=
al">SchemaValidator</code> command line options:
			</p><div class=3D"table"><a id=3D"d0e20529"/><p class=3D"title"><b>Ta=
ble=C2=A022.5.=C2=A0<code class=3D"literal">SchemaValidator</code> Comma=
nd Line Options</b></p><div class=3D"table-contents"><table summary=3D"S=
chemaValidator Command Line Options" border=3D"1"><colgroup><col/><col/>=
</colgroup><thead><tr><th>Option</th><th>Description</th></tr></thead><t=
body><tr><td><code class=3D"literal">--naming=3Deg.MyNamingStrategy</cod=
e></td><td>select a <code class=3D"literal">NamingStrategy</code></td></=
tr><tr><td><code class=3D"literal">--properties=3Dhibernate.properties</=
code></td><td>read database properties from a file</td></tr><tr><td><cod=
e class=3D"literal">--config=3Dhibernate.cfg.xml</code></td><td>specify =
a <code class=3D"literal">.cfg.xml</code> file</td></tr></tbody></table>=
</div></div><br class=3D"table-break"/><p>
                You can embed <code class=3D"literal">SchemaValidator</c=
ode> in your application:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type=
">Configuration</span><!-- <br/> --><span class=3D"java_plain">&nbsp;cfg=
&nbsp;</span><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- =
<br/> --><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span cla=
ss=3D"java_separator">....;</span>
<!--  --><br/><span class=3D"java_keyword">new</span><span class=3D"java=
_plain">&nbsp;</span><span class=3D"java_type">SchemaValidator</span><sp=
an class=3D"java_separator">(</span><span class=3D"java_plain">cfg</span=
><span class=3D"java_separator">).</span><span class=3D"java_plain">vali=
date</span><span class=3D"java_separator">();</span></pre></div><div cla=
ss=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 cla=
ss=3D"title"><a id=3D"toolsetguide-s1-9"/>22.1.8.=C2=A0Using Ant for sch=
ema validation</h3></div></div></div><p>
                You can call <code class=3D"literal">SchemaValidator</co=
de> from the Ant script:
            </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.Xht=
mlRendererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0=
 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
target</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_a=
ttribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><spa=
n class=3D"xml_attribute_value">&quot;schemavalidate&quot;</span><span c=
lass=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">taskdef</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;schemavalidator&quot;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">classname</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
g.hibernate.tool.hbm2ddl.SchemaValidatorTask&quot;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">classpathref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;class.path&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">schemavalidator=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">properties</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;hibernate.properties&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">fileset</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">dir</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;src&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">include</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;**=
/*.hbm.xml&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">fileset</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">schemavalidato=
r</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_pl=
ain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>target</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
</pre></div></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"additionalmodules"=
/>Chapter=C2=A023.=C2=A0Additional modules</h2></div></div></div><div cl=
ass=3D"toc"><dl><dt><span class=3D"section"><a href=3D"#d0e20590">23.1. =
Bean Validation</a></span></dt><dd><dl><dt><span class=3D"section"><a hr=
ef=3D"#d0e20610">23.1.1. Adding Bean Validation</a></span></dt><dt><span=
 class=3D"section"><a href=3D"#d0e20615">23.1.2. Configuration</a></span=
></dt><dt><span class=3D"section"><a href=3D"#d0e20726">23.1.3. Catching=
 violations</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e20=
759">23.1.4. Database schema</a></span></dt></dl></dd><dt><span class=3D=
"section"><a href=3D"#d0e20804">23.2. Hibernate Search</a></span></dt><d=
d><dl><dt><span class=3D"section"><a href=3D"#d0e20807">23.2.1. Descript=
ion</a></span></dt><dt><span class=3D"section"><a href=3D"#d0e20818">23.=
2.2. Integration with Hibernate Annotations</a></span></dt></dl></dd></d=
l></div><p>Hibernate Core also offers integration with some external
  modules/projects. This includes Hibernate Validator the reference
  implementation of Bean Validation (JSR 303) and Hibernate Search. </p>=
<div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div=
><h2 class=3D"title"><a id=3D"d0e20590"/>23.1.=C2=A0Bean Validation</h2>=
</div></div></div><p>Bean Validation standardizes how to define and decl=
are domain model
    level constraints. You can, for example, express that a property sho=
uld
    never be null, that the account balance should be strictly positive,=
 etc.
    These domain model constraints are declared in the bean itself by
    annotating its properties. Bean Validation can then read them and ch=
eck
    for constraint violations. The validation mechanism can be executed =
in
    different layers in your application without having to duplicate any=
 of
    these rules (presentation layer, data access layer). Following the D=
RY
    principle, Bean Validation and its reference implementation Hibernat=
e
    Validator has been designed for that purpose.</p><p>The integration =
between Hibernate and Bean Validation works at two
    levels. First, it is able to check in-memory instances of a class fo=
r
    constraint violations. Second, it can apply the constraints to the
    Hibernate metamodel and incorporate them into the generated database=

    schema.</p><p>Each constraint annotation is associated to a validato=
r
    implementation responsible for checking the constraint on the entity=

    instance. A validator can also (optionally) apply the constraint to =
the
    Hibernate metamodel, allowing Hibernate to generate DDL that express=
es the
    constraint. With the appropriate event listener, you can execute the=

    checking operation on inserts, updates and deletes done by
    Hibernate.</p><p>When checking instances at runtime, Hibernate Valid=
ator returns
    information about constraint violations in a set of
    <code class=3D"classname">ConstraintViolation</code>s. Among other i=
nformation, the
    <code class=3D"classname">ConstraintViolation</code> contains an err=
or description
    message that can embed the parameter values bundle with the annotati=
on
    (eg. size limit), and message strings that may be externalized to a
    <code class=3D"classname">ResourceBundle</code>.</p><div class=3D"se=
ction" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"ti=
tle"><a id=3D"d0e20610"/>23.1.1.=C2=A0Adding Bean Validation</h3></div><=
/div></div><p>To enable Hibernate's Bean Validation integration, simply =
add a
      Bean Validation provider (preferably Hibernate Validation 4) on yo=
ur
      classpath.</p></div><div class=3D"section" lang=3D"en-US"><div cla=
ss=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"d0e20615"/>23.1.=
2.=C2=A0Configuration</h3></div></div></div><p>By default, no configurat=
ion is necessary.</p><p>The <code class=3D"classname">Default</code> gro=
up is validated on entity
      insert and update and the database model is updated accordingly ba=
sed on
      the <code class=3D"classname">Default</code> group as well.</p><p>=
You can customize the Bean Validation integration by setting the
      validation mode. Use the
      <code class=3D"literal">javax.persistence.validation.mode</code> p=
roperty and set it
      up for example in your <code class=3D"filename">persistence.xml</c=
ode> file or your
      <code class=3D"filename">hibernate.cfg.xml</code> file. Several op=
tions are
      possible:</p><div class=3D"itemizedlist"><ul><li><p><code class=3D=
"literal">auto</code> (default): enable integration between
          Bean Validation and Hibernate (callback and ddl generation) on=
ly if
          Bean Validation is present in the classpath.</p></li><li><p><c=
ode class=3D"literal">none</code>: disable all integration between Bean
          Validation and Hibernate</p></li><li><p><code class=3D"literal=
">callback</code>: only validate entities when they
          are either inserted, updated or deleted. An exception is raise=
d if
          no Bean Validation provider is present in the classpath.</p></=
li><li><p><code class=3D"literal">ddl</code>: only apply constraints to =
the database
          schema when generated by Hibernate. An exception is raised if =
no
          Bean Validation provider is present in the classpath. This val=
ue is
          not defined by the Java Persistence spec and is specific to
          Hibernate.</p></li></ul></div><div xmlns:rf=3D"java:org.jboss.=
highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>You can u=
se both <code class=3D"literal">callback</code> and
        <code class=3D"literal">ddl</code> together by setting the prope=
rty to
        <code class=3D"literal">callback, dll</code></p><pre xmlns=3D"" =
class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight=
.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
persistence</span><span class=3D"xml_plain">&nbsp;...</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;</span><span class=3D"xml_tag_symb=
ols">&lt;</span><span class=3D"xml_tag_name">persistence-unit</span><spa=
n class=3D"xml_plain">&nbsp;...</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">properties</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">pro=
perty</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;javax.persistence.validation.mode&q=
uot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">value</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;callback,&nbsp;ddl&quot;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">properties</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;</span><span class=3D"xml_tag_symb=
ols">&lt;/</span><span class=3D"xml_tag_name">persistence-unit</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>persistence</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
</pre><p>This is equivalent to <code class=3D"literal">auto</code> excep=
t that if no
        Bean Validation provider is present, an exception is raised.</p>=
</div><p>If you want to validate different groups during insertion, upda=
te
      and deletion, use:</p><div class=3D"itemizedlist"><ul><li><p><code=
 class=3D"literal">javax.persistence.validation.group.pre-persist</code>=
:
          groups validated when an entity is about to be persisted (defa=
ult to
          <code class=3D"classname">Default</code>)</p></li><li><p><code=
 class=3D"literal">javax.persistence.validation.group.pre-update</code>:=

          groups validated when an entity is about to be updated (defaul=
t to
          <code class=3D"classname">Default</code>)</p></li><li><p><code=
 class=3D"literal">javax.persistence.validation.group.pre-remove</code>:=

          groups validated when an entity is about to be deleted (defaul=
t to
          no group)</p></li><li><p><code class=3D"literal">org.hibernate=
.validator.group.ddl</code>: groups
          considered when applying constraints on the database schema (d=
efault
          to <code class=3D"classname">Default</code>)</p></li></ul></di=
v><p>Each property accepts the fully qualified class names of the
      groups validated separated by a comma (,)</p><div class=3D"example=
"><a id=3D"d0e20712"/><p class=3D"title"><b>Example=C2=A023.1.=C2=A0Usin=
g custom groups for validation</b></p><div class=3D"example-contents"><p=
re xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory"=
 class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighligh=
t.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
persistence</span><span class=3D"xml_plain">&nbsp;...</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;</span><span class=3D"xml_tag_symb=
ols">&lt;</span><span class=3D"xml_tag_name">persistence-unit</span><spa=
n class=3D"xml_plain">&nbsp;...</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">properties</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">pro=
perty</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;javax.persistence.validation.group.=
pre-update&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">value</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;javax.validation.group.Defau=
lt,&nbsp;com.acme.group.Strict&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">pro=
perty</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;javax.persistence.validation.group.=
pre-remove&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">value</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;com.acme.group.OnDelete&quot=
;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_p=
lain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">pro=
perty</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;org.hibernate.validator.group.ddl&q=
uot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">value</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;com.acme.group.DDL&quot;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">properties</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;</span><span class=3D"xml_tag_symb=
ols">&lt;/</span><span class=3D"xml_tag_name">persistence-unit</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>persistence</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
</pre></div></div><br class=3D"example-break"/><div xmlns:rf=3D"java:org=
.jboss.highlight.XhtmlRendererFactory" class=3D"note"><h2>Note</h2><p>Yo=
u can set these properties in
        <code class=3D"filename">hibernate.cfg.xml</code>,
        <code class=3D"filename">hibernate.properties</code> or programm=
atically.</p></div></div><div class=3D"section" lang=3D"en-US"><div clas=
s=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"d0e20726"/>23.1.3=
.=C2=A0Catching violations</h3></div></div></div><p>If an entity is foun=
d to be invalid, the list of constraint
      violations is propagated by the
      <code class=3D"classname">ConstraintViolationException</code> whic=
h exposes the
      set of <code class=3D"classname">ConstraintViolation</code>s.</p><=
p>This exception is wrapped in a
      <code class=3D"classname">RollbackException</code> when the violat=
ion happens at
      commit time. Otherwise the
      <code class=3D"classname">ConstraintViolationException</code> is r=
eturned (for
      example when calling <code class=3D"methodname">flush()</code>. No=
te that
      generally, catchable violations are validated at a higher level (f=
or
      example in Seam / JSF 2 via the JSF - Bean Validation integration =
or in
      your business layer by explicitly calling Bean Validation).</p><p>=
An application code will rarely be looking for a
      <code class=3D"classname">ConstraintViolationException</code> rais=
ed by Hibernate.
      This exception should be treated as fatal and the persistence cont=
ext
      should be discarded (<code class=3D"classname">EntityManager</code=
> or
      <code class=3D"classname">Session</code>).</p></div><div class=3D"=
section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"=
title"><a id=3D"d0e20759"/>23.1.4.=C2=A0Database schema</h3></div></div>=
</div><p>Hibernate uses Bean Validation constraints to generate an accur=
ate
      database schema:</p><div class=3D"itemizedlist"><ul><li><p><code c=
lass=3D"classname">@NotNull</code> leads to a not null column
          (unless it conflicts with components or table inheritance)</p>=
</li><li><p><code class=3D"classname">@Size.max</code> leads to a
          <code class=3D"literal">varchar(max)</code> definition for Str=
ings</p></li><li><p><code class=3D"classname">@Min</code>, <code class=3D=
"classname">@Max</code> lead
          to column checks (like <code class=3D"code">value &lt;=3D max<=
/code>)</p></li><li><p><code class=3D"classname">@Digits</code> leads to=
 the definition of
          precision and scale (ever wondered which is which? It's easy n=
ow
          with <code class=3D"classname">@Digits</code> :) )</p></li></u=
l></div><p>These constraints can be declared directly on the entity
      properties or indirectly by using constraint composition.</p><p>Fo=
r more information check the Hibernate Validator <a class=3D"ulink" href=
=3D"http://docs.jboss.org/hibernate/stable/validator/reference/en-US/htm=
l/">reference
      documentation</a>.</p></div></div><div class=3D"section" lang=3D"e=
n-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"d0=
e20804"/>23.2.=C2=A0Hibernate Search</h2></div></div></div><div class=3D=
"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h3 class=3D=
"title"><a id=3D"d0e20807"/>23.2.1.=C2=A0Description</h3></div></div></d=
iv><p>Full text search engines like <span class=3D"productname">Apache
      Lucene</span>=E2=84=A2 are a very powerful technology to bring fre=
e
      text/efficient queries to applications. If suffers several mismatc=
hes
      when dealing with a object domain model (keeping the index up to d=
ate,
      mismatch between the index structure and the domain model, queryin=
g
      mismatch...) Hibernate Search indexes your domain model thanks to =
a few
      annotations, takes care of the database / index synchronization an=
d
      brings you back regular managed objects from free text queries.
      Hibernate Search is using <a class=3D"ulink" href=3D"http://lucene=
.apache.org">Apache
      Lucene</a> under the cover.</p></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h3 class=3D"title"><a id=3D"=
d0e20818"/>23.2.2.=C2=A0Integration with Hibernate Annotations</h3></div=
></div></div><p>Hibernate Search integrates with Hibernate Core transpar=
ently
      provided that the Hibernate Search jar is present on the classpath=
. If
      you do not wish to automatically register Hibernate Search event
      listeners, you can set
      <code class=3D"literal">hibernate.search.autoregister_listeners</c=
ode> to false.
      Such a need is very uncommon and not recommended.</p><p>Check the =
Hibernate Search <a class=3D"ulink" href=3D"http://docs.jboss.org/hibern=
ate/stable/search/reference/en-US/html/">reference
      documentation</a> for more information.</p></div></div></div><div =
class=3D"chapter" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 =
class=3D"title"><a id=3D"example-parentchild"/>Chapter=C2=A024.=C2=A0Exa=
mple: Parent/Child</h2></div></div></div><div class=3D"toc"><dl><dt><spa=
n class=3D"section"><a href=3D"#example-parentchild-collections">24.1. A=
 note about collections</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"#example-parentchild-bidir">24.2. Bidirectional one-to-many</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"#example-parentchild-cas=
cades">24.3. Cascading life cycle</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#example-parentchild-update">24.4. Cascades and unsaved-=
value</a></span></dt><dt><span class=3D"section"><a href=3D"#example-par=
entchild-conclusion">24.5. Conclusion</a></span></dt></dl></div><p>
        One of the first things that new users want to do with Hibernate=
 is to model a parent/child type =

        relationship. There are two different approaches to this. The mo=
st convenient =

        approach, especially for new users, is to model both <code class=
=3D"literal">Parent</code> and <code class=3D"literal">Child</code> =

        as entity classes with a <code class=3D"literal">&lt;one-to-many=
&gt;</code> association from <code class=3D"literal">Parent</code> =

        to <code class=3D"literal">Child</code>. The alternative approac=
h is to declare the <code class=3D"literal">Child</code> as a =

        <code class=3D"literal">&lt;composite-element&gt;</code>. The de=
fault semantics of a one-to-many =

        association in Hibernate are much less close to the usual semant=
ics of a parent/child relationship than =

        those of a composite element mapping. We will explain how to use=
 a <span class=3D"emphasis"><em>bidirectional one-to-many =

        association with cascades</em></span> to model a parent/child re=
lationship efficiently and elegantly. =

        =

    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"example-parentchild-collections"/>=
24.1.=C2=A0A note about collections</h2></div></div></div><p>
            Hibernate collections are considered to be a logical part of=
 their owning entity and not of the
            contained entities. Be aware that this is a critical distinc=
tion that has the following consequences:
        </p><div class=3D"itemizedlist"><ul><li><p>
                When you remove/add an object from/to a collection, the =
version number of the collection owner
                is incremented.
            </p></li><li><p>
                If an object that was removed from a collection is an in=
stance of a value type (e.g. a composite
                element), that object will cease to be persistent and it=
s state will be completely removed from
                the database. Likewise, adding a value type instance to =
the collection will cause its state to be
                immediately persistent.
            </p></li><li><p>
                Conversely, if an entity is removed from a collection (a=
 one-to-many or many-to-many
                association), it will not be deleted by default. This be=
havior is completely consistent; a
                change to the internal state of another entity should no=
t cause the associated entity to vanish.
                Likewise, adding an entity to a collection does not caus=
e that entity to become persistent, by
                default.
            </p></li></ul></div><p>
            Adding an entity to a collection, by default, merely creates=
 a link between
            the two entities. Removing the entity will remove the link. =
This is appropriate for all sorts of cases.
            However, it is not appropriate in the case of a parent/child=
 relationship. In this case, the life of the
            child is bound to the life cycle of the parent.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"example-parentchild-bidi=
r"/>24.2.=C2=A0Bidirectional one-to-many</h2></div></div></div><p>
            Suppose we start with a simple <code class=3D"literal">&lt;o=
ne-to-many&gt;</code> association from
            <code class=3D"literal">Parent</code> to <code class=3D"lite=
ral">Child</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;children&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;parent_id&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
            If we were to execute the following code:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Pa=
rent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span>=
<!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_se=
parator">.....;</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chil=
d</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">getChildren</span><span class=
=3D"java_separator">().</span><span class=3D"java_plain">add</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">c</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">save</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">c</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
            Hibernate would issue two SQL statements:
        </p><div class=3D"itemizedlist"><ul><li><p>an <code class=3D"lit=
eral">INSERT</code> to create the record for <code class=3D"literal">c</=
code></p></li><li><p>
                an <code class=3D"literal">UPDATE</code> to create the l=
ink from <code class=3D"literal">p</code> to
                <code class=3D"literal">c</code>
            </p></li></ul></div><p>
            This is not only inefficient, but also violates any <code cl=
ass=3D"literal">NOT NULL</code> constraint on the
            <code class=3D"literal">parent_id</code> column. You can fix=
 the nullability constraint violation by specifying
            <code class=3D"literal">not-null=3D"true"</code> in the coll=
ection mapping:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;children&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;parent_id&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">not-null</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
        	However, this is not the recommended solution.
       	</p><p>
            The underlying cause of this behavior is that the link (the =
foreign key <code class=3D"literal">parent_id</code>) =

            from <code class=3D"literal">p</code> to <code class=3D"lite=
ral">c</code> is not considered part of the state of the =

            <code class=3D"literal">Child</code> object and is therefore=
 not created in the <code class=3D"literal">INSERT</code>. The =

            solution is to make the link part of the <code class=3D"lite=
ral">Child</code> mapping.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;parent&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</=
span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attrib=
ute_value">&quot;parent_id&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">not-null</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;true=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
</pre><p>
            You also need to add the <code class=3D"literal">parent</cod=
e> property to the <code class=3D"literal">Child</code> class.
        </p><p>
            Now that the <code class=3D"literal">Child</code> entity is =
managing the state of the link, we tell the collection =

            not to update the link. We use the <code class=3D"literal">i=
nverse</code> attribute to do this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;children&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;parent_id&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
            The following code would be used to add a new <code class=3D=
"literal">Child</code>:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Pa=
rent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span>=
<!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_se=
parator">(</span><!-- <br/> --><span class=3D"java_type">Parent</span><!=
-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"jav=
a_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</span=
><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><spa=
n class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_sep=
arator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span><=
!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;pid</span><!-- <br/> --><span class=3D"java_s=
eparator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chil=
d</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">c</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setParent</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">p</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">getChildren</span><span class=
=3D"java_separator">().</span><span class=3D"java_plain">add</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">c</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">save</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">c</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
            Only one SQL <code class=3D"literal">INSERT</code> would now=
 be issued.
        </p><p>
            You could also create an <code class=3D"literal">addChild()<=
/code> method of
            <code class=3D"literal">Parent</code>.
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>public</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_type">void</span><!-- <br/> --><span class=
=3D"java_plain">&nbsp;addChild</span><!-- <br/> --><span class=3D"java_s=
eparator">(</span><!-- <br/> --><span class=3D"java_type">Child</span><!=
-- <br/> --><span class=3D"java_plain">&nbsp;c</span><!-- <br/> --><span=
 class=3D"java_separator">)</span><!-- <br/> --><span class=3D"java_plai=
n">&nbsp;</span><!-- <br/> --><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;c</span=
><span class=3D"java_separator">.</span><span class=3D"java_plain">setPa=
rent</span><span class=3D"java_separator">(</span><span class=3D"java_ke=
yword">this</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;childre=
n</span><span class=3D"java_separator">.</span><span class=3D"java_plain=
">add</span><span class=3D"java_separator">(</span><span class=3D"java_p=
lain">c</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><p>
            The code to add a <code class=3D"literal">Child</code> looks=
 like this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">Pa=
rent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span>=
<!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><spa=
n class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_se=
parator">(</span><!-- <br/> --><span class=3D"java_type">Parent</span><!=
-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span c=
lass=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"jav=
a_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</span=
><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><spa=
n class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_sep=
arator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span><=
!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;pid</span><!-- <br/> --><span class=3D"java_s=
eparator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chil=
d</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">addChild</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">c</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">save</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">c</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
example-parentchild-cascades"/>24.3.=C2=A0Cascading life cycle</h2></div=
></div></div><p>
             You can address the frustrations of the explicit call to <c=
ode class=3D"literal">save()</code> by
             using cascades.
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (h=
ttp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;children&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;true&quot;</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">cascade</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;all&quot;</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;parent_id&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
             This simplifies the code above to:
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">P=
arent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_s=
eparator">(</span><!-- <br/> --><span class=3D"java_type">Parent</span><=
!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</spa=
n><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><sp=
an class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;pid</span><!-- <br/> --><span class=3D"java_=
separator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">new</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Chil=
d</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">addChild</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">c</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
             Similarly, we do not need to iterate over the children when=
 saving or deleting a <code class=3D"literal">Parent</code>.
             The following removes <code class=3D"literal">p</code> and =
all its children from the database.
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">P=
arent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_s=
eparator">(</span><!-- <br/> --><span class=3D"java_type">Parent</span><=
!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</spa=
n><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><sp=
an class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;pid</span><!-- <br/> --><span class=3D"java_=
separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">delete</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">p</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
             However, the following code:
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">P=
arent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_s=
eparator">(</span><!-- <br/> --><span class=3D"java_type">Parent</span><=
!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</spa=
n><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><sp=
an class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;pid</span><!-- <br/> --><span class=3D"java_=
separator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_type">Child</span><span class=3D"java_separator">)=
</span><span class=3D"java_plain">&nbsp;p</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">getChildren</span><span class=3D=
"java_separator">().</span><span class=3D"java_plain">iterator</span><sp=
an class=3D"java_separator">().</span><span class=3D"java_plain">next</s=
pan><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">getChildren</span><span class=
=3D"java_separator">().</span><span class=3D"java_plain">remove</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_plain">c</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">c</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setParent</span><span class=3D=
"java_separator">(</span><span class=3D"java_literal">null</span><span c=
lass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
             will not remove <code class=3D"literal">c</code> from the d=
atabase. In this case, it will only remove the link to <code class=3D"li=
teral">p</code>
             and cause a <code class=3D"literal">NOT NULL</code> constra=
int violation. You need to explicitly
             <code class=3D"literal">delete()</code> the <code class=3D"=
literal">Child</code>.
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_type">P=
arent</span><!-- <br/> --><span class=3D"java_plain">&nbsp;p&nbsp;</span=
><!-- <br/> --><span class=3D"java_operator">=3D</span><!-- <br/> --><sp=
an class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"java_s=
eparator">(</span><!-- <br/> --><span class=3D"java_type">Parent</span><=
!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --><span =
class=3D"java_plain">&nbsp;session</span><!-- <br/> --><span class=3D"ja=
va_separator">.</span><!-- <br/> --><span class=3D"java_plain">load</spa=
n><!-- <br/> --><span class=3D"java_separator">(</span><!-- <br/> --><sp=
an class=3D"java_type">Parent</span><!-- <br/> --><span class=3D"java_se=
parator">.</span><!-- <br/> --><span class=3D"java_keyword">class</span>=
<!-- <br/> --><span class=3D"java_separator">,</span><!-- <br/> --><span=
 class=3D"java_plain">&nbsp;pid</span><!-- <br/> --><span class=3D"java_=
separator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;c&nbsp;</span><span class=3D"java_operator">=3D</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</spa=
n><span class=3D"java_type">Child</span><span class=3D"java_separator">)=
</span><span class=3D"java_plain">&nbsp;p</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">getChildren</span><span class=3D=
"java_separator">().</span><span class=3D"java_plain">iterator</span><sp=
an class=3D"java_separator">().</span><span class=3D"java_plain">next</s=
pan><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">p</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">getChildren</span><span class=
=3D"java_separator">().</span><span class=3D"java_plain">remove</span><s=
pan class=3D"java_separator">(</span><span class=3D"java_plain">c</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">delete</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">c</span><span cl=
ass=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
             In our case, a <code class=3D"literal">Child</code> cannot =
exist without its parent. So if we remove
             a <code class=3D"literal">Child</code> from the collection,=
 we do want it to be deleted. To do this, we must
             use <code class=3D"literal">cascade=3D"all-delete-orphan"</=
code>.
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (h=
ttp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attr=
ibute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span c=
lass=3D"xml_attribute_value">&quot;children&quot;</span><span class=3D"x=
ml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse</span>=
<span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_v=
alue">&quot;true&quot;</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">cascade</span><span class=3D"xml_tag_symb=
ols">=3D</span><span class=3D"xml_attribute_value">&quot;all-delete-orph=
an&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">key</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">col=
umn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;parent_id&quot;</span><span class=3D"xml_tag_symbo=
ls">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-many</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Child&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>set</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
</pre><p>
             Even though the collection mapping specifies <code class=3D=
"literal">inverse=3D"true"</code>, cascades are =

             still processed by iterating the collection elements. If yo=
u need an object be saved, =

             deleted or updated by cascade, you must add it to the colle=
ction. It is not enough to simply call
             <code class=3D"literal">setParent()</code>.
         </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"t=
itlepage"><div><div><h2 class=3D"title"><a id=3D"example-parentchild-upd=
ate"/>24.4.=C2=A0Cascades and <code class=3D"literal">unsaved-value</cod=
e></h2></div></div></div><p>
             Suppose we loaded up a <code class=3D"literal">Parent</code=
> in one <code class=3D"literal">Session</code>, made some changes =

             in a UI action and wanted to persist these changes in a new=
 session by calling <code class=3D"literal">update()</code>. =

             The <code class=3D"literal">Parent</code> will contain a co=
llection of children and, since the cascading update is enabled, =

             Hibernate needs to know which children are newly instantiat=
ed and which represent existing rows in the =

             database. We will also assume that both <code class=3D"lite=
ral">Parent</code> and <code class=3D"literal">Child</code> have generat=
ed
             identifier properties of type <code class=3D"literal">Long<=
/code>. Hibernate will use the identifier and =

             version/timestamp property value to determine which of the =
children are new. (See
             <a class=3D"xref" href=3D"#objectstate-saveorupdate" title=3D=
"11.7.=C2=A0Automatic state detection">Section=C2=A011.7, =E2=80=9CAutom=
atic state detection=E2=80=9D</a>.) <span class=3D"emphasis"><em>In Hibe=
rnate3, it is no longer necessary to specify
             an <code class=3D"literal">unsaved-value</code> explicitly.=
</em></span>
         </p><p>
             The following code will update <code class=3D"literal">pare=
nt</code> and <code class=3D"literal">child</code> and insert =

             <code class=3D"literal">newChild</code>:
         </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlR=
endererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_operato=
r">//</span><!-- <br/> --><span class=3D"java_plain">parent&nbsp;and&nbs=
p;child&nbsp;were&nbsp;both&nbsp;loaded&nbsp;in&nbsp;a&nbsp;previous&nbs=
p;session</span>
<!--  --><br/><span class=3D"java_plain">parent</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addChild</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">child</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_type">Child</span><span class=3D"java_=
plain">&nbsp;newChild&nbsp;</span><span class=3D"java_operator">=3D</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">n=
ew</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_typ=
e">Child</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">parent</span><span class=3D"jav=
a_separator">.</span><span class=3D"java_plain">addChild</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">newChild</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">update</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">parent</span><sp=
an class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">flush</span><span class=
=3D"java_separator">();</span></pre><p>
             This may be suitable for the case of a generated identifier=
, but what about assigned identifiers
             and composite identifiers? This is more difficult, since Hi=
bernate cannot use the identifier property to
             distinguish between a newly instantiated object, with an id=
entifier assigned by the user, and an =

             object loaded in a previous session. In this case, Hibernat=
e will either use the timestamp or version =

             property, or will actually query the second-level cache or,=
 worst case, the database, to see if the =

             row exists.
         </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"t=
itlepage"><div><div><h2 class=3D"title"><a id=3D"example-parentchild-con=
clusion"/>24.5.=C2=A0Conclusion</h2></div></div></div><p>
             The sections we have just covered can be a bit confusing. H=
owever, in practice, =

             it all works out nicely. Most Hibernate applications use th=
e parent/child pattern in many places.
         </p><p>
             We mentioned an alternative in the first paragraph. None of=
 the above issues exist in the case of
             <code class=3D"literal">&lt;composite-element&gt;</code> ma=
ppings, which have exactly the semantics of a parent/child
             relationship. Unfortunately, there are two big limitations =
with composite element classes: composite elements =

             cannot own collections and they should not be the child of =
any entity other than the unique parent.
         </p></div></div><div class=3D"chapter" lang=3D"en-US"><div clas=
s=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"example-weblog"/>=
Chapter=C2=A025.=C2=A0Example: Weblog Application</h2></div></div></div>=
<div class=3D"toc"><dl><dt><span class=3D"section"><a href=3D"#example-w=
eblog-classes">25.1. Persistent Classes</a></span></dt><dt><span class=3D=
"section"><a href=3D"#example-weblog-mappings">25.2. Hibernate Mappings<=
/a></span></dt><dt><span class=3D"section"><a href=3D"#example-weblog-co=
de">25.3. Hibernate Code</a></span></dt></dl></div><div class=3D"section=
" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title">=
<a id=3D"example-weblog-classes"/>25.1.=C2=A0Persistent Classes</h2></di=
v></div></div><p>
            The persistent classes here represent a weblog and an item p=
osted
            in a weblog. They are to be modelled as a standard parent/ch=
ild
            relationship, but we will use an ordered bag, instead of a s=
et:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;eg</span><=
!-- <br/> --><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">List</span><span class=3D"java_separator">;</s=
pan>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">Blog</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Long</span><span class=3D"java_plai=
n">&nbsp;_id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;_name</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">List</span><span class=3D"java_plai=
n">&nbsp;_items</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_id</span><span class=3D"java_separator">;</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">List</span><span class=3D"java_plain=
">&nbsp;getItems</span><span class=3D"java_separator">()</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_items</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getName</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_name</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Long</span><span class=3D"java_plain">&nbsp;long1</span><spa=
n class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_id&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;long1</span><span class=3D"java_separa=
tor">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setItems</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">List</span><span class=3D"java_plain">&nbsp;list</span><=
span class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;<=
/span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_items&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;list</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setName</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;string</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_name&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;string</span><span class=3D"java_sep=
arator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"J=
AVA"><!-- <br/> --><span class=3D"java_keyword">package</span><!-- <br/>=
 --><span class=3D"java_plain">&nbsp;eg</span><!-- <br/> --><span class=3D=
"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">text</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">DateFormat</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Calendar</span><span class=3D"java_separator">=
;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">BlogItem</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Long</span><span class=3D"java_plai=
n">&nbsp;_id</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Calendar</span><span class=3D"java_=
plain">&nbsp;_datetime</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;_text</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">String</span><span class=3D"java_pl=
ain">&nbsp;_title</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">Blog</span><span class=3D"java_plai=
n">&nbsp;_blog</span><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Blog</span><span class=3D"java_plain=
">&nbsp;getBlog</span><span class=3D"java_separator">()</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_blog</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Calendar</span><span class=3D"java_p=
lain">&nbsp;getDatetime</span><span class=3D"java_separator">()</span><s=
pan class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_datetime</span><span class=3D"java_separator=
">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Long</span><span class=3D"java_plain=
">&nbsp;getId</span><span class=3D"java_separator">()</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_id</span><span class=3D"java_separator">;</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getText</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_text</span><span class=3D"java_separator">;<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">String</span><span class=3D"java_pla=
in">&nbsp;getTitle</span><span class=3D"java_separator">()</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;_title</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setBlog</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">Blog</span><span class=3D"java_plain">&nbsp;blog</span><s=
pan class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_blog&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;blog</span><span class=3D"java_separ=
ator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setDatetime</span><span class=3D"java_separator">(</span><span c=
lass=3D"java_type">Calendar</span><span class=3D"java_plain">&nbsp;calen=
dar</span><span class=3D"java_separator">)</span><span class=3D"java_pla=
in">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_datetime&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;calendar</span><span class=3D"ja=
va_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setId</span><span class=3D"java_separator">(</span><span class=3D=
"java_type">Long</span><span class=3D"java_plain">&nbsp;long1</span><spa=
n class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_id&nbsp;</span><span class=3D"java_operator">=3D</span=
><span class=3D"java_plain">&nbsp;long1</span><span class=3D"java_separa=
tor">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setText</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">String</span><span class=3D"java_plain">&nbsp;string</spa=
n><span class=3D"java_separator">)</span><span class=3D"java_plain">&nbs=
p;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_text&nbsp;</span><span class=3D"java_operator">=3D</sp=
an><span class=3D"java_plain">&nbsp;string</span><span class=3D"java_sep=
arator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;setTitle</span><span class=3D"java_separator">(</span><span clas=
s=3D"java_type">String</span><span class=3D"java_plain">&nbsp;string</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_title&nbsp;</span><span class=3D"java_operator">=3D</s=
pan><span class=3D"java_plain">&nbsp;string</span><span class=3D"java_se=
parator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div><div cl=
ass=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div><div><h2 cl=
ass=3D"title"><a id=3D"example-weblog-mappings"/>25.2.=C2=A0Hibernate Ma=
ppings</h2></div></div></div><p>
            The XML mappings are now straightforward. For example:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-mappin=
g</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_value">&quot;-//Hibernate/Hibernate&nbsp;Mapping&nbsp;DTD&=
nbsp;3.0//EN&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_value">&quot;http://www.hibernate.org/dtd/hibernate-mappin=
g-3.0.dtd&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;eg&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">name</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;Blog&=
quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;BLOG=
S&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;BLOG_ID&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;name&quot;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;NAME&quot;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">uniq=
ue</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&=
gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">bag</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;items&quot;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inve=
rse</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">orde=
r-by</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;DATE_TIME&quot;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">casc=
ade</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;all&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;BL=
OG_ID&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;BlogItem&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">bag</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRenderer=
Factory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://j=
highlight.dev.java.net) -->
<span class=3D"xml_processing_instruction">&lt;?xml&nbsp;version=3D&quot=
;1.0&quot;?&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_plain">!</=
span><span class=3D"xml_attribute_name">DOCTYPE</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">hibernate-mappin=
g</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attrib=
ute_name">PUBLIC</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_value">&quot;-//Hibernate/Hibernate&nbsp;Mapping&nbsp;DTD&=
nbsp;3.0//EN&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_value">&quot;http://www.hibernate.org/dtd/hibernate-mappin=
g-3.0.dtd&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">package</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;eg&quot;</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">name</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;BlogI=
tem&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;BLOG=
_ITEMS&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">dynamic-update</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;BLOG_ITEM_ID&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;title&quot;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;TITLE&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;text&quot;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;TEXT&quot;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;datetime&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;DATE_TIME&quot;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;blog&quot;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;BLOG_ID&quot;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"example-weblog-code"/>25.3.=C2=
=A0Hibernate Code</h2></div></div></div><p>
            The following class demonstrates some of the kinds of things=

            we can do with these classes using Hibernate:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>package</span><!-- <br/> --><span class=3D"java_plain">&nbsp;eg</span><=
!-- <br/> --><span class=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">ArrayList</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Calendar</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">Iterator</span><span class=3D"java_separator">=
;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;java</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">util</span><span class=3D"java_separator">.</span>=
<span class=3D"java_type">List</span><span class=3D"java_separator">;</s=
pan>
</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">HibernateException</span><span class=3D"ja=
va_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">Query</span><span class=3D"java_separator"=
>;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">Session</span><span class=3D"java_separato=
r">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">SessionFactory</span><span class=3D"java_s=
eparator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_type">Transaction</span><span class=3D"java_sepa=
rator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">cfg</span><span class=3D"java_separator">=
.</span><span class=3D"java_type">Configuration</span><span class=3D"jav=
a_separator">;</span>
<!--  --><br/><span class=3D"java_keyword">import</span><span class=3D"j=
ava_plain">&nbsp;org</span><span class=3D"java_separator">.</span><span =
class=3D"java_plain">hibernate</span><span class=3D"java_separator">.</s=
pan><span class=3D"java_plain">tool</span><span class=3D"java_separator"=
>.</span><span class=3D"java_plain">hbm2ddl</span><span class=3D"java_se=
parator">.</span><span class=3D"java_type">SchemaExport</span><span clas=
s=3D"java_separator">;</span>
</span>
<!--  --><br/><span class=3D"java_keyword">public</span><span class=3D"j=
ava_plain">&nbsp;</span><span class=3D"java_keyword">class</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_type">BlogMain</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator"=
>{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">private</span><span class=3D"java_plain">&n=
bsp;</span><span class=3D"java_type">SessionFactory</span><span class=3D=
"java_plain">&nbsp;_sessions</span><span class=3D"java_separator">;</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;configure</span><span class=3D"java_separator">()</span><span cl=
ass=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">throws</spa=
n><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">Hibe=
rnateException</span><span class=3D"java_plain">&nbsp;</span><span class=
=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;_sessions&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywo=
rd">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Configuration</span><span class=3D"java_separator">()</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">addClass</span><span class=3D"=
java_separator">(</span><span class=3D"java_type">Blog</span><span class=
=3D"java_separator">.</span><span class=3D"java_keyword">class</span><sp=
an class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">addClass</span><span class=3D"=
java_separator">(</span><span class=3D"java_type">BlogItem</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">buildSessionFactory</span><spa=
n class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;exportTables</span><span class=3D"java_separator">()</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword">throws</=
span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type">H=
ibernateException</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Configuration</span><s=
pan class=3D"java_plain">&nbsp;cfg&nbsp;</span><span class=3D"java_opera=
tor">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"ja=
va_keyword">new</span><span class=3D"java_plain">&nbsp;</span><span clas=
s=3D"java_type">Configuration</span><span class=3D"java_separator">()</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">addClass</span><span class=3D"=
java_separator">(</span><span class=3D"java_type">Blog</span><span class=
=3D"java_separator">.</span><span class=3D"java_keyword">class</span><sp=
an class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">.</span><span class=3D"java_plain">addClass</span><span class=3D"=
java_separator">(</span><span class=3D"java_type">BlogItem</span><span c=
lass=3D"java_separator">.</span><span class=3D"java_keyword">class</span=
><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">new</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_type">SchemaExport</s=
pan><span class=3D"java_separator">(</span><span class=3D"java_plain">cf=
g</span><span class=3D"java_separator">).</span><span class=3D"java_plai=
n">create</span><span class=3D"java_separator">(</span><span class=3D"ja=
va_literal">true</span><span class=3D"java_separator">,</span><span clas=
s=3D"java_plain">&nbsp;</span><span class=3D"java_literal">true</span><s=
pan class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Blog</span><span class=3D"java_plain=
">&nbsp;createBlog</span><span class=3D"java_separator">(</span><span cl=
ass=3D"java_type">String</span><span class=3D"java_plain">&nbsp;name</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_keyword">throws</span><span class=3D"java_=
plain">&nbsp;</span><span class=3D"java_type">HibernateException</span><=
span class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{<=
/span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Blog</span><span class=
=3D"java_plain">&nbsp;blog&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywo=
rd">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_type">Blog</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;blog</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setName</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">name</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;blog</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setItems</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keyword"=
>new</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_t=
ype">ArrayList</span><span class=3D"java_separator">()</span><span class=
=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">persist</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">blog</span><spa=
n class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;blog</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">BlogItem</span><span class=3D"java_p=
lain">&nbsp;createBlogItem</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">Blog</span><span class=3D"java_plain">&nbsp;bl=
og</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">String</span><span class=3D"ja=
va_plain">&nbsp;title</span><span class=3D"java_separator">,</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_type">String</spa=
n><span class=3D"java_plain">&nbsp;text</span><span class=3D"java_separa=
tor">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throws</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">HibernateException</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">BlogItem</span><span c=
lass=3D"java_plain">&nbsp;item&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_k=
eyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">BlogItem</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setTitle</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">title</span><span class=3D"java_separator=
">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setText</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">text</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setBlog</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">blog</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setDatetime</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>Calendar</span><span class=3D"java_separator">.</span><span class=3D"ja=
va_plain">getInstance</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;blog</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">getItems</span><span class=3D"java_separator">().<=
/span><span class=3D"java_plain">add</span><span class=3D"java_separator=
">(</span><span class=3D"java_plain">item</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">update</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">blog</span><span=
 class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;item</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">BlogItem</span><span class=3D"java_p=
lain">&nbsp;createBlogItem</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">Long</span><span class=3D"java_plain">&nbsp;bl=
ogid</span><span class=3D"java_separator">,</span><span class=3D"java_pl=
ain">&nbsp;</span><span class=3D"java_type">String</span><span class=3D"=
java_plain">&nbsp;title</span><span class=3D"java_separator">,</span><sp=
an class=3D"java_plain">&nbsp;</span><span class=3D"java_type">String</s=
pan><span class=3D"java_plain">&nbsp;text</span><span class=3D"java_sepa=
rator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throws</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">HibernateException</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">BlogItem</span><span c=
lass=3D"java_plain">&nbsp;item&nbsp;</span><span class=3D"java_operator"=
>=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_k=
eyword">new</span><span class=3D"java_plain">&nbsp;</span><span class=3D=
"java_type">BlogItem</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setTitle</span><span class=3D"java_separator">(</s=
pan><span class=3D"java_plain">title</span><span class=3D"java_separator=
">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setText</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">text</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setDatetime</span><span class=3D"java_separator">(=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_type"=
>Calendar</span><span class=3D"java_separator">.</span><span class=3D"ja=
va_plain">getInstance</span><span class=3D"java_separator">()</span><spa=
n class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">);</s=
pan>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Blog</span><span class=3D"java_plain">&nbsp;blog&nbsp;</span><span cla=
ss=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span><=
span class=3D"java_separator">(</span><span class=3D"java_type">Blog</sp=
an><span class=3D"java_separator">)</span><span class=3D"java_plain">&nb=
sp;session</span><span class=3D"java_separator">.</span><span class=3D"j=
ava_plain">load</span><span class=3D"java_separator">(</span><span class=
=3D"java_type">Blog</span><span class=3D"java_separator">.</span><span c=
lass=3D"java_keyword">class</span><span class=3D"java_separator">,</span=
><span class=3D"java_plain">&nbsp;blogid</span><span class=3D"java_separ=
ator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">setBlog</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">blog</span><span cla=
ss=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blog</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">getItems</span><span class=
=3D"java_separator">().</span><span class=3D"java_plain">add</span><span=
 class=3D"java_separator">(</span><span class=3D"java_plain">item</span>=
<span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;item</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;updateBlogItem</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_type">BlogItem</span><span class=3D"java_plain">&nbsp;it=
em</span><span class=3D"java_separator">,</span><span class=3D"java_plai=
n">&nbsp;</span><span class=3D"java_type">String</span><span class=3D"ja=
va_plain">&nbsp;text</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">throws</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">HibernateExc=
eption</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;item</span><span class=3D"java_separator">.</span><span=
 class=3D"java_plain">setText</span><span class=3D"java_separator">(</sp=
an><span class=3D"java_plain">text</span><span class=3D"java_separator">=
);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">update</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_plain">item</span><span=
 class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">void</span><span class=3D"java_plain=
">&nbsp;updateBlogItem</span><span class=3D"java_separator">(</span><spa=
n class=3D"java_type">Long</span><span class=3D"java_plain">&nbsp;itemid=
</span><span class=3D"java_separator">,</span><span class=3D"java_plain"=
>&nbsp;</span><span class=3D"java_type">String</span><span class=3D"java=
_plain">&nbsp;text</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">throws</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">HibernateExc=
eption</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">BlogItem</span><span class=3D"java_plain">&nbsp;item&nbsp;</span><span=
 class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">(</span><span class=3D"java_type">Blog=
Item</span><span class=3D"java_separator">)</span><span class=3D"java_pl=
ain">&nbsp;session</span><span class=3D"java_separator">.</span><span cl=
ass=3D"java_plain">load</span><span class=3D"java_separator">(</span><sp=
an class=3D"java_type">BlogItem</span><span class=3D"java_separator">.</=
span><span class=3D"java_keyword">class</span><span class=3D"java_separa=
tor">,</span><span class=3D"java_plain">&nbsp;itemid</span><span class=3D=
"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item</span><span class=3D"java_=
separator">.</span><span class=3D"java_plain">setText</span><span class=3D=
"java_separator">(</span><span class=3D"java_plain">text</span><span cla=
ss=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">List</span><span class=3D"java_plain=
">&nbsp;listAllBlogNamesAndItemCounts</span><span class=3D"java_separato=
r">(</span><span class=3D"java_type">int</span><span class=3D"java_plain=
">&nbsp;max</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">throws</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">HibernateExc=
eption</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">List</span><span class=
=3D"java_plain">&nbsp;result&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Query</span><span class=3D"java_plain">&nbsp;q&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;session</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">cr=
eateQuery</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;select&nbsp;blog.id,&nbsp;blog.name,&=
nbsp;count(blogItem)&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;=
</span><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;from&nbsp;Blog&nbsp;as&nbsp;blog&nbsp=
;&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;left&nbsp;outer&nbsp;join&nbsp;blog.i=
tems&nbsp;as&nbsp;blogItem&nbsp;&quot;</span><span class=3D"java_plain">=
&nbsp;</span><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;group&nbsp;by&nbsp;blog.name,&nbsp;bl=
og.id&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</span><span cl=
ass=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;order&nbsp;by&nbsp;max(blogItem.datet=
ime)&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setMaxResults</span><span cla=
ss=3D"java_separator">(</span><span class=3D"java_plain">max</span><span=
 class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;q</span><span=
 class=3D"java_separator">.</span><span class=3D"java_plain">list</span>=
<span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;result</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">Blog</span><span class=3D"java_plain=
">&nbsp;getBlogAndAllItems</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">Long</span><span class=3D"java_plain">&nbsp;bl=
ogid</span><span class=3D"java_separator">)</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">throws</span><span =
class=3D"java_plain">&nbsp;</span><span class=3D"java_type">HibernateExc=
eption</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java=
_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Blog</span><span class=
=3D"java_plain">&nbsp;blog&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Query</span><span class=3D"java_plain">&nbsp;q&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;session</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">cr=
eateQuery</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;from&nbsp;Blog&nbsp;as&nbsp;blog&nbsp=
;&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;left&nbsp;outer&nbsp;join&nbsp;fetch&=
nbsp;blog.items&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;where&nbsp;blog.id&nbsp;=3D&nbsp;:blo=
gid&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setParameter</span><span clas=
s=3D"java_separator">(</span><span class=3D"java_literal">&quot;blogid&q=
uot;</span><span class=3D"java_separator">,</span><span class=3D"java_pl=
ain">&nbsp;blogid</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blog&nbsp;&nbsp;</span><span cl=
ass=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</span>=
<span class=3D"java_separator">(</span><span class=3D"java_type">Blog</s=
pan><span class=3D"java_separator">)</span><span class=3D"java_plain">&n=
bsp;q</span><span class=3D"java_separator">.</span><span class=3D"java_p=
lain">uniqueResult</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;blog</span><span class=3D"java_separator">;</=
span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=

<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_keyword">public</span><span class=3D"java_plain">&nb=
sp;</span><span class=3D"java_type">List</span><span class=3D"java_plain=
">&nbsp;listBlogsAndRecentItems</span><span class=3D"java_separator">()<=
/span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_keywor=
d">throws</span><span class=3D"java_plain">&nbsp;</span><span class=3D"j=
ava_type">HibernateException</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Session</span><span cl=
ass=3D"java_plain">&nbsp;session&nbsp;</span><span class=3D"java_operato=
r">=3D</span><span class=3D"java_plain">&nbsp;_sessions</span><span clas=
s=3D"java_separator">.</span><span class=3D"java_plain">openSession</spa=
n><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">Transaction</span><spa=
n class=3D"java_plain">&nbsp;tx&nbsp;</span><span class=3D"java_operator=
">=3D</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_=
literal">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_type">List</span><span class=
=3D"java_plain">&nbsp;result&nbsp;</span><span class=3D"java_operator">=3D=
</span><span class=3D"java_plain">&nbsp;</span><span class=3D"java_liter=
al">null</span><span class=3D"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">try</span><span cla=
ss=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx&nbsp;</span><span class=3D"j=
ava_operator">=3D</span><span class=3D"java_plain">&nbsp;session</span><=
span class=3D"java_separator">.</span><span class=3D"java_plain">beginTr=
ansaction</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Query</span><span class=3D"java_plain">&nbsp;q&nbsp;</span><span class=
=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;session</s=
pan><span class=3D"java_separator">.</span><span class=3D"java_plain">cr=
eateQuery</span><span class=3D"java_separator">(</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;from&nbsp;Blog&nbsp;as&nbsp;blog&nbsp=
;&quot;</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;inner&nbsp;join&nbsp;blog.items&nbsp;=
as&nbsp;blogItem&nbsp;&quot;</span><span class=3D"java_plain">&nbsp;</sp=
an><span class=3D"java_operator">+</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_literal">&quot;where&nbsp;blogItem.datetime&nbsp;&gt=
;&nbsp;:minDate&quot;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_sepa=
rator">);</span>
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_type=
">Calendar</span><span class=3D"java_plain">&nbsp;cal&nbsp;</span><span =
class=3D"java_operator">=3D</span><span class=3D"java_plain">&nbsp;</spa=
n><span class=3D"java_type">Calendar</span><span class=3D"java_separator=
">.</span><span class=3D"java_plain">getInstance</span><span class=3D"ja=
va_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cal</span><span class=3D"java_s=
eparator">.</span><span class=3D"java_plain">roll</span><span class=3D"j=
ava_separator">(</span><span class=3D"java_type">Calendar</span><span cl=
ass=3D"java_separator">.</span><span class=3D"java_plain">MONTH</span><s=
pan class=3D"java_separator">,</span><span class=3D"java_plain">&nbsp;</=
span><span class=3D"java_literal">false</span><span class=3D"java_separa=
tor">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q</span><span class=3D"java_sep=
arator">.</span><span class=3D"java_plain">setCalendar</span><span class=
=3D"java_separator">(</span><span class=3D"java_literal">&quot;minDate&q=
uot;</span><span class=3D"java_separator">,</span><span class=3D"java_pl=
ain">&nbsp;cal</span><span class=3D"java_separator">);</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;</span><span class=3D=
"java_operator">=3D</span><span class=3D"java_plain">&nbsp;q</span><span=
 class=3D"java_separator">.</span><span class=3D"java_plain">list</span>=
<span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx</span><span class=3D"java_se=
parator">.</span><span class=3D"java_plain">commit</span><span class=3D"=
java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">catch</span><span c=
lass=3D"java_plain">&nbsp;</span><span class=3D"java_separator">(</span>=
<span class=3D"java_type">HibernateException</span><span class=3D"java_p=
lain">&nbsp;he</span><span class=3D"java_separator">)</span><span class=3D=
"java_plain">&nbsp;</span><span class=3D"java_separator">{</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">if</span><span class=3D"java_plain">&nbsp;</span><span class=3D"jav=
a_separator">(</span><span class=3D"java_plain">tx</span><span class=3D"=
java_operator">!=3D</span><span class=3D"java_literal">null</span><span =
class=3D"java_separator">)</span><span class=3D"java_plain">&nbsp;tx</sp=
an><span class=3D"java_separator">.</span><span class=3D"java_plain">rol=
lback</span><span class=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyw=
ord">throw</span><span class=3D"java_plain">&nbsp;he</span><span class=3D=
"java_separator">;</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">finally</span><span=
 class=3D"java_plain">&nbsp;</span><span class=3D"java_separator">{</spa=
n>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session</span><span class=3D"ja=
va_separator">.</span><span class=3D"java_plain">close</span><span class=
=3D"java_separator">();</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span class=3D"java_keyword">return</span><span =
class=3D"java_plain">&nbsp;result</span><span class=3D"java_separator">;=
</span>
<!--  --><br/><span class=3D"java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span class=3D"java_separator">}</span>
<!--  --><br/><span class=3D"java_separator">}</span></pre></div></div><=
div class=3D"chapter" lang=3D"en-US"><div class=3D"titlepage"><div><div>=
<h2 class=3D"title"><a id=3D"example-mappings"/>Chapter=C2=A026.=C2=A0Ex=
ample: Various Mappings</h2></div></div></div><div class=3D"toc"><dl><dt=
><span class=3D"section"><a href=3D"#example-mappings-emp">26.1. Employe=
r/Employee</a></span></dt><dt><span class=3D"section"><a href=3D"#exampl=
e-mappings-authorwork">26.2. Author/Work</a></span></dt><dt><span class=3D=
"section"><a href=3D"#example-mappings-customerorderproduct">26.3. Custo=
mer/Order/Product</a></span></dt><dt><span class=3D"section"><a href=3D"=
#misc">26.4. Miscellaneous example mappings</a></span></dt><dd><dl><dt><=
span class=3D"section"><a href=3D"#example-mappings-typed-onetone">26.4.=
1. "Typed" one-to-one association</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"#example-mappings-composite-key">26.4.2. Composite key e=
xample</a></span></dt><dt><span class=3D"section"><a href=3D"#example-ma=
ppings-composite-key-manytomany">26.4.3. Many-to-many with shared compos=
ite key attribute</a></span></dt><dt><span class=3D"section"><a href=3D"=
#example-mappings-content-discrimination">26.4.4. Content based discrimi=
nation</a></span></dt><dt><span class=3D"section"><a href=3D"#example-ma=
ppings-association-alternatekeys">26.4.5. Associations on alternate keys=
</a></span></dt></dl></dd></dl></div><p>
        This chapters explores some more complex association mappings.
    </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><=
div><div><h2 class=3D"title"><a id=3D"example-mappings-emp"/>26.1.=C2=A0=
Employer/Employee</h2></div></div></div><p>
            The following model of the relationship between <code class=3D=
"literal">Employer</code> and =

            <code class=3D"literal">Employee</code> uses an entity class=
 (<code class=3D"literal">Employment</code>) =

            to represent the association. You can do this when there mig=
ht be more than one
            period of employment for the same two parties. Components ar=
e used to model monetary =

            values and employee names.
        </p><div class=3D"mediaobject" align=3D"center"><img src=3D"imag=
es/EmployerEmployee.png" align=3D"middle"/></div><p>
            Here is a possible mapping document:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Employer&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">table</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;emp=
loyers&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;sequence&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain">employer_id_seq</span><span clas=
s=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">generator</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Employment&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">table</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;em=
ployment_periods&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;sequence&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain">employment_id_seq</span><span cl=
ass=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">generator</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;startDate&quot;</span><=
span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name"=
>column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;start_date&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;endDate&quot;</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">c=
olumn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml=
_attribute_value">&quot;end_date&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">component</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;hourlyRate&quot;</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">class</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;MonetaryAmount&quot;</span><span class=3D"xml_=
tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;amount&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">column</span><s=
pan class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">=
name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;hourly_rate&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">sql-type</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;NUMERIC(12,&nbsp;2)&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">property</span><span class=3D"xml_tag_=
symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;currency&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;12&quot;</span><span cl=
ass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">component</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;employer&quot;</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;employer_id&quot;</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">not-null</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;employee&quot;</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;employee_id&quot;</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">not-null</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;true&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Employee&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">table</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;emp=
loyees&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;sequence&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">param</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;sequence&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain">employee_id_seq</span><span clas=
s=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">param</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">generator</span><span class=3D"xml_tag=
_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;taxfileNumber&quot;</sp=
an><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">component</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Name&quot;</span><span class=3D"xml_tag_symbols">&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;firstName&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;initial&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;lastName&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">component</span><span class=3D"xml_tag_symbols">&gt;</span><sp=
an class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
        Here is the table schema generated by <code class=3D"literal">Sc=
hemaExport</code>.
    </p><pre class=3D"programlisting">create table employers (
    id BIGINT not null, =

    name VARCHAR(255), =

    primary key (id)
)

create table employment_periods (
    id BIGINT not null,
    hourly_rate NUMERIC(12, 2),
    currency VARCHAR(12), =

    employee_id BIGINT not null, =

    employer_id BIGINT not null, =

    end_date TIMESTAMP, =

    start_date TIMESTAMP, =

    primary key (id)
)

create table employees (
    id BIGINT not null, =

    firstName VARCHAR(255), =

    initial CHAR(1), =

    lastName VARCHAR(255), =

    taxfileNumber VARCHAR(255), =

    primary key (id)
)

alter table employment_periods =

    add constraint employment_periodsFK0 foreign key (employer_id) refer=
ences employers
alter table employment_periods =

    add constraint employment_periodsFK1 foreign key (employee_id) refer=
ences employees
create sequence employee_id_seq
create sequence employment_id_seq
create sequence employer_id_seq</pre></div><div class=3D"section" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
example-mappings-authorwork"/>26.2.=C2=A0Author/Work</h2></div></div></d=
iv><p>
            Consider the following model of the relationships between <c=
ode class=3D"literal">Work</code>,
            <code class=3D"literal">Author</code> and <code class=3D"lit=
eral">Person</code>. In the example, the relationship
            between <code class=3D"literal">Work</code> and <code class=3D=
"literal">Author</code> is represented as a many-to-many
            association and the relationship between <code class=3D"lite=
ral">Author</code> =

            and <code class=3D"literal">Person</code> is represented as =
one-to-one association. Another possibility would be to =

            have <code class=3D"literal">Author</code> extend <code clas=
s=3D"literal">Person</code>.  =

        </p><div class=3D"mediaobject" align=3D"center"><img src=3D"imag=
es/AuthorWork.png" align=3D"middle"/></div><p>
            The following mapping document correctly represents these re=
lationships:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Work&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">table</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;works&q=
uot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_att=
ribute_name">discriminator-value</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;W&quot;</span><span cla=
ss=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">discriminator</span><span class=3D"xml_plain">&nbsp;</span><spa=
n class=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;type&quot;</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">type</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;character&quot;</span><span class=3D"xml_tag_s=
ymbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;title&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;authors&quot;</span><span cl=
ass=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table<=
/span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attri=
bute_value">&quot;author_work&quot;</span><span class=3D"xml_tag_symbols=
">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;work_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-many</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;Author&quot;</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">column</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">name</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;author_=
id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">subclass</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;Book&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">disc=
riminator-value</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;B&quot;</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;text&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">subclass</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">subclass</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;Song&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">disc=
riminator-value</span><span class=3D"xml_tag_symbols">=3D</span><span cl=
ass=3D"xml_attribute_value">&quot;S&quot;</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;tempo&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;genre&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">subclass</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Author&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">table</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;autho=
rs&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_comment">&lt;!--&nbs=
p;The&nbsp;Author&nbsp;must&nbsp;have&nbsp;the&nbsp;same&nbsp;identifier=
&nbsp;as&nbsp;the&nbsp;Person&nbsp;--&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;assigned&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;alias&quot;</span><span=
 class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-one</span><span class=3D"xml_plain">&nbsp;</span><span c=
lass=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;person&quot;</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">co=
nstrained</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symb=
ols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;works&quot;</span><span clas=
s=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;author_work&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">inverse</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;true=
&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;au=
thor_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-many</span><span class=3D"xml_p=
lain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span =
class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">=
&quot;Work&quot;</span><span class=3D"xml_plain">&nbsp;</span><span clas=
s=3D"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;work_id&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Person&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">table</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;perso=
ns&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">column</span=
><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_=
value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><=
span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
        There are four tables in this mapping: <code class=3D"literal">w=
orks</code>,
        <code class=3D"literal">authors</code> and <code class=3D"litera=
l">persons</code> hold work, author
        and person data respectively. <code class=3D"literal">author_wor=
k</code> is an association
        table linking authors to works. Here is the table schema, as gen=
erated by
        <code class=3D"literal">SchemaExport</code>:
    </p><pre class=3D"programlisting">create table works (
    id BIGINT not null generated by default as identity, =

    tempo FLOAT, =

    genre VARCHAR(255), =

    text INTEGER, =

    title VARCHAR(255), =

    type CHAR(1) not null, =

    primary key (id)
)

create table author_work (
    author_id BIGINT not null, =

    work_id BIGINT not null, =

    primary key (work_id, author_id)
)

create table authors (
    id BIGINT not null generated by default as identity, =

    alias VARCHAR(255), =

    primary key (id)
)

create table persons (
    id BIGINT not null generated by default as identity, =

    name VARCHAR(255), =

    primary key (id)
)

alter table authors =

    add constraint authorsFK0 foreign key (id) references persons
alter table author_work =

    add constraint author_workFK0 foreign key (author_id) references aut=
hors
alter table author_work
    add constraint author_workFK1 foreign key (work_id) references works=
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h2 class=3D"title"><a id=3D"example-mappings-customerorder=
product"/>26.3.=C2=A0Customer/Order/Product</h2></div></div></div><p>
            In this section we consider a model of the relationships bet=
ween <code class=3D"literal">Customer</code>,
            <code class=3D"literal">Order</code>, <code class=3D"literal=
">Line Item</code> and <code class=3D"literal">Product</code>.
            There is a one-to-many association between <code class=3D"li=
teral">Customer</code> and
            <code class=3D"literal">Order</code>, but how can you repres=
ent <code class=3D"literal">Order</code> / =

            <code class=3D"literal">LineItem</code> / <code class=3D"lit=
eral">Product</code>? In the example, =

            <code class=3D"literal">LineItem</code> is mapped as an asso=
ciation class representing the many-to-many
            association between <code class=3D"literal">Order</code> and=
 <code class=3D"literal">Product</code>. In
            Hibernate this is called a composite element.
        </p><div class=3D"mediaobject" align=3D"center"><img src=3D"imag=
es/CustomerOrderProduct.png" align=3D"middle"/></div><p>
            The mapping document will look like this:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (ht=
tp://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Customer&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">table</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;cus=
tomers&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">set</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;orders&quot;</span><span cla=
ss=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">inverse=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">&gt;=
</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;cu=
stomer_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">one-to-many</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;Order&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">set</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Order&quot;</span><span class=3D"xml_plain">&nbsp;=
</span><span class=3D"xml_attribute_name">table</span><span class=3D"xml=
_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;orders=
&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;date&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-one</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=
=3D</span><span class=3D"xml_attribute_value">&quot;customer&quot;</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">column</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;customer_id&quot;</span><span class=3D"xml_t=
ag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">list</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</spa=
n><span class=3D"xml_attribute_value">&quot;lineItems&quot;</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">tabl=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;line_items&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">key</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">column</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
der_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">list-index</span><span class=3D"xml_pla=
in">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span c=
lass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&=
quot;line_number&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span=
><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">composite-element</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">class</span><=
span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_va=
lue">&quot;LineItem&quot;</span><span class=3D"xml_tag_symbols">&gt;</sp=
an><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;quantity&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;product&quot;</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">column</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;product_id&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">composite-element</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">list</span><span class=3D"xml_tag_symbols">&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">class</span><sp=
an class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">n=
ame</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;Product&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">table</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;prod=
ucts&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">id</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"=
xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span=
><span class=3D"xml_attribute_value">&quot;id&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">generator</span><span class=3D"xml_plai=
n">&nbsp;</span><span class=3D"xml_attribute_name">class</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;native&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">id</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;serialNumber&quot;</spa=
n><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">class</span><s=
pan class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>hibernate-mapping</span><span class=3D"xml_tag_symbols">&gt;</span><spa=
n class=3D"xml_plain"></span><br />
</pre><p>
        <code class=3D"literal">customers</code>, <code class=3D"literal=
">orders</code>, <code class=3D"literal">line_items</code> and =

        <code class=3D"literal">products</code> hold customer, order, or=
der line item and product data
        respectively. <code class=3D"literal">line_items</code> also act=
s as an association table linking
        orders with products.
    </p><pre class=3D"programlisting">create table customers (
    id BIGINT not null generated by default as identity, =

    name VARCHAR(255), =

    primary key (id)
)

create table orders (
    id BIGINT not null generated by default as identity, =

    customer_id BIGINT, =

    date TIMESTAMP, =

    primary key (id)
)

create table line_items (
    line_number INTEGER not null, =

    order_id BIGINT not null, =

    product_id BIGINT, =

    quantity INTEGER, =

    primary key (order_id, line_number)
)

create table products (
    id BIGINT not null generated by default as identity, =

    serialNumber VARCHAR(255), =

    primary key (id)
)

alter table orders =

    add constraint ordersFK0 foreign key (customer_id) references custom=
ers
alter table line_items
    add constraint line_itemsFK0 foreign key (product_id) references pro=
ducts
alter table line_items
    add constraint line_itemsFK1 foreign key (order_id) references order=
s</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepa=
ge"><div><div><h2 class=3D"title"><a id=3D"misc"/>26.4.=C2=A0Miscellaneo=
us example mappings</h2></div></div></div><p>
            These examples are available from the Hibernate test suite. =
You
            will find many other useful example mappings there by search=
ing in the
            <code class=3D"literal">test</code> folder of the Hibernate =
distribution.
        </p><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"example-mappings-typed-onetone=
"/>26.4.1.=C2=A0"Typed" one-to-one association</h3></div></div></div><pr=
e xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" =
class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight=
.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;name&quot;</span><span class=3D"xml_tag_symbols">/&gt=
;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">casc=
ade</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;all&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">name</span><span class=3D"xml_tag_symbols">&lt;/</sp=
an><span class=3D"xml_tag_name">formula</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">'HOME'</span><span class=3D"xml_tag_symbols">&lt;/</=
span><span class=3D"xml_tag_name">formula</span><span class=3D"xml_tag_s=
ymbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">one-to-one</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;mailingAddress&quot;</span><span class=3D"xml=
_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">casc=
ade</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;all&quot;</span><span class=3D"xml_tag_symbols">&g=
t;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">name</span><span class=3D"xml_tag_symbols">&lt;/</sp=
an><span class=3D"xml_tag_name">formula</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain">'MAILING'</span><span class=3D"xml_tag_symbols">&lt;=
/</span><span class=3D"xml_tag_name">formula</span><span class=3D"xml_ta=
g_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">one-to-one</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">batch-size</s=
pan><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribu=
te_value">&quot;2&quot;</span><span class=3D"xml_plain">&nbsp;</span><br=
 />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">check</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;addr=
essType&nbsp;in&nbsp;('MAILING',&nbsp;'HOME',&nbsp;'BUSINESS')&quot;</sp=
an><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-many-to-one</span><span class=3D"xml_plain">&nbsp;</span><s=
pan class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbo=
ls">=3D</span><span class=3D"xml_attribute_value">&quot;person&quot;</sp=
an><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;personName&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;type&quot;</span><s=
pan class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;addressType&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;street&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">type</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tex=
t&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;state&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;zip&quot;</span><span class=3D"xml_tag_symbols"=
>/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"example-mappings-composite-key=
"/>26.4.2.=C2=A0Composite key example</h3></div></div></div><pre xmlns=3D=
"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFactory" class=3D"X=
ML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.=
net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Customer&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;customerId&quot;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">length</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;10&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;assigned&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml=
_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;100&quot;</span><span class=3D=
"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">not-null</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;200&quot;</span><span clas=
s=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br /=
>
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">list</span><spa=
n class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">na=
me</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;orders&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inve=
rse</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">casc=
ade</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;save-update&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;customerId&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">index</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;orderNumber&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Order&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">list</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Order&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;CustomerOrder&quot;</span><span class=3D"xml_plain">&nbsp;</spa=
n><span class=3D"xml_attribute_name">lazy</span><span class=3D"xml_tag_s=
ymbols">=3D</span><span class=3D"xml_attribute_value">&quot;true&quot;</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">synchronize</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;LineItem&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">synchronize</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;Product&quot;</span><span class=3D"xml_tag_s=
ymbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;Order$Id&quot;</span><span class=3D"xml_tag_symbols"=
>&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;customerId&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">length</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;10&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;orderNumber&quot;</=
span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;orderDate&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">type=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;calendar_date&quot;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;total&quot;</span><span class=3D"xml_tag_symbol=
s">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;select&nbsp;sum(li.quantity*p.price)&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;LineItem&nbsp;li,&nbsp;Product&nbsp;=
p&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;li.productId&nbsp;=3D&nbsp;p.produc=
tId&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;li.customerId=
&nbsp;=3D&nbsp;customerId&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;li.orderNumbe=
r&nbsp;=3D&nbsp;orderNumber&nbsp;)</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">property</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;customer&quot;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;customerId&quot;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inse=
rt</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">upda=
te</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">bag</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;lineItems&quot;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">fetc=
h</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;join&quot;</span><span class=3D"xml_plain">&nbsp;</s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inve=
rse</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">casc=
ade</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_a=
ttribute_value">&quot;save-update&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;cu=
stomerId&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
derNumber&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;LineItem&quot;</spa=
n><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">bag</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;LineItem&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">clas=
s</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;LineItem$Id&quot;</span><span class=3D"xml_tag_symbo=
ls">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;customerId&quot;</s=
pan><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_=
name">length</span><span class=3D"xml_tag_symbols">=3D</span><span class=
=3D"xml_attribute_value">&quot;10&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;orderNumber&quot;</=
span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;productId&quot;</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">length</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;10&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;quantity&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;order&quot;</span><span class=3D"xml_plain">=
</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inse=
rt</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">upda=
te</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_tag_symbols">=
&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;customerId&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">column</span><span class=3D"xml_plain">&nbsp;</span><span class=
=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D</=
span><span class=3D"xml_attribute_value">&quot;orderNumber&quot;</span><=
span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">many-to-one</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;product&quot;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">inse=
rt</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">upda=
te</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;false&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">not-=
null</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_=
attribute_value">&quot;true&quot;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">colu=
mn</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_at=
tribute_value">&quot;productId&quot;</span><span class=3D"xml_tag_symbol=
s">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Product&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">synchronize</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">table</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;LineItem&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;productId&quot;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">length</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;10&=
quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xm=
l_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;assigned&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;description&quot;</span><span class=3D"xml_plai=
n">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">length</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;200=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;price&quot;</span><span class=3D"xml_plain">&nb=
sp;</span><span class=3D"xml_attribute_name">length</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;3&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;numberAvailable&quot;</span><span class=3D"xml_=
tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;numberOrdered&quot;</span><span class=3D"xml_ta=
g_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;select&nbsp;sum(li.quantity)&nbsp;</spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;LineItem&nbsp;li&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;li.productId&nbsp;=3D&nbsp;productI=
d&nbsp;)</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">property</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"example-mappings-composite-key=
-manytomany"/>26.4.3.=C2=A0Many-to-many with shared composite key attrib=
ute</h3></div></div></div><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.hig=
hlight.XhtmlRendererFactory" class=3D"XML"><!-- XML : generated by JHigh=
light v1.0 (http://jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;User&quot;</span><span class=3D"xml=
_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><spa=
n class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value=
">&quot;`User`&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><s=
pan class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;org&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;groups&quot;</span><span class=3D"xml_plain">&nbsp;<=
/span><span class=3D"xml_attribute_name">table</span><span class=3D"xml_=
tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserGro=
up&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;us=
erName&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
g&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;Group&quot;</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;gr=
oupName&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">formula</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">org</span><span class=3D"xml=
_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">formula</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">many-to-many</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Group&quot;</span><span class=3D"xm=
l_plain">&nbsp;</span><span class=3D"xml_attribute_name">table</span><sp=
an class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_valu=
e">&quot;`Group`&quot;</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">composite-id</s=
pan><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"=
></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;name&quot;</span><s=
pan class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key-property</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;org&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">composite-id</=
span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain=
"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;description&quot;</span><span class=3D"xml_tag_=
symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;users&quot;</span><span class=3D"xml_plain">&nbsp;</=
span><span class=3D"xml_attribute_name">table</span><span class=3D"xml_t=
ag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;UserGrou=
p&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_=
attribute_name">inverse</span><span class=3D"xml_tag_symbols">=3D</span>=
<span class=3D"xml_attribute_value">&quot;true&quot;</span><span class=3D=
"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span clas=
s=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;gr=
oupName&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;or=
g&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">key</span><span class=3D"xml_tag_symbols">&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">many-to-many</span><span class=3D"xml_plain">&nbsp;</span><span=
 class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols=
">=3D</span><span class=3D"xml_attribute_value">&quot;User&quot;</span><=
span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></sp=
an><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">column</span><span class=3D"xml_plain">=
&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;us=
erName&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cla=
ss=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">formula</span><span class=3D"xml_tag_sy=
mbols">&gt;</span><span class=3D"xml_plain">org</span><span class=3D"xml=
_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">formula</span><sp=
an class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">many-to-many</span><span class=3D"xml_tag_symbols">&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"example-mappings-content-discr=
imination"/>26.4.4.=C2=A0Content based discrimination</h3></div></div></=
div><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererFa=
ctory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http://jhi=
ghlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">discriminator-value</span><span class=3D"xml_tag_sym=
bols">=3D</span><span class=3D"xml_attribute_value">&quot;P&quot;</span>=
<span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_plain">&nbsp;</span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;per=
son_id&quot;</span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">unsaved-value</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;0&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=
=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;native&quot;</span><spa=
n class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span=
><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">discriminator</=
span><span class=3D"xml_plain">&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">type</span><span class=3D"xm=
l_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;chara=
cter&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;title&nbsp;i=
s&nbsp;not&nbsp;null&nbsp;then&nbsp;'E'&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;salesperson&=
nbsp;is&nbsp;not&nbsp;null&nbsp;then&nbsp;'C'&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;'P'&nbsp;</s=
pan><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;end</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_=
tag_name">formula</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">discriminator<=
/span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plai=
n"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">length</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;80&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;sex&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">update</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;fal=
se&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">component</span=
><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_nam=
e">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"x=
ml_attribute_value">&quot;address&quot;</span><span class=3D"xml_tag_sym=
bols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;address&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;zip&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">property</span><span class=3D"xml_plain">&nbsp;</span><span cla=
ss=3D"xml_attribute_name">name</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;country&quot;</span><sp=
an class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></spa=
n><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">component</spa=
n><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;Employee&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">discriminator-value</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;E&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;title&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_attribute_name">length</span><span class=3D"xml_tag_symbols">=3D</sp=
an><span class=3D"xml_attribute_value">&quot;20&quot;</span><span class=3D=
"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;salary&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span cl=
ass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-one</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;manager&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><spa=
n class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">subclass</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;Customer&quot;</span><span class=3D"xml_plain">=
&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">discriminator-value</span><s=
pan class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_val=
ue">&quot;C&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span=
 class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">property</span><span class=3D"xml_plain=
">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span class=
=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot=
;comments&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_tag_symbols">&lt;</s=
pan><span class=3D"xml_tag_name">many-to-one</span><span class=3D"xml_pl=
ain">&nbsp;</span><span class=3D"xml_attribute_name">name</span><span cl=
ass=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&q=
uot;salesperson&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span>=
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">subclass</span=
><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></=
span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepag=
e"><div><div><h3 class=3D"title"><a id=3D"example-mappings-association-a=
lternatekeys"/>26.4.5.=C2=A0Associations on alternate keys</h3></div></d=
iv></div><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRende=
rerFactory" class=3D"XML"><!-- XML : generated by JHighlight v1.0 (http:=
//jhighlight.dev.java.net) -->
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Person&quot;</span><span class=3D"x=
ml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;hilo&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;name&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">length</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;100=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">one-to-one</spa=
n><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_na=
me">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">property-ref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;person&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">cascade</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;al=
l&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">fetch</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;join=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">set</span><span=
 class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">nam=
e</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_att=
ribute_value">&quot;accounts&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">inverse</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">key</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">column</span><span class=3D"xml_tag_symbols">=3D</s=
pan><span class=3D"xml_attribute_value">&quot;userId&quot;</span><span c=
lass=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"xml_attribute_name">prop=
erty-ref</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"=
xml_attribute_value">&quot;userId&quot;</span><span class=3D"xml_tag_sym=
bols">/&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">one-to-many</span><span class=3D"xml_plain">&nbsp;</span><span =
class=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols"=
>=3D</span><span class=3D"xml_attribute_value">&quot;Account&quot;</span=
><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">set</span><spa=
n class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span>=
<br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;userId&quot;</span><span class=3D"xml_plain">&n=
bsp;</span><span class=3D"xml_attribute_name">length</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;8&=
quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Address&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;id&quot;</span><span class=3D"xml_tag_symbols">&gt;</=
span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;hilo&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;address&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">length</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;30=
0&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;zip&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">length</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;5&qu=
ot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;country&quot;</span><span class=3D"xml_plain">&=
nbsp;</span><span class=3D"xml_attribute_name">length</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;25=
&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D"=
xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;person&quot;</span><span class=3D"xml_plain"=
>&nbsp;</span><span class=3D"xml_attribute_name">unique</span><span clas=
s=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quo=
t;true&quot;</span><span class=3D"xml_plain">&nbsp;</span><span class=3D=
"xml_attribute_name">not-null</span><span class=3D"xml_tag_symbols">=3D<=
/span><span class=3D"xml_attribute_value">&quot;true&quot;</span><span c=
lass=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><b=
r />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
<span class=3D"xml_plain"></span><br />
<span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">=
class</span><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_at=
tribute_name">name</span><span class=3D"xml_tag_symbols">=3D</span><span=
 class=3D"xml_attribute_value">&quot;Account&quot;</span><span class=3D"=
xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">id</span><span =
class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name">name=
</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attr=
ibute_value">&quot;accountId&quot;</span><span class=3D"xml_plain">&nbsp=
;</span><span class=3D"xml_attribute_name">length</span><span class=3D"x=
ml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;32&q=
uot;</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml=
_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_tag_symbols">&lt;</span><span class=3D"xml_t=
ag_name">generator</span><span class=3D"xml_plain">&nbsp;</span><span cl=
ass=3D"xml_attribute_name">class</span><span class=3D"xml_tag_symbols">=3D=
</span><span class=3D"xml_attribute_value">&quot;uuid&quot;</span><span =
class=3D"xml_tag_symbols">/&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name">id</span><span=
 class=3D"xml_tag_symbols">&gt;</span><span class=3D"xml_plain"></span><=
br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">many-to-one</sp=
an><span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_n=
ame">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D=
"xml_attribute_value">&quot;user&quot;</span><span class=3D"xml_plain"><=
/span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">column</span><span class=3D"=
xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;use=
rId&quot;</span><span class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span class=3D"xml_attribute_name">property-ref</span><span cla=
ss=3D"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&qu=
ot;userId&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span =
class=3D"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"=
xml_tag_symbols">&lt;</span><span class=3D"xml_tag_name">property</span>=
<span class=3D"xml_plain">&nbsp;</span><span class=3D"xml_attribute_name=
">name</span><span class=3D"xml_tag_symbols">=3D</span><span class=3D"xm=
l_attribute_value">&quot;type&quot;</span><span class=3D"xml_plain">&nbs=
p;</span><span class=3D"xml_attribute_name">not-null</span><span class=3D=
"xml_tag_symbols">=3D</span><span class=3D"xml_attribute_value">&quot;tr=
ue&quot;</span><span class=3D"xml_tag_symbols">/&gt;</span><span class=3D=
"xml_plain"></span><br />
<span class=3D"xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><br />
<span class=3D"xml_tag_symbols">&lt;/</span><span class=3D"xml_tag_name"=
>class</span><span class=3D"xml_tag_symbols">&gt;</span><span class=3D"x=
ml_plain"></span><br />
</pre></div></div></div><div class=3D"chapter" lang=3D"en-US"><div class=
=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"best-practices"/>C=
hapter=C2=A027.=C2=A0Best Practices</h2></div></div></div><div class=3D"=
variablelist"><dl><dt><span class=3D"term">Write fine-grained classes an=
d map them using <code class=3D"literal">&lt;component&gt;</code>:</span=
></dt><dd><p>
                    Use an <code class=3D"literal">Address</code> class =
to encapsulate <code class=3D"literal">street</code>,
                    <code class=3D"literal">suburb</code>, <code class=3D=
"literal">state</code>, <code class=3D"literal">postcode</code>.
                    This encourages code reuse and simplifies refactorin=
g.
                </p></dd><dt><span class=3D"term">Declare identifier pro=
perties on persistent classes:</span></dt><dd><p>
                    Hibernate makes identifier properties optional. Ther=
e are a range of reasons why
                    you should use them. We recommend that identifiers b=
e 'synthetic', that is, generated with
                    no business meaning.
                </p></dd><dt><span class=3D"term">Identify natural keys:=
</span></dt><dd><p>
                    Identify natural keys for all entities, and map them=
 using =

                    <code class=3D"literal">&lt;natural-id&gt;</code>. I=
mplement <code class=3D"literal">equals()</code> and =

                    <code class=3D"literal">hashCode()</code> to compare=
 the properties that make up the natural key.
                </p></dd><dt><span class=3D"term">Place each class mappi=
ng in its own file:</span></dt><dd><p>
                     Do not use a single monolithic mapping document. Ma=
p <code class=3D"literal">com.eg.Foo</code> in =

                     the file <code class=3D"literal">com/eg/Foo.hbm.xml=
</code>. This makes sense, particularly in =

                     a team environment.
                </p></dd><dt><span class=3D"term">Load mappings as resou=
rces:</span></dt><dd><p>
                    Deploy the mappings along with the classes they map.=

                </p></dd><dt><span class=3D"term">Consider externalizing=
 query strings:</span></dt><dd><p>
                    This is recommended if your queries call non-ANSI-st=
andard SQL functions. =

                    Externalizing the query strings to mapping files wil=
l make the application more =

                    portable.
                </p></dd><dt><span class=3D"term">Use bind variables.</s=
pan></dt><dd><p>
                     As in JDBC, always replace non-constant values by "=
?". Do not use string manipulation to =

                     bind a non-constant value in a query. You should al=
so consider using named parameters in
                     queries.
                </p></dd><dt><span class=3D"term">Do not manage your own=
 JDBC connections:</span></dt><dd><p>
                    Hibernate allows the application to manage JDBC conn=
ections, but his approach should be considered =

                    a last-resort. If you cannot use the built-in connec=
tion providers, consider providing your =

                    own implementation of <code class=3D"literal">org.hi=
bernate.connection.ConnectionProvider</code>.
                </p></dd><dt><span class=3D"term">Consider using a custo=
m type:</span></dt><dd><p>
                    Suppose you have a Java type from a library that nee=
ds to be persisted but does not =

                    provide the accessors needed to map it as a componen=
t. You should consider implementing
                    <code class=3D"literal">org.hibernate.UserType</code=
>. This approach frees the application
                    code from implementing transformations to/from a Hib=
ernate type.
                </p></dd><dt><span class=3D"term">Use hand-coded JDBC in=
 bottlenecks:</span></dt><dd><p>
                    In performance-critical areas of the system, some ki=
nds of operations might benefit from =

                    direct JDBC. Do not assume, however, that JDBC is ne=
cessarily faster. Please wait until you <span class=3D"emphasis"><em>kno=
w</em></span> something is a bottleneck. =

                    If you need to use direct JDBC, =

                    you can open a Hibernate <code class=3D"literal">Ses=
sion</code>, wrap your JDBC operation as a <code class=3D"literal">org.h=
ibernate.jdbc.Work</code> object and using that JDBC connection. This =

                    way you can still use the same transaction strategy =
and underlying connection provider.
                </p></dd><dt><span class=3D"term">Understand <code class=
=3D"literal">Session</code> flushing:</span></dt><dd><p>
                    Sometimes the Session synchronizes its persistent st=
ate with the database. Performance will
                    be affected if this process occurs too often. You ca=
n sometimes minimize unnecessary flushing by =

                    disabling automatic flushing, or even by changing th=
e order of queries and other operations within a =

                    particular transaction.      =

                </p></dd><dt><span class=3D"term">In a three tiered arch=
itecture, consider using detached objects:</span></dt><dd><p>
                    When using a servlet/session bean architecture, you =
can pass persistent objects loaded in
                    the session bean to and from the servlet/JSP layer. =
Use a new session to service each request. =

                    Use <code class=3D"literal">Session.merge()</code> o=
r <code class=3D"literal">Session.saveOrUpdate()</code> to =

                    synchronize objects with the database.
                </p></dd><dt><span class=3D"term">In a two tiered archit=
ecture, consider using long persistence contexts:</span></dt><dd><p>
                    Database Transactions have to be as short as possibl=
e for best scalability. However, it is often
                    necessary to implement long running <span class=3D"e=
mphasis"><em>application transactions</em></span>, a single =

                    unit-of-work from the point of view of a user. An ap=
plication transaction might span several =

                    client request/response cycles. It is common to use =
detached objects to implement application
                    transactions. An appropriate alternative in a two ti=
ered architecture, is to maintain
                    a single open persistence contact session for the wh=
ole life cycle of the application transaction. Then  =

                    simply disconnect from the JDBC connection at the en=
d of each request and reconnect at the =

                    beginning of the subsequent request. Never share a s=
ingle session across more than one application =

                    transaction or you will be working with stale data.
                </p></dd><dt><span class=3D"term">Do not treat exception=
s as recoverable:</span></dt><dd><p>
                    This is more of a necessary practice than a "best" p=
ractice. When an exception occurs, roll back
                    the <code class=3D"literal">Transaction</code> and c=
lose the <code class=3D"literal">Session</code>. If you do not do this, =
Hibernate
                    cannot guarantee that in-memory state accurately rep=
resents the persistent state. For example,
                    do not use <code class=3D"literal">Session.load()</c=
ode> to determine if an instance with the given identifier =

                    exists on the database; use <code class=3D"literal">=
Session.get()</code> or a query instead.
                </p></dd><dt><span class=3D"term">Prefer lazy fetching f=
or associations:</span></dt><dd><p>
                    Use eager fetching sparingly. Use proxies and lazy c=
ollections for most associations to classes that =

                    are not likely to be completely held in the second-l=
evel cache. For associations to cached classes, =

                    where there is an a extremely high probability of a =
cache hit, explicitly disable eager fetching using =

                    <code class=3D"literal">lazy=3D"false"</code>. When =
join fetching is appropriate to a particular use
                    case, use a query with a <code class=3D"literal">lef=
t join fetch</code>.
                </p></dd><dt><span class=3D"term">
                Use the <span class=3D"emphasis"><em>open session in vie=
w</em></span> pattern, or a disciplined =

                <span class=3D"emphasis"><em>assembly phase</em></span> =
to avoid problems with unfetched data:
            </span></dt><dd><p>
                    Hibernate frees the developer from writing tedious <=
span class=3D"emphasis"><em>Data Transfer Objects</em></span> (DTO). =

                    In a traditional EJB architecture, DTOs serve dual p=
urposes: first, they work around the problem
                    that entity beans are not serializable; second, they=
 implicitly define an assembly phase where
                    all data to be used by the view is fetched and marsh=
alled into the DTOs before returning control =

                    to the presentation tier. Hibernate eliminates the f=
irst purpose. Unless you are prepared to hold the
                    persistence context (the session) open across the vi=
ew rendering process, you will still need
                    an assembly phase. Think of your business methods as=
 having a strict contract with the presentation
                    tier about what data is available in the detached ob=
jects. This is not a limitation
                    of Hibernate. It is a fundamental requirement of saf=
e transactional data access.
                </p></dd><dt><span class=3D"term">Consider abstracting y=
our business logic from Hibernate:</span></dt><dd><p>
                    Hide Hibernate data-access code behind an interface.=
 Combine the <span class=3D"emphasis"><em>DAO</em></span> and =

                    <span class=3D"emphasis"><em>Thread Local Session</e=
m></span> patterns. You can even have some classes persisted by
                    handcoded JDBC associated to Hibernate via a <code c=
lass=3D"literal">UserType</code>. This advice is, however, =

                    intended for "sufficiently large" applications. It i=
s not appropriate for an application with
                    five tables.
                </p></dd><dt><span class=3D"term">Do not use exotic asso=
ciation mappings:</span></dt><dd><p>
                    Practical test cases for real many-to-many associati=
ons are rare. Most of the time you need
                    additional information stored in the "link table". I=
n this case, it is much better to
                    use two one-to-many associations to an intermediate =
link class. In fact,
                    most associations are one-to-many and many-to-one. F=
or this reason, you should proceed cautiously when using any
                    other association style.
                </p></dd><dt><span class=3D"term">Prefer bidirectional a=
ssociations:</span></dt><dd><p>
                    Unidirectional associations are more difficult to qu=
ery. In a large application, almost
                    all associations must be navigable in both direction=
s in queries.
                </p></dd></dl></div></div><div class=3D"chapter" lang=3D=
"en-US"><div class=3D"titlepage"><div><div><h2 class=3D"title"><a id=3D"=
portability"/>Chapter=C2=A028.=C2=A0Database Portability Considerations<=
/h2></div></div></div><div class=3D"toc"><dl><dt><span class=3D"section"=
><a href=3D"#portability-basics">28.1. Portability Basics</a></span></dt=
><dt><span class=3D"section"><a href=3D"#portability-dialect">28.2. Dial=
ect</a></span></dt><dt><span class=3D"section"><a href=3D"#portability-d=
ialectresolver">28.3. Dialect resolution</a></span></dt><dt><span class=3D=
"section"><a href=3D"#portability-idgen">28.4. Identifier generation</a>=
</span></dt><dt><span class=3D"section"><a href=3D"#portability-function=
s">28.5. Database functions</a></span></dt><dt><span class=3D"section"><=
a href=3D"#portability-types">28.6. Type mappings</a></span></dt></dl></=
div><div class=3D"section" lang=3D"en-US"><div class=3D"titlepage"><div>=
<div><h2 class=3D"title"><a id=3D"portability-basics"/>28.1.=C2=A0Portab=
ility Basics</h2></div></div></div><p>
            One of the selling points of Hibernate (and really Object/Re=
lational Mapping as a whole) is
            the notion of database portability.  This could mean an inte=
rnal IT user migrating from one
            database vendor to another, or it could mean a framework or =
deployable application consuming
            Hibernate to simultaneously target multiple database product=
s by their users.  Regardless of
            the exact scenario, the basic idea is that you want Hibernat=
e to help you run against any number
            of databases without changes to your code, and ideally witho=
ut any changes to the mapping metadata.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"portability-dialect"/>28=
.2.=C2=A0Dialect</h2></div></div></div><p>
            The first line of portability for Hibernate is the dialect, =
which is a specialization of the
            <code class=3D"classname">org.hibernate.dialect.Dialect</cod=
e> contract.  A dialect encapsulates all
            the differences in how Hibernate must communicate with a par=
ticular database to accomplish some
            task like getting a sequence value or structuring a SELECT q=
uery.  Hibernate bundles a wide range
            of dialects for many of the most popular databases.  If you =
find that your particular database is
            not among them, it is not terribly difficult to write your o=
wn.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"portability-dialectresol=
ver"/>28.3.=C2=A0Dialect resolution</h2></div></div></div><p>
            Originally, Hibernate would always require that users specif=
y which dialect to use.  In the case
            of users looking to simultaneously target multiple databases=
 with their build that was problematic.
            Generally this required their users to configure the Hiberna=
te dialect or defining their own method
            of setting that value.
        </p><p>
            Starting with version 3.2, Hibernate introduced the notion o=
f automatically detecting the dialect
            to use based on the <code class=3D"interfacename">java.sql.D=
atabaseMetaData</code> obtained from a
            <code class=3D"interfacename">java.sql.Connection</code> to =
that database.  This was much better, expect
            that this resolution was limited to databases Hibernate know=
 about ahead of time and was in no way
            configurable or overrideable.
        </p><p>
            Starting with version 3.3, Hibernate has a fare more powerfu=
l way to automatically determine
            which dialect to should be used by relying on a series of de=
legates which implement the
            <code class=3D"interfacename">org.hibernate.dialect.resolver=
.DialectResolver</code> which defines only a
            single method:
        </p><pre xmlns=3D"" xmlns:rf=3D"java:org.jboss.highlight.XhtmlRe=
ndererFactory" class=3D"JAVA"><!-- <br/> --><span class=3D"java_keyword"=
>public</span><!-- <br/> --><span class=3D"java_plain">&nbsp;</span><!--=
 <br/> --><span class=3D"java_type">Dialect</span><!-- <br/> --><span cl=
ass=3D"java_plain">&nbsp;resolveDialect</span><!-- <br/> --><span class=3D=
"java_separator">(</span><!-- <br/> --><span class=3D"java_type">Databas=
eMetaData</span><!-- <br/> --><span class=3D"java_plain">&nbsp;metaData<=
/span><!-- <br/> --><span class=3D"java_separator">)</span><!-- <br/> --=
><span class=3D"java_plain">&nbsp;</span><!-- <br/> --><span class=3D"ja=
va_keyword">throws</span><!-- <br/> --><span class=3D"java_plain">&nbsp;=
</span><!-- <br/> --><span class=3D"java_type">JDBCConnectionException</=
span></pre><p>
            The basic contract here is that if the resolver 'understands=
' the given database metadata then
            it returns the corresponding Dialect; if not it returns null=
 and the process continues to the next
            resolver.  The signature also identifies <code class=3D"exce=
ptionname">org.hibernate.exception.JDBCConnectionException</code>
            as possibly being thrown.  A JDBCConnectionException here is=
 interpreted to imply a "non transient"
            (aka non-recoverable) connection problem and is used to indi=
cate an immediate stop to resolution
            attempts.  All other exceptions result in a warning and cont=
inuing on to the next resolver.
        </p><p>
            The cool part about these resolvers is that users can also r=
egister their own custom resolvers
            which will be processed ahead of the built-in Hibernate ones=
.  This might be useful in a number of
            different situations: it allows easy integration for auto-de=
tection of dialects beyond those
            shipped with HIbernate itself; it allows you to specify to u=
se a custom dialect when a particular
            database is recognized; etc.  To register one or more resolv=
ers, simply specify them (seperated by
            commas, tabs or spaces) using the 'hibernate.dialect_resolve=
rs' configuration setting (see the
            <code class=3D"constant">DIALECT_RESOLVERS</code> constant o=
n
            <code class=3D"classname">org.hibernate.cfg.Environment</cod=
e>).
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"portability-idgen"/>28.4=
.=C2=A0Identifier generation</h2></div></div></div><p>
            When considering portability between databases, another impo=
rtant decision is selecting the
            identifier generation stratagy you want to use.  Originally =
Hibernate provided the
            <span class=3D"emphasis"><em>native</em></span> generator fo=
r this purpose, which was intended to select between
            a <span class=3D"emphasis"><em>sequence</em></span>, <span c=
lass=3D"emphasis"><em>identity</em></span>, or <span class=3D"emphasis">=
<em>table</em></span>
            strategy depending on the capability of the underlying datab=
ase.  However, an insidious implication
            of this approach comes about when targtetting some databases=
 which support <span class=3D"emphasis"><em>identity</em></span>
            generation and some which do not.  <span class=3D"emphasis">=
<em>identity</em></span> generation relies on the SQL
            definition of an IDENTITY (or auto-increment) column to mana=
ge the identifier value; it is what is
            known as a post-insert generation strategy becauase the inse=
rt must actually happen before we can
            know the identifier value.  Because Hibernate relies on this=
 identifier value to uniquely reference
            entities within a persistence context it must then issue the=
 insert
            immediately when the users requests the entitiy be associate=
d with the session (like via
            save() e.g.) regardless of current transactional semantics.

            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    Hibernate was changed slightly once the implication =
of this was better understood so that
                    the insert is delayed in cases where that is feasibl=
e.
                </p></div><p>

            The underlying issue is that the actual semanctics of the ap=
plication itself changes in these cases.
        </p><p>
            Starting with version 3.2.3, Hibernate comes with a set of
            <a class=3D"ulink" href=3D"http://in.relation.to/2082.lace">=
enhanced</a> identifier generators targetting
            portability in a much different way.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"note"><h2>Note</h2><p>
                    There are specifically 2 bundled <span class=3D"emph=
asis"><em>enhanced</em></span>generators:
                    </p><div class=3D"itemizedlist"><ul><li><p>
                                <code class=3D"classname">org.hibernate.=
id.enhanced.SequenceStyleGenerator</code>
                            </p></li><li><p>
                                <code class=3D"classname">org.hibernate.=
id.enhanced.TableGenerator</code>
                            </p></li></ul></div><p>
                </p></div><p>
            The idea behind these generators is to port the actual seman=
tics of the identifer value
            generation to the different databases.  For example, the
            <code class=3D"classname">org.hibernate.id.enhanced.Sequence=
StyleGenerator</code> mimics the behavior of
            a sequence on databases which do not support sequences by us=
ing a table.
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"portability-functions"/>=
28.5.=C2=A0Database functions</h2></div></div></div><div xmlns:rf=3D"jav=
a:org.jboss.highlight.XhtmlRendererFactory" class=3D"warning"><h2>Warnin=
g</h2><p>
                This is an area in Hibernate in need of improvement.  In=
 terms of portability concerns,
                this function handling currently works pretty well from =
HQL; however, it is quite lacking
                in all other aspects.
            </p></div><p>
            SQL functions can be referenced in many ways by users.  Howe=
ver, not all databases
            support the same set of functions.  Hibernate, provides a me=
ans of mapping a
            <span class=3D"emphasis"><em>logical</em></span> function na=
me to a delegate which knows how to render
            that particular function, perhaps even using a totally diffe=
rent physical function call.
            </p><div xmlns:rf=3D"java:org.jboss.highlight.XhtmlRendererF=
actory" class=3D"important"><h2>Important</h2><p>
                    Technically this function registration is handled th=
rough the
                    <code class=3D"classname">org.hibernate.dialect.func=
tion.SQLFunctionRegistry</code> class
                    which is intended to allow users to provide custom f=
unction definitions without
                    having to provide a custom dialect.  This specific b=
ehavior is not fully completed
                    as of yet.
                </p><p>
                    It is sort of implemented such that users can progra=
matically register functions
                    with the <code class=3D"classname">org.hibernate.cfg=
.Configuration</code> and those functions
                    will be recognized for HQL.
                </p></div><p>
        </p></div><div class=3D"section" lang=3D"en-US"><div class=3D"ti=
tlepage"><div><div><h2 class=3D"title"><a id=3D"portability-types"/>28.6=
.=C2=A0Type mappings</h2></div></div></div><p>
            This section scheduled for completion at a later date...
        </p></div></div><div class=3D"bibliography"><div class=3D"titlep=
age"><div><div><h2 class=3D"title"><a id=3D"d0e21713"/>References</h2></=
div></div></div><div class=3D"biblioentry"><a id=3D"biblio-PoEAA"/><p>[<=
abbr class=3D"abbrev">PoEAA</abbr>] <span class=3D"title"><i>Patterns of=
 Enterprise Application Architecture</i>. </span><span class=3D"isbn">0-=
321-12742-0. </span><span class=3D"authorgroup">by <span class=3D"firstn=
ame">Martin</span> <span class=3D"surname">Fowler</span>. </span><span c=
lass=3D"copyright">Copyright =C2=A9 2003 Pearson Education, Inc.. </span=
><span class=3D"publisher"><span class=3D"publishername">Addison-Wesley =
Publishing Company. </span></span></p></div><div class=3D"biblioentry"><=
a id=3D"biblio-JPwH"/><p>[<abbr class=3D"abbrev">JPwH</abbr>] <span clas=
s=3D"title"><i>Java Persistence with Hibernate</i>. </span><span class=3D=
"subtitle">Second Edition of Hibernate in Action. </span><span class=3D"=
isbn">1-932394-88-5. </span><span class=3D"bibliomisc">
            <a class=3D"ulink" href=3D"http://www.manning.com/bauer2">ht=
tp://www.manning.com/bauer2</a>
        . </span><span class=3D"authorgroup">by <span class=3D"firstname=
">Christian</span> <span class=3D"surname">Bauer</span> and <span class=3D=
"firstname">Gavin</span> <span class=3D"surname">King</span>. </span><sp=
an class=3D"copyright">Copyright =C2=A9 2007 Manning Publications Co.. <=
/span><span class=3D"publisher"><span class=3D"publishername">Manning Pu=
blications Co.. </span></span></p></div></div></div><HR xmlns=3D""/><a x=
mlns=3D"" href=3D"legalnotice.html"><p xmlns=3D"http://www.w3.org/1999/x=
html" class=3D"copyright">Copyright =C2=A9 2004 Red Hat, Inc.</p></a></b=
ody></html>
------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/hibernate.css
Content-Transfer-Encoding: 8bit

@import url("jbossorg.css");

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* work around problems in the jboss.org styles wrt html & jHighLight */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
pre {
    font-family:Monaco,monospace;
    line-height: 1.29em;
}

pre br {
    display:none;
}

pre.JAVA {
    line-height: 1.29em;
}

pre.XML {
    line-height: 1.29em;
}

pre.JSP {
    line-height: 1.29em;
}

pre.XHTML {
    line-height: 1.29em;
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

body{
	background-image:url(../images/org/hibernate/bkg_gradient.png);
    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
}

a{
    text-decoration:none;
}

h1{
	background-image:url(../images/org/hibernate/title_hdr.png);
	color:#182737;
}

h2,h3,h4,h5,h6{
    color:#4a5d75;
}

#title a.site_href {
    display:block;
    height:100px;
    width:362px;
    float:left;
    background:url(../images/org/hibernate/hibernatelogo.png) top left no-repeat;
}

#title a.doc_href {
    display:block;
    height:100px;
    background:transparent url(../images/org/hibernate/community_doc.png) top right no-repeat;
}

.releaseinfo {
    color:#4a5d75;
    font-size:150%;
}

div.note {
    background-color:#849092;
    color:white;
}

div.note h2 {color:white;}

div.note a:visited, div.tip a:visited, div.important a:visited, div.caution a:visited, div.warning a:visited, div.note a:link, div.tip a:link, div.important a:link, div.caution a:link, div.warning a:link {
    color: #f7f2d0;
}

.docnav li.next a strong {background-image:url(../images/org/hibernate/docbook/next.png);}
.docnav li.previous a strong {background-image:url(../images/org/hibernate/docbook/prev.png);}
.docnav li.home a strong {background-image:url(../images/org/hibernate/docbook/home.png);}
.docnav li.up a strong {background-image:url(../images/org/hibernate/docbook/up.png);}

/* Eclipse Help Navigation */
.navheader td.next a {background-image:url(../images/org/hibernate/docbook/next.png);}
.navheader td.previous a {background-image:url(../images/org/hibernate/docbook/prev.png);}

.navfooter td.next a {background-image:url(../images/org/hibernate/docbook/next.png);}
.navfooter td.previous a {background-image:url(../images/org/hibernate/docbook/prev.png);}
.navfooter td.home a {background-image:url(../images/org/hibernate/docbook/home.png);}
.navfooter td.up a {background-image:url(../images/org/hibernate/docbook/up.png);}



------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/jbossorg.css
Content-Transfer-Encoding: 8bit

@import url("documentation.css");
@import url("docnav.css");
@import url("reports.css");
@import url("extensions.css");
@import url("codehighlight.css");

body {
    background-image:url(../images/community/bkg_gradient.gif);
    background-repeat:repeat-x;
    margin:0 auto;
    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
    font-size:12px;
    max-width:55em;
    padding:0em 2em;
    color:#333;
    line-height:150%;
    text-align:justify;
}

/* Links */

a:link {color:#0066cc;}

a:visited {color:#6699cc;}

div.longdesc-link {
    float:right;
    color:#999;
}

/* Headings */

h1, h2, h3, h4, h5, h6 {
    color:#4a5d75;
    line-height:130%;
    margin-top:0em;
    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
    background-color:transparent;
}

h1 {
    background-image:url(../images/community/title_hdr.png);
    background-repeat:no-repeat;
    border-top:1px dotted #CCCCCC;
    line-height:1.2em;
    color:#182737;
    font-size:2em;
    padding:1.5em;
}

h2 {font-size:1.6em;}

h3 {
    font-size:1.3em;
    padding-top:0em;
    padding-bottom:0em;
}

h4 {
    font-size:1.1em;
    padding-top:0em;
    padding-bottom:0em;
}

h5.formalpara {
    font-size:1em;
    margin-top:2em;
    margin-bottom:.8em;
}

/* Element rules */

hr {
    border-collapse:collapse;
    border-style:none;
    border-top:1px dotted #ccc;
    width:100% !important;
}

sup {color:#999;}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/documentation.css
Content-Transfer-Encoding: 8bit

/* Lists */

ol li, ul li {
    padding-left:.2em;
    padding-bottom:.5em;
    margin:0em;
}

ul {
    padding-left:1.6em;
    list-style-image:url(../images/community/dot.png);
    list-style-type:circle;
}

ul ul {
    list-style-image:url(../images/community/dot2.png);
    list-style-type:circle;
}

dt {
    font-weight:bold;
    margin-bottom:0em;
    padding-bottom:0em;
}

dd {
    margin:0em;
    margin-left:2em;
    padding-top:0em;
}

li p:first-child, dd p:first-child {
    padding:0em;
    margin-top:.3em;
}

.variablelist, .itemizedlist {margin-top:.6em;}

ul li p:first-child {margin:0em;}

/* Images */

img {
    display:block;
    margin:2em 0;
}

.inlinemediaobject, .inlinemediaobject img {
    display:inline !important;
    margin:0em;
}

.programlisting a img, pre a img, td a img, td img {
    display:inline;
    margin:0 0;
}

/* Needed for Safari */

pre a span img, pre span img {
    display:inline;
    margin:0 0;
}

span.co {
    position:absolute;
    left:900px
}

/* Document modes */

.confidential {
    background-color:#900;
    color:white;
    padding:.5em .5em;
    font-family:serif;
    text-transform:uppercase;
    text-align:center
}

dt a {font-weight:normal;}

.longdesc-link {display:none;}

.prompt {
    background-color:#ede7c8;
    padding:0em .3em;
}

/* User interface styles */

.screen .replaceable {color:#444;}

.screen {
    background-color:#ede7c8;
    color:#333;
    padding:.5em 1em;
    margin:0em;
}

pre, code, .guibutton, .keycap, .guilabel {
    font-size:0.9em;
    font-family:verdana, helvetica, sans-serif;
}

.guibutton, .keycap, .guilabel {
    font-weight:bold;
    white-space:nowrap;
    color:#444;
    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
}

.guibutton, .guilabel {}

.keycap {padding:.1em.4em;}

.example {
    background-color:#c8c5ac;
    padding:5px;
    margin-bottom:10px;
}

/* Terminal/Console text */

.command, .computeroutput, .filename, .citetitle, .replaceable, .option {font-weight:bold;}

.command .replaceable {color:#555;}

pre {
    display:block;
    background-color:#f9f3b0;
    color:#333;
    overflow:auto;
    padding:10px 20px;
}

code {white-space:nowrap;}

/* Admonitions */

/* Set basic colors and spacing */

div.note {
    background:#b5bcbd;
    color:#4c5253;
    border:1px solid #8a9195;
    margin-bottom:1.5em;
    background-repeat:no-repeat;
    background-position:10px 10px;
    padding:1em;
    padding-bottom:20px;
}

div.tip {
    background:#7e917f;
    color:white;
    border:1px solid #8a9195;
    margin-bottom:1.5em;
    background-repeat:no-repeat;
    background-position:10px 10px;
    padding:1em;
    padding-bottom:20px;
}

div.important {
    background:#4a5d75;
    color:white;
    border:1px solid #8a9195;
    margin-bottom:1.5em;
    background-repeat:no-repeat;
    background-position:10px 10px;
    padding:1em;
    padding-bottom:20px;
}

div.caution {
    background:#e3a835;
    color:#533500;
    border:1px solid #ab710a; 
    margin-bottom:1.5em;
    background-repeat:no-repeat;
    background-position:10px 10px;
    padding:1em;
    padding-bottom:20px;
}

div.warning {
    background:#7b1e1e;
    color:white;
    border:1px solid #65504e;
    margin-bottom:1.5em;
    background-repeat:no-repeat;
    background-position:10px 10px;
    padding:1em;
    padding-bottom:20px;
}

/* Pre tag color settings */

div.note pre {
    background-color:#d6dee0;
    color:#334558;
    border:1px solid #e1e9eb;
}

div.tip pre {
    background-color:#d5e1d5;
    color:#334558;
    border:1px solid #e1e9eb;
}

div.important pre {
    background-color:#e1eef4;
    color:#334558;
    border:1px solid #e1e9eb;
}

div.caution pre {
    background-color:#faf8ed;
    color:#334558;
    border:1px solid #e1e9eb;
}

div.warning pre {
    background-color:#faf8ed;
    color:#334558;
    border:1px solid #e1e9eb;
}

/* Background images and margin */

div.note, div.tip, div.important, div.caution, div.warning {margin-top:.5em;}

div.note {background-image:url(../images/community/docbook/note.png);}
div.tip {background-image:url(../images/community/docbook/tip.png);}
div.important {background-image:url(../images/community/docbook/important.png);}
div.caution {background-image:url(../images/community/docbook/caution.png);}
div.warning {background-image:url(../images/community/docbook/warning.png);}

div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable {color:#e3dcc0;}

pre .replaceable, tt .replaceable {color:#444 !important;}

div.note h2, div.tip h2, div.important h2, div.caution h2, div.warning h2 {
    height:32px;
    font-size:1.3em;
}

div.note h2 {color:#4c5253;}
div.tip h2 {color:white;}
div.important h2 {color:white;}
div.caution h2 {color:#533500;}
div.warning h2 {color:white;}

div.note .guilabel, div.tip .guilabel, div.important .guilabel, div.caution .guilabel, div.warning .guilabel {color:white !important;}

div.note li, div.tip li, div.caution li, div.warning li, div.important li {
	padding-left:10px;
	margin:0em;
}
	
div.note ul, div.tip ul, div.caution ul, div.warning ul, div.important ul {
	padding-left:40px;
	margin:0em;
}

div.note pre pre a:visited, div.tip pre pre a:visited, div.important pre pre a:visited, div.caution pre pre a:visited, div.warning pre pre a:visited,
div.note pre a:link, div.tip pre a:link, div.important pre a:link, div.caution pre a:link, div.warning pre a:link {color:#0066cc !important;}

div.note a:visited, div.tip a:visited, div.important a:visited, div.warning a:visited,
div.note a:link, div.tip a:link, div.important a:link,  div.warning a:link {color:#f7f2d0;}
	
div.note a:visited, div.note a:link, div.caution a:link, div.caution a:visited {color:#0066cc;}

/* Admonition icons spacing */

div.note h2, div.note p, div.tip h2, div.tip p, div.caution h2, div.caution p, div.warning h2, div.warning p, div.important h2, div.important p {
    padding:0em;
    margin:0em;
    padding-left:56px;
}

/* Page Title */

#title {
    padding:0px;
    margin:0px;
}

#title strong {display:none;}

#title a.site_href {
    display:block;
    height:89px;
    width:310px;
    float:left;
    background:url(../images/community/jbossorglogo.png) top left no-repeat;
}

#title a.doc_href {
    display:block;
    height:89px;
    background:transparent url(../images/community/community_doc.png) top right no-repeat;
}

/* Table */

table {
    border:1px solid #aaa;
    width:100%;
    border-collapse:collapse;
}

table th {
    text-align:left;
    background-color:#4A5D75;
    padding:.3em .5em;
    color:white;
}

table td {padding:.15em .5em;}

table tr.even td {background-color:#f5f5f5;}

table th p:first-child, table td p:first-child, table li p:first-child {
    margin-top:0em;
    padding-top:0em;
    display:inline;
}

th, td {border-style:none;}

table table td {
    border-bottom:1px dotted #aaa !important;
    background-color:white;
    padding:.6em 0em;
}

table table {
    border:1px solid white !important;
    font-size:.9em;
}

td.remarkval {
    font-size:.9em;
    color:#444;
}

.defaultval {font-size:.8em}

td.typeval {font-size:.8em}

td.fieldval {
    font-weight:bold;
    font-size:.9em;
}

th.dbkey {font-size:.9em;}

.lbname, .lbtype, .lbdescr, .lbdriver, .lbhost {
    color:white;
    font-weight:bold;
    background-color:#999;
    font-size:0.9em;
    width:120px;
}

td.remarkval {width:230px;}

td.tname {
    font-weight:bold;
    font-size:1.1em;
}

h5 {font-size:9pt;}
h6 {font-size:10pt;}

th.dbfield {width:120px;}
th.dbtype {width:70px;}
th.dbdefault {width:70px;}
th.dbnul {width:70px;}
th.dbkey {width:70px;}

span.book {
    margin-top:4em;
    display:block;
}

span.chapter {
    display:block;
    margin-top:0.5em;
}

/* Breadcrumbs */

#breadcrumbs ul li.first:before {content:" ";}

#breadcrumbs {
    color:#900;
    padding:3px;
    margin-bottom:25px;
}

#breadcrumbs ul {
    margin-left:0;
    padding-left:0;
    display:inline;
    border:none;
}

#breadcrumbs ul li {
    margin-left:0;
    padding-left:2px;
    border:none;
    list-style:none;
    display:inline;
}

#breadcrumbs ul li:before {
    content:"\0020 \0020 \0020 \00BB \0020";
    color:#333;
}

/* Status */

.alpha1 {background:white url(../images/community/watermark-alpha1.png) top left repeat;}
.alpha2 {background:white url(../images/community/watermark-alpha2.png) top left repeat;}
.beta1 {background:white url(../images/community/watermark-beta1.png) top left repeat;}
.beta2 {background:white url(../images/community/watermark-beta2.png) top left repeat;}
.pre-release-candidate {background:white url(../images/community/watermark-pre-release-candidate.png) top left repeat;}
.release-candidate {background:white url(../images/community/watermark-release-candidate.png) top left repeat;}

/* Index */

.glossary h3, .index h3 {
    font-size:2em;
    color:#aaa;
    margin:0em;
}

.indexdiv {margin-bottom:1em;}

.glossary dt, .index dt {
    font-size:.9em;
    color:#444;
    padding-top:.5em;
}

.glossary dl dl dt, .index dl dl dt {
    font-size:.85em;
    color:#777;
    line-height:1.2em;
    font-weight:normal;
    padding-top:0em;
}

.index dl dl dt:before {
    content:"- ";
    color:#ccc;
}

/* Changes */

.footnotes {}

.footnote {
    padding:.2em 1em;
    background-color:#c8c5ac;
    font-size:.9em;
    margin:0em;
    margin-bottom:.5em;
    color:#222;
}

table .footnote {margin:1em .5em;}

sup {
    padding:0em .3em;
    padding-left:0em;
}

.footnote {position:relative;}

.footnote sup {
    color:#e3dcc0;
    font-size:1.8em;
    position:absolute;
    left:.4em;
}

.footnote sup a:link, .footnote sup a:visited {
    color:#92917d;
    text-decoration:none;
}

.footnote:hover sup a {
    color:#fff;
    text-decoration:none;
}

.footnote p {padding-left:5em;}

.footnote a:link, .footnote a:visited {color:#00537c;}

.footnote a:hover {color:white;}

li p:first-child {
    margin:0em !important;
    padding:0em !important;
}

div.chapter, div.section {padding-top:2em;}

.revhistory {font-size:}

pre .replaceable, pre .keycap {color:white;}

pre {
  font-family:verdana,helvetica,sans-serif;
  background-color:#F5F5F5;
  border:1px solid #CCCCCC;
  padding:5px 15px 5px 25px;
}

div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable,
div.note .keycap, div.tip .keycap, div.important .keycap, div.caution .keycap, div.warning .keycap {color:white;}

div.abstract {font-size:larger;}

.authorgroup {}

.authorgroup h4 {
    padding:0em;
    margin:0em;
    margin-top:1em;
}

.author, .editor, .translator, .othercredit {display:block;}

/* Simpler author style on contents page */

.authorgroup div {
	margin-left:10px;
	margin-right:10px;
	margin-bottom:15px;
}

ul li p:last-child {
    margin-bottom:0em;
    padding-bottom:0em;
}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/dot.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAUAAAAGCAYAAAAL+1RLAAAACXBIWXMAAAsTAAAL
EwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj33
3vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEs
DIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIe
EeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH
/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAn
f+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJ
V2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4
mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHg
g/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl
7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/A
V/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5
WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQ
WHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAA
RKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv
1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4
IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGy
UT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPE
bDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhM
WE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPE
NyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD
5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2h
tlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0
dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHK
CpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2ep
O6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN
2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIp
G6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3n
U9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36
p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYP
jGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLn
m+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cR
p7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0H
DYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dn
F2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofc
n8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAEZ0FNQQAAsY58+1GTAAAAIGNIUk0AAHolAACA
gwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAA5SURBVHjabIyxDQAgDMPC
k/0mD+Wd9h8zISFERtuKbNPd2AYQIB1wiwVoZkiiqlKSf6nf5wL0bg8AZdRI5AZp
ah0AAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/dot2.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAUAAAAGCAYAAAAL+1RLAAAAR0lEQVQI123LsQ2A
MBAEwcH6PpzSC7WQuBCX4ZoQmftwQMCTsclKp71tjHGiI7DQIocLExW9ZDFxp+O7
VC8Vq6Bhx5Fu/ngAegINugoTibUAAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/docbook/note.png
Content-Transfer-Encoding: Base64

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

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/docbook/tip.png
Content-Transfer-Encoding: Base64

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
RK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/docbook/important.png
Content-Transfer-Encoding: Base64

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
yNOTAAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/docbook/caution.png
Content-Transfer-Encoding: Base64

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
RK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/community/docbook/warning.png
Content-Transfer-Encoding: Base64

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
RK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/docnav.css
Content-Transfer-Encoding: 8bit

/* Document Navigation */

.docnav a, .docnav strong {
    text-decoration:none;
    font-weight:normal;
}

.docnav {
    list-style:none;
    margin:0em;
    padding:0em;
    position:relative;
    width:100%;
    padding-bottom:2em;
    padding-top:1em;
    border-top:1px dotted #ccc;
}

.docnav li {
    list-style:none;
    margin:0em;
    padding:0em;
    display:inline;
    font-size:.8em;
}

.docnav li:before {content:" ";}

.docnav li.previous, .docnav li.next {
    position:absolute;
    top:1em;
}

.docnav li.up, .docnav li.home {margin:0em 1.5em;}

.docnav li.previous {
    left:0px;
    text-align:left;
}

.docnav li.next {
    right:0px;
    text-align:right;
}

.docnav li.previous strong, .docnav li.next strong {
    display:block;
    height:22px;
}

.docnav {
    margin:0 auto;
    text-align:center;
}

.docnav li.next a strong {
    background:url(../images/community/docbook/next.png) top right no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-right:60px;
    font-size:1.2em;
}

.docnav li.previous a strong {
    background:url(../images/community/docbook/prev.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:1.2em;
}

.docnav li.home a strong {
    background:url(../images/community/docbook/home.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:1.2em;
}

.docnav li.up a strong {
    background:url(../images/community/docbook/up.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:1.2em;
}

.docnav a:link, .docnav a:visited {color:#666 !important;}

.docnav a:hover, .docnav a:focus, .docnav a:active {color:black !important;}

.docnav a {
    max-width:10em;
    overflow:hidden;
}

.docnav a:link strong {text-decoration:none;}

.docnav {
    margin:0 auto;
    text-align:center;
}

.docnav {margin-bottom:16px;}

/* Eclipse Help Navigation */

.navheader {padding-top:35px}

.navheader table {border-style:none}

.navheader a {
    text-decoration:none;
    font-weight:normal;
    font-size:.8em;
}

.navheader td.next a {
    background:url(../images/community/docbook/next.png) top right no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-right:60px;
    font-size:0.9em;
}

.navheader td.previous a {
    background:url(../images/community/docbook/prev.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:0.9em;
}

.navheader a:link, .navheader a:visited {color:#666 !important;}

.navheader a:hover, .navheader a:focus, .navheader a:active {color:black !important;}

.navheader a {
    max-width:10em;
    overflow:hidden;
}

.navheader a:link {text-decoration:none;}

.navfooter table {border-style:none}

.navfooter a {
    text-decoration:none;
    font-weight:normal;
    font-size:.8em;
}

.navfooter td.next a {
    background:url(../images/community/docbook/next.png) top right no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-right:60px;
    font-size:0.9em;
}

.navfooter td.previous a {
    background:url(../images/community/docbook/prev.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:0.9em;
}

.navfooter td.home a {
    background:url(../images/community/docbook/home.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:0.9em;
}

.navfooter td.up a {
    background:url(../images/community/docbook/up.png) top left no-repeat;
    padding-top:10px;
    padding-bottom:15px;
    height:40px;
    padding-left:60px;
    font-size:0.9em;
}

.navfooter a:link, .navfooter a:visited {color:#666 !important;}

.navfooter a:hover, .navfooter a:focus, .navfooter a:active {color:black !important;}

.navfooter a {
    max-width:10em;
    overflow:hidden;
}

.navfooter a:link {text-decoration:none;}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/reports.css
Content-Transfer-Encoding: 8bit

/* Reports */

.reports ul.locale {list-style:none;}

.reports ul {
    padding:0em;
    margin:0em;
}

.reports ul.locale li {
    font-size:small;
    color:#000;
    display:block;
    border:1px solid #eee;
    float:left;
    padding-right:2em;
    margin-right:1em;
    margin-bottom:1em;
}

.reports ul.locale li a {
    font-size:1.2em;
    display:block;
    padding-top:.1em;
    padding-bottom:.5em;
}

.reports ul.locale strong {
    display:block;
    margin:0em;
    padding:0em;
    margin-bottom:-2.2em;
}

.reports ul.locale span.value {
    display:block;
    position:relative;
    text-align:right;
    margin-right:-1.5em;
    font-size:1.0em;
    color:#444;
}

.reports ul.locale li {
    width:12em;
    display:block;
    float:left;
    margin:0em;
    clear:none;
}

.reports ul.locale li div.progress {
    font-size:1em;
    width:13.2em;
    position:relative;
    left:0em;
    top:0em;
    margin-bottom:0em;
}

.reports h2 {
    font-size:1em;
    margin:0em;
}

.reports li {}

.reports li:hover {
    background-color:#666;
    border-color:#444 !important;
    color:white !important;
}

.reports li:hover strong, .reports li:hover h2, .reports li:hover a, .reports li:hover span.value {color:white;}

/* Uniform */

body.results, body.reports {
    max-width:57em !important;
    padding:0em !important;
}

/* Progress Bar */

div.progress {
    display:block;
    float:left;
    width:16em;
    background:#c00 url(../images/community/shine.png) top left repeat-x;
    height:1em;
}

div.progress span {
    height:1em;
    float:left;
}

div.progress span.translated {background:#6c3 url(../images/community/shine.png) top left repeat-x;}
div.progress span.fuzzy {background:#ff9f00 url(../images/community/shine.png) top left repeat-x;}

/* Results */

.results ul.locale {
    list-style:none;
    padding:0em;
    margin:0em;
}

.results .pofile {
    padding:0em !important;
    margin:0em;
}

.results ul.locale li {
    border-top:1px solid #eee;
    padding:0em;
    margin:0em;
    padding-left:32px;
}

.results ul.locale .pofile {
    font-size:1.2em;
    display:block;
    width:100%;
    color:#444;
    padding:0em;
    margin:0em;
}

.results span.value {color:#888;}

.results strong {font-weight:normal;}

.results .home a {
    display:block;
    margin:0 auto;
    width:5em;
    background:url(../images/community/docbook/home.png) top left no-repeat;
    padding:5px;
    padding-left:28px;
    font-size:1.2em;
}

.results ul.locale li:hover, .results ul.locale li:hover span.pofile, .results ul.locale li:hover strong, .results ul.locale li:hover span.value {
    background-color:#666 !important;
    color:white;
}

ul.locale {list-style:none;}

ul.locale li.total {
    font-size:small;
    color:#777;
    width:31em;
    display:block;
    float:left;
    margin-right:2em;
    clear:none !important;
}

ul.locale li {
    clear:both;
    font-size:small;
    color:#777;
    display:block;
}

ul.locale strong, span.value {
    font-weight:normal;
    color:#888;
    font-size:.7em;
}

ul.locale li a {
    font-size:1.2em;
    display:block;
    padding-top:.2em;
}

ul.locale li.total div.progress {
    position:relative;
    left:0em;
    top:0em;
    margin-bottom:0em;
}

ul.locale li {width:100%;}

ul.locale li div.progress {
    float:left;
    position:relative;
    left:30.5em;
    top:-2em;
    margin:0em;
    margin-bottom:-3em;
}

li.total {padding:0em !important;}

li.total {
    float:right;
    max-width:16em;
    padding:.5em;
    margin:0 auto;
    padding-top:.5em;
    background-color:#f7f2d0;
    font-size:1.3em !important;
    color:#ccc !important;
    margin-bottom:1em;
    min-height:9.5em;
}

li.total .value {
    color:#444;
    font-size:.8em;
}

li.total strong {
    display:block;
    color:black;
    font-weight:bold;
}

li.total span.value {
    position:relative;
    display:block;
    top:-1.25em;
    text-align:right;
}

.pofile {position:relative;}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/extensions.css
Content-Transfer-Encoding: 8bit

/* Firefox */

pre {-moz-border-radius:11px;}

.example {-moz-border-radius:15px;}

div.note, div.tip, div.important, div.caution, div.warning {-moz-border-radius:11px;}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: text/css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/codehighlight.css
Content-Transfer-Encoding: 8bit

span.property {color:#0066CC;}

pre.JAVA {line-height:10px;}

pre.XML {line-height:8px;}

pre.JSP {line-height:8px;}

pre.XHTML {line-height:8px;}

.java_type {color:#000000;}

.java_keyword {
    font-weight:bold;
    color:#7F1B55;
}

.java_javadoc_comment {
    color:#3F5FBF;
    font-style:italic;
    background-color:rgb(247,247,247);
}

.java_comment {
    color:#3F7F5F;
    background-color:rgb(247,247,247);
}

.java_operator {color:#000000;}

.java_plain {color:rgb(0,0,0);}

.java_literal {color:#2A00FF;}

pre CODE {
    font-size:12px;
    color:rgb(0,0,0);
    font-family:monospace; 
    white-space:nowrap;
}

.java_javadoc_tag {
    font-weight:bold;
    color:#7F9FBF;
    font-style:italic;
    background-color:rgb(247,247,247);
}

.java_separator {color:#000000;}

.xml_plain {color:rgb(0,0,0);}

.xml_tag_name {color:#3F7F7F;}

.xml_comment {
    color:#3F5FBF;
    background-color:rgb(247,247,247);
}

.xml_tag_symbols {color:#008080;}

.xml_rife_tag {
    color:rgb(0,0,0);
    background-color:rgb(228,230,160);
}

.xml_attribute_value {color:#2A00FF;}

.xml_attribute_name {
    font-weight:bold;
    color:#7F007F;
}

.xml_char_data {color:rgb(0,0,0);}

.xml_rife_name {
    color:#008cca;
    background-color:rgb(228,230,160);
}

.xml_processing_instruction {
    font-weight:bold;
    color:rgb(0,0,0);
    font-style:italic;
}

td.java {
    vertical-align:top;
    line-height:10px;
}

td.java-ln {
    vertical-align:top;
    line-height:10px;
}

tt.java {
    margin-bottom:0em;
    line-height:10px;
    font-family:verdana,helvetica,sans-serif;
}

tt.java-ln {
    margin-bottom:0em;
    line-height:10px;
}

pre.java {
    margin-bottom:0em;
    line-height:10px;
}

pre.java-ln {
    margin-bottom:0em;
    line-height:10px;
}

td.java-ln {
    line-height:10px;
    text-align:right;
}

tt.java-ln {
    color:#888888;
    line-height:10px;
}

pre.java-ln {
    color:#888888;
    line-height:10px;
}

span.java0 {
    font-size:8pt;
    color:#ffffff;
    line-height:10px;
}

span.java1 {
    font-size:8pt;
    color:#808080;
}

span.java2 {
    font-size:8pt;
    color:#3f7f5f;
    line-height:10px;
}

/* Single-line comment */

span.java3 {
    font-size:8pt;
    color:#3f7f5f;
    line-height:10px;
}

/* Keywords excluding 'return' */

span.java4 {
    font-weight:bold;
    font-size:8pt;
    color:#7F1B55;
    line-height:10px;
}

span.java5 {
    font-size:8pt;
    color:#2a00ff;
    line-height:10px;
}

span.java6 {
    font-size:8pt;
    color:#990000;
    line-height:10px;
}

span.java7 {
    font-size:8pt;
    color:#990000;
    line-height:10px;
}

span.java8 {
    font-size:8pt;
    color:#000000;
    line-height:10px;
}

/* Primitive types: long, int, void etc... */

span.java9 {
    font-weight:bold;
    font-size:8pt;
    color:#7F0055;
    line-height:10px;
}

span.java10 {
    font-size:8pt;
    color:#000000;
    line-height:10px;
}

span.java11 {
    font-size:8pt;
    color:#7f9fbf;
    line-height:10px;
}

span.java12 {
    font-size:8pt;
    color:#7f7f9f;
    line-height:10px;
}

span.java13 {
    font-size:8pt;
    color:#3f3fbf;
    line-height:10px;
}

span.java14 {
    font-size:8pt;
    color:#3f5fbf;
    line-height:10px;
}

span.java15 {
    font-size:8pt;
    color:#7F0055;
    line-height:10px;
}

/* Annotations */

span.java16 {
    font-size:8pt;
    color:#646464;
    line-height:10px;
}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/bkg_gradient.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAcAAABcCAYAAACiG6/nAAAACXBIWXMAAAsTAAAL
EwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj33
3vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEs
DIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIe
EeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH
/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAn
f+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJ
V2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4
mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHg
g/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl
7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/A
V/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5
WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQ
WHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAA
RKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv
1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4
IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGy
UT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPE
bDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhM
WE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPE
NyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD
5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2h
tlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0
dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHK
CpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2ep
O6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN
2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIp
G6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3n
U9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36
p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYP
jGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLn
m+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cR
p7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0H
DYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dn
F2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofc
n8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAINJREFUeNrUlMENwCAMA8+IwbpzJ+mz07QTJEiOEMA3
cnJxLPQ+90fwutQIi0h4SpEqNWPmYbT2zAHQXnvGleI9J62C7a3Ijt0W0NoOcZQy
M140W+l6O80ETGUlQ7ZDBSA85eCrcYHytra3pbZmElbMTDM0AOIgoFH62ArIL3bg
ior/AGXiBZIOhwYyAAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/title_hdr.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAApQAAABnCAYAAAC+VtKiAAAACXBIWXMAAAsTAAAL
EwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj33
3vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEs
DIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIe
EeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH
/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAn
f+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJ
V2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4
mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHg
g/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl
7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/A
V/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5
WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQ
WHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAA
RKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv
1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4
IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGy
UT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPE
bDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhM
WE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPE
NyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD
5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2h
tlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0
dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHK
CpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2ep
O6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN
2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIp
G6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3n
U9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36
p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYP
jGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLn
m+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cR
p7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0H
DYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dn
F2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofc
n8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
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
ap5/pSMyNCQztrej/lazWC4aYtAvVWj+d/deRbSytobZOukjomRz1e5RWefW9lyX
veGczi89f30V2x5i7ZwdjkfqRpsjBM9eI/cZnEPweBbR4cC9syEM3Mt9jd0LKa+U
ViLHNOz+hrSjfbZD+cyK2yf+91UFbieWNW2n64q/VIzb+dnrBLGRbYazY3nrgtb5
CsSB08RcOuL5b83WvjKgPB9UGq3bKSqb37/mAPa6OvY3Izsd1BZYY2yR0SFAQ6ni
KF5fBCrJIb7YaDO201Zerz6V5BKI4o86NZtuNKFbqzhe2+7PZWDjEiM+y/ha0dxz
1p0EcA20lqMM82uNxVKy8invYYCgWuwiD+ixnXOVxQuJ1XaeKyRYfKa5CNiIroG7
bkH4ORqd8wzx/Pusit1Zs+DH6vLcvGPGxGLGdGwfT71rzuNXYzSUrZ2lkpG3Kstg
F8tjKVvnmSTb3oCIll0BLgpC6+poZWzOt/9Gax9EMi5sBo63/16WNivRqTlkgkYL
25KBACrzAMX9zJzZ5kv9odYSQsQ2wMl/kXsi9P6NlSL6RYDJK5xjo3WnfpRUJy7Z
n9HrGJb2PNBLD1HfiB6p89J/JkO0gM2a3I6MNiTN9M4tsDxjVq9WXhSaiwRx/Prd
V66b24n1qpJqYLidaMG4sKPWDOr64AH37A3zyrJITgT7XBAvREyF7RMM1GvVm5Bx
NxPGoA04SaZC+kh7afBjNEkoDQkcz5H+mT4T5GyGSiReo7vQsSTXbxDUC98pg9HX
vQc36szAMuvnpDNNX8ydMcCMrJc28qL07dTZE74mzdiBC2YUjNNzhwN+bevum6L7
Q0zXudPI3H0zxiFlPix5pKqLmsrIdmb2c9KL7EvEUyAiMfW6PliZO+FZzFPsxzrn
k0gdxvnAWho/htP9vjHyuvbRpu+djNX1zza7aC94e2lrLU9/pqBNXyid9vfb1rQ7
earL7GrhS7JOI7MZGJzovG1CXWgnhq3YmdJBvu7A3eaMjuSlEXl3nmx04QYaBJXJ
1ncoVpbxm0Pxu/mcXiA7Xr/5nE5mGUg3UUcz6TUp42QD6QzHImMWvarQqkvTXErj
NzVQx5zI9cEwiU8vDT6a9+KmY7hJElOBGGNsVC9TqepkMM4OUmL/TLype9k0JAud
rbLTN0bXs3vvjE12Woo4g6qLyeh+aSS/dN7vHEPMeURlC7IET86pj+vPXuY8nlRt
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
6qQAAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/hibernatelogo.png
Content-Transfer-Encoding: Base64

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
hv8XYACHxxmmXUSCmAAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/community_doc.png
Content-Transfer-Encoding: Base64

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
BYnfF09MAAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=hibernate-single.css
Content-Type: text/css; name=hibernate-single.css
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/css/hibernate-single.css
Content-Transfer-Encoding: 8bit

@import url("hibernate.css");

.title {margin-top:30px;}

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=overview.png
Content-Type: image/png; name=overview.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/overview.png
Content-Transfer-Encoding: Base64

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

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=lite.png
Content-Type: image/png; name=lite.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/lite.png
Content-Transfer-Encoding: Base64

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
RK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=full_cream.png
Content-Type: image/png; name=full_cream.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/full_cream.png
Content-Transfer-Encoding: Base64

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

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=1.png
Content-Type: image/png; name=1.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/1.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAgBJREFUeNqklEFPE1EQx//d7W67bQnQ
iNA2mA14pxhNMCTa8AGIBw7Gi9WEs/0G8hHwbCJ8BEg8GBJMSQQxkbAXYjTQFIGm
2NputWWh6xpnNtum2NcDOsnsvLy383szb//7fOhhL16+mqCgkyfJs+T5Z/NPD0Xv
+gTJjyks2PYvvd44g3VmIRIJIxTS4PfLeVrLEGxVCKHkfgorjYaV2vu0j2q1BlVR
oCh+chmyLGPo2iBisetQVXWZQE9auVIHcOXrcTG1tr6FYrEkbLFSMfH5Sw6WdZ6m
TZcuQWjiefm7mXr3fhe2bXclJ+IxaMGgO3YcBwe5PJrNZtprvV1JZuuDQQvdgJAW
xHz6EYFG2nOO8xunp2UeLvDDT7T7pXJ14KRQgqYFLgEezs1ieuq2e6hdrVVNxOPD
On9FriR1UvgmPIOj4wLebmz2UgHq9QaHpNvOhaANts3tj3j9Zr0nxDq/4KBL+A9j
CZCZDDHG9MQ/QSKREAeDIVkSkdnXF74iIMyiM0l0GxI9ajS3PHPvzpUg8dgwh8W2
7D3JZw9yR8md3T0EAyoC5H/LXpZ88JHfGE0gGh0wqIDJtti8atLjY6PG9N1bQl24
B6kquDmuuwCWhvAv9ipiFWYqlRpqP37S7hIkWUJ0sJ/hptfCorex+CrogD3w7pOW
8e7ZzuSW/RFgAMayrykYOir5AAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=2.png
Content-Type: image/png; name=2.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/2.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmJJREFUeNp0k0toE1EUhv/Jq5lJhrRp
fVSpjdYiomiwNFBRG6yGSqV146qLVqFr69KVdeHGVe3GhShxI4ggcWlpJSHSggrW
J01LY0JJVKQ6aXQmVGI9Z5jEpJlcOJzMybnf/PPfcwWYrNt37x+ldIEiaJQWjIhc
Gbuc29ovmGwOa1rBv7amIP/rN7C5CY9Hhiy7KVwK/T9JoBumEAKMMODDp2VkMt/g
sNtht9sorLBaKSwCJJeIPW27IYrOKCstqbIYgN6NjT/h6dk5JJOrqLdIIVaSKc78
mZOlusXI4bfvE1CU9fKGluYmnO/vw7nQaQS6/OV6sfiXQGnKxVF+Odds9GOIvt33
cTEJyenQGyVRxPVrV6EVCvjxU0Fnx149Hj15aoCKyGS/8qeN02OMlQQTy+kq2SeO
d0OSRNy8NYWpO/cQi8+ju0INr9x6HsYJwkbhz375XtWgqhpmnsehkgdsbMmPysVq
VE3T/bSZGfhi/hVevl7QT+fIoYPoPdmDZzPRmj72p2ysLEump9ETOIaxS8MEfIPp
2VoIHTWnFEMiu3Zur2kYHDiLkeGLiMbn8PBxpBbgdMJmtSo0K2kdcqCzHbL7v5pQ
3ykMDYSwmsnqvvSfCVItCG9TY7lnW0szJ51uYRLPSaDrcJWxi0sr0NSCfrT79/nQ
QcFv5+V2u+D1NvIVmCiPPTnsoRRNpTP+dzR0DQ0O07EXKGQC+HxtXBslAQ+23h0d
pKoFf2Lpsz69lRCRBrG1dUdJwXgJUHOLKy4iy/TlcnkIgqAro1AMDyYMC1AXUgFr
Z1DpmTbG6vX+E2AAiVzl3KfvtyEAAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=3.png
Content-Type: image/png; name=3.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/3.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAAQCAYAAADwMZRfAAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAlVJREFUeNqcVEtvElEU/oYBChbpdIAC
pSKmUvuwCsYaNZrURU2TGmWhC91I1MZNTXXjxoX+BF250PiIey3xEYmv2miwPktc
uWiDJuUNnQEG685zJ5Q41GLiSU7u5Oacb75zzncuhwa7duPWRjrOkw+TB2rXEvk0
+dTk+Km7jTlcA8BlOq4sJjPIZotQlCoMBh7rLa2wWi3o6LDBaDTOUUyIwL6vAiGA
25JUCse/fsPy8i8YDQYC0KsgPE+u48CRezwuOOw2xmyYgOIsV1cDmKwo1fCrmQ+Q
5TKaWZJYpjM5gT7vrNzxBNDGaiUAU7X6E3o9r/rOHdswHj6Bw2MH4fN2IZsroKIo
4DhOLdPSus515Ogx6enDyCxjEkqmckIqk6//rbenGxNnwyguSbgfeQKxXUDo0KiG
US5fRG0A0LPaEj+SmoC+ns3IF4q4fvOe2hO7TcToyAFNjFwqscPHKmEgvnxB0gQ8
eBTF4+hLDPT5Edy+FbuHgph5+25Vf8oVhU0uoGvWRJvYji6PG2azGWaTac04xiRh
twlUv1y/3L9niOiWEXv/GR+/xBEYHMDpk8fxJjaLZDpTj2P6IZtjTKZ93k4N8r69
u2gqI01H3Wa1qgCkFZkxmep0OyS30y7IstosRJ+/xoWJM7h08ZwqPH/3JswvJLCY
SqsjZuawi1jRCveH2K4+exFTldnSYsRg/xb09/qh43WQJBmfqCymWAbidDrgcjoY
i+B/yd67wQNRFDSyX3MBl4oyKbQKxr5hAdk2h/+6gP94ChKsiawHlBxpzPktwADN
dt6wq7lOggAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=4.png
Content-Type: image/png; name=4.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/4.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAkFJREFUeNpiZMABJs6eJw+kFGD8/NSk
g7jUMmLRHA+kGv78+aPw9et3BkZGRgZ2djYQ/gAU3wCSAxr4EKshQM38QOrAx09f
DO7de8zw4cMnBlZWFiBmZmBmZmbg5GBjkJQUZxASEgAZVgA0aCGKITADHjx8anDp
8k2wzWysrCiGMDMxMjACMS8PN4OCgixILAFmEBPUsAmPn7wwOHXmMgMh8OXrN4YH
D5+A9UDDjYEJxPj561fC4ePnsWoK8vNimNDZiGrQl68M7959EACFD8wlCQ8ePmf4
9es3hgH6uloMjnZWWA1//eYtiAqAGeLw7MUrDEVcXJwM8VEhDLfv3MdqyPcfPxj+
/P0rAPIJOEw+f/6GoSg7LZ7hybPnDNt27cMZPt+//wBRCkzYJAN93BnkZKQYFi5d
gzeQ2dhYGWDeuSAlKYoiqaGuAqZB3gn29wKzM1MTGKQlJeBqQNHOzsYGTsksoPSh
ripfcOXaHbiCpSs3MPDz8zKwMDMxyMtKM8hIezPs2nuA4d37D3A1QoKgyAGnYAYm
oEkbgQnogbaGElzBoydPGW7eustwCxioT569AIvdvfcAHJgwV0iIg10/ATmxBZga
6zAICPBh+PspMHCnzJyP5A0mBmUleZBBC2CZkgmaQy+C0oubsxWDkpIsRlTeAboC
BHiASV5ZSYGBk5PjACj/YM3FwDjXBzkRGHUOb99+AEchMDeDw4eXlweIuUGBMgFo
aSPeogDJMFBqNABiUAhegOINQAM+oqsHCDAA/mTGI20yC6gAAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=5.png
Content-Type: image/png; name=5.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/5.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAnBJREFUeNp8VE1sElEQnv1tIaXdWIu0
0lJKbXqTgzGmVovKxaQH9ODBi9SkMSZNiok3L/bitTXx1kQx8eKNxouJiWmvxkRb
Tmjs7qZCQUAgoPwJceYFCAurkwzzdt/Mx8w3M8uBiTzdfu5CE0BVul5/Xl+9u2Pm
z5kEh+v1P75sNge1Wh14gQdJFEFRhmFgQNbw/jGCvTQFQYAlNJHYF1WJx1PAcRxI
kogqgCCg8hzYhodganICZFkOI9CKAQQBzqLZ/fAxqiSTafpHkCWpD4RDFUUBPDPT
YLEMbiHQA4rnW2Bb+9GYounxToqTzgmYm3XDGY8bZjGIAkkajSZo+hHaRqiVPYh0
KJZ++T4dxMA6KHdA1u7dgZOjJwwEPny0wSxxlc78BMepsRA+7onUBU1P9DFOAJvP
tuFQ0w3ltCWdyRJIgGWC6lV7QKawFJIrlxdg+bofcrk8vHu/B7lCoeOD5UC1VmN8
8mZ9t1otzJYrFfj6TWWc3F8N9vlRWTRLlAm2TDJcZnBGNp5swnHqB+vOoaojRyuM
XDq3BTtERqNMdt2u0waQ+TkP+K9e6jyXy5W+LHBWQBSEPLZZJ5DItGu8L5uLF84h
H9dYi2/fCjCgRCLZuXfYx8hE6Ed4+2YntXzjplcZsc1/jyfZMCWOU9gRHvy+RVhc
OA/FYglevHrNiKVJpjKcznGKD2B8oT2xI1QbDptyEI39d2KJdM+Mi94F2zvUvTs0
+uFMNu9V1SMolX4bQGQ82+2j4HDYyT3YvYS9W0wZ0RSGKpWqUq3WoNFs4hYLYLMN
tTmgLd7/56egB3CpdaSl0Vrfk4KZ718BBgBif97jHBwpBgAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=6.png
Content-Type: image/png; name=6.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/6.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAnZJREFUeNq0VEtrE1EU/pJJpnk0ySTT
SEyrbdWKgmDxD5itG5NFBRWhQSkUN2bj3n/gY6PgqwHtwoI0SMGKQtpFN4aQakKR
Wpq+ko7mMamPvEzxnmumNGm79MA3h8ud893vfPfM6NAW9x8/c7AUZAgw9DFIDAmG
NMPYrZHrM+01ujaCYZbuFYol6ZuSR7lS4S+YzSY4nXbIshOCIEzSIYystIeEETyv
1evBWCyJHz9/QTQaYTQaGAQqhKDXwcDW3V4PXC6JlPk0In2TwF+r1YPR2Y/I5Ys4
KBqNBtbWMygU1UG2jO4oaXqQnn4/J5VKWzB1iOhg8HoO4colP6xWC5cbmZpGVlGg
0/0Tf/rUCYiiSG2FSUkgX1ClrJJrOfV2aJR7EJ2d497cHAnCbDLt7G8q3ymFtHZ8
XxZXWgjOnT2DLtmFR09e4FNqAeOvJrG0nOYGa8FaojRInRjoGnN5tYWk90g386aA
4atDODlwjBUU8e7DDC/U2qH4XS7DYjYP6g8ykZRQGw8ePsXXpTQuDwXgckptRm9D
a0e12Sz7EoVfTmBxaRnjE5N87T3sadm3dVopJYgk2n+0u2VzZW2D554eL8+aAlKm
hcNup5SmWSFPxvp6vXfklEMqsx4p4vNJrDKi0RvX8Dm5gIHj/djIbCLDoIW7y0Vp
jB7C2zeR6oWLfpO7y+lbW1egZ8YZDALiiSSq1Roa2w1ksgpeR6ZQqVa5sUQgyy76
loJU3zL2qroVjMVTfDL3G3sdg9st0+irzbGf3+8DvFuv/wmtrtJol7gSIhFFI/PF
wYevs9NKCgIawR6SJtH5Xb+C3Xcabf4Kwvgf8VeAAQBgh/XTjV8wPQAAAABJRU5E
rkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=7.png
Content-Type: image/png; name=7.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/7.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAkBJREFUeNp8VM9rE0EU/nZnszYxv5pg
a6NpQkvowUtRKoJgAxWKRWz06MUg9GwO3ry0/0E8C63ixZsRD14rUgKKGlKL1FaT
WEyT6CZpNr8gRpyZbkI23WTh7czOfO+b9755byUMeR4/WZ/XpokHK/ePBuEEA8dl
OoSphWq1Otrtf7DbrWwrTe0ptWg/odDj7GCger0Z+pH6iVJJhUB3TSYCQggclGhs
zA2Hw15mB1CitzoSjWDzV7Ywm9zehSgKkE0mSiB1SQhdE6i5XE5Mes8xt2CHSNTI
VnMFZXYr/gmtVmuYTDTCIxwcZNk0ph0OiU58dIxsxT93gbdvLuLO8o0TBA8frfGx
WCoznZw0tQj9XJNYfrt7GajVOiwjMge9i3/AfioDiYiQJIKV8F1kD/M6wlz+N9Mn
3CEJZnMFHeCPUkSlonJNbi1d59JtPH+hwzSaTfxtt/0sE6aJU1Xrhvm7qYhLiwt4
+foNd+p/Gg2+5heHiXjl8iUoxRLef0wY7hNy7M7eac/EGUPQwvxVbO98HUBAYDGb
wa6ZkcRmAr4TIO95DywWM5JfjEkcdhtvBx4JZXpls55OB6YndaCZwBQf976nDKM4
O86jj/I60dYjcxcvxFivNI/FQiK5g8Nc3jAKj2ccsixv0gCedSuWRSPLpnDw2hy8
3gntmkv4tq+PgmIwPeWDa9TJ0ggZdrHWwdGKWvUrShnVao0WHMGI+RTsNivc7tFO
Cqu9nSwM+I/cY0XIaqBnOcaMOmf68f8FGACZQMJxI6o4TQAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=8.png
Content-Type: image/png; name=8.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/8.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAn9JREFUeNqsVF9Ik1EU/337tm9/o801
1GZYiCJIJUapSLXMysqBGtFDLyPouaLXHiwIoocwe+hBip56CCJHPRhFzJ6ielhF
f7Y15zJ1083NZeSWus75/LY23Hrqwtn9du89v/M793fOFVBi3By+u5EmB1mzspQk
85w7e+ZdqfNCCedBMlcimcKP1CJUogpGox4bTCao1eIE7Z0nMHdJEALYydEikZjZ
HwhhZWUVGo2aTIQokqkEWK0W2O1V/H+QgC7kfEUFoJamV6/ffjD7/CFkeYMdiQWb
SkUmCFhKp7GwkILJaGxz9p/A6GP3GPurFLB7n33j5onwVJ7iJoraub8DRw93YntT
Y349k/mNye/TxHRlQGEPkT/Smcy1Fy/fyNEob1RV2nDl0kVsqdkMg16PrgN7odfr
4AsEIdCZ5eVlCMTOZDLqiI2bmfT6A2E5Qm40NtTBYNDj6vUhDN2+g/sPHmFfR1uR
IvMJFgwu/lGzlFMzc0UHvk2updXeugszkaicjuJUkFYGlIEsiDqXZ+GIxRMy0Mm+
nvza0+eedfXBflpJMssgkqQp2jx9qpcutgI3bg0jEo3iePdBHOly4NMXH6aJWW4o
fkm+E4+92lYEwgDe9x/h/zqOX0tLGH22xkJHl/sXQGIWSa5iBhlpqK8tYhOLz6N5
RxPa97Sgvm4b+pzd8nqi4F4qLGaeRmSJSaJoT1+/g6TdOjsblyUOBCdQabPCeewQ
Wne3kIMFD91PEAyFZYlZ7hp7NRehi/2Fgor1csVGInPQaiVIGs26shfIWHquHwIa
oFQu/7feKdvFi4s/kaIuXs1mC7vYq3TxWNmn4B/vCT8B3nLvyR8BBgBxU/RbZ7ZT
oQAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=9.png
Content-Type: image/png; name=9.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/9.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAolJREFUeNp0U91rUnEYfo5Hnd/4scw5
Kmmsgi7mqGSrlkJQeNF0u4jopihGBKOiv6C/ICyCLkYldVE30aJdLAragmJQkLVW
SqVzza8t9aiRXzP6/c485nHuhfe8B33f5zzv83t+DNrEjYm7Z0hxkbQ1/TxJ8/LY
uWhrP9My7CHFly/8tq2k0iiWSpCyLBTKDui0GphMBtrmI3mNgOU2gNCvV6pVf+Bj
ENlsDnKZDDKZlCQLlgCxEgYdCjm2b+uGRqMOUKYCkERgUKlU/TOv3yGZXMVmQXrw
IxxFJsvZ6+uhAUIpvpkLgOPyjYH+vr24Oj6GSxfPw7HPLgKLx1MEsOKqawcJfUln
OFv0Z6LRdHjwAMYvnEU6m8VyLIHTJ0dw7Kir8X+tVkMyxTO+Qh9SulskGhd9aeig
A2/n3uP+w8e8JhKGwZFDA3jxarbRk8sXaLEL69jiic11EEKpVECpUIjY/CkWqZ5O
abuBYOg7Rj1uZDgO5XIZjv3rmlitFoQj0SagvxDW4bRaFVG8cex4MvUcWuKLXT07
wZCjnV8IEqB+cjKLYJj/1tJq1LQs0nVmrBaziMnIieNQqZS4fmsCN2/fQbFYoscq
6tGo1wGogymTyd29O3yfv3xDbW2Nb4guxTA67IaEsCiVynAODeLeg0cikC2dRlr8
9MFOP3uacw979JatpoFwZBlSKYvVX2nimRz29PZALpdhavolFr6G+FVoGg16mM2d
lNopMl9utv2HWHzF/mk+xDNoZ3uqj9Go561ft/2sIKwQrm6r2W/Q67zhyBK5PwWx
BkTEri4zrZSBVwDYcIvrjJx1J3qpHvS+6HQaXsS6Br7mG9wWpAWwjxQ9yUDrYHP8
E2AAV4X0abG2xV4AAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=10.png
Content-Type: image/png; name=10.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/10.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmtJREFUeNqslMtrE1EUxr+8JolJ20li
6piiHRuRkBpawY0ItgpduKr/gDS+kIJQceHGhW4UERcpboRCDf4B0oLoSk191Ed8
JLhRRE0sjWlqkom2zWTGiueOk5CYtLjwwsncnJn7m/Od+90B/sMw/J0Yn5jspssF
ikEKse5WgmKKIjJ24mhpTQgBzjNAOp1BbjGPSkWBxWKCyWSC29WBzk4PnE6HRM8c
ItBME4QANyTpezj59j1kuQLOYiGAuQYxGQ0wULjdPLZu6YIOmmYTow4YWVpeCT94
GKfFHLwed4NEu80Gf48I/zYRcrmCubkMS0d16TDrz0WePE1AVVWMHj+MDx8/4fbd
e9qNLp+AsdFjDcqvT95EoSDxVBXr3REj0YbzlAgFA5i4dhk7gzsaqjg4dACFooSL
VyK4dHUcZVnG0P59yOYWNUlVOf2fqZELuW+4PzOrNbR+9IWCePEqoS1m8fJNUpOl
KApWymWeihhgcvp/LC0j/eWrJiPUG2jywXwmW5sXqSq73abNV1d/oVqJZOW4fzaW
y8U35Rgk1ebcsO7C7X6xYadYj9jgOAu7SAwyJXb71gQ8i7/GwN49ZDYevs0Cdu/q
0/ridDhACiTyStLIftqcjlRvoKcl5Nb0HXpzEefOnsaZUyeRyWbxePY5hE1ezRo1
x7IOK4oaiz2Kk5lkWK1ck2O9Hpfm2KJUgnejGz6fkGKbws5Rve1HFFWNJpLvaAdK
LW1vpv+C4CWIhzVlkKlodQCHWYmFYknMLeSh/lT/NJCALlc7eL6dmsnFKBUmQHq9
T0GH7kQWvP45SOkRrT+91fFbgAEA4gvmEfx/jooAAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=11.png
Content-Type: image/png; name=11.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/11.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAj5JREFUeNqklE1rE1EUht/MV9MkNW36
EZMYGRoVQcQoKpZYDbpyI7pyp6miK6FB3NufUNeC9idUcCGFSoRScSEdlShKE2O1
JTVpMtGkM8kY8dxhMqR2XFQPnDlz5855zj133jsu/MXuP3h4hIJMHifPkBcmb17/
7PSuyyH5GoUpw/gp1xub0DY1+HxeeDy9EAS+QHNpgj12hFCyn8Jso6Els++XUa3W
IIkiRFEg58HzPIaHBhAKjUCSpBkCTXRyuS7g7MrXYnJufhHFYsmxxUpFxYePeWia
nqKij7ZA6MG98oaaXHixBMMwqOIghgcDdnKv241IaLd53263kcsX0Gq1Ulbr9krS
iy8VmjDMwd3JWxhPnLQhyfExXL54wR6327+wvl5mt1PsIhDtbKlc7V9dK+HO7Qmc
PnUcwZEhKG+yiO4J48bVK2Zczhe2tlZVEQ4HZfYVBVZode2bOZH7tIJWs4XzyYQ5
1jQNr9++g67rcHHctj2q1xvw+3fFGQRNq425ZwvwuCUcPnTQHJc3qnjydB4c58KB
/bFtEE1vEgQyh/8wJgEylUGUUTnyTxCfz8OCwiAZEpHa1+fdIcDLRKeS6J5zdKnR
s5lzZ07sCBIOBVmYtmVvST6Ty3+Jv1rKwt0joYf8T9nztMEu8r3RCAKBfoUWcNQW
m7WaVGw0qiTGjpmHzXEjJRH7YrIJYNJwPMXWipgK05VKDbXvP6g6B47nEBjwM7hq
tTBtFXb+FXTBLln/k46x6pnu5I79FmAAlOrGc6mXxd4AAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=12.png
Content-Type: image/png; name=12.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/12.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAolJREFUeNqElOtrUmEcx79Hj7d0erxs
bbmmrojVBjq20YsgrUUFBQkF7UWUdCGK2lZRBFFU1NtYEPVCavYfCAXRO9cqRjU0
wtpoW8rUXSqdRkzmXvR7Ts7MSz3w5dHzPOfD7/L9HQ4V1l3vIwttHpKDJJAipBDJ
33fiaLT0PlfhZV8ut+ya//odPzI/kVvOQVujgVq9CiaTnl3zkfoJli6DEMBOWyAS
jQufxqYgkXCQy2SQyXiSFFKplP7zsFjM0Om0LDI3gd4XIATQsZBfjQSFeHwOSoUc
ClIpREpgjtS01gyDQWDpuVhEfD6QgUg0IXyenMbeXS6k0xlMTEUKaW7ubIfJaADH
cQiPjWM6loBcLnNoNOp+Or4hyUfheTkSgr2tBceP9KB144YCYM/ubhzq2Y/1zVZ0
dThw/sxJrLNZkJiZY8cMAhaJO5aYx+2rF9DhaC3rVLdzCwLDr+F/+lxM59a1ywSx
YvJLFIuLWYGCcEronjVOkN5LN7Fj3+EySCw+Q5oVf6uUyr/OCMI2B4//rDv3vIXC
HjzgFp+9DYpNwVIuxzZBhCjksn+CWAR9p4/BoNfjwcPHSKUWxOca8g7rKksn0Gxr
rAowGvToPfUbcN/ro4LO/oGrxPQCEurzkLZGHTGvqa0IuXLxLBrNDXgzGkTbphbs
3O5EZ7udoAJLMcTGYKUm17dt7fI9efYCH8LjYJYvLiwzmLmhnqzJie78lkwiu5Qt
tLjY9oPJVNozNPxObGU1xyqUctisTSyVAYriXKUBHKSKe8IfJ5BKpkWHrkDIoahf
XYu6OiMDFgBlkDzIydJjc5FayEBCIJ7naYpV7NjPRoTVseqnoASmy39PxFX6YvH6
JcAAn33QvdPm2PwAAAAASUVORK5CYII=

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=13.png
Content-Type: image/png; name=13.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/13.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAAQCAYAAADwMZRfAAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmxJREFUeNqUVEtME2EQ/kqfa1tb+n5g
Aj4wBAK9eqKxohLQkmgMIUGrUcPFcPbmxYsnNJ40MYWjB0LjQYIlFi8kkIYSC1Zt
jKa1glDaxtJ2lzZx/k0lpWjASSY7uzP/N/PPN7MS1Mnj5y909PCRDpC6a1wh0ilS
/+idW7naM5I6AC8L2kxn9YnED+TzBUgoQqPmoNNrYTIaoNWqv7IkBDS3D4QAbgjC
jn8xHEU6nYFSqYBCLodcLiOVQiolbZDAaGyE02lj7wxofBeEALp4QYjMBOdRLBah
IoB/gUhIdbqjaGk+lqWjLgL6JqsWMvZ+JY50Jod7d4fxPbWG+YWw6DjCqXDtyiW0
nmhBscRj5UMMb96+w8bmlt5sMjygkJsNYhW84C4UBAwPDsDb1wOL2bjbp+tDV9HZ
0YbpYAjR1RjOe9xobzuN9fUN5vYxIhoYA8nUT3i6z8BFwfXi6mzHZOA1FsIRzMyG
xG9Ouw2VSoUavy2GsOvoiQ08mZ0AxykRDEzsARkZvS/2pO+CB00OO/WshMWlZdFX
LJWg0ajdMhxSTh5vhsHQKNqcSolMjY9dJ2sy6v960ER09l/0iPbTZ348fDSGrUwW
PWe7q2AqcQgZyFSTwwKFUr4PxEiZ+3vP4RQxUy+McroKMyMyxjN1ONTV0eqOrsb3
BH78/AWJZAq3fUNIEe0cx8HpsBHFc7BazfizAlJm9V72Rhx280giuYbyThmxT3Gx
bJZtaTmKbC6HEs/TbKTxcjKAX9t5OOxWNmyD068Cuf8ee4vFJI59dX/GD1xAnia0
TPNw6AU84FfASo+wBIyI+l/BbwEGAAgu9pHCJuhUAAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=14.png
Content-Type: image/png; name=14.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/14.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAnVJREFUeNp8lE1oE0EUx/+7SbbJJjH9
iGnTqE2keFDRiAoeBCPFSosfVVDEQ42KngT15kk8ePCiVHprQYOICB7qTVFRY6WX
VoxoRTQ2KbVpqibZzXeyCTiz2YTGbPpgGHbmvd++z2HQRO6O37OQzb3iKHD5wjlR
TZdRMd5HthtkeRJCEizDQKvVwmg00OunZI0QmL8phADuFyXJO/s1iERcBEMAOp2W
LA04ToeuzrWw2Tqg0Wgo6GoDhALiCdHrn5yBhmXQ0sKB0+lqEGJYOddzcDk3wGDQ
+wjoLLVlFcCZVDrjff5qCpIkYTUpFiWE5xdQLpe9xO5oDUJz8ObdtKwwPnoLJ48f
ajA26PW4ef0a+vs8sl4ksgwld2BpIpOpjHPbls14OHYbnTarqgfnh0/REGrf8YRA
vXET+x7qiWcu9Eu+ePH6vSpg4MB+OLrtWIxE687T6QzdPHI4BeLes5d+PHg80QDY
1OvC4ME+PHoygVw+X3eXyxfo5mRXSyLPGzB8+gTeTk7h8+y3hntaPSIChYQd3TZV
yHqHHdaONvRudOHSRS8c9i7s2rEdRwb7K8mu5CigpV24jkDMZiNKpVIdZGFxCXdG
x0jHasCyLI4dHkAkGsXMx08wmYwUItDuZZV58O3d427wJJvN4XswhB8/QwjOheWc
JAQRkaXlahVHah2rDFt4+sOXViNvhCgmkUylGjqWhlcoFmQv2ttbA7Qy1Ak5sYo3
nt07two8z0EgEDX5G4vBYjFXAUPVqWZUxt8nSaWh339iyGXzcghrzCYyxTys1jaq
5iPryspngWnylvTQPynviZOGSqtAi0CM5//X/yfAAG2S6MWO0yTPAAAAAElFTkSu
QmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=15.png
Content-Type: image/png; name=15.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/org/hibernate/docbook/callouts/15.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAApxJREFUeNp8lF9IU1Ecx7/33m26Tbub
0h915qUoDZEtMYqisIJEDDIkwhfT/kEQ5HM95Eu9CfbQS0Gt54I0KkJpbC20aOok
JKLWJlJEOr1u/sNt1u933WRuywPnnnvOvedzvt/f+Z0jIEe59/CRTE0zVSVtOES1
98aVi3OZ/ws5ALep6YxE5y3hsApJFCFKIsxmI6wWZsPJ39NhQsbqblWNOHwj40gk
EjDo9dDrdVQlSJIEY74BNlsJZHkLq2om0BjPFdNEuAM/Jh39bwexuLiUyyVWVmII
hiYxM6Oyzd7kwtClLEyHVYd3aBTVlbsRj8cRiUa1iSZjPpQKG0S2JQoQBAGzqsrK
FFku7KFfOoQkJPjitVuxyjK6797CmwE3+l71a3bqamtw7XLbBkUDLg/c7wexr2oP
dy06Atgj0QXlQmsLmhqOZ1mwlZXiWyCI+w+cFGRSklTDZX5+AQUF5ma245iansVH
3zhc74bQfefmBkhxkRVFVguuX22nbRAwPDoG3+jYGmRhkSEKQxSKB74HJvDz1+8s
JQwxUlw+DYe09/MtZ7TxFCgVWH9Z6TaM+L/k3JFnz19iJRbDXCSi2WFgXa1dg0jS
2ubyM7S12IL/lXNnT1Ncdqz3l5aX198LzGZu/CInTF6eIVRVqeSE/KXaeOoEaqqr
cPTIIRyodSAQnOBYsCqV5velkq3z8EE7DAY9Po9/xZ+p8DrkKdlZouS71NaKhpP1
8A5+gMvjRWnJdv7ck5n2j2dm59o9Xp/mndRlpT2P66i/s7yMUr/QTyr2b0h7Gugo
ssrOpsZjKC8vyWmNzgwq9+5igJu69ZudYt7Drlgs7uA8WE2sampMJiN0OokPXhct
+GTTqyANVpG8T5TkXaKmTm1m+SfAABq24tywBQwRAAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=EmployerEmployee.png
Content-Type: image/png; name=EmployerEmployee.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/EmployerEmployee.png
Content-Transfer-Encoding: Base64

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
uHDlIgAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=AuthorWork.png
Content-Type: image/png; name=AuthorWork.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/AuthorWork.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAvwAAAGdCAAAAABLc/gxAAAACXBIWXMAAABIAAAA
SABGyWs+AAAACXZwQWcAAAL8AAABnQAlMOsiAAAXDUlEQVR42u2dC4KsKAxFs//N
9hKced2lEkALESGSc+d1T5daFjce8ZcU8oOQU8noBiA0SsCP3Ar4kVsBP3Ir4Edu
BfzIrYAfuRXwI7cCfuRWwI/cCviRWwE/civgR24F/MitgB+5FfAjtwJ+5FbAj9wK
+JFbAT9yK+BHbgX8yK2AH7kV8CO3An7kVsCP3Ar4kVsBP3Ir4EduBfzIrYAfuRXw
I7cCfuRWwI/cCviRW3WBX6ypd5DtyIXf4nZ2CcZiS93hH224s/PBfoG/SXSm8w/8
qp0OglEfnen8A79qp4Ng1EdnOv/Ar9rpIBj10ZnOP/CrdloPhgQ/4TT7CNz3L6cv
7Tq/2tB/d2jue7tuEvjt+pfAaBwC084vw9/G3GWT5uH/ReAPA5Ht5b1gvQp++f1D
ZNsZtjCYdV4J/25M1OZ+zOSL4JctQnKzo3gf/OvOr8Jg1nkd/Gr7Bj4vO50Y/l8K
7h0k3wG/Ij9+Ubs/mfT7d87/+Z21/ozJd8J/8wzxJfBvNEwPf+438K/hiI7/Lk57
ghN+4H/E5IvgX6+A7t8deAX8AQXJqf+U8C/baY+oze0a/vZ6Bfwvds5DLjvBqI/O
dP6BX7XTQTDqozOdf+BX7XQQjProTOcf+FU7HQSjPjrT+Qd+1U4HwaiPznT+gV+1
s0swrKkLAib9u/Bb3M4uwRjd4dV2DdP5p+dX7XQQjProTOcf+FU7HQSjPjrT+Qd+
1c6+wQjzN5bkb3PRmc5/b/iH+LUKfxoAX/CP9j+m5wf+zbpInMUX1uxI03LOkQhY
9D+i5+/u1zD8kvQEYc3O3WxlQwhY9D8A/v5+3wj/zVR1cwhY9G8J/sf82oNfRGT8
xu+JgEX//eAf6Nce/JH1QRu/JwIW/dPzq3Z2D8bxBZCa+6SMXvB28G/qgvcpv1bh
L2r7gxu/JwIW/Vt8yAX8W8M7dPyW4X/Yvzn4n/D7Wvi7yDD8UzgnvcFOMOqjM51/
4FftdBCM+uhM5x/4VTsdBKM+OtP5B37VTgfBqI/OdP6BX7XTQTBy0XmuoC+zZjv+
gV+100EwMtGR0HnTGOTWbMc/8EfbqncwRP0vnBHe8332UU+AqPz+185rZs2Z/PYD
e0+HwCL8zT1bhT8AP7GZVv08Jd3zt/1Og9yaz4o7+obAIPztPRuF/5PpJ/rreD/W
JVxikQfLHSL4mwYht+Zg5w/SWiT4MuJeIeif27Pn7/x+17p02OxG4V/2TZ9P+Nv3
iSfLHaJz/rZeM2tW7Q8tJd6eDkF3+CVwKnk7zT2/BP5o7xb981jS60D4gyz3/TDQ
LwRjUpoXndv/9Ga3B7/s5zrqf/Gm7wP/3w3JR3aBzJqV/8RYQv8U8B/57bDZ7cG/
2bQBf1fFPaEH+I/8OoY/Il/VOawXgPElwRMXvH2lT3skMCbRxd/TIRh32iMZOw95
Ngt/nZs2W74zAu38twvBc8+1G/u943ki+EfWuVnw3zQEzzmX6BrndkvrPU8E/wN6
G/zvcL7jP9gv8DeJznT+n3W+5XW8xCTwu/L/sPODdA6rJoHflf/Hnf895XiJSYYl
8uW/h9nhfoub2mXjj+7w4q6ht0Yb7u18sEngbxGd6fx36vlfYhL4XfnnnF81dvTG
3x90Z5J7R0dnOv/j7/Z08GsR/tTeHoI1nfvpjd8FAcP+e97nH+bXMPyyFfPIXtAV
pvFF4Xmgnmso/EP993zCO8yvXfjjnNWjHNZ9Yvt6rjPTtwOSWYEd/z1ze4b5NQf/
dg9sdSjFwWic0v6JzpHxCwGR7JQ8/Eb8129uuTB7sF9z8C9JT7AYgF+2mqtP/ZWs
/JY8Kflc3e2lW79/rl9Xsq7wR8SO/7vwf54ghebUSxPbG/gL4f/wLhvx+/5QHjuJ
dqNkhWb834b/JzEXvMxd8AJ/EIztAmiPRHBNpIL22PA164PIBP6fvW/76umzip+1
v99WEO0MP2LIf+Xm3syunIfg/yRdxmC/FuHfG1fpqcHG36OT7fl/gu/aKY1dDHsC
/4/Y8d+s5z+0b2B724W/co9umjCyX5fKT0TsT9ilXeJByuAf678//AP82oXfglL4
ty8cWXv/krh8lpHgOje5graQ6xI5vwX/esEbuky+rWWwX+BvEp3p/N91XvZ+4LcT
jProTOcf+K+7mWbjX4zOdP77OAd+O8Goj850/oFftdNBMOqjM51/4FftdBCM+uhM
5x/4VTsHB0M999YTWj7WGoGARf/D4e/h1yL8ibU9BBLPPg7G2Oecb/ffE/5hfg3D
f1zbsMdFjeDwO1GWeEHzCFj0PwD+/n7twi+fX7Lt/zqHL8oC/PyTdEHzCFj03x/+
AX7Nwb9/octnV78WjOXt8Bvx3w3+kX7Nwb/Edhdf8BvxP+Kcv7tf4B+PgEX/wK/a
2TsY6+CzeyT0qIQHF0Db9Absjz3nH+p/wDl/f78W4f/a5oJveWyB/ij4Lfgffp+/
h983wl8SrUYr6oKARf+W4H/M75TwN9NL4X+N88F+gb9JdKbzD/yqnQ6CUR+d6fwD
v2qng2DUR2c6/8Cv2ukgGPXRmc4/8Kt2OghGfXSm8w/8qp0OglEfnen8A79q5/hg
yOnL7NSbd7wNwS/BT85rU98W4I/Nlm7lC8Ytwp82/+/JdzDjODJSRoclBIr8f4W/
pe8xuT26zacp+hm3k6Q3rMkcurrhA/9vSD45HrLF4S+tO8p9CtZU2RcOLmZR/uXz
X+B4jUdz30Pgj/1+XK1uZa92ybkNYrSUjtliF/4kYS+Af2VgX2BfKO326pMcBxez
KP+yb1pN/AO+hyS2Zf2ucySuW8m53XeYMu/m4D8bqSOOTrJ3pI4/OX/vgf/Ev4Z/
2bq29r47wv/Fr8rkDOenbpcDLF4Ef9oTBJvyHP6sY32ENIlAof8M/E/5HtrzBxBL
spXDZVO388K/ThOf8KdbNzrnAf554I9G6ghcJ6f+wR96GI/1vCAsirCHQJH//WeJ
pjzgewT82ZFZls+JTnyql3Wb9A1vvOAN9+exGnyff6D/Iff5m/t9LfxNh1gxjYBF
//3hb+63oPyruJ29g2FBhp7wTul8sF/gbxKd6fwDv2qng2DUR2c6/8Cv2ukgGPXR
mc4/8Kt2OghGfXSm8w/8qp0OglEfnen8A79qp4Ng1EdnOv/Ar9o5PBhFT0Sk6L25
JXJ3he3Arx7xZkxV+j68Fz4c/tNn00U7zfcSF4vwJw39PL0WNaEt/BFI69PzLgiU
+H8G/rzrfs5Ptvd5Lcu3zbktc0qJYfgra1kWXf0gKvcnyJgKf0v4mUEisKmRWb7U
shT7DoKVdz0I/ku1LJ83quwvvcie9pMpcbm4eUePzLJcqGX5m5JWP6yryCX+RR83
Hv6kQd9rWQp9f3M9Bv6s33Va4mrdXY4WCVaYK3ExCv/JSB267QnBW++Wz4QNOPgs
IlE3En/cEPiP/X+rZSn2vXxx3RX+c797Ry1L5GDRcYgWCQKTo8Uo/EvibQ/LOfz5
v7MQxB+T+bjhPX/SoKJalmLfJ64HnfYkTTlL5z81u+gVTgD/OqGsluUwLgHZr4I/
3YzhIe+6b+C3DL+uxwg2bUTAfsRcl4iPgvEC28T1wmqRuPxjPXB2QaDEfwBnvpal
3HcQtbzrMfDnRmb5m5CpZdFwZxaR4KQwBub65h1/n79O8uX1+Zu7IPCI/1u++8Jf
465gsJbvofEG/7VPmAf+q2s2Dv+NuAQ7zfTw34tUFwQs+p8W/iqTwO/KP/CrdjoI
Rn10pvMP/KqdDoJRH53p/AO/aqeDYNRHZzr/neAfrOJ2+tr4PRGw6L+3c9sCflf+
gT/UaPj33J7fV/v0eKnlYNYbEDhr8ffHOnJxeUvObcvCyCz7iwB+iZdrAP1Y+PP+
ZfnmTMP+fXlLzm3Lwsgsy5azEWb1RMlfVWN0GEHgzH+Q7bXI/teelRPlfX1d3pRz
27IwMsu+hQ/S+IL8xzW9K7PQO+DPp2VutlRCpxyE4nR5U85ta/jILAn8wVLxJj/f
Q0zDf+g/rMCRJW9Rwf9teVPObWv44BSZnn/JbEd5OfyH/uNTmhz5R9c/B8dSQ85t
C/gH+wf+cRo9Mkty7G46RocRBM78h1N346r2IwxFwfKWnNvWy0dmeRP8T/i37ty2
3jwyS/WqGJkF/dPoJ7wuELDjH/hDAb8r/8AfCvhd+Qf+UMDvyj/whwJ+V/6BPxTw
u/IP/KGA35V/4A81GP6CWpZk3nK7tsUQ/FdrWerXA/yJDIzMsr9I4JfcvOVgdeWo
GClmUQked+H/suQayc7ObcvAyCy/v5Jalr9FJTdPwnmLxJOMw19Ry6Lydw6WKVgP
8EcyMDKL3noqP0sy84L3HA/OYRf+yP8O63JWyyLL2TKF6wH+SKNHZkngj8foSOaF
B/lMhrNR+A9HKimrZTlfpnA9wB9p9OAUmZ5/OYQ/wPdt8B/5Tw4KB+SfLlO4HuCP
BPxj/QP/QA0emSU5RusxOiLyywfnsAt/ZqSS3dmSq2VRA61klylYj4xxbltWH3LV
jdFR+A5D9/kburLo3Laswl+zYYv3FuBH/zQR/HYRsOMf+EMBvyv/wB8K+F35B/5Q
wO/KP/CH6gO/NfUO8mjmgT+rodF46sOtbWLgt6mR0ZCHtsVT673RICsyFpjBAv4u
Rk+B/PySzOT9VZuxaYwFZrAGRkMe2hhPrfdei3LIfrCX/EyJl2zwtMtWXEYL+Ds5
1ek3qponSNLZU3Jy6X/3x6axFZfRGheNp9IMDaYvniZkpoMP5c6D9vy/dTe5kMUK
/HmNhr/95jCYv/gpM8mPzBLuEDrbVXEtS2Z54L+lYdGQhzbHU+u936ao59968nCf
UN1+dMkL/K01Khry0PZ4ar0NGnUAf/5UCPg7CPi7mY0uePeL3WXZSsx/DwNBIcr6
tlZj0xgKigENioY8tEGeWm+7Vi1XO+tvOAN/tYC/t9uWI7NcXpmdmFjQmGg8lWc2
Nn/tuFntcL+7t4wOhSmR2NbD52jmgT8r4O/hczTzwJ8V8PfwOZp54M8K+Hv4HM08
8GcF/D18jmYe+LMC/h4+RzMP/FkBfw+fpzx+fp09CculMVSVt1iLzFgBfw+feUDP
a1kOX4ST8tAf7wrWIjNWwN/DZ4hkcS1L0L9nZp+Wtwjwlwj4e/iM++qiWhZ9zqNn
Byu6NDyNtciMFfD38BkUs+zJm99qWYKuP5m9LOrtcZIz8BcJ+Hv4VGfipbUsutuX
9KggwH9PwN/D5wn8S55u4O8g4O/hMzznD4pTTmtZ9tOezOza4WmsRWasgL+Hz6VC
dWPTLCfdPvBHAv4ePmsYrtOXHcZaZMYK+Hv47Af/t31jdChMCfh7+BzNPPBnBfw9
fI5mHvizAv4ePkczD/xZAX8Pn3Y0OhSmBPzIrYAfuRXwI7cCfuRWwI/cCviRWwE/
civgR24F/MitgB+5FfAjtwJ+5FbAj9wK+JFbAT9yK+BHbgX8yK2AH7kV8CO3An7k
VsCP3Ar4kVsBP3Ir4EduBfzIrYAfuRXwI7cCfuRWwI/cCviRWwE/cqtLnIz+cvnS
L5gHflSia/CPHlikcGgR4EclAn7kVsCP3OrV8Fu5xkDv1Lvh7/x5aC71gP///hP4
kT11gL8posCPmqkf/L/dv/y9qj8WAD9qpi6nPZ9f8rsHyPo38KOx6nLBKzv8ywD4
0+NM+acD/8Tqc7dHxsKffBzwox9X8MvncmPZDkXA71s9Lng1dbL0vuAVqT/vAv6J
NeohV/+eX/0r3vmAf2INgf/GU69G8BfvfMA/sTykN8iNiw7gn1gu4A8uOrjgRZs8
wN/s89BcAn7gd6tX1/ACP7ojen7gdyvgB363An7gd6un4Zfy50kV8FPDi26oEv7i
B6Tpsvf2BXp+1Ex18H9SxT61Wb//9KOktYJFwoxKkUtpNcCPntWNnn+vzZLDxAGV
TrlcySsAfvS07sC/9usnWTMa/u1A0Bf+O58I/BPrMvyyn8qsZJXCf6+M5RT+sjrF
mgv20RsIPad7pz1W4N+vQdbLkK1xawMqLzeAf2LV3uoMz2JUgYi64N12knXe7fOe
k54/TNVXnxF+awTwo03t7vP3eQJ2Bv9WrpiBv/agA/wT6/Xwx9cgwI9KNUl6Q3gN
kj3tAX6UaBL4t2sQXacVXZNX0A/8E2sW+Lt8HppLwA/8bgX8wO9WwA/8bgX8wO9W
T8Kv0gkagQr8qJkehD+82/gMjMCP7qg6t0eVs6y/JXnK+nn+KsE3ZN4qZ6GMETVT
fVZnkNG2cp9J6dzS2sLssmbw0/OjG7oHv87rXFPLFP3BT4usZuBHzVRfzBKVJmaz
BwT4kV3dPe2xCr/ER6G9RYevgN+Z7l7waqBVBdVa3ZKt5G0If7o2yU5WtTan+wTw
+1D9rc47BD8Bf1DKuBe1xKWN4eFqKSlwBP6JVXvac2NgoVtf3HMIf3JaJeFUffIV
7oVfChyBf2K9Pb3hczc+uf+0n3qp0sYM/Avwe9Xb4V+Snn+Jen71N/CjXS7gPz3t
AX63mgb+8P5TWMgYlTYm36zypcAR+CfWTMMSPbFvAv/EmqDn/8y49+3PwO9Q08Df
4/PQXAJ+4HerhvCfnXjI8ZIXK2TK2wP86FwV8Jfm0mjckz2hjlzgR81UD3+US7OC
mC3uyt2BryvxAn7UTNXwx7k0+/3zTHFXuxIv4EfNdBX+w1yatYPPFnfFXNeXeAE/
aqb7PX/C8ZIeEBKuq6tcCuEvq2UpmAv8E6sZ/KfFXY/Cf1C1cjZVcvPS5gH/3Lp/
wbunDJ8Ud6Wj84Y7wH6KdAP+wloW3SY9b732DpYF/ol15z5/+1PuG/DHRx/1Wie7
6Z0uulqXYKcE/rlVDX/7XJqiNR4Ws+jL6/0Ysx+YYvijeeG+A/wuNEF6Q0B08jBh
0ROinj+zHPA7kgf4D097lsxpD/D70TTwbyP9arbjWpaQfokrvELyudszvyaA/9r7
5drFCvBPLG/w3/o8NJeAH/jdCviB363awV9ey1K0hoO3AD9qphbFLPlcmsvwy8mi
21TgR810J7dnWcprWda5crzMfq8yU+MiORh7f1UKmkt3sjrTR0Jblv/KtE7WVHfT
08GM9gexahG9itEBQ/OoupglyqVZnxQd1bKoXeNoMKPocVT85An4UVPdOOdXPbZE
E3SOQNzz5w4awSqBH/VQK/hPwQZ+ZFH15/xRLs15LUt0wZtZRk5rXPJ3exC6o04P
ubaUmqpVhMeG0QFD86jrE96qAhj9JuBHzfTq9AaE7gj4kVsBP3Ir4EduBfzIrYAf
uRXwI7dqBX9BYbjE76h54gX8qJk6jczyoT16j2RWA/yol5qNzBKm/Mhvt77NyY7O
suVC79k+l7+uEKE7ajYyi8rtlLgQRadmBj1/lOUJ/Kifmo3MsnXoWea/wa9qXoAf
dVHTwSkOjgrf4Rd6ftRfwI/cqt3ILLJPDc+K/ibuv5PaR326BPyom54dmaX9UzHg
R8307MgswI8Mi/QG5FbAj9wK+JFbAT9yK+BHbgX8yK2AH7lVI/iv17KcLXlS5gL8
qJn6jMwSLFD2WDh9lry+fXTA0DxqNTJLSS3L5xDxZbGjMhcBftRWrUZmKallCfv1
o8X0EmG3D/yosVqNzFJSy7KjfbxYAr8a+wX4UUO1HJziWzp/dEZfBL/Q86OnBPzI
rZqNzPK9lkWf9xwsFpCuy1y424Na69GHXHr5w2cBV1YL/KiZOsJ/dzHgR21FegNy
K+BHbgX8yK2AH7nVNfgNaHTA0DwCJuRWwI/cCviRWwE/civgR24F/MitgB+5FfAj
twJ+5FbAj9wK+JFbAT9yK+BHbgX8yK2AH7kV8CO3An7kVsCP3Ar4kVsBP3Ir4Edu
BfzIrYAfuRXwI7cCfuRWwI/cCviRWwE/cqv/AIOMDGRJvY/jAAAAAElFTkSuQmCC

------------FdDacWXUyyYM7Qy13c59P9
Content-Disposition: inline; filename=CustomerOrderProduct.png
Content-Type: image/png; name=CustomerOrderProduct.png
Content-Location: http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/images/CustomerOrderProduct.png
Content-Transfer-Encoding: Base64

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
JN+Jrr7/UYJrTP0xw6ZESx3/7PhvNuC/MzDGf01n8znBqvMfwX+rOgP/ZUMT+4/d
2rIX/i7KLlf9+cs/8fzl97CJbdvd+7FhgP/Moz00RrmmCRXSNMqpNQzef5uxzH/n
Af47Wz9NV4x/5vER/53NqTUM8J95wH8HcGoNA/xnHvDfAZxaw1Dkv2DWUvD+uM7s
9t8CnktDYzRXp/nPpn5qGAL/Jb6ilbwo3DayM+v8t43n0tCo/W4sv31u/7jHAP+d
pJ8ahrT/KK4VIz9NMGbaXzC8x3/reS4NTSZX+fTPxMe5YK8nNymt0h8yzn9H6JcN
XNZ/6dm42lT47oLhLf7bwHNpaIJcdUGqhpUB2fLb6wCl7UluG6r1efqpunL//b6W
YEEu5jV8TvxM/+3kuTQ04RgQzp0ORops+W0UBK19YttIrc/TT9VVH//cK/23k+fS
0PBcvS7O0v4jUYQkzJf0n9I+ajpW6/P0U3WF/8zrN+r+L6Sa4VXiP629i7eN1Po8
/VRd9ecvPLa5P9EXtWnvzGr/beC5NDSK/5hl8n4S/rm2Fiwhv8p/Z+in6pr7/q+x
g6f4bxvPpaERY8WfQVrKb69+lC0hH5iPRhI6Uj9V16T/Gs8PPaeVLf7bwHNpaJ66
WVh+e91BPmdtWVyG+e8M/dQwYP6Zeeyb/0IPr5/aDyd0pH5qGOA/88D8swM4tYYB
/jMP+O8ATq1hgP/MA/47gFNrGOA/84D/DuDUGgb4zzzgvwM4tYYB/jMP+O8ATq1h
KPFfMGtJTKMY9U2mBf+t4Lk0NEZzdZb/jOqnhuGp/tazieYS5Xk1cN1df7uKZ6tO
w/1H8bfQqakqDftMJHSkfmoYcvM/fz+iskZPkdU5RrWN9cR2zf9czbNVp5G5KqeX
ybeDV+lFV/V95mp9nn5qGHL1D/HsWsmLT+b9/Z/ihpWdWe2/DTxbdRqRq3Gyul+Z
7L3dJ2q2jvxpn8lan6efGoZk/a2fYlvDy/Xw2lJ/u4Fnq04jcpWCZHW59SmvvA4p
Fu0zWevz9FPDkLn/Eye+t/lvJ89Wnbpz9Tr5y9XsQ9oP/ivZZ7LW5+mnhgH+M6/f
4PHPk03Qfh7/4L+huqbv//6CmShr9Dok7mvv9xto7bn/W8+zVadl/uN/nKnUf2Kf
yVqfp58ahsrv3+9SMK1Nc2fW+W8bz6WhEWNFolb8co1IY56oiTry533man2efmoY
Rs9/aa1tNOa/aTyXhibo4u6E6yd0pH5qGDD/zDzG+M9AwvUTOlI/NQzwn3lg/tkB
nFrDAP+ZB/x3AKfWMMB/5gH/HcCpNQzwn3nAfwdwag0D/Gce8N8BnFrDAP+ZB/x3
AKfWMBSvf0vaRvaKP+auiJUJ/6XmcDy2V/ceAfivWL/MspuUS2HS32hN5oowlK1/
q02VE5xzRynrzDr/ZXimOlZK3eVfDNBpdK62lN+qb1aU5s5a/1YbIjIrEcY0oq3T
TmIV69/+ptBds43IFz6GU5nuva86MfbWY2eW+y9REyc6/aNL/AUr+kzNy/rbNvLb
7inr3yZON6WjOaVelRzvemPW+rf3m86n352j0YzVW/VgjwHJXKFr4fq3fGUpCksY
o3MGT9DCFUetrH8bddpvCrhnqY++Dp22/m1R+S1f6VZrV3i8bq2L9OPj3W051jaV
wuKM2pfMFboWrn97r3ojOpzosji55ky62X/a+qk5fiS5M3oJtSz6T3K7ZKVIJJJE
wtxMtqs43gj/ZfWTSgUpSy7XubCssTuZG/3HtRIjcVaBRJfjBDXnP41njl+0g3K2
HKZQb2h4roa5WV5++9yu4njdWmv6JdK25CQS7tGdzBW6wn/v9p/zXYmpjvRf4fG6
te71n5bIVvyXXFfUOb7qItvOFfALxYkuW3/+cp9kYn6Me6BlQN3vzfNylE6r/Jco
v6XHdhXH69Za0Y/knWeYsr9/Uka5x6BkrtB18Pq3yqfNSrIm/ebxHI8p69+yTVr5
rVwwN9eu8HjUTciKfpP9N7xWrKAYeYf/DNXETQnNAHYzArR7/dve7g/6VMw/OwPw
39n6qWGA/8wD888O4NQaBvjPPOC/Azi1hgH+Mw/47wBOrWGA/8wD/juAU2sY4D/z
6PCfUXxLP1VX+M88loXmCJynn6pr6fq3pG18/qjHQkYL/kvNW9HosXqVwnA0zYyB
/zg0/QaX33YcqDjli9a/pU7/kdJyxJykev3SPNPdU6hTVftgU+k8QviPI6+flqKl
5bcPShQfqDjli9a/5ZPl4vJblouZJnySXVTISGuTTON5C+nnUT2W39a2v09pRIUG
hP848vqJ91xj+W1w3OYDlaZ82fq3avnt1eNcEyfz7moRzBzcoV/E06V6xyY5Jspv
y9vLD3y4rIf/MijRjw9T/hRJKVko3mPAgcpTvmz9W7X8lvUu2YTnGjkX9Xe5//I8
XYqfaER5Hk/thSjwXyMU/RJyVpffsnTtOFB5ypeuv0m5g4gdkk2EPy34T+GZ4ueV
YRuUeOTac/8FvoT/iqHol0jbeIDTEtmr0Xmg8pSH/+C/o9Dpv6fy22L/PTqiw3+J
WjFyLlN+Kz8sWcGqFTJe++/QL+RZW34rI/rUnn+C3x/+q0NevxHlty48btuBylO+
//v361q8beflSdbc1W2A/zjm6teVzIUfIXTdOf+FU4X/8mHanfKmcJ5+Qssw5TH/
zDzgP47z9FN1hf/MA/7jOE8/VVf4zzzgP47z9FN1hf/MA/7jOE8/VVf4zzzgP47d
tYsD8R+dm9dHkgz+AwwB/jMP+O/FKPSf+FIy0ZSC1tVZbsR/dT2nrr3NhQZYj6L1
b+O5nHHeZtKyNCF319+K+Uel3Q/sVrk3/AcUrn97e5D4NnfPZZSTT9ksuuIRwc76
t2yqXr6W1sWrpdbuDf8BxevfOietxmeCOxeMj0GFgK0ke+Qpes4mzwa1lpRmXb43
/AcUr3/reI6KbexNmYrEhxQ7SfbIU7hRTF5PNM/673lv+A8oX38zUUqRas1yMXej
td9/Ok8xfKUcxJvn/fe4N/wHFPovOKe/1n/3r9Tiv8q94T+gcP1b51NKbCO/xZ/8
nahGLE01E+vf+l+JUw6WmWSX3px19d7wH7Bu/VsrSbaZp+XQAOuxZv1bQ0m2mafl
0ADrgfln5gH/vRjwn3nAfy8G/Gce8N+LAf+ZB/z3YsB/5gH/vRjwn3nAfy8G/Gce
8N+LUea/uvLb9Jfa+pdtNvzXV35btI/h0mRgPUrWvw0mOrb5L3Bw2GR3/S3l363w
36O3qj7hmt22O0eAeSha//b2zPVOXH4r3km1YEdOTYE0s/4tm6j5XH7LywDLy3Wr
PgH+ezXK1r/9vQzn8lPYNNsic9DN/kt3iRUqsKnT+fLb0vZNnwD/vRtl6986nqPE
t0U1NukWLn3QPf5TeQo3huQoaE417Zs+Af57NwrX3wzdJQeRlP/CYSZ50N3Xn8ku
UYYxxc2ppn3TJ8B/70aJ/4Lz9Wv9d/9aV35bU3Bb/Qnw37tRsv6t8+lyvxuU3zrH
G8ct5OqkLv77XxbWvxW9Kym/9eRK2ld/Ai0ODbAe+P7dPOC/FwP+Mw/478WA/8wD
/nsx4D/zgP9eDPjPPOC/FwP+Mw/478Xw/jOwGOgSwrvtBP8BHp8TF/4DDOFz4sJ/
gCF8TlzNf7niWCpqBf8B1ficuHI+pvQY8Q2siTRcrhX8B1Tjc+LKeoS4APf+nYKZ
mY7/TLSC/4B6fE7ch9INsSWsSfBDXqIV/AfU43Pi/g1a+fVvg9oNyvsvaAX/AfX4
nLjJ8c8J/8kBMee/sBX8B9Tjc+I++C+oxMv4L9UK/gPq8Tlxk89f+CMVJ65IxfMV
YjvFreA/oBqfEzf8uxdzxy74D1DxOXHFlSTWvwX24nPinuA4+O8z+Jy48B9gCJ8T
F/4DDOFz4sJ/gCF8Tlz4DzCEz4kL/wGG8Dlx4T/AED4nruK/5/JbqtoP/gOe8Dlx
M/W3avlt/FtBQe4wT35Ooi/hc+IG8z9dUfktG+cyxbnafvAfkMPnxA0r2YvKb+Uw
F5bdPuwH/wFZfE5cXn8ra2yV8lthrqjs9mE/+A/I4nPiyvu/wvJb1jZR9vewH/wH
ZPE5cXX/ZcpvH/2n7Qf/AVl8Tlxx//d3A/hYfnsZgSjemt0Pzz+BZ3xO3BZb0OS/
sAT/fRafExfzXwBD+Jy48B9gCJ8TF/4DDOFz4sJ/gCF8Tlz4DzCEz4m7e51fw0sD
A+sBcQFgH+A/ANgH+A8A9gH+A4B9+B92cx84LjTmnQAAAABJRU5ErkJggg==

------------FdDacWXUyyYM7Qy13c59P9--
